
ATMEGA_32A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c776  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d0  00800060  0000c776  0000c80a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800230  00800230  0000c9da  2**0
                  ALLOC
  3 .stab         00009e94  00000000  00000000  0000c9dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003dd2  00000000  00000000  00016870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0001a642  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000293  00000000  00000000  0001a882  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000380c  00000000  00000000  0001ab15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019bd  00000000  00000000  0001e321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001899  00000000  00000000  0001fcde  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  00021578  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003b3  00000000  00000000  000217d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002504  00000000  00000000  00021b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0002408f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 80 47 	jmp	0x8f00	; 0x8f00 <__vector_1>
       8:	0c 94 b3 47 	jmp	0x8f66	; 0x8f66 <__vector_2>
       c:	0c 94 e6 47 	jmp	0x8fcc	; 0x8fcc <__vector_3>
      10:	0c 94 39 3b 	jmp	0x7672	; 0x7672 <__vector_4>
      14:	0c 94 70 3b 	jmp	0x76e0	; 0x76e0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 cf 43 	jmp	0x879e	; 0x879e <__vector_7>
      20:	0c 94 06 44 	jmp	0x880c	; 0x880c <__vector_8>
      24:	0c 94 3d 44 	jmp	0x887a	; 0x887a <__vector_9>
      28:	0c 94 a7 3b 	jmp	0x774e	; 0x774e <__vector_10>
      2c:	0c 94 de 3b 	jmp	0x77bc	; 0x77bc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__vector_13>
      38:	0c 94 37 18 	jmp	0x306e	; 0x306e <__vector_14>
      3c:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__vector_15>
      40:	0c 94 e3 4d 	jmp	0x9bc6	; 0x9bc6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f7 ec       	ldi	r31, 0xC7	; 199
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 62 	call	0xc5ec	; 0xc5ec <main>
      8a:	0c 94 b9 63 	jmp	0xc772	; 0xc772 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 82 63 	jmp	0xc704	; 0xc704 <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 9e 63 	jmp	0xc73c	; 0xc73c <__epilogue_restores__>

00000288 <__lshrdi3>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	60 97       	sbiw	r28, 0x10	; 16
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	a8 2f       	mov	r26, r24
     2a4:	00 23       	and	r16, r16
     2a6:	09 f4       	brne	.+2      	; 0x2aa <__lshrdi3+0x22>
     2a8:	61 c0       	rjmp	.+194    	; 0x36c <__lshrdi3+0xe4>
     2aa:	7e 01       	movw	r14, r28
     2ac:	08 94       	sec
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	f7 01       	movw	r30, r14
     2b6:	11 92       	st	Z+, r1
     2b8:	8a 95       	dec	r24
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <__lshrdi3+0x2e>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	af 83       	std	Y+7, r26	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 1b       	sub	r24, r16
     2d0:	e8 2f       	mov	r30, r24
     2d2:	ff 27       	eor	r31, r31
     2d4:	e7 fd       	sbrc	r30, 7
     2d6:	f0 95       	com	r31
     2d8:	4d 81       	ldd	r20, Y+5	; 0x05
     2da:	5e 81       	ldd	r21, Y+6	; 0x06
     2dc:	6f 81       	ldd	r22, Y+7	; 0x07
     2de:	78 85       	ldd	r23, Y+8	; 0x08
     2e0:	18 16       	cp	r1, r24
     2e2:	84 f0       	brlt	.+32     	; 0x304 <__lshrdi3+0x7c>
     2e4:	1d 86       	std	Y+13, r1	; 0x0d
     2e6:	1e 86       	std	Y+14, r1	; 0x0e
     2e8:	1f 86       	std	Y+15, r1	; 0x0f
     2ea:	18 8a       	std	Y+16, r1	; 0x10
     2ec:	88 27       	eor	r24, r24
     2ee:	99 27       	eor	r25, r25
     2f0:	8e 1b       	sub	r24, r30
     2f2:	9f 0b       	sbc	r25, r31
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__lshrdi3+0x76>
     2f6:	76 95       	lsr	r23
     2f8:	67 95       	ror	r22
     2fa:	57 95       	ror	r21
     2fc:	47 95       	ror	r20
     2fe:	8a 95       	dec	r24
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__lshrdi3+0x6e>
     302:	28 c0       	rjmp	.+80     	; 0x354 <__lshrdi3+0xcc>
     304:	20 2f       	mov	r18, r16
     306:	33 27       	eor	r19, r19
     308:	27 fd       	sbrc	r18, 7
     30a:	30 95       	com	r19
     30c:	db 01       	movw	r26, r22
     30e:	ca 01       	movw	r24, r20
     310:	02 2e       	mov	r0, r18
     312:	04 c0       	rjmp	.+8      	; 0x31c <__lshrdi3+0x94>
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__lshrdi3+0x8c>
     320:	8d 87       	std	Y+13, r24	; 0x0d
     322:	9e 87       	std	Y+14, r25	; 0x0e
     324:	af 87       	std	Y+15, r26	; 0x0f
     326:	b8 8b       	std	Y+16, r27	; 0x10
     328:	04 c0       	rjmp	.+8      	; 0x332 <__lshrdi3+0xaa>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	66 1f       	adc	r22, r22
     330:	77 1f       	adc	r23, r23
     332:	ea 95       	dec	r30
     334:	d2 f7       	brpl	.-12     	; 0x32a <__lshrdi3+0xa2>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	ab 81       	ldd	r26, Y+3	; 0x03
     33c:	bc 81       	ldd	r27, Y+4	; 0x04
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__lshrdi3+0xc0>
     340:	b6 95       	lsr	r27
     342:	a7 95       	ror	r26
     344:	97 95       	ror	r25
     346:	87 95       	ror	r24
     348:	2a 95       	dec	r18
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__lshrdi3+0xb8>
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	49 87       	std	Y+9, r20	; 0x09
     356:	5a 87       	std	Y+10, r21	; 0x0a
     358:	6b 87       	std	Y+11, r22	; 0x0b
     35a:	7c 87       	std	Y+12, r23	; 0x0c
     35c:	29 85       	ldd	r18, Y+9	; 0x09
     35e:	3a 85       	ldd	r19, Y+10	; 0x0a
     360:	4b 85       	ldd	r20, Y+11	; 0x0b
     362:	5c 85       	ldd	r21, Y+12	; 0x0c
     364:	6d 85       	ldd	r22, Y+13	; 0x0d
     366:	7e 85       	ldd	r23, Y+14	; 0x0e
     368:	af 85       	ldd	r26, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	8a 2f       	mov	r24, r26
     36e:	60 96       	adiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <__fixunssfsi>:
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	7b 01       	movw	r14, r22
     390:	8c 01       	movw	r16, r24
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	5f e4       	ldi	r21, 0x4F	; 79
     39a:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__gesf2>
     39e:	88 23       	and	r24, r24
     3a0:	8c f0       	brlt	.+34     	; 0x3c4 <__fixunssfsi+0x3e>
     3a2:	c8 01       	movw	r24, r16
     3a4:	b7 01       	movw	r22, r14
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	5f e4       	ldi	r21, 0x4F	; 79
     3ae:	0e 94 20 10 	call	0x2040	; 0x2040 <__subsf3>
     3b2:	0e 94 12 13 	call	0x2624	; 0x2624 <__fixsfsi>
     3b6:	9b 01       	movw	r18, r22
     3b8:	ac 01       	movw	r20, r24
     3ba:	20 50       	subi	r18, 0x00	; 0
     3bc:	30 40       	sbci	r19, 0x00	; 0
     3be:	40 40       	sbci	r20, 0x00	; 0
     3c0:	50 48       	sbci	r21, 0x80	; 128
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <__fixunssfsi+0x4a>
     3c4:	c8 01       	movw	r24, r16
     3c6:	b7 01       	movw	r22, r14
     3c8:	0e 94 12 13 	call	0x2624	; 0x2624 <__fixsfsi>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	b9 01       	movw	r22, r18
     3d2:	ca 01       	movw	r24, r20
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <__udivdi3>:
     3de:	ae e5       	ldi	r26, 0x5E	; 94
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e5 ef       	ldi	r30, 0xF5	; 245
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	0c 94 82 63 	jmp	0xc704	; 0xc704 <__prologue_saves__>
     3ea:	a8 e0       	ldi	r26, 0x08	; 8
     3ec:	4e 01       	movw	r8, r28
     3ee:	08 94       	sec
     3f0:	81 1c       	adc	r8, r1
     3f2:	91 1c       	adc	r9, r1
     3f4:	f4 01       	movw	r30, r8
     3f6:	6a 2e       	mov	r6, r26
     3f8:	11 92       	st	Z+, r1
     3fa:	6a 94       	dec	r6
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <__udivdi3+0x1a>
     3fe:	29 83       	std	Y+1, r18	; 0x01
     400:	3a 83       	std	Y+2, r19	; 0x02
     402:	4b 83       	std	Y+3, r20	; 0x03
     404:	5c 83       	std	Y+4, r21	; 0x04
     406:	6d 83       	std	Y+5, r22	; 0x05
     408:	7e 83       	std	Y+6, r23	; 0x06
     40a:	8f 83       	std	Y+7, r24	; 0x07
     40c:	98 87       	std	Y+8, r25	; 0x08
     40e:	ce 01       	movw	r24, r28
     410:	09 96       	adiw	r24, 0x09	; 9
     412:	fc 01       	movw	r30, r24
     414:	11 92       	st	Z+, r1
     416:	aa 95       	dec	r26
     418:	e9 f7       	brne	.-6      	; 0x414 <__udivdi3+0x36>
     41a:	a9 86       	std	Y+9, r10	; 0x09
     41c:	ba 86       	std	Y+10, r11	; 0x0a
     41e:	cb 86       	std	Y+11, r12	; 0x0b
     420:	dc 86       	std	Y+12, r13	; 0x0c
     422:	ed 86       	std	Y+13, r14	; 0x0d
     424:	fe 86       	std	Y+14, r15	; 0x0e
     426:	0f 87       	std	Y+15, r16	; 0x0f
     428:	18 8b       	std	Y+16, r17	; 0x10
     42a:	29 84       	ldd	r2, Y+9	; 0x09
     42c:	3a 84       	ldd	r3, Y+10	; 0x0a
     42e:	4b 84       	ldd	r4, Y+11	; 0x0b
     430:	5c 84       	ldd	r5, Y+12	; 0x0c
     432:	ed 84       	ldd	r14, Y+13	; 0x0d
     434:	fe 84       	ldd	r15, Y+14	; 0x0e
     436:	0f 85       	ldd	r16, Y+15	; 0x0f
     438:	18 89       	ldd	r17, Y+16	; 0x10
     43a:	69 80       	ldd	r6, Y+1	; 0x01
     43c:	7a 80       	ldd	r7, Y+2	; 0x02
     43e:	8b 80       	ldd	r8, Y+3	; 0x03
     440:	9c 80       	ldd	r9, Y+4	; 0x04
     442:	6d a6       	std	Y+45, r6	; 0x2d
     444:	7e a6       	std	Y+46, r7	; 0x2e
     446:	8f a6       	std	Y+47, r8	; 0x2f
     448:	98 aa       	std	Y+48, r9	; 0x30
     44a:	6d 80       	ldd	r6, Y+5	; 0x05
     44c:	7e 80       	ldd	r7, Y+6	; 0x06
     44e:	8f 80       	ldd	r8, Y+7	; 0x07
     450:	98 84       	ldd	r9, Y+8	; 0x08
     452:	e1 14       	cp	r14, r1
     454:	f1 04       	cpc	r15, r1
     456:	01 05       	cpc	r16, r1
     458:	11 05       	cpc	r17, r1
     45a:	09 f0       	breq	.+2      	; 0x45e <__udivdi3+0x80>
     45c:	b3 c3       	rjmp	.+1894   	; 0xbc4 <__stack+0x365>
     45e:	62 14       	cp	r6, r2
     460:	73 04       	cpc	r7, r3
     462:	84 04       	cpc	r8, r4
     464:	95 04       	cpc	r9, r5
     466:	08 f0       	brcs	.+2      	; 0x46a <__udivdi3+0x8c>
     468:	3d c1       	rjmp	.+634    	; 0x6e4 <__udivdi3+0x306>
     46a:	00 e0       	ldi	r16, 0x00	; 0
     46c:	20 16       	cp	r2, r16
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	30 06       	cpc	r3, r16
     472:	01 e0       	ldi	r16, 0x01	; 1
     474:	40 06       	cpc	r4, r16
     476:	00 e0       	ldi	r16, 0x00	; 0
     478:	50 06       	cpc	r5, r16
     47a:	88 f4       	brcc	.+34     	; 0x49e <__udivdi3+0xc0>
     47c:	1f ef       	ldi	r17, 0xFF	; 255
     47e:	21 16       	cp	r2, r17
     480:	31 04       	cpc	r3, r1
     482:	41 04       	cpc	r4, r1
     484:	51 04       	cpc	r5, r1
     486:	39 f0       	breq	.+14     	; 0x496 <__udivdi3+0xb8>
     488:	30 f0       	brcs	.+12     	; 0x496 <__udivdi3+0xb8>
     48a:	48 e0       	ldi	r20, 0x08	; 8
     48c:	e4 2e       	mov	r14, r20
     48e:	f1 2c       	mov	r15, r1
     490:	01 2d       	mov	r16, r1
     492:	11 2d       	mov	r17, r1
     494:	18 c0       	rjmp	.+48     	; 0x4c6 <__udivdi3+0xe8>
     496:	ee 24       	eor	r14, r14
     498:	ff 24       	eor	r15, r15
     49a:	87 01       	movw	r16, r14
     49c:	14 c0       	rjmp	.+40     	; 0x4c6 <__udivdi3+0xe8>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	22 16       	cp	r2, r18
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	32 06       	cpc	r3, r18
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	42 06       	cpc	r4, r18
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	52 06       	cpc	r5, r18
     4ae:	30 f0       	brcs	.+12     	; 0x4bc <__udivdi3+0xde>
     4b0:	38 e1       	ldi	r19, 0x18	; 24
     4b2:	e3 2e       	mov	r14, r19
     4b4:	f1 2c       	mov	r15, r1
     4b6:	01 2d       	mov	r16, r1
     4b8:	11 2d       	mov	r17, r1
     4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__udivdi3+0xe8>
     4bc:	20 e1       	ldi	r18, 0x10	; 16
     4be:	e2 2e       	mov	r14, r18
     4c0:	f1 2c       	mov	r15, r1
     4c2:	01 2d       	mov	r16, r1
     4c4:	11 2d       	mov	r17, r1
     4c6:	d2 01       	movw	r26, r4
     4c8:	c1 01       	movw	r24, r2
     4ca:	0e 2c       	mov	r0, r14
     4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <__udivdi3+0xf8>
     4ce:	b6 95       	lsr	r27
     4d0:	a7 95       	ror	r26
     4d2:	97 95       	ror	r25
     4d4:	87 95       	ror	r24
     4d6:	0a 94       	dec	r0
     4d8:	d2 f7       	brpl	.-12     	; 0x4ce <__udivdi3+0xf0>
     4da:	88 59       	subi	r24, 0x98	; 152
     4dc:	9f 4f       	sbci	r25, 0xFF	; 255
     4de:	dc 01       	movw	r26, r24
     4e0:	2c 91       	ld	r18, X
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	8e 19       	sub	r24, r14
     4ec:	9f 09       	sbc	r25, r15
     4ee:	a0 0b       	sbc	r26, r16
     4f0:	b1 0b       	sbc	r27, r17
     4f2:	7c 01       	movw	r14, r24
     4f4:	8d 01       	movw	r16, r26
     4f6:	e2 1a       	sub	r14, r18
     4f8:	f1 08       	sbc	r15, r1
     4fa:	01 09       	sbc	r16, r1
     4fc:	11 09       	sbc	r17, r1
     4fe:	e1 14       	cp	r14, r1
     500:	f1 04       	cpc	r15, r1
     502:	01 05       	cpc	r16, r1
     504:	11 05       	cpc	r17, r1
     506:	a1 f1       	breq	.+104    	; 0x570 <__udivdi3+0x192>
     508:	0e 2c       	mov	r0, r14
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__udivdi3+0x136>
     50c:	22 0c       	add	r2, r2
     50e:	33 1c       	adc	r3, r3
     510:	44 1c       	adc	r4, r4
     512:	55 1c       	adc	r5, r5
     514:	0a 94       	dec	r0
     516:	d2 f7       	brpl	.-12     	; 0x50c <__udivdi3+0x12e>
     518:	a4 01       	movw	r20, r8
     51a:	93 01       	movw	r18, r6
     51c:	0e 2c       	mov	r0, r14
     51e:	04 c0       	rjmp	.+8      	; 0x528 <__udivdi3+0x14a>
     520:	22 0f       	add	r18, r18
     522:	33 1f       	adc	r19, r19
     524:	44 1f       	adc	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	0a 94       	dec	r0
     52a:	d2 f7       	brpl	.-12     	; 0x520 <__udivdi3+0x142>
     52c:	80 e2       	ldi	r24, 0x20	; 32
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	8e 19       	sub	r24, r14
     532:	9f 09       	sbc	r25, r15
     534:	6d a4       	ldd	r6, Y+45	; 0x2d
     536:	7e a4       	ldd	r7, Y+46	; 0x2e
     538:	8f a4       	ldd	r8, Y+47	; 0x2f
     53a:	98 a8       	ldd	r9, Y+48	; 0x30
     53c:	04 c0       	rjmp	.+8      	; 0x546 <__udivdi3+0x168>
     53e:	96 94       	lsr	r9
     540:	87 94       	ror	r8
     542:	77 94       	ror	r7
     544:	67 94       	ror	r6
     546:	8a 95       	dec	r24
     548:	d2 f7       	brpl	.-12     	; 0x53e <__udivdi3+0x160>
     54a:	62 2a       	or	r6, r18
     54c:	73 2a       	or	r7, r19
     54e:	84 2a       	or	r8, r20
     550:	95 2a       	or	r9, r21
     552:	ad a4       	ldd	r10, Y+45	; 0x2d
     554:	be a4       	ldd	r11, Y+46	; 0x2e
     556:	cf a4       	ldd	r12, Y+47	; 0x2f
     558:	d8 a8       	ldd	r13, Y+48	; 0x30
     55a:	04 c0       	rjmp	.+8      	; 0x564 <__udivdi3+0x186>
     55c:	aa 0c       	add	r10, r10
     55e:	bb 1c       	adc	r11, r11
     560:	cc 1c       	adc	r12, r12
     562:	dd 1c       	adc	r13, r13
     564:	ea 94       	dec	r14
     566:	d2 f7       	brpl	.-12     	; 0x55c <__udivdi3+0x17e>
     568:	ad a6       	std	Y+45, r10	; 0x2d
     56a:	be a6       	std	Y+46, r11	; 0x2e
     56c:	cf a6       	std	Y+47, r12	; 0x2f
     56e:	d8 aa       	std	Y+48, r13	; 0x30
     570:	62 01       	movw	r12, r4
     572:	ee 24       	eor	r14, r14
     574:	ff 24       	eor	r15, r15
     576:	cd aa       	std	Y+53, r12	; 0x35
     578:	de aa       	std	Y+54, r13	; 0x36
     57a:	ef aa       	std	Y+55, r14	; 0x37
     57c:	f8 ae       	std	Y+56, r15	; 0x38
     57e:	92 01       	movw	r18, r4
     580:	81 01       	movw	r16, r2
     582:	20 70       	andi	r18, 0x00	; 0
     584:	30 70       	andi	r19, 0x00	; 0
     586:	09 af       	std	Y+57, r16	; 0x39
     588:	1a af       	std	Y+58, r17	; 0x3a
     58a:	2b af       	std	Y+59, r18	; 0x3b
     58c:	3c af       	std	Y+60, r19	; 0x3c
     58e:	c4 01       	movw	r24, r8
     590:	b3 01       	movw	r22, r6
     592:	a7 01       	movw	r20, r14
     594:	96 01       	movw	r18, r12
     596:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     59a:	7b 01       	movw	r14, r22
     59c:	8c 01       	movw	r16, r24
     59e:	c4 01       	movw	r24, r8
     5a0:	b3 01       	movw	r22, r6
     5a2:	2d a9       	ldd	r18, Y+53	; 0x35
     5a4:	3e a9       	ldd	r19, Y+54	; 0x36
     5a6:	4f a9       	ldd	r20, Y+55	; 0x37
     5a8:	58 ad       	ldd	r21, Y+56	; 0x38
     5aa:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     5ae:	c9 01       	movw	r24, r18
     5b0:	da 01       	movw	r26, r20
     5b2:	3c 01       	movw	r6, r24
     5b4:	4d 01       	movw	r8, r26
     5b6:	c4 01       	movw	r24, r8
     5b8:	b3 01       	movw	r22, r6
     5ba:	29 ad       	ldd	r18, Y+57	; 0x39
     5bc:	3a ad       	ldd	r19, Y+58	; 0x3a
     5be:	4b ad       	ldd	r20, Y+59	; 0x3b
     5c0:	5c ad       	ldd	r21, Y+60	; 0x3c
     5c2:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     5c6:	9b 01       	movw	r18, r22
     5c8:	ac 01       	movw	r20, r24
     5ca:	87 01       	movw	r16, r14
     5cc:	ff 24       	eor	r15, r15
     5ce:	ee 24       	eor	r14, r14
     5d0:	ad a4       	ldd	r10, Y+45	; 0x2d
     5d2:	be a4       	ldd	r11, Y+46	; 0x2e
     5d4:	cf a4       	ldd	r12, Y+47	; 0x2f
     5d6:	d8 a8       	ldd	r13, Y+48	; 0x30
     5d8:	c6 01       	movw	r24, r12
     5da:	aa 27       	eor	r26, r26
     5dc:	bb 27       	eor	r27, r27
     5de:	57 01       	movw	r10, r14
     5e0:	68 01       	movw	r12, r16
     5e2:	a8 2a       	or	r10, r24
     5e4:	b9 2a       	or	r11, r25
     5e6:	ca 2a       	or	r12, r26
     5e8:	db 2a       	or	r13, r27
     5ea:	a2 16       	cp	r10, r18
     5ec:	b3 06       	cpc	r11, r19
     5ee:	c4 06       	cpc	r12, r20
     5f0:	d5 06       	cpc	r13, r21
     5f2:	e0 f4       	brcc	.+56     	; 0x62c <__udivdi3+0x24e>
     5f4:	08 94       	sec
     5f6:	61 08       	sbc	r6, r1
     5f8:	71 08       	sbc	r7, r1
     5fa:	81 08       	sbc	r8, r1
     5fc:	91 08       	sbc	r9, r1
     5fe:	a2 0c       	add	r10, r2
     600:	b3 1c       	adc	r11, r3
     602:	c4 1c       	adc	r12, r4
     604:	d5 1c       	adc	r13, r5
     606:	a2 14       	cp	r10, r2
     608:	b3 04       	cpc	r11, r3
     60a:	c4 04       	cpc	r12, r4
     60c:	d5 04       	cpc	r13, r5
     60e:	70 f0       	brcs	.+28     	; 0x62c <__udivdi3+0x24e>
     610:	a2 16       	cp	r10, r18
     612:	b3 06       	cpc	r11, r19
     614:	c4 06       	cpc	r12, r20
     616:	d5 06       	cpc	r13, r21
     618:	48 f4       	brcc	.+18     	; 0x62c <__udivdi3+0x24e>
     61a:	08 94       	sec
     61c:	61 08       	sbc	r6, r1
     61e:	71 08       	sbc	r7, r1
     620:	81 08       	sbc	r8, r1
     622:	91 08       	sbc	r9, r1
     624:	a2 0c       	add	r10, r2
     626:	b3 1c       	adc	r11, r3
     628:	c4 1c       	adc	r12, r4
     62a:	d5 1c       	adc	r13, r5
     62c:	a2 1a       	sub	r10, r18
     62e:	b3 0a       	sbc	r11, r19
     630:	c4 0a       	sbc	r12, r20
     632:	d5 0a       	sbc	r13, r21
     634:	c6 01       	movw	r24, r12
     636:	b5 01       	movw	r22, r10
     638:	2d a9       	ldd	r18, Y+53	; 0x35
     63a:	3e a9       	ldd	r19, Y+54	; 0x36
     63c:	4f a9       	ldd	r20, Y+55	; 0x37
     63e:	58 ad       	ldd	r21, Y+56	; 0x38
     640:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     644:	7b 01       	movw	r14, r22
     646:	8c 01       	movw	r16, r24
     648:	c6 01       	movw	r24, r12
     64a:	b5 01       	movw	r22, r10
     64c:	2d a9       	ldd	r18, Y+53	; 0x35
     64e:	3e a9       	ldd	r19, Y+54	; 0x36
     650:	4f a9       	ldd	r20, Y+55	; 0x37
     652:	58 ad       	ldd	r21, Y+56	; 0x38
     654:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     658:	c9 01       	movw	r24, r18
     65a:	da 01       	movw	r26, r20
     65c:	5c 01       	movw	r10, r24
     65e:	6d 01       	movw	r12, r26
     660:	c6 01       	movw	r24, r12
     662:	b5 01       	movw	r22, r10
     664:	29 ad       	ldd	r18, Y+57	; 0x39
     666:	3a ad       	ldd	r19, Y+58	; 0x3a
     668:	4b ad       	ldd	r20, Y+59	; 0x3b
     66a:	5c ad       	ldd	r21, Y+60	; 0x3c
     66c:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     670:	9b 01       	movw	r18, r22
     672:	ac 01       	movw	r20, r24
     674:	87 01       	movw	r16, r14
     676:	ff 24       	eor	r15, r15
     678:	ee 24       	eor	r14, r14
     67a:	8d a5       	ldd	r24, Y+45	; 0x2d
     67c:	9e a5       	ldd	r25, Y+46	; 0x2e
     67e:	af a5       	ldd	r26, Y+47	; 0x2f
     680:	b8 a9       	ldd	r27, Y+48	; 0x30
     682:	a0 70       	andi	r26, 0x00	; 0
     684:	b0 70       	andi	r27, 0x00	; 0
     686:	e8 2a       	or	r14, r24
     688:	f9 2a       	or	r15, r25
     68a:	0a 2b       	or	r16, r26
     68c:	1b 2b       	or	r17, r27
     68e:	e2 16       	cp	r14, r18
     690:	f3 06       	cpc	r15, r19
     692:	04 07       	cpc	r16, r20
     694:	15 07       	cpc	r17, r21
     696:	c0 f4       	brcc	.+48     	; 0x6c8 <__udivdi3+0x2ea>
     698:	08 94       	sec
     69a:	a1 08       	sbc	r10, r1
     69c:	b1 08       	sbc	r11, r1
     69e:	c1 08       	sbc	r12, r1
     6a0:	d1 08       	sbc	r13, r1
     6a2:	e2 0c       	add	r14, r2
     6a4:	f3 1c       	adc	r15, r3
     6a6:	04 1d       	adc	r16, r4
     6a8:	15 1d       	adc	r17, r5
     6aa:	e2 14       	cp	r14, r2
     6ac:	f3 04       	cpc	r15, r3
     6ae:	04 05       	cpc	r16, r4
     6b0:	15 05       	cpc	r17, r5
     6b2:	50 f0       	brcs	.+20     	; 0x6c8 <__udivdi3+0x2ea>
     6b4:	e2 16       	cp	r14, r18
     6b6:	f3 06       	cpc	r15, r19
     6b8:	04 07       	cpc	r16, r20
     6ba:	15 07       	cpc	r17, r21
     6bc:	28 f4       	brcc	.+10     	; 0x6c8 <__udivdi3+0x2ea>
     6be:	08 94       	sec
     6c0:	a1 08       	sbc	r10, r1
     6c2:	b1 08       	sbc	r11, r1
     6c4:	c1 08       	sbc	r12, r1
     6c6:	d1 08       	sbc	r13, r1
     6c8:	d3 01       	movw	r26, r6
     6ca:	99 27       	eor	r25, r25
     6cc:	88 27       	eor	r24, r24
     6ce:	86 01       	movw	r16, r12
     6d0:	75 01       	movw	r14, r10
     6d2:	e8 2a       	or	r14, r24
     6d4:	f9 2a       	or	r15, r25
     6d6:	0a 2b       	or	r16, r26
     6d8:	1b 2b       	or	r17, r27
     6da:	e9 aa       	std	Y+49, r14	; 0x31
     6dc:	fa aa       	std	Y+50, r15	; 0x32
     6de:	0b ab       	std	Y+51, r16	; 0x33
     6e0:	1c ab       	std	Y+52, r17	; 0x34
     6e2:	cf c4       	rjmp	.+2462   	; 0x1082 <__stack+0x823>
     6e4:	21 14       	cp	r2, r1
     6e6:	31 04       	cpc	r3, r1
     6e8:	41 04       	cpc	r4, r1
     6ea:	51 04       	cpc	r5, r1
     6ec:	71 f4       	brne	.+28     	; 0x70a <__udivdi3+0x32c>
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     702:	c9 01       	movw	r24, r18
     704:	da 01       	movw	r26, r20
     706:	1c 01       	movw	r2, r24
     708:	2d 01       	movw	r4, r26
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	20 16       	cp	r2, r16
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	30 06       	cpc	r3, r16
     712:	01 e0       	ldi	r16, 0x01	; 1
     714:	40 06       	cpc	r4, r16
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	50 06       	cpc	r5, r16
     71a:	88 f4       	brcc	.+34     	; 0x73e <__udivdi3+0x360>
     71c:	1f ef       	ldi	r17, 0xFF	; 255
     71e:	21 16       	cp	r2, r17
     720:	31 04       	cpc	r3, r1
     722:	41 04       	cpc	r4, r1
     724:	51 04       	cpc	r5, r1
     726:	31 f0       	breq	.+12     	; 0x734 <__udivdi3+0x356>
     728:	28 f0       	brcs	.+10     	; 0x734 <__udivdi3+0x356>
     72a:	48 e0       	ldi	r20, 0x08	; 8
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	17 c0       	rjmp	.+46     	; 0x762 <__udivdi3+0x384>
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	12 c0       	rjmp	.+36     	; 0x762 <__udivdi3+0x384>
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	22 16       	cp	r2, r18
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	32 06       	cpc	r3, r18
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	42 06       	cpc	r4, r18
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	52 06       	cpc	r5, r18
     74e:	28 f0       	brcs	.+10     	; 0x75a <__udivdi3+0x37c>
     750:	48 e1       	ldi	r20, 0x18	; 24
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	04 c0       	rjmp	.+8      	; 0x762 <__udivdi3+0x384>
     75a:	40 e1       	ldi	r20, 0x10	; 16
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	d2 01       	movw	r26, r4
     764:	c1 01       	movw	r24, r2
     766:	04 2e       	mov	r0, r20
     768:	04 c0       	rjmp	.+8      	; 0x772 <__udivdi3+0x394>
     76a:	b6 95       	lsr	r27
     76c:	a7 95       	ror	r26
     76e:	97 95       	ror	r25
     770:	87 95       	ror	r24
     772:	0a 94       	dec	r0
     774:	d2 f7       	brpl	.-12     	; 0x76a <__udivdi3+0x38c>
     776:	88 59       	subi	r24, 0x98	; 152
     778:	9f 4f       	sbci	r25, 0xFF	; 255
     77a:	dc 01       	movw	r26, r24
     77c:	2c 91       	ld	r18, X
     77e:	e0 e2       	ldi	r30, 0x20	; 32
     780:	ee 2e       	mov	r14, r30
     782:	f1 2c       	mov	r15, r1
     784:	01 2d       	mov	r16, r1
     786:	11 2d       	mov	r17, r1
     788:	d8 01       	movw	r26, r16
     78a:	c7 01       	movw	r24, r14
     78c:	84 1b       	sub	r24, r20
     78e:	95 0b       	sbc	r25, r21
     790:	a6 0b       	sbc	r26, r22
     792:	b7 0b       	sbc	r27, r23
     794:	82 1b       	sub	r24, r18
     796:	91 09       	sbc	r25, r1
     798:	a1 09       	sbc	r26, r1
     79a:	b1 09       	sbc	r27, r1
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	a1 05       	cpc	r26, r1
     7a0:	b1 05       	cpc	r27, r1
     7a2:	61 f4       	brne	.+24     	; 0x7bc <__udivdi3+0x3de>
     7a4:	64 01       	movw	r12, r8
     7a6:	53 01       	movw	r10, r6
     7a8:	a2 18       	sub	r10, r2
     7aa:	b3 08       	sbc	r11, r3
     7ac:	c4 08       	sbc	r12, r4
     7ae:	d5 08       	sbc	r13, r5
     7b0:	31 e0       	ldi	r19, 0x01	; 1
     7b2:	63 2e       	mov	r6, r19
     7b4:	71 2c       	mov	r7, r1
     7b6:	81 2c       	mov	r8, r1
     7b8:	91 2c       	mov	r9, r1
     7ba:	1e c1       	rjmp	.+572    	; 0x9f8 <__stack+0x199>
     7bc:	6f 96       	adiw	r28, 0x1f	; 31
     7be:	8f af       	std	Y+63, r24	; 0x3f
     7c0:	6f 97       	sbiw	r28, 0x1f	; 31
     7c2:	08 2e       	mov	r0, r24
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <__udivdi3+0x3f0>
     7c6:	22 0c       	add	r2, r2
     7c8:	33 1c       	adc	r3, r3
     7ca:	44 1c       	adc	r4, r4
     7cc:	55 1c       	adc	r5, r5
     7ce:	0a 94       	dec	r0
     7d0:	d2 f7       	brpl	.-12     	; 0x7c6 <__udivdi3+0x3e8>
     7d2:	ee 2d       	mov	r30, r14
     7d4:	e8 1b       	sub	r30, r24
     7d6:	64 01       	movw	r12, r8
     7d8:	53 01       	movw	r10, r6
     7da:	0e 2e       	mov	r0, r30
     7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <__udivdi3+0x408>
     7de:	d6 94       	lsr	r13
     7e0:	c7 94       	ror	r12
     7e2:	b7 94       	ror	r11
     7e4:	a7 94       	ror	r10
     7e6:	0a 94       	dec	r0
     7e8:	d2 f7       	brpl	.-12     	; 0x7de <__udivdi3+0x400>
     7ea:	a4 01       	movw	r20, r8
     7ec:	93 01       	movw	r18, r6
     7ee:	6f 96       	adiw	r28, 0x1f	; 31
     7f0:	0f ac       	ldd	r0, Y+63	; 0x3f
     7f2:	6f 97       	sbiw	r28, 0x1f	; 31
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <__udivdi3+0x420>
     7f6:	22 0f       	add	r18, r18
     7f8:	33 1f       	adc	r19, r19
     7fa:	44 1f       	adc	r20, r20
     7fc:	55 1f       	adc	r21, r21
     7fe:	0a 94       	dec	r0
     800:	d2 f7       	brpl	.-12     	; 0x7f6 <__udivdi3+0x418>
     802:	6d a4       	ldd	r6, Y+45	; 0x2d
     804:	7e a4       	ldd	r7, Y+46	; 0x2e
     806:	8f a4       	ldd	r8, Y+47	; 0x2f
     808:	98 a8       	ldd	r9, Y+48	; 0x30
     80a:	0e 2e       	mov	r0, r30
     80c:	04 c0       	rjmp	.+8      	; 0x816 <__udivdi3+0x438>
     80e:	96 94       	lsr	r9
     810:	87 94       	ror	r8
     812:	77 94       	ror	r7
     814:	67 94       	ror	r6
     816:	0a 94       	dec	r0
     818:	d2 f7       	brpl	.-12     	; 0x80e <__udivdi3+0x430>
     81a:	84 01       	movw	r16, r8
     81c:	73 01       	movw	r14, r6
     81e:	e2 2a       	or	r14, r18
     820:	f3 2a       	or	r15, r19
     822:	04 2b       	or	r16, r20
     824:	15 2b       	or	r17, r21
     826:	e9 a6       	std	Y+41, r14	; 0x29
     828:	fa a6       	std	Y+42, r15	; 0x2a
     82a:	0b a7       	std	Y+43, r16	; 0x2b
     82c:	1c a7       	std	Y+44, r17	; 0x2c
     82e:	32 01       	movw	r6, r4
     830:	88 24       	eor	r8, r8
     832:	99 24       	eor	r9, r9
     834:	92 01       	movw	r18, r4
     836:	81 01       	movw	r16, r2
     838:	20 70       	andi	r18, 0x00	; 0
     83a:	30 70       	andi	r19, 0x00	; 0
     83c:	21 96       	adiw	r28, 0x01	; 1
     83e:	0c af       	std	Y+60, r16	; 0x3c
     840:	1d af       	std	Y+61, r17	; 0x3d
     842:	2e af       	std	Y+62, r18	; 0x3e
     844:	3f af       	std	Y+63, r19	; 0x3f
     846:	21 97       	sbiw	r28, 0x01	; 1
     848:	c6 01       	movw	r24, r12
     84a:	b5 01       	movw	r22, r10
     84c:	a4 01       	movw	r20, r8
     84e:	93 01       	movw	r18, r6
     850:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     854:	7b 01       	movw	r14, r22
     856:	8c 01       	movw	r16, r24
     858:	c6 01       	movw	r24, r12
     85a:	b5 01       	movw	r22, r10
     85c:	a4 01       	movw	r20, r8
     85e:	93 01       	movw	r18, r6
     860:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     864:	c9 01       	movw	r24, r18
     866:	da 01       	movw	r26, r20
     868:	25 96       	adiw	r28, 0x05	; 5
     86a:	8c af       	std	Y+60, r24	; 0x3c
     86c:	9d af       	std	Y+61, r25	; 0x3d
     86e:	ae af       	std	Y+62, r26	; 0x3e
     870:	bf af       	std	Y+63, r27	; 0x3f
     872:	25 97       	sbiw	r28, 0x05	; 5
     874:	bc 01       	movw	r22, r24
     876:	cd 01       	movw	r24, r26
     878:	21 96       	adiw	r28, 0x01	; 1
     87a:	2c ad       	ldd	r18, Y+60	; 0x3c
     87c:	3d ad       	ldd	r19, Y+61	; 0x3d
     87e:	4e ad       	ldd	r20, Y+62	; 0x3e
     880:	5f ad       	ldd	r21, Y+63	; 0x3f
     882:	21 97       	sbiw	r28, 0x01	; 1
     884:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	87 01       	movw	r16, r14
     88e:	ff 24       	eor	r15, r15
     890:	ee 24       	eor	r14, r14
     892:	a9 a4       	ldd	r10, Y+41	; 0x29
     894:	ba a4       	ldd	r11, Y+42	; 0x2a
     896:	cb a4       	ldd	r12, Y+43	; 0x2b
     898:	dc a4       	ldd	r13, Y+44	; 0x2c
     89a:	c6 01       	movw	r24, r12
     89c:	aa 27       	eor	r26, r26
     89e:	bb 27       	eor	r27, r27
     8a0:	5c 01       	movw	r10, r24
     8a2:	6d 01       	movw	r12, r26
     8a4:	ae 28       	or	r10, r14
     8a6:	bf 28       	or	r11, r15
     8a8:	c0 2a       	or	r12, r16
     8aa:	d1 2a       	or	r13, r17
     8ac:	a2 16       	cp	r10, r18
     8ae:	b3 06       	cpc	r11, r19
     8b0:	c4 06       	cpc	r12, r20
     8b2:	d5 06       	cpc	r13, r21
     8b4:	60 f5       	brcc	.+88     	; 0x90e <__stack+0xaf>
     8b6:	25 96       	adiw	r28, 0x05	; 5
     8b8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8ba:	7d ad       	ldd	r23, Y+61	; 0x3d
     8bc:	8e ad       	ldd	r24, Y+62	; 0x3e
     8be:	9f ad       	ldd	r25, Y+63	; 0x3f
     8c0:	25 97       	sbiw	r28, 0x05	; 5
     8c2:	61 50       	subi	r22, 0x01	; 1
     8c4:	70 40       	sbci	r23, 0x00	; 0
     8c6:	80 40       	sbci	r24, 0x00	; 0
     8c8:	90 40       	sbci	r25, 0x00	; 0
     8ca:	25 96       	adiw	r28, 0x05	; 5
     8cc:	6c af       	std	Y+60, r22	; 0x3c
     8ce:	7d af       	std	Y+61, r23	; 0x3d
     8d0:	8e af       	std	Y+62, r24	; 0x3e
     8d2:	9f af       	std	Y+63, r25	; 0x3f
     8d4:	25 97       	sbiw	r28, 0x05	; 5
     8d6:	a2 0c       	add	r10, r2
     8d8:	b3 1c       	adc	r11, r3
     8da:	c4 1c       	adc	r12, r4
     8dc:	d5 1c       	adc	r13, r5
     8de:	a2 14       	cp	r10, r2
     8e0:	b3 04       	cpc	r11, r3
     8e2:	c4 04       	cpc	r12, r4
     8e4:	d5 04       	cpc	r13, r5
     8e6:	98 f0       	brcs	.+38     	; 0x90e <__stack+0xaf>
     8e8:	a2 16       	cp	r10, r18
     8ea:	b3 06       	cpc	r11, r19
     8ec:	c4 06       	cpc	r12, r20
     8ee:	d5 06       	cpc	r13, r21
     8f0:	70 f4       	brcc	.+28     	; 0x90e <__stack+0xaf>
     8f2:	61 50       	subi	r22, 0x01	; 1
     8f4:	70 40       	sbci	r23, 0x00	; 0
     8f6:	80 40       	sbci	r24, 0x00	; 0
     8f8:	90 40       	sbci	r25, 0x00	; 0
     8fa:	25 96       	adiw	r28, 0x05	; 5
     8fc:	6c af       	std	Y+60, r22	; 0x3c
     8fe:	7d af       	std	Y+61, r23	; 0x3d
     900:	8e af       	std	Y+62, r24	; 0x3e
     902:	9f af       	std	Y+63, r25	; 0x3f
     904:	25 97       	sbiw	r28, 0x05	; 5
     906:	a2 0c       	add	r10, r2
     908:	b3 1c       	adc	r11, r3
     90a:	c4 1c       	adc	r12, r4
     90c:	d5 1c       	adc	r13, r5
     90e:	a2 1a       	sub	r10, r18
     910:	b3 0a       	sbc	r11, r19
     912:	c4 0a       	sbc	r12, r20
     914:	d5 0a       	sbc	r13, r21
     916:	c6 01       	movw	r24, r12
     918:	b5 01       	movw	r22, r10
     91a:	a4 01       	movw	r20, r8
     91c:	93 01       	movw	r18, r6
     91e:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     922:	7b 01       	movw	r14, r22
     924:	8c 01       	movw	r16, r24
     926:	c6 01       	movw	r24, r12
     928:	b5 01       	movw	r22, r10
     92a:	a4 01       	movw	r20, r8
     92c:	93 01       	movw	r18, r6
     92e:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	3c 01       	movw	r6, r24
     938:	4d 01       	movw	r8, r26
     93a:	c4 01       	movw	r24, r8
     93c:	b3 01       	movw	r22, r6
     93e:	21 96       	adiw	r28, 0x01	; 1
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	21 97       	sbiw	r28, 0x01	; 1
     94a:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	89 a5       	ldd	r24, Y+41	; 0x29
     95a:	9a a5       	ldd	r25, Y+42	; 0x2a
     95c:	ab a5       	ldd	r26, Y+43	; 0x2b
     95e:	bc a5       	ldd	r27, Y+44	; 0x2c
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	57 01       	movw	r10, r14
     966:	68 01       	movw	r12, r16
     968:	a8 2a       	or	r10, r24
     96a:	b9 2a       	or	r11, r25
     96c:	ca 2a       	or	r12, r26
     96e:	db 2a       	or	r13, r27
     970:	a2 16       	cp	r10, r18
     972:	b3 06       	cpc	r11, r19
     974:	c4 06       	cpc	r12, r20
     976:	d5 06       	cpc	r13, r21
     978:	e0 f4       	brcc	.+56     	; 0x9b2 <__stack+0x153>
     97a:	08 94       	sec
     97c:	61 08       	sbc	r6, r1
     97e:	71 08       	sbc	r7, r1
     980:	81 08       	sbc	r8, r1
     982:	91 08       	sbc	r9, r1
     984:	a2 0c       	add	r10, r2
     986:	b3 1c       	adc	r11, r3
     988:	c4 1c       	adc	r12, r4
     98a:	d5 1c       	adc	r13, r5
     98c:	a2 14       	cp	r10, r2
     98e:	b3 04       	cpc	r11, r3
     990:	c4 04       	cpc	r12, r4
     992:	d5 04       	cpc	r13, r5
     994:	70 f0       	brcs	.+28     	; 0x9b2 <__stack+0x153>
     996:	a2 16       	cp	r10, r18
     998:	b3 06       	cpc	r11, r19
     99a:	c4 06       	cpc	r12, r20
     99c:	d5 06       	cpc	r13, r21
     99e:	48 f4       	brcc	.+18     	; 0x9b2 <__stack+0x153>
     9a0:	08 94       	sec
     9a2:	61 08       	sbc	r6, r1
     9a4:	71 08       	sbc	r7, r1
     9a6:	81 08       	sbc	r8, r1
     9a8:	91 08       	sbc	r9, r1
     9aa:	a2 0c       	add	r10, r2
     9ac:	b3 1c       	adc	r11, r3
     9ae:	c4 1c       	adc	r12, r4
     9b0:	d5 1c       	adc	r13, r5
     9b2:	8d a5       	ldd	r24, Y+45	; 0x2d
     9b4:	9e a5       	ldd	r25, Y+46	; 0x2e
     9b6:	af a5       	ldd	r26, Y+47	; 0x2f
     9b8:	b8 a9       	ldd	r27, Y+48	; 0x30
     9ba:	6f 96       	adiw	r28, 0x1f	; 31
     9bc:	0f ac       	ldd	r0, Y+63	; 0x3f
     9be:	6f 97       	sbiw	r28, 0x1f	; 31
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__stack+0x16b>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	aa 1f       	adc	r26, r26
     9c8:	bb 1f       	adc	r27, r27
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__stack+0x163>
     9ce:	8d a7       	std	Y+45, r24	; 0x2d
     9d0:	9e a7       	std	Y+46, r25	; 0x2e
     9d2:	af a7       	std	Y+47, r26	; 0x2f
     9d4:	b8 ab       	std	Y+48, r27	; 0x30
     9d6:	a2 1a       	sub	r10, r18
     9d8:	b3 0a       	sbc	r11, r19
     9da:	c4 0a       	sbc	r12, r20
     9dc:	d5 0a       	sbc	r13, r21
     9de:	25 96       	adiw	r28, 0x05	; 5
     9e0:	ec ac       	ldd	r14, Y+60	; 0x3c
     9e2:	fd ac       	ldd	r15, Y+61	; 0x3d
     9e4:	0e ad       	ldd	r16, Y+62	; 0x3e
     9e6:	1f ad       	ldd	r17, Y+63	; 0x3f
     9e8:	25 97       	sbiw	r28, 0x05	; 5
     9ea:	d7 01       	movw	r26, r14
     9ec:	99 27       	eor	r25, r25
     9ee:	88 27       	eor	r24, r24
     9f0:	68 2a       	or	r6, r24
     9f2:	79 2a       	or	r7, r25
     9f4:	8a 2a       	or	r8, r26
     9f6:	9b 2a       	or	r9, r27
     9f8:	82 01       	movw	r16, r4
     9fa:	22 27       	eor	r18, r18
     9fc:	33 27       	eor	r19, r19
     9fe:	29 96       	adiw	r28, 0x09	; 9
     a00:	0c af       	std	Y+60, r16	; 0x3c
     a02:	1d af       	std	Y+61, r17	; 0x3d
     a04:	2e af       	std	Y+62, r18	; 0x3e
     a06:	3f af       	std	Y+63, r19	; 0x3f
     a08:	29 97       	sbiw	r28, 0x09	; 9
     a0a:	a2 01       	movw	r20, r4
     a0c:	91 01       	movw	r18, r2
     a0e:	40 70       	andi	r20, 0x00	; 0
     a10:	50 70       	andi	r21, 0x00	; 0
     a12:	2d 96       	adiw	r28, 0x0d	; 13
     a14:	2c af       	std	Y+60, r18	; 0x3c
     a16:	3d af       	std	Y+61, r19	; 0x3d
     a18:	4e af       	std	Y+62, r20	; 0x3e
     a1a:	5f af       	std	Y+63, r21	; 0x3f
     a1c:	2d 97       	sbiw	r28, 0x0d	; 13
     a1e:	c6 01       	movw	r24, r12
     a20:	b5 01       	movw	r22, r10
     a22:	29 96       	adiw	r28, 0x09	; 9
     a24:	2c ad       	ldd	r18, Y+60	; 0x3c
     a26:	3d ad       	ldd	r19, Y+61	; 0x3d
     a28:	4e ad       	ldd	r20, Y+62	; 0x3e
     a2a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a2c:	29 97       	sbiw	r28, 0x09	; 9
     a2e:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     a32:	7b 01       	movw	r14, r22
     a34:	8c 01       	movw	r16, r24
     a36:	c6 01       	movw	r24, r12
     a38:	b5 01       	movw	r22, r10
     a3a:	29 96       	adiw	r28, 0x09	; 9
     a3c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a3e:	3d ad       	ldd	r19, Y+61	; 0x3d
     a40:	4e ad       	ldd	r20, Y+62	; 0x3e
     a42:	5f ad       	ldd	r21, Y+63	; 0x3f
     a44:	29 97       	sbiw	r28, 0x09	; 9
     a46:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     a4a:	c9 01       	movw	r24, r18
     a4c:	da 01       	movw	r26, r20
     a4e:	61 96       	adiw	r28, 0x11	; 17
     a50:	8c af       	std	Y+60, r24	; 0x3c
     a52:	9d af       	std	Y+61, r25	; 0x3d
     a54:	ae af       	std	Y+62, r26	; 0x3e
     a56:	bf af       	std	Y+63, r27	; 0x3f
     a58:	61 97       	sbiw	r28, 0x11	; 17
     a5a:	bc 01       	movw	r22, r24
     a5c:	cd 01       	movw	r24, r26
     a5e:	2d 96       	adiw	r28, 0x0d	; 13
     a60:	2c ad       	ldd	r18, Y+60	; 0x3c
     a62:	3d ad       	ldd	r19, Y+61	; 0x3d
     a64:	4e ad       	ldd	r20, Y+62	; 0x3e
     a66:	5f ad       	ldd	r21, Y+63	; 0x3f
     a68:	2d 97       	sbiw	r28, 0x0d	; 13
     a6a:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	87 01       	movw	r16, r14
     a74:	ff 24       	eor	r15, r15
     a76:	ee 24       	eor	r14, r14
     a78:	ad a4       	ldd	r10, Y+45	; 0x2d
     a7a:	be a4       	ldd	r11, Y+46	; 0x2e
     a7c:	cf a4       	ldd	r12, Y+47	; 0x2f
     a7e:	d8 a8       	ldd	r13, Y+48	; 0x30
     a80:	c6 01       	movw	r24, r12
     a82:	aa 27       	eor	r26, r26
     a84:	bb 27       	eor	r27, r27
     a86:	57 01       	movw	r10, r14
     a88:	68 01       	movw	r12, r16
     a8a:	a8 2a       	or	r10, r24
     a8c:	b9 2a       	or	r11, r25
     a8e:	ca 2a       	or	r12, r26
     a90:	db 2a       	or	r13, r27
     a92:	a2 16       	cp	r10, r18
     a94:	b3 06       	cpc	r11, r19
     a96:	c4 06       	cpc	r12, r20
     a98:	d5 06       	cpc	r13, r21
     a9a:	60 f5       	brcc	.+88     	; 0xaf4 <__stack+0x295>
     a9c:	61 96       	adiw	r28, 0x11	; 17
     a9e:	6c ad       	ldd	r22, Y+60	; 0x3c
     aa0:	7d ad       	ldd	r23, Y+61	; 0x3d
     aa2:	8e ad       	ldd	r24, Y+62	; 0x3e
     aa4:	9f ad       	ldd	r25, Y+63	; 0x3f
     aa6:	61 97       	sbiw	r28, 0x11	; 17
     aa8:	61 50       	subi	r22, 0x01	; 1
     aaa:	70 40       	sbci	r23, 0x00	; 0
     aac:	80 40       	sbci	r24, 0x00	; 0
     aae:	90 40       	sbci	r25, 0x00	; 0
     ab0:	61 96       	adiw	r28, 0x11	; 17
     ab2:	6c af       	std	Y+60, r22	; 0x3c
     ab4:	7d af       	std	Y+61, r23	; 0x3d
     ab6:	8e af       	std	Y+62, r24	; 0x3e
     ab8:	9f af       	std	Y+63, r25	; 0x3f
     aba:	61 97       	sbiw	r28, 0x11	; 17
     abc:	a2 0c       	add	r10, r2
     abe:	b3 1c       	adc	r11, r3
     ac0:	c4 1c       	adc	r12, r4
     ac2:	d5 1c       	adc	r13, r5
     ac4:	a2 14       	cp	r10, r2
     ac6:	b3 04       	cpc	r11, r3
     ac8:	c4 04       	cpc	r12, r4
     aca:	d5 04       	cpc	r13, r5
     acc:	98 f0       	brcs	.+38     	; 0xaf4 <__stack+0x295>
     ace:	a2 16       	cp	r10, r18
     ad0:	b3 06       	cpc	r11, r19
     ad2:	c4 06       	cpc	r12, r20
     ad4:	d5 06       	cpc	r13, r21
     ad6:	70 f4       	brcc	.+28     	; 0xaf4 <__stack+0x295>
     ad8:	61 50       	subi	r22, 0x01	; 1
     ada:	70 40       	sbci	r23, 0x00	; 0
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	61 96       	adiw	r28, 0x11	; 17
     ae2:	6c af       	std	Y+60, r22	; 0x3c
     ae4:	7d af       	std	Y+61, r23	; 0x3d
     ae6:	8e af       	std	Y+62, r24	; 0x3e
     ae8:	9f af       	std	Y+63, r25	; 0x3f
     aea:	61 97       	sbiw	r28, 0x11	; 17
     aec:	a2 0c       	add	r10, r2
     aee:	b3 1c       	adc	r11, r3
     af0:	c4 1c       	adc	r12, r4
     af2:	d5 1c       	adc	r13, r5
     af4:	a2 1a       	sub	r10, r18
     af6:	b3 0a       	sbc	r11, r19
     af8:	c4 0a       	sbc	r12, r20
     afa:	d5 0a       	sbc	r13, r21
     afc:	c6 01       	movw	r24, r12
     afe:	b5 01       	movw	r22, r10
     b00:	29 96       	adiw	r28, 0x09	; 9
     b02:	2c ad       	ldd	r18, Y+60	; 0x3c
     b04:	3d ad       	ldd	r19, Y+61	; 0x3d
     b06:	4e ad       	ldd	r20, Y+62	; 0x3e
     b08:	5f ad       	ldd	r21, Y+63	; 0x3f
     b0a:	29 97       	sbiw	r28, 0x09	; 9
     b0c:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     b10:	7b 01       	movw	r14, r22
     b12:	8c 01       	movw	r16, r24
     b14:	c6 01       	movw	r24, r12
     b16:	b5 01       	movw	r22, r10
     b18:	29 96       	adiw	r28, 0x09	; 9
     b1a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b1c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b1e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b20:	5f ad       	ldd	r21, Y+63	; 0x3f
     b22:	29 97       	sbiw	r28, 0x09	; 9
     b24:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     b28:	c9 01       	movw	r24, r18
     b2a:	da 01       	movw	r26, r20
     b2c:	5c 01       	movw	r10, r24
     b2e:	6d 01       	movw	r12, r26
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	2d 96       	adiw	r28, 0x0d	; 13
     b36:	2c ad       	ldd	r18, Y+60	; 0x3c
     b38:	3d ad       	ldd	r19, Y+61	; 0x3d
     b3a:	4e ad       	ldd	r20, Y+62	; 0x3e
     b3c:	5f ad       	ldd	r21, Y+63	; 0x3f
     b3e:	2d 97       	sbiw	r28, 0x0d	; 13
     b40:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	87 01       	movw	r16, r14
     b4a:	ff 24       	eor	r15, r15
     b4c:	ee 24       	eor	r14, r14
     b4e:	8d a5       	ldd	r24, Y+45	; 0x2d
     b50:	9e a5       	ldd	r25, Y+46	; 0x2e
     b52:	af a5       	ldd	r26, Y+47	; 0x2f
     b54:	b8 a9       	ldd	r27, Y+48	; 0x30
     b56:	a0 70       	andi	r26, 0x00	; 0
     b58:	b0 70       	andi	r27, 0x00	; 0
     b5a:	e8 2a       	or	r14, r24
     b5c:	f9 2a       	or	r15, r25
     b5e:	0a 2b       	or	r16, r26
     b60:	1b 2b       	or	r17, r27
     b62:	e2 16       	cp	r14, r18
     b64:	f3 06       	cpc	r15, r19
     b66:	04 07       	cpc	r16, r20
     b68:	15 07       	cpc	r17, r21
     b6a:	c0 f4       	brcc	.+48     	; 0xb9c <__stack+0x33d>
     b6c:	08 94       	sec
     b6e:	a1 08       	sbc	r10, r1
     b70:	b1 08       	sbc	r11, r1
     b72:	c1 08       	sbc	r12, r1
     b74:	d1 08       	sbc	r13, r1
     b76:	e2 0c       	add	r14, r2
     b78:	f3 1c       	adc	r15, r3
     b7a:	04 1d       	adc	r16, r4
     b7c:	15 1d       	adc	r17, r5
     b7e:	e2 14       	cp	r14, r2
     b80:	f3 04       	cpc	r15, r3
     b82:	04 05       	cpc	r16, r4
     b84:	15 05       	cpc	r17, r5
     b86:	50 f0       	brcs	.+20     	; 0xb9c <__stack+0x33d>
     b88:	e2 16       	cp	r14, r18
     b8a:	f3 06       	cpc	r15, r19
     b8c:	04 07       	cpc	r16, r20
     b8e:	15 07       	cpc	r17, r21
     b90:	28 f4       	brcc	.+10     	; 0xb9c <__stack+0x33d>
     b92:	08 94       	sec
     b94:	a1 08       	sbc	r10, r1
     b96:	b1 08       	sbc	r11, r1
     b98:	c1 08       	sbc	r12, r1
     b9a:	d1 08       	sbc	r13, r1
     b9c:	61 96       	adiw	r28, 0x11	; 17
     b9e:	ec ac       	ldd	r14, Y+60	; 0x3c
     ba0:	fd ac       	ldd	r15, Y+61	; 0x3d
     ba2:	0e ad       	ldd	r16, Y+62	; 0x3e
     ba4:	1f ad       	ldd	r17, Y+63	; 0x3f
     ba6:	61 97       	sbiw	r28, 0x11	; 17
     ba8:	d7 01       	movw	r26, r14
     baa:	99 27       	eor	r25, r25
     bac:	88 27       	eor	r24, r24
     bae:	96 01       	movw	r18, r12
     bb0:	85 01       	movw	r16, r10
     bb2:	08 2b       	or	r16, r24
     bb4:	19 2b       	or	r17, r25
     bb6:	2a 2b       	or	r18, r26
     bb8:	3b 2b       	or	r19, r27
     bba:	09 ab       	std	Y+49, r16	; 0x31
     bbc:	1a ab       	std	Y+50, r17	; 0x32
     bbe:	2b ab       	std	Y+51, r18	; 0x33
     bc0:	3c ab       	std	Y+52, r19	; 0x34
     bc2:	62 c2       	rjmp	.+1220   	; 0x1088 <__stack+0x829>
     bc4:	6e 14       	cp	r6, r14
     bc6:	7f 04       	cpc	r7, r15
     bc8:	80 06       	cpc	r8, r16
     bca:	91 06       	cpc	r9, r17
     bcc:	08 f4       	brcc	.+2      	; 0xbd0 <__stack+0x371>
     bce:	51 c2       	rjmp	.+1186   	; 0x1072 <__stack+0x813>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	e2 16       	cp	r14, r18
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	f2 06       	cpc	r15, r18
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	02 07       	cpc	r16, r18
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	12 07       	cpc	r17, r18
     be0:	88 f4       	brcc	.+34     	; 0xc04 <__stack+0x3a5>
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	e3 16       	cp	r14, r19
     be6:	f1 04       	cpc	r15, r1
     be8:	01 05       	cpc	r16, r1
     bea:	11 05       	cpc	r17, r1
     bec:	31 f0       	breq	.+12     	; 0xbfa <__stack+0x39b>
     bee:	28 f0       	brcs	.+10     	; 0xbfa <__stack+0x39b>
     bf0:	48 e0       	ldi	r20, 0x08	; 8
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	17 c0       	rjmp	.+46     	; 0xc28 <__stack+0x3c9>
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	12 c0       	rjmp	.+36     	; 0xc28 <__stack+0x3c9>
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	e4 16       	cp	r14, r20
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	f4 06       	cpc	r15, r20
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	04 07       	cpc	r16, r20
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	14 07       	cpc	r17, r20
     c14:	28 f0       	brcs	.+10     	; 0xc20 <__stack+0x3c1>
     c16:	48 e1       	ldi	r20, 0x18	; 24
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__stack+0x3c9>
     c20:	40 e1       	ldi	r20, 0x10	; 16
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	d8 01       	movw	r26, r16
     c2a:	c7 01       	movw	r24, r14
     c2c:	04 2e       	mov	r0, r20
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__stack+0x3d9>
     c30:	b6 95       	lsr	r27
     c32:	a7 95       	ror	r26
     c34:	97 95       	ror	r25
     c36:	87 95       	ror	r24
     c38:	0a 94       	dec	r0
     c3a:	d2 f7       	brpl	.-12     	; 0xc30 <__stack+0x3d1>
     c3c:	88 59       	subi	r24, 0x98	; 152
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	dc 01       	movw	r26, r24
     c42:	2c 91       	ld	r18, X
     c44:	30 e2       	ldi	r19, 0x20	; 32
     c46:	a3 2e       	mov	r10, r19
     c48:	b1 2c       	mov	r11, r1
     c4a:	c1 2c       	mov	r12, r1
     c4c:	d1 2c       	mov	r13, r1
     c4e:	d6 01       	movw	r26, r12
     c50:	c5 01       	movw	r24, r10
     c52:	84 1b       	sub	r24, r20
     c54:	95 0b       	sbc	r25, r21
     c56:	a6 0b       	sbc	r26, r22
     c58:	b7 0b       	sbc	r27, r23
     c5a:	82 1b       	sub	r24, r18
     c5c:	91 09       	sbc	r25, r1
     c5e:	a1 09       	sbc	r26, r1
     c60:	b1 09       	sbc	r27, r1
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	a1 05       	cpc	r26, r1
     c66:	b1 05       	cpc	r27, r1
     c68:	89 f4       	brne	.+34     	; 0xc8c <__stack+0x42d>
     c6a:	e6 14       	cp	r14, r6
     c6c:	f7 04       	cpc	r15, r7
     c6e:	08 05       	cpc	r16, r8
     c70:	19 05       	cpc	r17, r9
     c72:	08 f4       	brcc	.+2      	; 0xc76 <__stack+0x417>
     c74:	f2 c1       	rjmp	.+996    	; 0x105a <__stack+0x7fb>
     c76:	6d a4       	ldd	r6, Y+45	; 0x2d
     c78:	7e a4       	ldd	r7, Y+46	; 0x2e
     c7a:	8f a4       	ldd	r8, Y+47	; 0x2f
     c7c:	98 a8       	ldd	r9, Y+48	; 0x30
     c7e:	62 14       	cp	r6, r2
     c80:	73 04       	cpc	r7, r3
     c82:	84 04       	cpc	r8, r4
     c84:	95 04       	cpc	r9, r5
     c86:	08 f0       	brcs	.+2      	; 0xc8a <__stack+0x42b>
     c88:	e8 c1       	rjmp	.+976    	; 0x105a <__stack+0x7fb>
     c8a:	f3 c1       	rjmp	.+998    	; 0x1072 <__stack+0x813>
     c8c:	6e 96       	adiw	r28, 0x1e	; 30
     c8e:	8f af       	std	Y+63, r24	; 0x3f
     c90:	6e 97       	sbiw	r28, 0x1e	; 30
     c92:	08 2e       	mov	r0, r24
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__stack+0x43f>
     c96:	ee 0c       	add	r14, r14
     c98:	ff 1c       	adc	r15, r15
     c9a:	00 1f       	adc	r16, r16
     c9c:	11 1f       	adc	r17, r17
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__stack+0x437>
     ca2:	6a 2d       	mov	r22, r10
     ca4:	68 1b       	sub	r22, r24
     ca6:	d2 01       	movw	r26, r4
     ca8:	c1 01       	movw	r24, r2
     caa:	06 2e       	mov	r0, r22
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <__stack+0x457>
     cae:	b6 95       	lsr	r27
     cb0:	a7 95       	ror	r26
     cb2:	97 95       	ror	r25
     cb4:	87 95       	ror	r24
     cb6:	0a 94       	dec	r0
     cb8:	d2 f7       	brpl	.-12     	; 0xcae <__stack+0x44f>
     cba:	5c 01       	movw	r10, r24
     cbc:	6d 01       	movw	r12, r26
     cbe:	ae 28       	or	r10, r14
     cc0:	bf 28       	or	r11, r15
     cc2:	c0 2a       	or	r12, r16
     cc4:	d1 2a       	or	r13, r17
     cc6:	ad a2       	std	Y+37, r10	; 0x25
     cc8:	be a2       	std	Y+38, r11	; 0x26
     cca:	cf a2       	std	Y+39, r12	; 0x27
     ccc:	d8 a6       	std	Y+40, r13	; 0x28
     cce:	72 01       	movw	r14, r4
     cd0:	61 01       	movw	r12, r2
     cd2:	6e 96       	adiw	r28, 0x1e	; 30
     cd4:	0f ac       	ldd	r0, Y+63	; 0x3f
     cd6:	6e 97       	sbiw	r28, 0x1e	; 30
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__stack+0x483>
     cda:	cc 0c       	add	r12, r12
     cdc:	dd 1c       	adc	r13, r13
     cde:	ee 1c       	adc	r14, r14
     ce0:	ff 1c       	adc	r15, r15
     ce2:	0a 94       	dec	r0
     ce4:	d2 f7       	brpl	.-12     	; 0xcda <__stack+0x47b>
     ce6:	c9 a2       	std	Y+33, r12	; 0x21
     ce8:	da a2       	std	Y+34, r13	; 0x22
     cea:	eb a2       	std	Y+35, r14	; 0x23
     cec:	fc a2       	std	Y+36, r15	; 0x24
     cee:	64 01       	movw	r12, r8
     cf0:	53 01       	movw	r10, r6
     cf2:	06 2e       	mov	r0, r22
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <__stack+0x49f>
     cf6:	d6 94       	lsr	r13
     cf8:	c7 94       	ror	r12
     cfa:	b7 94       	ror	r11
     cfc:	a7 94       	ror	r10
     cfe:	0a 94       	dec	r0
     d00:	d2 f7       	brpl	.-12     	; 0xcf6 <__stack+0x497>
     d02:	d4 01       	movw	r26, r8
     d04:	c3 01       	movw	r24, r6
     d06:	6e 96       	adiw	r28, 0x1e	; 30
     d08:	0f ac       	ldd	r0, Y+63	; 0x3f
     d0a:	6e 97       	sbiw	r28, 0x1e	; 30
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <__stack+0x4b7>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	aa 1f       	adc	r26, r26
     d14:	bb 1f       	adc	r27, r27
     d16:	0a 94       	dec	r0
     d18:	d2 f7       	brpl	.-12     	; 0xd0e <__stack+0x4af>
     d1a:	ed a4       	ldd	r14, Y+45	; 0x2d
     d1c:	fe a4       	ldd	r15, Y+46	; 0x2e
     d1e:	0f a5       	ldd	r16, Y+47	; 0x2f
     d20:	18 a9       	ldd	r17, Y+48	; 0x30
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <__stack+0x4cd>
     d24:	16 95       	lsr	r17
     d26:	07 95       	ror	r16
     d28:	f7 94       	ror	r15
     d2a:	e7 94       	ror	r14
     d2c:	6a 95       	dec	r22
     d2e:	d2 f7       	brpl	.-12     	; 0xd24 <__stack+0x4c5>
     d30:	37 01       	movw	r6, r14
     d32:	48 01       	movw	r8, r16
     d34:	68 2a       	or	r6, r24
     d36:	79 2a       	or	r7, r25
     d38:	8a 2a       	or	r8, r26
     d3a:	9b 2a       	or	r9, r27
     d3c:	6d 8e       	std	Y+29, r6	; 0x1d
     d3e:	7e 8e       	std	Y+30, r7	; 0x1e
     d40:	8f 8e       	std	Y+31, r8	; 0x1f
     d42:	98 a2       	std	Y+32, r9	; 0x20
     d44:	ed a0       	ldd	r14, Y+37	; 0x25
     d46:	fe a0       	ldd	r15, Y+38	; 0x26
     d48:	0f a1       	ldd	r16, Y+39	; 0x27
     d4a:	18 a5       	ldd	r17, Y+40	; 0x28
     d4c:	38 01       	movw	r6, r16
     d4e:	88 24       	eor	r8, r8
     d50:	99 24       	eor	r9, r9
     d52:	98 01       	movw	r18, r16
     d54:	87 01       	movw	r16, r14
     d56:	20 70       	andi	r18, 0x00	; 0
     d58:	30 70       	andi	r19, 0x00	; 0
     d5a:	65 96       	adiw	r28, 0x15	; 21
     d5c:	0c af       	std	Y+60, r16	; 0x3c
     d5e:	1d af       	std	Y+61, r17	; 0x3d
     d60:	2e af       	std	Y+62, r18	; 0x3e
     d62:	3f af       	std	Y+63, r19	; 0x3f
     d64:	65 97       	sbiw	r28, 0x15	; 21
     d66:	c6 01       	movw	r24, r12
     d68:	b5 01       	movw	r22, r10
     d6a:	a4 01       	movw	r20, r8
     d6c:	93 01       	movw	r18, r6
     d6e:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     d72:	7b 01       	movw	r14, r22
     d74:	8c 01       	movw	r16, r24
     d76:	c6 01       	movw	r24, r12
     d78:	b5 01       	movw	r22, r10
     d7a:	a4 01       	movw	r20, r8
     d7c:	93 01       	movw	r18, r6
     d7e:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     d82:	c9 01       	movw	r24, r18
     d84:	da 01       	movw	r26, r20
     d86:	1c 01       	movw	r2, r24
     d88:	2d 01       	movw	r4, r26
     d8a:	c2 01       	movw	r24, r4
     d8c:	b1 01       	movw	r22, r2
     d8e:	65 96       	adiw	r28, 0x15	; 21
     d90:	2c ad       	ldd	r18, Y+60	; 0x3c
     d92:	3d ad       	ldd	r19, Y+61	; 0x3d
     d94:	4e ad       	ldd	r20, Y+62	; 0x3e
     d96:	5f ad       	ldd	r21, Y+63	; 0x3f
     d98:	65 97       	sbiw	r28, 0x15	; 21
     d9a:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     d9e:	9b 01       	movw	r18, r22
     da0:	ac 01       	movw	r20, r24
     da2:	87 01       	movw	r16, r14
     da4:	ff 24       	eor	r15, r15
     da6:	ee 24       	eor	r14, r14
     da8:	ad 8c       	ldd	r10, Y+29	; 0x1d
     daa:	be 8c       	ldd	r11, Y+30	; 0x1e
     dac:	cf 8c       	ldd	r12, Y+31	; 0x1f
     dae:	d8 a0       	ldd	r13, Y+32	; 0x20
     db0:	c6 01       	movw	r24, r12
     db2:	aa 27       	eor	r26, r26
     db4:	bb 27       	eor	r27, r27
     db6:	57 01       	movw	r10, r14
     db8:	68 01       	movw	r12, r16
     dba:	a8 2a       	or	r10, r24
     dbc:	b9 2a       	or	r11, r25
     dbe:	ca 2a       	or	r12, r26
     dc0:	db 2a       	or	r13, r27
     dc2:	a2 16       	cp	r10, r18
     dc4:	b3 06       	cpc	r11, r19
     dc6:	c4 06       	cpc	r12, r20
     dc8:	d5 06       	cpc	r13, r21
     dca:	00 f5       	brcc	.+64     	; 0xe0c <__stack+0x5ad>
     dcc:	08 94       	sec
     dce:	21 08       	sbc	r2, r1
     dd0:	31 08       	sbc	r3, r1
     dd2:	41 08       	sbc	r4, r1
     dd4:	51 08       	sbc	r5, r1
     dd6:	ed a0       	ldd	r14, Y+37	; 0x25
     dd8:	fe a0       	ldd	r15, Y+38	; 0x26
     dda:	0f a1       	ldd	r16, Y+39	; 0x27
     ddc:	18 a5       	ldd	r17, Y+40	; 0x28
     dde:	ae 0c       	add	r10, r14
     de0:	bf 1c       	adc	r11, r15
     de2:	c0 1e       	adc	r12, r16
     de4:	d1 1e       	adc	r13, r17
     de6:	ae 14       	cp	r10, r14
     de8:	bf 04       	cpc	r11, r15
     dea:	c0 06       	cpc	r12, r16
     dec:	d1 06       	cpc	r13, r17
     dee:	70 f0       	brcs	.+28     	; 0xe0c <__stack+0x5ad>
     df0:	a2 16       	cp	r10, r18
     df2:	b3 06       	cpc	r11, r19
     df4:	c4 06       	cpc	r12, r20
     df6:	d5 06       	cpc	r13, r21
     df8:	48 f4       	brcc	.+18     	; 0xe0c <__stack+0x5ad>
     dfa:	08 94       	sec
     dfc:	21 08       	sbc	r2, r1
     dfe:	31 08       	sbc	r3, r1
     e00:	41 08       	sbc	r4, r1
     e02:	51 08       	sbc	r5, r1
     e04:	ae 0c       	add	r10, r14
     e06:	bf 1c       	adc	r11, r15
     e08:	c0 1e       	adc	r12, r16
     e0a:	d1 1e       	adc	r13, r17
     e0c:	a2 1a       	sub	r10, r18
     e0e:	b3 0a       	sbc	r11, r19
     e10:	c4 0a       	sbc	r12, r20
     e12:	d5 0a       	sbc	r13, r21
     e14:	c6 01       	movw	r24, r12
     e16:	b5 01       	movw	r22, r10
     e18:	a4 01       	movw	r20, r8
     e1a:	93 01       	movw	r18, r6
     e1c:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     e20:	7b 01       	movw	r14, r22
     e22:	8c 01       	movw	r16, r24
     e24:	c6 01       	movw	r24, r12
     e26:	b5 01       	movw	r22, r10
     e28:	a4 01       	movw	r20, r8
     e2a:	93 01       	movw	r18, r6
     e2c:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
     e30:	c9 01       	movw	r24, r18
     e32:	da 01       	movw	r26, r20
     e34:	3c 01       	movw	r6, r24
     e36:	4d 01       	movw	r8, r26
     e38:	c4 01       	movw	r24, r8
     e3a:	b3 01       	movw	r22, r6
     e3c:	65 96       	adiw	r28, 0x15	; 21
     e3e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e40:	3d ad       	ldd	r19, Y+61	; 0x3d
     e42:	4e ad       	ldd	r20, Y+62	; 0x3e
     e44:	5f ad       	ldd	r21, Y+63	; 0x3f
     e46:	65 97       	sbiw	r28, 0x15	; 21
     e48:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     e4c:	9b 01       	movw	r18, r22
     e4e:	ac 01       	movw	r20, r24
     e50:	87 01       	movw	r16, r14
     e52:	ff 24       	eor	r15, r15
     e54:	ee 24       	eor	r14, r14
     e56:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e58:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e5a:	af 8d       	ldd	r26, Y+31	; 0x1f
     e5c:	b8 a1       	ldd	r27, Y+32	; 0x20
     e5e:	a0 70       	andi	r26, 0x00	; 0
     e60:	b0 70       	andi	r27, 0x00	; 0
     e62:	57 01       	movw	r10, r14
     e64:	68 01       	movw	r12, r16
     e66:	a8 2a       	or	r10, r24
     e68:	b9 2a       	or	r11, r25
     e6a:	ca 2a       	or	r12, r26
     e6c:	db 2a       	or	r13, r27
     e6e:	a2 16       	cp	r10, r18
     e70:	b3 06       	cpc	r11, r19
     e72:	c4 06       	cpc	r12, r20
     e74:	d5 06       	cpc	r13, r21
     e76:	00 f5       	brcc	.+64     	; 0xeb8 <__stack+0x659>
     e78:	08 94       	sec
     e7a:	61 08       	sbc	r6, r1
     e7c:	71 08       	sbc	r7, r1
     e7e:	81 08       	sbc	r8, r1
     e80:	91 08       	sbc	r9, r1
     e82:	6d a1       	ldd	r22, Y+37	; 0x25
     e84:	7e a1       	ldd	r23, Y+38	; 0x26
     e86:	8f a1       	ldd	r24, Y+39	; 0x27
     e88:	98 a5       	ldd	r25, Y+40	; 0x28
     e8a:	a6 0e       	add	r10, r22
     e8c:	b7 1e       	adc	r11, r23
     e8e:	c8 1e       	adc	r12, r24
     e90:	d9 1e       	adc	r13, r25
     e92:	a6 16       	cp	r10, r22
     e94:	b7 06       	cpc	r11, r23
     e96:	c8 06       	cpc	r12, r24
     e98:	d9 06       	cpc	r13, r25
     e9a:	70 f0       	brcs	.+28     	; 0xeb8 <__stack+0x659>
     e9c:	a2 16       	cp	r10, r18
     e9e:	b3 06       	cpc	r11, r19
     ea0:	c4 06       	cpc	r12, r20
     ea2:	d5 06       	cpc	r13, r21
     ea4:	48 f4       	brcc	.+18     	; 0xeb8 <__stack+0x659>
     ea6:	08 94       	sec
     ea8:	61 08       	sbc	r6, r1
     eaa:	71 08       	sbc	r7, r1
     eac:	81 08       	sbc	r8, r1
     eae:	91 08       	sbc	r9, r1
     eb0:	a6 0e       	add	r10, r22
     eb2:	b7 1e       	adc	r11, r23
     eb4:	c8 1e       	adc	r12, r24
     eb6:	d9 1e       	adc	r13, r25
     eb8:	d6 01       	movw	r26, r12
     eba:	c5 01       	movw	r24, r10
     ebc:	82 1b       	sub	r24, r18
     ebe:	93 0b       	sbc	r25, r19
     ec0:	a4 0b       	sbc	r26, r20
     ec2:	b5 0b       	sbc	r27, r21
     ec4:	89 8f       	std	Y+25, r24	; 0x19
     ec6:	9a 8f       	std	Y+26, r25	; 0x1a
     ec8:	ab 8f       	std	Y+27, r26	; 0x1b
     eca:	bc 8f       	std	Y+28, r27	; 0x1c
     ecc:	d1 01       	movw	r26, r2
     ece:	99 27       	eor	r25, r25
     ed0:	88 27       	eor	r24, r24
     ed2:	64 01       	movw	r12, r8
     ed4:	53 01       	movw	r10, r6
     ed6:	a8 2a       	or	r10, r24
     ed8:	b9 2a       	or	r11, r25
     eda:	ca 2a       	or	r12, r26
     edc:	db 2a       	or	r13, r27
     ede:	a9 aa       	std	Y+49, r10	; 0x31
     ee0:	ba aa       	std	Y+50, r11	; 0x32
     ee2:	cb aa       	std	Y+51, r12	; 0x33
     ee4:	dc aa       	std	Y+52, r13	; 0x34
     ee6:	86 01       	movw	r16, r12
     ee8:	75 01       	movw	r14, r10
     eea:	2f ef       	ldi	r18, 0xFF	; 255
     eec:	3f ef       	ldi	r19, 0xFF	; 255
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	e2 22       	and	r14, r18
     ef4:	f3 22       	and	r15, r19
     ef6:	04 23       	and	r16, r20
     ef8:	15 23       	and	r17, r21
     efa:	a6 01       	movw	r20, r12
     efc:	66 27       	eor	r22, r22
     efe:	77 27       	eor	r23, r23
     f00:	6d 96       	adiw	r28, 0x1d	; 29
     f02:	4c af       	std	Y+60, r20	; 0x3c
     f04:	5d af       	std	Y+61, r21	; 0x3d
     f06:	6e af       	std	Y+62, r22	; 0x3e
     f08:	7f af       	std	Y+63, r23	; 0x3f
     f0a:	6d 97       	sbiw	r28, 0x1d	; 29
     f0c:	a9 a0       	ldd	r10, Y+33	; 0x21
     f0e:	ba a0       	ldd	r11, Y+34	; 0x22
     f10:	cb a0       	ldd	r12, Y+35	; 0x23
     f12:	dc a0       	ldd	r13, Y+36	; 0x24
     f14:	6f ef       	ldi	r22, 0xFF	; 255
     f16:	7f ef       	ldi	r23, 0xFF	; 255
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a6 22       	and	r10, r22
     f1e:	b7 22       	and	r11, r23
     f20:	c8 22       	and	r12, r24
     f22:	d9 22       	and	r13, r25
     f24:	89 a1       	ldd	r24, Y+33	; 0x21
     f26:	9a a1       	ldd	r25, Y+34	; 0x22
     f28:	ab a1       	ldd	r26, Y+35	; 0x23
     f2a:	bc a1       	ldd	r27, Y+36	; 0x24
     f2c:	1d 01       	movw	r2, r26
     f2e:	44 24       	eor	r4, r4
     f30:	55 24       	eor	r5, r5
     f32:	c8 01       	movw	r24, r16
     f34:	b7 01       	movw	r22, r14
     f36:	a6 01       	movw	r20, r12
     f38:	95 01       	movw	r18, r10
     f3a:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     f3e:	69 96       	adiw	r28, 0x19	; 25
     f40:	6c af       	std	Y+60, r22	; 0x3c
     f42:	7d af       	std	Y+61, r23	; 0x3d
     f44:	8e af       	std	Y+62, r24	; 0x3e
     f46:	9f af       	std	Y+63, r25	; 0x3f
     f48:	69 97       	sbiw	r28, 0x19	; 25
     f4a:	c8 01       	movw	r24, r16
     f4c:	b7 01       	movw	r22, r14
     f4e:	a2 01       	movw	r20, r4
     f50:	91 01       	movw	r18, r2
     f52:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     f56:	3b 01       	movw	r6, r22
     f58:	4c 01       	movw	r8, r24
     f5a:	6d 96       	adiw	r28, 0x1d	; 29
     f5c:	6c ad       	ldd	r22, Y+60	; 0x3c
     f5e:	7d ad       	ldd	r23, Y+61	; 0x3d
     f60:	8e ad       	ldd	r24, Y+62	; 0x3e
     f62:	9f ad       	ldd	r25, Y+63	; 0x3f
     f64:	6d 97       	sbiw	r28, 0x1d	; 29
     f66:	a6 01       	movw	r20, r12
     f68:	95 01       	movw	r18, r10
     f6a:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     f6e:	7b 01       	movw	r14, r22
     f70:	8c 01       	movw	r16, r24
     f72:	6d 96       	adiw	r28, 0x1d	; 29
     f74:	6c ad       	ldd	r22, Y+60	; 0x3c
     f76:	7d ad       	ldd	r23, Y+61	; 0x3d
     f78:	8e ad       	ldd	r24, Y+62	; 0x3e
     f7a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f7c:	6d 97       	sbiw	r28, 0x1d	; 29
     f7e:	a2 01       	movw	r20, r4
     f80:	91 01       	movw	r18, r2
     f82:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
     f86:	5b 01       	movw	r10, r22
     f88:	6c 01       	movw	r12, r24
     f8a:	a8 01       	movw	r20, r16
     f8c:	97 01       	movw	r18, r14
     f8e:	26 0d       	add	r18, r6
     f90:	37 1d       	adc	r19, r7
     f92:	48 1d       	adc	r20, r8
     f94:	59 1d       	adc	r21, r9
     f96:	69 96       	adiw	r28, 0x19	; 25
     f98:	6c ac       	ldd	r6, Y+60	; 0x3c
     f9a:	7d ac       	ldd	r7, Y+61	; 0x3d
     f9c:	8e ac       	ldd	r8, Y+62	; 0x3e
     f9e:	9f ac       	ldd	r9, Y+63	; 0x3f
     fa0:	69 97       	sbiw	r28, 0x19	; 25
     fa2:	c4 01       	movw	r24, r8
     fa4:	aa 27       	eor	r26, r26
     fa6:	bb 27       	eor	r27, r27
     fa8:	28 0f       	add	r18, r24
     faa:	39 1f       	adc	r19, r25
     fac:	4a 1f       	adc	r20, r26
     fae:	5b 1f       	adc	r21, r27
     fb0:	2e 15       	cp	r18, r14
     fb2:	3f 05       	cpc	r19, r15
     fb4:	40 07       	cpc	r20, r16
     fb6:	51 07       	cpc	r21, r17
     fb8:	48 f4       	brcc	.+18     	; 0xfcc <__stack+0x76d>
     fba:	e1 2c       	mov	r14, r1
     fbc:	f1 2c       	mov	r15, r1
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	06 2f       	mov	r16, r22
     fc2:	11 2d       	mov	r17, r1
     fc4:	ae 0c       	add	r10, r14
     fc6:	bf 1c       	adc	r11, r15
     fc8:	c0 1e       	adc	r12, r16
     fca:	d1 1e       	adc	r13, r17
     fcc:	ca 01       	movw	r24, r20
     fce:	aa 27       	eor	r26, r26
     fd0:	bb 27       	eor	r27, r27
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	6a 0d       	add	r22, r10
     fd8:	7b 1d       	adc	r23, r11
     fda:	8c 1d       	adc	r24, r12
     fdc:	9d 1d       	adc	r25, r13
     fde:	69 8c       	ldd	r6, Y+25	; 0x19
     fe0:	7a 8c       	ldd	r7, Y+26	; 0x1a
     fe2:	8b 8c       	ldd	r8, Y+27	; 0x1b
     fe4:	9c 8c       	ldd	r9, Y+28	; 0x1c
     fe6:	66 16       	cp	r6, r22
     fe8:	77 06       	cpc	r7, r23
     fea:	88 06       	cpc	r8, r24
     fec:	99 06       	cpc	r9, r25
     fee:	40 f1       	brcs	.+80     	; 0x1040 <__stack+0x7e1>
     ff0:	66 15       	cp	r22, r6
     ff2:	77 05       	cpc	r23, r7
     ff4:	88 05       	cpc	r24, r8
     ff6:	99 05       	cpc	r25, r9
     ff8:	09 f0       	breq	.+2      	; 0xffc <__stack+0x79d>
     ffa:	43 c0       	rjmp	.+134    	; 0x1082 <__stack+0x823>
     ffc:	d9 01       	movw	r26, r18
     ffe:	99 27       	eor	r25, r25
    1000:	88 27       	eor	r24, r24
    1002:	69 96       	adiw	r28, 0x19	; 25
    1004:	2c ad       	ldd	r18, Y+60	; 0x3c
    1006:	3d ad       	ldd	r19, Y+61	; 0x3d
    1008:	4e ad       	ldd	r20, Y+62	; 0x3e
    100a:	5f ad       	ldd	r21, Y+63	; 0x3f
    100c:	69 97       	sbiw	r28, 0x19	; 25
    100e:	40 70       	andi	r20, 0x00	; 0
    1010:	50 70       	andi	r21, 0x00	; 0
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	a4 1f       	adc	r26, r20
    1018:	b5 1f       	adc	r27, r21
    101a:	2d a5       	ldd	r18, Y+45	; 0x2d
    101c:	3e a5       	ldd	r19, Y+46	; 0x2e
    101e:	4f a5       	ldd	r20, Y+47	; 0x2f
    1020:	58 a9       	ldd	r21, Y+48	; 0x30
    1022:	6e 96       	adiw	r28, 0x1e	; 30
    1024:	0f ac       	ldd	r0, Y+63	; 0x3f
    1026:	6e 97       	sbiw	r28, 0x1e	; 30
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <__stack+0x7d3>
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	44 1f       	adc	r20, r20
    1030:	55 1f       	adc	r21, r21
    1032:	0a 94       	dec	r0
    1034:	d2 f7       	brpl	.-12     	; 0x102a <__stack+0x7cb>
    1036:	28 17       	cp	r18, r24
    1038:	39 07       	cpc	r19, r25
    103a:	4a 07       	cpc	r20, r26
    103c:	5b 07       	cpc	r21, r27
    103e:	08 f5       	brcc	.+66     	; 0x1082 <__stack+0x823>
    1040:	09 a9       	ldd	r16, Y+49	; 0x31
    1042:	1a a9       	ldd	r17, Y+50	; 0x32
    1044:	2b a9       	ldd	r18, Y+51	; 0x33
    1046:	3c a9       	ldd	r19, Y+52	; 0x34
    1048:	01 50       	subi	r16, 0x01	; 1
    104a:	10 40       	sbci	r17, 0x00	; 0
    104c:	20 40       	sbci	r18, 0x00	; 0
    104e:	30 40       	sbci	r19, 0x00	; 0
    1050:	09 ab       	std	Y+49, r16	; 0x31
    1052:	1a ab       	std	Y+50, r17	; 0x32
    1054:	2b ab       	std	Y+51, r18	; 0x33
    1056:	3c ab       	std	Y+52, r19	; 0x34
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <__stack+0x823>
    105a:	66 24       	eor	r6, r6
    105c:	77 24       	eor	r7, r7
    105e:	43 01       	movw	r8, r6
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	29 ab       	std	Y+49, r18	; 0x31
    106a:	3a ab       	std	Y+50, r19	; 0x32
    106c:	4b ab       	std	Y+51, r20	; 0x33
    106e:	5c ab       	std	Y+52, r21	; 0x34
    1070:	0b c0       	rjmp	.+22     	; 0x1088 <__stack+0x829>
    1072:	66 24       	eor	r6, r6
    1074:	77 24       	eor	r7, r7
    1076:	43 01       	movw	r8, r6
    1078:	19 aa       	std	Y+49, r1	; 0x31
    107a:	1a aa       	std	Y+50, r1	; 0x32
    107c:	1b aa       	std	Y+51, r1	; 0x33
    107e:	1c aa       	std	Y+52, r1	; 0x34
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <__stack+0x829>
    1082:	66 24       	eor	r6, r6
    1084:	77 24       	eor	r7, r7
    1086:	43 01       	movw	r8, r6
    1088:	fe 01       	movw	r30, r28
    108a:	71 96       	adiw	r30, 0x11	; 17
    108c:	88 e0       	ldi	r24, 0x08	; 8
    108e:	df 01       	movw	r26, r30
    1090:	1d 92       	st	X+, r1
    1092:	8a 95       	dec	r24
    1094:	e9 f7       	brne	.-6      	; 0x1090 <__stack+0x831>
    1096:	a9 a8       	ldd	r10, Y+49	; 0x31
    1098:	ba a8       	ldd	r11, Y+50	; 0x32
    109a:	cb a8       	ldd	r12, Y+51	; 0x33
    109c:	dc a8       	ldd	r13, Y+52	; 0x34
    109e:	a9 8a       	std	Y+17, r10	; 0x11
    10a0:	ba 8a       	std	Y+18, r11	; 0x12
    10a2:	cb 8a       	std	Y+19, r12	; 0x13
    10a4:	dc 8a       	std	Y+20, r13	; 0x14
    10a6:	6d 8a       	std	Y+21, r6	; 0x15
    10a8:	7e 8a       	std	Y+22, r7	; 0x16
    10aa:	8f 8a       	std	Y+23, r8	; 0x17
    10ac:	98 8e       	std	Y+24, r9	; 0x18
    10ae:	29 a9       	ldd	r18, Y+49	; 0x31
    10b0:	3a 89       	ldd	r19, Y+18	; 0x12
    10b2:	4b 89       	ldd	r20, Y+19	; 0x13
    10b4:	5c 89       	ldd	r21, Y+20	; 0x14
    10b6:	66 2d       	mov	r22, r6
    10b8:	7e 89       	ldd	r23, Y+22	; 0x16
    10ba:	8f 89       	ldd	r24, Y+23	; 0x17
    10bc:	98 8d       	ldd	r25, Y+24	; 0x18
    10be:	c2 5a       	subi	r28, 0xA2	; 162
    10c0:	df 4f       	sbci	r29, 0xFF	; 255
    10c2:	e2 e1       	ldi	r30, 0x12	; 18
    10c4:	0c 94 9e 63 	jmp	0xc73c	; 0xc73c <__epilogue_restores__>

000010c8 <__umoddi3>:
    10c8:	ab e5       	ldi	r26, 0x5B	; 91
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ea e6       	ldi	r30, 0x6A	; 106
    10ce:	f8 e0       	ldi	r31, 0x08	; 8
    10d0:	0c 94 82 63 	jmp	0xc704	; 0xc704 <__prologue_saves__>
    10d4:	a8 e0       	ldi	r26, 0x08	; 8
    10d6:	4e 01       	movw	r8, r28
    10d8:	08 94       	sec
    10da:	81 1c       	adc	r8, r1
    10dc:	91 1c       	adc	r9, r1
    10de:	f4 01       	movw	r30, r8
    10e0:	6a 2e       	mov	r6, r26
    10e2:	11 92       	st	Z+, r1
    10e4:	6a 94       	dec	r6
    10e6:	e9 f7       	brne	.-6      	; 0x10e2 <__umoddi3+0x1a>
    10e8:	29 83       	std	Y+1, r18	; 0x01
    10ea:	3a 83       	std	Y+2, r19	; 0x02
    10ec:	4b 83       	std	Y+3, r20	; 0x03
    10ee:	5c 83       	std	Y+4, r21	; 0x04
    10f0:	6d 83       	std	Y+5, r22	; 0x05
    10f2:	7e 83       	std	Y+6, r23	; 0x06
    10f4:	8f 83       	std	Y+7, r24	; 0x07
    10f6:	98 87       	std	Y+8, r25	; 0x08
    10f8:	ce 01       	movw	r24, r28
    10fa:	09 96       	adiw	r24, 0x09	; 9
    10fc:	fc 01       	movw	r30, r24
    10fe:	11 92       	st	Z+, r1
    1100:	aa 95       	dec	r26
    1102:	e9 f7       	brne	.-6      	; 0x10fe <__umoddi3+0x36>
    1104:	a9 86       	std	Y+9, r10	; 0x09
    1106:	ba 86       	std	Y+10, r11	; 0x0a
    1108:	cb 86       	std	Y+11, r12	; 0x0b
    110a:	dc 86       	std	Y+12, r13	; 0x0c
    110c:	ed 86       	std	Y+13, r14	; 0x0d
    110e:	fe 86       	std	Y+14, r15	; 0x0e
    1110:	0f 87       	std	Y+15, r16	; 0x0f
    1112:	18 8b       	std	Y+16, r17	; 0x10
    1114:	29 84       	ldd	r2, Y+9	; 0x09
    1116:	3a 84       	ldd	r3, Y+10	; 0x0a
    1118:	4b 84       	ldd	r4, Y+11	; 0x0b
    111a:	5c 84       	ldd	r5, Y+12	; 0x0c
    111c:	ad 84       	ldd	r10, Y+13	; 0x0d
    111e:	be 84       	ldd	r11, Y+14	; 0x0e
    1120:	cf 84       	ldd	r12, Y+15	; 0x0f
    1122:	d8 88       	ldd	r13, Y+16	; 0x10
    1124:	29 81       	ldd	r18, Y+1	; 0x01
    1126:	3a 81       	ldd	r19, Y+2	; 0x02
    1128:	4b 81       	ldd	r20, Y+3	; 0x03
    112a:	5c 81       	ldd	r21, Y+4	; 0x04
    112c:	69 96       	adiw	r28, 0x19	; 25
    112e:	2f af       	std	Y+63, r18	; 0x3f
    1130:	69 97       	sbiw	r28, 0x19	; 25
    1132:	6a 96       	adiw	r28, 0x1a	; 26
    1134:	3f af       	std	Y+63, r19	; 0x3f
    1136:	6a 97       	sbiw	r28, 0x1a	; 26
    1138:	6b 96       	adiw	r28, 0x1b	; 27
    113a:	4f af       	std	Y+63, r20	; 0x3f
    113c:	6b 97       	sbiw	r28, 0x1b	; 27
    113e:	6c 96       	adiw	r28, 0x1c	; 28
    1140:	5f af       	std	Y+63, r21	; 0x3f
    1142:	6c 97       	sbiw	r28, 0x1c	; 28
    1144:	6c 96       	adiw	r28, 0x1c	; 28
    1146:	6c ac       	ldd	r6, Y+60	; 0x3c
    1148:	7d ac       	ldd	r7, Y+61	; 0x3d
    114a:	8e ac       	ldd	r8, Y+62	; 0x3e
    114c:	9f ac       	ldd	r9, Y+63	; 0x3f
    114e:	6c 97       	sbiw	r28, 0x1c	; 28
    1150:	69 aa       	std	Y+49, r6	; 0x31
    1152:	7a aa       	std	Y+50, r7	; 0x32
    1154:	8b aa       	std	Y+51, r8	; 0x33
    1156:	9c aa       	std	Y+52, r9	; 0x34
    1158:	6d 81       	ldd	r22, Y+5	; 0x05
    115a:	7e 81       	ldd	r23, Y+6	; 0x06
    115c:	8f 81       	ldd	r24, Y+7	; 0x07
    115e:	98 85       	ldd	r25, Y+8	; 0x08
    1160:	3b 01       	movw	r6, r22
    1162:	4c 01       	movw	r8, r24
    1164:	6d aa       	std	Y+53, r6	; 0x35
    1166:	7e aa       	std	Y+54, r7	; 0x36
    1168:	8f aa       	std	Y+55, r8	; 0x37
    116a:	98 ae       	std	Y+56, r9	; 0x38
    116c:	a1 14       	cp	r10, r1
    116e:	b1 04       	cpc	r11, r1
    1170:	c1 04       	cpc	r12, r1
    1172:	d1 04       	cpc	r13, r1
    1174:	09 f0       	breq	.+2      	; 0x1178 <__umoddi3+0xb0>
    1176:	04 c3       	rjmp	.+1544   	; 0x1780 <__umoddi3+0x6b8>
    1178:	62 14       	cp	r6, r2
    117a:	73 04       	cpc	r7, r3
    117c:	84 04       	cpc	r8, r4
    117e:	95 04       	cpc	r9, r5
    1180:	08 f0       	brcs	.+2      	; 0x1184 <__umoddi3+0xbc>
    1182:	00 c1       	rjmp	.+512    	; 0x1384 <__umoddi3+0x2bc>
    1184:	00 e0       	ldi	r16, 0x00	; 0
    1186:	20 16       	cp	r2, r16
    1188:	00 e0       	ldi	r16, 0x00	; 0
    118a:	30 06       	cpc	r3, r16
    118c:	01 e0       	ldi	r16, 0x01	; 1
    118e:	40 06       	cpc	r4, r16
    1190:	00 e0       	ldi	r16, 0x00	; 0
    1192:	50 06       	cpc	r5, r16
    1194:	88 f4       	brcc	.+34     	; 0x11b8 <__umoddi3+0xf0>
    1196:	1f ef       	ldi	r17, 0xFF	; 255
    1198:	21 16       	cp	r2, r17
    119a:	31 04       	cpc	r3, r1
    119c:	41 04       	cpc	r4, r1
    119e:	51 04       	cpc	r5, r1
    11a0:	39 f0       	breq	.+14     	; 0x11b0 <__umoddi3+0xe8>
    11a2:	30 f0       	brcs	.+12     	; 0x11b0 <__umoddi3+0xe8>
    11a4:	88 e0       	ldi	r24, 0x08	; 8
    11a6:	e8 2e       	mov	r14, r24
    11a8:	f1 2c       	mov	r15, r1
    11aa:	01 2d       	mov	r16, r1
    11ac:	11 2d       	mov	r17, r1
    11ae:	18 c0       	rjmp	.+48     	; 0x11e0 <__umoddi3+0x118>
    11b0:	ee 24       	eor	r14, r14
    11b2:	ff 24       	eor	r15, r15
    11b4:	87 01       	movw	r16, r14
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <__umoddi3+0x118>
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	24 16       	cp	r2, r20
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	34 06       	cpc	r3, r20
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	44 06       	cpc	r4, r20
    11c4:	41 e0       	ldi	r20, 0x01	; 1
    11c6:	54 06       	cpc	r5, r20
    11c8:	30 f0       	brcs	.+12     	; 0x11d6 <__umoddi3+0x10e>
    11ca:	b8 e1       	ldi	r27, 0x18	; 24
    11cc:	eb 2e       	mov	r14, r27
    11ce:	f1 2c       	mov	r15, r1
    11d0:	01 2d       	mov	r16, r1
    11d2:	11 2d       	mov	r17, r1
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <__umoddi3+0x118>
    11d6:	a0 e1       	ldi	r26, 0x10	; 16
    11d8:	ea 2e       	mov	r14, r26
    11da:	f1 2c       	mov	r15, r1
    11dc:	01 2d       	mov	r16, r1
    11de:	11 2d       	mov	r17, r1
    11e0:	d2 01       	movw	r26, r4
    11e2:	c1 01       	movw	r24, r2
    11e4:	0e 2c       	mov	r0, r14
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <__umoddi3+0x128>
    11e8:	b6 95       	lsr	r27
    11ea:	a7 95       	ror	r26
    11ec:	97 95       	ror	r25
    11ee:	87 95       	ror	r24
    11f0:	0a 94       	dec	r0
    11f2:	d2 f7       	brpl	.-12     	; 0x11e8 <__umoddi3+0x120>
    11f4:	88 59       	subi	r24, 0x98	; 152
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	dc 01       	movw	r26, r24
    11fa:	2c 91       	ld	r18, X
    11fc:	80 e2       	ldi	r24, 0x20	; 32
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a0 e0       	ldi	r26, 0x00	; 0
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	8e 19       	sub	r24, r14
    1206:	9f 09       	sbc	r25, r15
    1208:	a0 0b       	sbc	r26, r16
    120a:	b1 0b       	sbc	r27, r17
    120c:	5c 01       	movw	r10, r24
    120e:	6d 01       	movw	r12, r26
    1210:	a2 1a       	sub	r10, r18
    1212:	b1 08       	sbc	r11, r1
    1214:	c1 08       	sbc	r12, r1
    1216:	d1 08       	sbc	r13, r1
    1218:	a9 ae       	std	Y+57, r10	; 0x39
    121a:	ba ae       	std	Y+58, r11	; 0x3a
    121c:	cb ae       	std	Y+59, r12	; 0x3b
    121e:	dc ae       	std	Y+60, r13	; 0x3c
    1220:	a1 14       	cp	r10, r1
    1222:	b1 04       	cpc	r11, r1
    1224:	c1 04       	cpc	r12, r1
    1226:	d1 04       	cpc	r13, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <__umoddi3+0x164>
    122a:	3f c0       	rjmp	.+126    	; 0x12aa <__umoddi3+0x1e2>
    122c:	69 ad       	ldd	r22, Y+57	; 0x39
    122e:	06 2e       	mov	r0, r22
    1230:	04 c0       	rjmp	.+8      	; 0x123a <__umoddi3+0x172>
    1232:	22 0c       	add	r2, r2
    1234:	33 1c       	adc	r3, r3
    1236:	44 1c       	adc	r4, r4
    1238:	55 1c       	adc	r5, r5
    123a:	0a 94       	dec	r0
    123c:	d2 f7       	brpl	.-12     	; 0x1232 <__umoddi3+0x16a>
    123e:	a4 01       	movw	r20, r8
    1240:	93 01       	movw	r18, r6
    1242:	06 2e       	mov	r0, r22
    1244:	04 c0       	rjmp	.+8      	; 0x124e <__umoddi3+0x186>
    1246:	22 0f       	add	r18, r18
    1248:	33 1f       	adc	r19, r19
    124a:	44 1f       	adc	r20, r20
    124c:	55 1f       	adc	r21, r21
    124e:	0a 94       	dec	r0
    1250:	d2 f7       	brpl	.-12     	; 0x1246 <__umoddi3+0x17e>
    1252:	80 e2       	ldi	r24, 0x20	; 32
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	8a 19       	sub	r24, r10
    1258:	9b 09       	sbc	r25, r11
    125a:	6c 96       	adiw	r28, 0x1c	; 28
    125c:	cc ac       	ldd	r12, Y+60	; 0x3c
    125e:	dd ac       	ldd	r13, Y+61	; 0x3d
    1260:	ee ac       	ldd	r14, Y+62	; 0x3e
    1262:	ff ac       	ldd	r15, Y+63	; 0x3f
    1264:	6c 97       	sbiw	r28, 0x1c	; 28
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <__umoddi3+0x1a8>
    1268:	f6 94       	lsr	r15
    126a:	e7 94       	ror	r14
    126c:	d7 94       	ror	r13
    126e:	c7 94       	ror	r12
    1270:	8a 95       	dec	r24
    1272:	d2 f7       	brpl	.-12     	; 0x1268 <__umoddi3+0x1a0>
    1274:	87 01       	movw	r16, r14
    1276:	76 01       	movw	r14, r12
    1278:	e2 2a       	or	r14, r18
    127a:	f3 2a       	or	r15, r19
    127c:	04 2b       	or	r16, r20
    127e:	15 2b       	or	r17, r21
    1280:	ed aa       	std	Y+53, r14	; 0x35
    1282:	fe aa       	std	Y+54, r15	; 0x36
    1284:	0f ab       	std	Y+55, r16	; 0x37
    1286:	18 af       	std	Y+56, r17	; 0x38
    1288:	6c 96       	adiw	r28, 0x1c	; 28
    128a:	8c ad       	ldd	r24, Y+60	; 0x3c
    128c:	9d ad       	ldd	r25, Y+61	; 0x3d
    128e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1290:	bf ad       	ldd	r27, Y+63	; 0x3f
    1292:	6c 97       	sbiw	r28, 0x1c	; 28
    1294:	04 c0       	rjmp	.+8      	; 0x129e <__umoddi3+0x1d6>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	aa 1f       	adc	r26, r26
    129c:	bb 1f       	adc	r27, r27
    129e:	6a 95       	dec	r22
    12a0:	d2 f7       	brpl	.-12     	; 0x1296 <__umoddi3+0x1ce>
    12a2:	89 ab       	std	Y+49, r24	; 0x31
    12a4:	9a ab       	std	Y+50, r25	; 0x32
    12a6:	ab ab       	std	Y+51, r26	; 0x33
    12a8:	bc ab       	std	Y+52, r27	; 0x34
    12aa:	32 01       	movw	r6, r4
    12ac:	88 24       	eor	r8, r8
    12ae:	99 24       	eor	r9, r9
    12b0:	b2 01       	movw	r22, r4
    12b2:	a1 01       	movw	r20, r2
    12b4:	60 70       	andi	r22, 0x00	; 0
    12b6:	70 70       	andi	r23, 0x00	; 0
    12b8:	21 96       	adiw	r28, 0x01	; 1
    12ba:	4c af       	std	Y+60, r20	; 0x3c
    12bc:	5d af       	std	Y+61, r21	; 0x3d
    12be:	6e af       	std	Y+62, r22	; 0x3e
    12c0:	7f af       	std	Y+63, r23	; 0x3f
    12c2:	21 97       	sbiw	r28, 0x01	; 1
    12c4:	6d a9       	ldd	r22, Y+53	; 0x35
    12c6:	7e a9       	ldd	r23, Y+54	; 0x36
    12c8:	8f a9       	ldd	r24, Y+55	; 0x37
    12ca:	98 ad       	ldd	r25, Y+56	; 0x38
    12cc:	a4 01       	movw	r20, r8
    12ce:	93 01       	movw	r18, r6
    12d0:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    12d4:	7b 01       	movw	r14, r22
    12d6:	8c 01       	movw	r16, r24
    12d8:	6d a9       	ldd	r22, Y+53	; 0x35
    12da:	7e a9       	ldd	r23, Y+54	; 0x36
    12dc:	8f a9       	ldd	r24, Y+55	; 0x37
    12de:	98 ad       	ldd	r25, Y+56	; 0x38
    12e0:	a4 01       	movw	r20, r8
    12e2:	93 01       	movw	r18, r6
    12e4:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    12e8:	ca 01       	movw	r24, r20
    12ea:	b9 01       	movw	r22, r18
    12ec:	21 96       	adiw	r28, 0x01	; 1
    12ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    12f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    12f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    12f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    12f6:	21 97       	sbiw	r28, 0x01	; 1
    12f8:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    12fc:	9b 01       	movw	r18, r22
    12fe:	ac 01       	movw	r20, r24
    1300:	87 01       	movw	r16, r14
    1302:	ff 24       	eor	r15, r15
    1304:	ee 24       	eor	r14, r14
    1306:	a9 a8       	ldd	r10, Y+49	; 0x31
    1308:	ba a8       	ldd	r11, Y+50	; 0x32
    130a:	cb a8       	ldd	r12, Y+51	; 0x33
    130c:	dc a8       	ldd	r13, Y+52	; 0x34
    130e:	c6 01       	movw	r24, r12
    1310:	aa 27       	eor	r26, r26
    1312:	bb 27       	eor	r27, r27
    1314:	57 01       	movw	r10, r14
    1316:	68 01       	movw	r12, r16
    1318:	a8 2a       	or	r10, r24
    131a:	b9 2a       	or	r11, r25
    131c:	ca 2a       	or	r12, r26
    131e:	db 2a       	or	r13, r27
    1320:	a2 16       	cp	r10, r18
    1322:	b3 06       	cpc	r11, r19
    1324:	c4 06       	cpc	r12, r20
    1326:	d5 06       	cpc	r13, r21
    1328:	90 f4       	brcc	.+36     	; 0x134e <__umoddi3+0x286>
    132a:	a2 0c       	add	r10, r2
    132c:	b3 1c       	adc	r11, r3
    132e:	c4 1c       	adc	r12, r4
    1330:	d5 1c       	adc	r13, r5
    1332:	a2 14       	cp	r10, r2
    1334:	b3 04       	cpc	r11, r3
    1336:	c4 04       	cpc	r12, r4
    1338:	d5 04       	cpc	r13, r5
    133a:	48 f0       	brcs	.+18     	; 0x134e <__umoddi3+0x286>
    133c:	a2 16       	cp	r10, r18
    133e:	b3 06       	cpc	r11, r19
    1340:	c4 06       	cpc	r12, r20
    1342:	d5 06       	cpc	r13, r21
    1344:	20 f4       	brcc	.+8      	; 0x134e <__umoddi3+0x286>
    1346:	a2 0c       	add	r10, r2
    1348:	b3 1c       	adc	r11, r3
    134a:	c4 1c       	adc	r12, r4
    134c:	d5 1c       	adc	r13, r5
    134e:	a2 1a       	sub	r10, r18
    1350:	b3 0a       	sbc	r11, r19
    1352:	c4 0a       	sbc	r12, r20
    1354:	d5 0a       	sbc	r13, r21
    1356:	c6 01       	movw	r24, r12
    1358:	b5 01       	movw	r22, r10
    135a:	a4 01       	movw	r20, r8
    135c:	93 01       	movw	r18, r6
    135e:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    1362:	7b 01       	movw	r14, r22
    1364:	8c 01       	movw	r16, r24
    1366:	c6 01       	movw	r24, r12
    1368:	b5 01       	movw	r22, r10
    136a:	a4 01       	movw	r20, r8
    136c:	93 01       	movw	r18, r6
    136e:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    1372:	ca 01       	movw	r24, r20
    1374:	b9 01       	movw	r22, r18
    1376:	21 96       	adiw	r28, 0x01	; 1
    1378:	2c ad       	ldd	r18, Y+60	; 0x3c
    137a:	3d ad       	ldd	r19, Y+61	; 0x3d
    137c:	4e ad       	ldd	r20, Y+62	; 0x3e
    137e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1380:	21 97       	sbiw	r28, 0x01	; 1
    1382:	ba c1       	rjmp	.+884    	; 0x16f8 <__umoddi3+0x630>
    1384:	21 14       	cp	r2, r1
    1386:	31 04       	cpc	r3, r1
    1388:	41 04       	cpc	r4, r1
    138a:	51 04       	cpc	r5, r1
    138c:	71 f4       	brne	.+28     	; 0x13aa <__umoddi3+0x2e2>
    138e:	61 e0       	ldi	r22, 0x01	; 1
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    13a2:	c9 01       	movw	r24, r18
    13a4:	da 01       	movw	r26, r20
    13a6:	1c 01       	movw	r2, r24
    13a8:	2d 01       	movw	r4, r26
    13aa:	00 e0       	ldi	r16, 0x00	; 0
    13ac:	20 16       	cp	r2, r16
    13ae:	00 e0       	ldi	r16, 0x00	; 0
    13b0:	30 06       	cpc	r3, r16
    13b2:	01 e0       	ldi	r16, 0x01	; 1
    13b4:	40 06       	cpc	r4, r16
    13b6:	00 e0       	ldi	r16, 0x00	; 0
    13b8:	50 06       	cpc	r5, r16
    13ba:	88 f4       	brcc	.+34     	; 0x13de <__umoddi3+0x316>
    13bc:	1f ef       	ldi	r17, 0xFF	; 255
    13be:	21 16       	cp	r2, r17
    13c0:	31 04       	cpc	r3, r1
    13c2:	41 04       	cpc	r4, r1
    13c4:	51 04       	cpc	r5, r1
    13c6:	39 f0       	breq	.+14     	; 0x13d6 <__umoddi3+0x30e>
    13c8:	30 f0       	brcs	.+12     	; 0x13d6 <__umoddi3+0x30e>
    13ca:	68 e0       	ldi	r22, 0x08	; 8
    13cc:	e6 2e       	mov	r14, r22
    13ce:	f1 2c       	mov	r15, r1
    13d0:	01 2d       	mov	r16, r1
    13d2:	11 2d       	mov	r17, r1
    13d4:	18 c0       	rjmp	.+48     	; 0x1406 <__umoddi3+0x33e>
    13d6:	ee 24       	eor	r14, r14
    13d8:	ff 24       	eor	r15, r15
    13da:	87 01       	movw	r16, r14
    13dc:	14 c0       	rjmp	.+40     	; 0x1406 <__umoddi3+0x33e>
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	24 16       	cp	r2, r20
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	34 06       	cpc	r3, r20
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	44 06       	cpc	r4, r20
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	54 06       	cpc	r5, r20
    13ee:	30 f0       	brcs	.+12     	; 0x13fc <__umoddi3+0x334>
    13f0:	58 e1       	ldi	r21, 0x18	; 24
    13f2:	e5 2e       	mov	r14, r21
    13f4:	f1 2c       	mov	r15, r1
    13f6:	01 2d       	mov	r16, r1
    13f8:	11 2d       	mov	r17, r1
    13fa:	05 c0       	rjmp	.+10     	; 0x1406 <__umoddi3+0x33e>
    13fc:	40 e1       	ldi	r20, 0x10	; 16
    13fe:	e4 2e       	mov	r14, r20
    1400:	f1 2c       	mov	r15, r1
    1402:	01 2d       	mov	r16, r1
    1404:	11 2d       	mov	r17, r1
    1406:	d2 01       	movw	r26, r4
    1408:	c1 01       	movw	r24, r2
    140a:	0e 2c       	mov	r0, r14
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <__umoddi3+0x34e>
    140e:	b6 95       	lsr	r27
    1410:	a7 95       	ror	r26
    1412:	97 95       	ror	r25
    1414:	87 95       	ror	r24
    1416:	0a 94       	dec	r0
    1418:	d2 f7       	brpl	.-12     	; 0x140e <__umoddi3+0x346>
    141a:	88 59       	subi	r24, 0x98	; 152
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	dc 01       	movw	r26, r24
    1420:	2c 91       	ld	r18, X
    1422:	30 e2       	ldi	r19, 0x20	; 32
    1424:	a3 2e       	mov	r10, r19
    1426:	b1 2c       	mov	r11, r1
    1428:	c1 2c       	mov	r12, r1
    142a:	d1 2c       	mov	r13, r1
    142c:	d6 01       	movw	r26, r12
    142e:	c5 01       	movw	r24, r10
    1430:	8e 19       	sub	r24, r14
    1432:	9f 09       	sbc	r25, r15
    1434:	a0 0b       	sbc	r26, r16
    1436:	b1 0b       	sbc	r27, r17
    1438:	7c 01       	movw	r14, r24
    143a:	8d 01       	movw	r16, r26
    143c:	e2 1a       	sub	r14, r18
    143e:	f1 08       	sbc	r15, r1
    1440:	01 09       	sbc	r16, r1
    1442:	11 09       	sbc	r17, r1
    1444:	e9 ae       	std	Y+57, r14	; 0x39
    1446:	fa ae       	std	Y+58, r15	; 0x3a
    1448:	0b af       	std	Y+59, r16	; 0x3b
    144a:	1c af       	std	Y+60, r17	; 0x3c
    144c:	e1 14       	cp	r14, r1
    144e:	f1 04       	cpc	r15, r1
    1450:	01 05       	cpc	r16, r1
    1452:	11 05       	cpc	r17, r1
    1454:	39 f4       	brne	.+14     	; 0x1464 <__umoddi3+0x39c>
    1456:	64 01       	movw	r12, r8
    1458:	53 01       	movw	r10, r6
    145a:	a2 18       	sub	r10, r2
    145c:	b3 08       	sbc	r11, r3
    145e:	c4 08       	sbc	r12, r4
    1460:	d5 08       	sbc	r13, r5
    1462:	e2 c0       	rjmp	.+452    	; 0x1628 <__umoddi3+0x560>
    1464:	f9 ac       	ldd	r15, Y+57	; 0x39
    1466:	68 96       	adiw	r28, 0x18	; 24
    1468:	ff ae       	std	Y+63, r15	; 0x3f
    146a:	68 97       	sbiw	r28, 0x18	; 24
    146c:	0f 2c       	mov	r0, r15
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <__umoddi3+0x3b0>
    1470:	22 0c       	add	r2, r2
    1472:	33 1c       	adc	r3, r3
    1474:	44 1c       	adc	r4, r4
    1476:	55 1c       	adc	r5, r5
    1478:	0a 94       	dec	r0
    147a:	d2 f7       	brpl	.-12     	; 0x1470 <__umoddi3+0x3a8>
    147c:	8a 2d       	mov	r24, r10
    147e:	8f 19       	sub	r24, r15
    1480:	64 01       	movw	r12, r8
    1482:	53 01       	movw	r10, r6
    1484:	08 2e       	mov	r0, r24
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <__umoddi3+0x3c8>
    1488:	d6 94       	lsr	r13
    148a:	c7 94       	ror	r12
    148c:	b7 94       	ror	r11
    148e:	a7 94       	ror	r10
    1490:	0a 94       	dec	r0
    1492:	d2 f7       	brpl	.-12     	; 0x1488 <__umoddi3+0x3c0>
    1494:	a4 01       	movw	r20, r8
    1496:	93 01       	movw	r18, r6
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <__umoddi3+0x3da>
    149a:	22 0f       	add	r18, r18
    149c:	33 1f       	adc	r19, r19
    149e:	44 1f       	adc	r20, r20
    14a0:	55 1f       	adc	r21, r21
    14a2:	fa 94       	dec	r15
    14a4:	d2 f7       	brpl	.-12     	; 0x149a <__umoddi3+0x3d2>
    14a6:	6c 96       	adiw	r28, 0x1c	; 28
    14a8:	6c ac       	ldd	r6, Y+60	; 0x3c
    14aa:	7d ac       	ldd	r7, Y+61	; 0x3d
    14ac:	8e ac       	ldd	r8, Y+62	; 0x3e
    14ae:	9f ac       	ldd	r9, Y+63	; 0x3f
    14b0:	6c 97       	sbiw	r28, 0x1c	; 28
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <__umoddi3+0x3f4>
    14b4:	96 94       	lsr	r9
    14b6:	87 94       	ror	r8
    14b8:	77 94       	ror	r7
    14ba:	67 94       	ror	r6
    14bc:	8a 95       	dec	r24
    14be:	d2 f7       	brpl	.-12     	; 0x14b4 <__umoddi3+0x3ec>
    14c0:	84 01       	movw	r16, r8
    14c2:	73 01       	movw	r14, r6
    14c4:	e2 2a       	or	r14, r18
    14c6:	f3 2a       	or	r15, r19
    14c8:	04 2b       	or	r16, r20
    14ca:	15 2b       	or	r17, r21
    14cc:	ed a6       	std	Y+45, r14	; 0x2d
    14ce:	fe a6       	std	Y+46, r15	; 0x2e
    14d0:	0f a7       	std	Y+47, r16	; 0x2f
    14d2:	18 ab       	std	Y+48, r17	; 0x30
    14d4:	32 01       	movw	r6, r4
    14d6:	88 24       	eor	r8, r8
    14d8:	99 24       	eor	r9, r9
    14da:	b2 01       	movw	r22, r4
    14dc:	a1 01       	movw	r20, r2
    14de:	60 70       	andi	r22, 0x00	; 0
    14e0:	70 70       	andi	r23, 0x00	; 0
    14e2:	25 96       	adiw	r28, 0x05	; 5
    14e4:	4c af       	std	Y+60, r20	; 0x3c
    14e6:	5d af       	std	Y+61, r21	; 0x3d
    14e8:	6e af       	std	Y+62, r22	; 0x3e
    14ea:	7f af       	std	Y+63, r23	; 0x3f
    14ec:	25 97       	sbiw	r28, 0x05	; 5
    14ee:	c6 01       	movw	r24, r12
    14f0:	b5 01       	movw	r22, r10
    14f2:	a4 01       	movw	r20, r8
    14f4:	93 01       	movw	r18, r6
    14f6:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    14fa:	7b 01       	movw	r14, r22
    14fc:	8c 01       	movw	r16, r24
    14fe:	c6 01       	movw	r24, r12
    1500:	b5 01       	movw	r22, r10
    1502:	a4 01       	movw	r20, r8
    1504:	93 01       	movw	r18, r6
    1506:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    150a:	ca 01       	movw	r24, r20
    150c:	b9 01       	movw	r22, r18
    150e:	25 96       	adiw	r28, 0x05	; 5
    1510:	2c ad       	ldd	r18, Y+60	; 0x3c
    1512:	3d ad       	ldd	r19, Y+61	; 0x3d
    1514:	4e ad       	ldd	r20, Y+62	; 0x3e
    1516:	5f ad       	ldd	r21, Y+63	; 0x3f
    1518:	25 97       	sbiw	r28, 0x05	; 5
    151a:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	87 01       	movw	r16, r14
    1524:	ff 24       	eor	r15, r15
    1526:	ee 24       	eor	r14, r14
    1528:	ad a4       	ldd	r10, Y+45	; 0x2d
    152a:	be a4       	ldd	r11, Y+46	; 0x2e
    152c:	cf a4       	ldd	r12, Y+47	; 0x2f
    152e:	d8 a8       	ldd	r13, Y+48	; 0x30
    1530:	c6 01       	movw	r24, r12
    1532:	aa 27       	eor	r26, r26
    1534:	bb 27       	eor	r27, r27
    1536:	5c 01       	movw	r10, r24
    1538:	6d 01       	movw	r12, r26
    153a:	ae 28       	or	r10, r14
    153c:	bf 28       	or	r11, r15
    153e:	c0 2a       	or	r12, r16
    1540:	d1 2a       	or	r13, r17
    1542:	a2 16       	cp	r10, r18
    1544:	b3 06       	cpc	r11, r19
    1546:	c4 06       	cpc	r12, r20
    1548:	d5 06       	cpc	r13, r21
    154a:	90 f4       	brcc	.+36     	; 0x1570 <__umoddi3+0x4a8>
    154c:	a2 0c       	add	r10, r2
    154e:	b3 1c       	adc	r11, r3
    1550:	c4 1c       	adc	r12, r4
    1552:	d5 1c       	adc	r13, r5
    1554:	a2 14       	cp	r10, r2
    1556:	b3 04       	cpc	r11, r3
    1558:	c4 04       	cpc	r12, r4
    155a:	d5 04       	cpc	r13, r5
    155c:	48 f0       	brcs	.+18     	; 0x1570 <__umoddi3+0x4a8>
    155e:	a2 16       	cp	r10, r18
    1560:	b3 06       	cpc	r11, r19
    1562:	c4 06       	cpc	r12, r20
    1564:	d5 06       	cpc	r13, r21
    1566:	20 f4       	brcc	.+8      	; 0x1570 <__umoddi3+0x4a8>
    1568:	a2 0c       	add	r10, r2
    156a:	b3 1c       	adc	r11, r3
    156c:	c4 1c       	adc	r12, r4
    156e:	d5 1c       	adc	r13, r5
    1570:	a2 1a       	sub	r10, r18
    1572:	b3 0a       	sbc	r11, r19
    1574:	c4 0a       	sbc	r12, r20
    1576:	d5 0a       	sbc	r13, r21
    1578:	c6 01       	movw	r24, r12
    157a:	b5 01       	movw	r22, r10
    157c:	a4 01       	movw	r20, r8
    157e:	93 01       	movw	r18, r6
    1580:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    1584:	7b 01       	movw	r14, r22
    1586:	8c 01       	movw	r16, r24
    1588:	c6 01       	movw	r24, r12
    158a:	b5 01       	movw	r22, r10
    158c:	a4 01       	movw	r20, r8
    158e:	93 01       	movw	r18, r6
    1590:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    1594:	ca 01       	movw	r24, r20
    1596:	b9 01       	movw	r22, r18
    1598:	25 96       	adiw	r28, 0x05	; 5
    159a:	2c ad       	ldd	r18, Y+60	; 0x3c
    159c:	3d ad       	ldd	r19, Y+61	; 0x3d
    159e:	4e ad       	ldd	r20, Y+62	; 0x3e
    15a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    15a2:	25 97       	sbiw	r28, 0x05	; 5
    15a4:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    15a8:	9b 01       	movw	r18, r22
    15aa:	ac 01       	movw	r20, r24
    15ac:	87 01       	movw	r16, r14
    15ae:	ff 24       	eor	r15, r15
    15b0:	ee 24       	eor	r14, r14
    15b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    15b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    15b6:	af a5       	ldd	r26, Y+47	; 0x2f
    15b8:	b8 a9       	ldd	r27, Y+48	; 0x30
    15ba:	a0 70       	andi	r26, 0x00	; 0
    15bc:	b0 70       	andi	r27, 0x00	; 0
    15be:	57 01       	movw	r10, r14
    15c0:	68 01       	movw	r12, r16
    15c2:	a8 2a       	or	r10, r24
    15c4:	b9 2a       	or	r11, r25
    15c6:	ca 2a       	or	r12, r26
    15c8:	db 2a       	or	r13, r27
    15ca:	a2 16       	cp	r10, r18
    15cc:	b3 06       	cpc	r11, r19
    15ce:	c4 06       	cpc	r12, r20
    15d0:	d5 06       	cpc	r13, r21
    15d2:	90 f4       	brcc	.+36     	; 0x15f8 <__umoddi3+0x530>
    15d4:	a2 0c       	add	r10, r2
    15d6:	b3 1c       	adc	r11, r3
    15d8:	c4 1c       	adc	r12, r4
    15da:	d5 1c       	adc	r13, r5
    15dc:	a2 14       	cp	r10, r2
    15de:	b3 04       	cpc	r11, r3
    15e0:	c4 04       	cpc	r12, r4
    15e2:	d5 04       	cpc	r13, r5
    15e4:	48 f0       	brcs	.+18     	; 0x15f8 <__umoddi3+0x530>
    15e6:	a2 16       	cp	r10, r18
    15e8:	b3 06       	cpc	r11, r19
    15ea:	c4 06       	cpc	r12, r20
    15ec:	d5 06       	cpc	r13, r21
    15ee:	20 f4       	brcc	.+8      	; 0x15f8 <__umoddi3+0x530>
    15f0:	a2 0c       	add	r10, r2
    15f2:	b3 1c       	adc	r11, r3
    15f4:	c4 1c       	adc	r12, r4
    15f6:	d5 1c       	adc	r13, r5
    15f8:	6c 96       	adiw	r28, 0x1c	; 28
    15fa:	ec ac       	ldd	r14, Y+60	; 0x3c
    15fc:	fd ac       	ldd	r15, Y+61	; 0x3d
    15fe:	0e ad       	ldd	r16, Y+62	; 0x3e
    1600:	1f ad       	ldd	r17, Y+63	; 0x3f
    1602:	6c 97       	sbiw	r28, 0x1c	; 28
    1604:	68 96       	adiw	r28, 0x18	; 24
    1606:	0f ac       	ldd	r0, Y+63	; 0x3f
    1608:	68 97       	sbiw	r28, 0x18	; 24
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <__umoddi3+0x54c>
    160c:	ee 0c       	add	r14, r14
    160e:	ff 1c       	adc	r15, r15
    1610:	00 1f       	adc	r16, r16
    1612:	11 1f       	adc	r17, r17
    1614:	0a 94       	dec	r0
    1616:	d2 f7       	brpl	.-12     	; 0x160c <__umoddi3+0x544>
    1618:	e9 aa       	std	Y+49, r14	; 0x31
    161a:	fa aa       	std	Y+50, r15	; 0x32
    161c:	0b ab       	std	Y+51, r16	; 0x33
    161e:	1c ab       	std	Y+52, r17	; 0x34
    1620:	a2 1a       	sub	r10, r18
    1622:	b3 0a       	sbc	r11, r19
    1624:	c4 0a       	sbc	r12, r20
    1626:	d5 0a       	sbc	r13, r21
    1628:	32 01       	movw	r6, r4
    162a:	88 24       	eor	r8, r8
    162c:	99 24       	eor	r9, r9
    162e:	b2 01       	movw	r22, r4
    1630:	a1 01       	movw	r20, r2
    1632:	60 70       	andi	r22, 0x00	; 0
    1634:	70 70       	andi	r23, 0x00	; 0
    1636:	29 96       	adiw	r28, 0x09	; 9
    1638:	4c af       	std	Y+60, r20	; 0x3c
    163a:	5d af       	std	Y+61, r21	; 0x3d
    163c:	6e af       	std	Y+62, r22	; 0x3e
    163e:	7f af       	std	Y+63, r23	; 0x3f
    1640:	29 97       	sbiw	r28, 0x09	; 9
    1642:	c6 01       	movw	r24, r12
    1644:	b5 01       	movw	r22, r10
    1646:	a4 01       	movw	r20, r8
    1648:	93 01       	movw	r18, r6
    164a:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    164e:	7b 01       	movw	r14, r22
    1650:	8c 01       	movw	r16, r24
    1652:	c6 01       	movw	r24, r12
    1654:	b5 01       	movw	r22, r10
    1656:	a4 01       	movw	r20, r8
    1658:	93 01       	movw	r18, r6
    165a:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    165e:	ca 01       	movw	r24, r20
    1660:	b9 01       	movw	r22, r18
    1662:	29 96       	adiw	r28, 0x09	; 9
    1664:	2c ad       	ldd	r18, Y+60	; 0x3c
    1666:	3d ad       	ldd	r19, Y+61	; 0x3d
    1668:	4e ad       	ldd	r20, Y+62	; 0x3e
    166a:	5f ad       	ldd	r21, Y+63	; 0x3f
    166c:	29 97       	sbiw	r28, 0x09	; 9
    166e:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    1672:	9b 01       	movw	r18, r22
    1674:	ac 01       	movw	r20, r24
    1676:	87 01       	movw	r16, r14
    1678:	ff 24       	eor	r15, r15
    167a:	ee 24       	eor	r14, r14
    167c:	a9 a8       	ldd	r10, Y+49	; 0x31
    167e:	ba a8       	ldd	r11, Y+50	; 0x32
    1680:	cb a8       	ldd	r12, Y+51	; 0x33
    1682:	dc a8       	ldd	r13, Y+52	; 0x34
    1684:	c6 01       	movw	r24, r12
    1686:	aa 27       	eor	r26, r26
    1688:	bb 27       	eor	r27, r27
    168a:	57 01       	movw	r10, r14
    168c:	68 01       	movw	r12, r16
    168e:	a8 2a       	or	r10, r24
    1690:	b9 2a       	or	r11, r25
    1692:	ca 2a       	or	r12, r26
    1694:	db 2a       	or	r13, r27
    1696:	a2 16       	cp	r10, r18
    1698:	b3 06       	cpc	r11, r19
    169a:	c4 06       	cpc	r12, r20
    169c:	d5 06       	cpc	r13, r21
    169e:	90 f4       	brcc	.+36     	; 0x16c4 <__umoddi3+0x5fc>
    16a0:	a2 0c       	add	r10, r2
    16a2:	b3 1c       	adc	r11, r3
    16a4:	c4 1c       	adc	r12, r4
    16a6:	d5 1c       	adc	r13, r5
    16a8:	a2 14       	cp	r10, r2
    16aa:	b3 04       	cpc	r11, r3
    16ac:	c4 04       	cpc	r12, r4
    16ae:	d5 04       	cpc	r13, r5
    16b0:	48 f0       	brcs	.+18     	; 0x16c4 <__umoddi3+0x5fc>
    16b2:	a2 16       	cp	r10, r18
    16b4:	b3 06       	cpc	r11, r19
    16b6:	c4 06       	cpc	r12, r20
    16b8:	d5 06       	cpc	r13, r21
    16ba:	20 f4       	brcc	.+8      	; 0x16c4 <__umoddi3+0x5fc>
    16bc:	a2 0c       	add	r10, r2
    16be:	b3 1c       	adc	r11, r3
    16c0:	c4 1c       	adc	r12, r4
    16c2:	d5 1c       	adc	r13, r5
    16c4:	a2 1a       	sub	r10, r18
    16c6:	b3 0a       	sbc	r11, r19
    16c8:	c4 0a       	sbc	r12, r20
    16ca:	d5 0a       	sbc	r13, r21
    16cc:	c6 01       	movw	r24, r12
    16ce:	b5 01       	movw	r22, r10
    16d0:	a4 01       	movw	r20, r8
    16d2:	93 01       	movw	r18, r6
    16d4:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    16d8:	7b 01       	movw	r14, r22
    16da:	8c 01       	movw	r16, r24
    16dc:	c6 01       	movw	r24, r12
    16de:	b5 01       	movw	r22, r10
    16e0:	a4 01       	movw	r20, r8
    16e2:	93 01       	movw	r18, r6
    16e4:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    16e8:	ca 01       	movw	r24, r20
    16ea:	b9 01       	movw	r22, r18
    16ec:	29 96       	adiw	r28, 0x09	; 9
    16ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    16f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    16f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    16f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    16f6:	29 97       	sbiw	r28, 0x09	; 9
    16f8:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    16fc:	9b 01       	movw	r18, r22
    16fe:	ac 01       	movw	r20, r24
    1700:	87 01       	movw	r16, r14
    1702:	ff 24       	eor	r15, r15
    1704:	ee 24       	eor	r14, r14
    1706:	89 a9       	ldd	r24, Y+49	; 0x31
    1708:	9a a9       	ldd	r25, Y+50	; 0x32
    170a:	ab a9       	ldd	r26, Y+51	; 0x33
    170c:	bc a9       	ldd	r27, Y+52	; 0x34
    170e:	a0 70       	andi	r26, 0x00	; 0
    1710:	b0 70       	andi	r27, 0x00	; 0
    1712:	e8 2a       	or	r14, r24
    1714:	f9 2a       	or	r15, r25
    1716:	0a 2b       	or	r16, r26
    1718:	1b 2b       	or	r17, r27
    171a:	e2 16       	cp	r14, r18
    171c:	f3 06       	cpc	r15, r19
    171e:	04 07       	cpc	r16, r20
    1720:	15 07       	cpc	r17, r21
    1722:	90 f4       	brcc	.+36     	; 0x1748 <__umoddi3+0x680>
    1724:	e2 0c       	add	r14, r2
    1726:	f3 1c       	adc	r15, r3
    1728:	04 1d       	adc	r16, r4
    172a:	15 1d       	adc	r17, r5
    172c:	e2 14       	cp	r14, r2
    172e:	f3 04       	cpc	r15, r3
    1730:	04 05       	cpc	r16, r4
    1732:	15 05       	cpc	r17, r5
    1734:	48 f0       	brcs	.+18     	; 0x1748 <__umoddi3+0x680>
    1736:	e2 16       	cp	r14, r18
    1738:	f3 06       	cpc	r15, r19
    173a:	04 07       	cpc	r16, r20
    173c:	15 07       	cpc	r17, r21
    173e:	20 f4       	brcc	.+8      	; 0x1748 <__umoddi3+0x680>
    1740:	e2 0c       	add	r14, r2
    1742:	f3 1c       	adc	r15, r3
    1744:	04 1d       	adc	r16, r4
    1746:	15 1d       	adc	r17, r5
    1748:	e2 1a       	sub	r14, r18
    174a:	f3 0a       	sbc	r15, r19
    174c:	04 0b       	sbc	r16, r20
    174e:	15 0b       	sbc	r17, r21
    1750:	d8 01       	movw	r26, r16
    1752:	c7 01       	movw	r24, r14
    1754:	09 ac       	ldd	r0, Y+57	; 0x39
    1756:	04 c0       	rjmp	.+8      	; 0x1760 <__umoddi3+0x698>
    1758:	b6 95       	lsr	r27
    175a:	a7 95       	ror	r26
    175c:	97 95       	ror	r25
    175e:	87 95       	ror	r24
    1760:	0a 94       	dec	r0
    1762:	d2 f7       	brpl	.-12     	; 0x1758 <__umoddi3+0x690>
    1764:	89 8b       	std	Y+17, r24	; 0x11
    1766:	9a 8b       	std	Y+18, r25	; 0x12
    1768:	ab 8b       	std	Y+19, r26	; 0x13
    176a:	bc 8b       	std	Y+20, r27	; 0x14
    176c:	1d 8a       	std	Y+21, r1	; 0x15
    176e:	1e 8a       	std	Y+22, r1	; 0x16
    1770:	1f 8a       	std	Y+23, r1	; 0x17
    1772:	18 8e       	std	Y+24, r1	; 0x18
    1774:	28 2f       	mov	r18, r24
    1776:	3a 89       	ldd	r19, Y+18	; 0x12
    1778:	4b 89       	ldd	r20, Y+19	; 0x13
    177a:	5c 89       	ldd	r21, Y+20	; 0x14
    177c:	6d 89       	ldd	r22, Y+21	; 0x15
    177e:	0c c3       	rjmp	.+1560   	; 0x1d98 <__umoddi3+0xcd0>
    1780:	6a 14       	cp	r6, r10
    1782:	7b 04       	cpc	r7, r11
    1784:	8c 04       	cpc	r8, r12
    1786:	9d 04       	cpc	r9, r13
    1788:	08 f4       	brcc	.+2      	; 0x178c <__umoddi3+0x6c4>
    178a:	09 c3       	rjmp	.+1554   	; 0x1d9e <__umoddi3+0xcd6>
    178c:	00 e0       	ldi	r16, 0x00	; 0
    178e:	a0 16       	cp	r10, r16
    1790:	00 e0       	ldi	r16, 0x00	; 0
    1792:	b0 06       	cpc	r11, r16
    1794:	01 e0       	ldi	r16, 0x01	; 1
    1796:	c0 06       	cpc	r12, r16
    1798:	00 e0       	ldi	r16, 0x00	; 0
    179a:	d0 06       	cpc	r13, r16
    179c:	88 f4       	brcc	.+34     	; 0x17c0 <__umoddi3+0x6f8>
    179e:	1f ef       	ldi	r17, 0xFF	; 255
    17a0:	a1 16       	cp	r10, r17
    17a2:	b1 04       	cpc	r11, r1
    17a4:	c1 04       	cpc	r12, r1
    17a6:	d1 04       	cpc	r13, r1
    17a8:	39 f0       	breq	.+14     	; 0x17b8 <__umoddi3+0x6f0>
    17aa:	30 f0       	brcs	.+12     	; 0x17b8 <__umoddi3+0x6f0>
    17ac:	28 e0       	ldi	r18, 0x08	; 8
    17ae:	e2 2e       	mov	r14, r18
    17b0:	f1 2c       	mov	r15, r1
    17b2:	01 2d       	mov	r16, r1
    17b4:	11 2d       	mov	r17, r1
    17b6:	18 c0       	rjmp	.+48     	; 0x17e8 <__umoddi3+0x720>
    17b8:	ee 24       	eor	r14, r14
    17ba:	ff 24       	eor	r15, r15
    17bc:	87 01       	movw	r16, r14
    17be:	14 c0       	rjmp	.+40     	; 0x17e8 <__umoddi3+0x720>
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	a4 16       	cp	r10, r20
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	b4 06       	cpc	r11, r20
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	c4 06       	cpc	r12, r20
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	d4 06       	cpc	r13, r20
    17d0:	30 f0       	brcs	.+12     	; 0x17de <__umoddi3+0x716>
    17d2:	98 e1       	ldi	r25, 0x18	; 24
    17d4:	e9 2e       	mov	r14, r25
    17d6:	f1 2c       	mov	r15, r1
    17d8:	01 2d       	mov	r16, r1
    17da:	11 2d       	mov	r17, r1
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <__umoddi3+0x720>
    17de:	80 e1       	ldi	r24, 0x10	; 16
    17e0:	e8 2e       	mov	r14, r24
    17e2:	f1 2c       	mov	r15, r1
    17e4:	01 2d       	mov	r16, r1
    17e6:	11 2d       	mov	r17, r1
    17e8:	d6 01       	movw	r26, r12
    17ea:	c5 01       	movw	r24, r10
    17ec:	0e 2c       	mov	r0, r14
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <__umoddi3+0x730>
    17f0:	b6 95       	lsr	r27
    17f2:	a7 95       	ror	r26
    17f4:	97 95       	ror	r25
    17f6:	87 95       	ror	r24
    17f8:	0a 94       	dec	r0
    17fa:	d2 f7       	brpl	.-12     	; 0x17f0 <__umoddi3+0x728>
    17fc:	88 59       	subi	r24, 0x98	; 152
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	dc 01       	movw	r26, r24
    1802:	2c 91       	ld	r18, X
    1804:	80 e2       	ldi	r24, 0x20	; 32
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e0       	ldi	r26, 0x00	; 0
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	8e 19       	sub	r24, r14
    180e:	9f 09       	sbc	r25, r15
    1810:	a0 0b       	sbc	r26, r16
    1812:	b1 0b       	sbc	r27, r17
    1814:	82 1b       	sub	r24, r18
    1816:	91 09       	sbc	r25, r1
    1818:	a1 09       	sbc	r26, r1
    181a:	b1 09       	sbc	r27, r1
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	a1 05       	cpc	r26, r1
    1820:	b1 05       	cpc	r27, r1
    1822:	09 f0       	breq	.+2      	; 0x1826 <__umoddi3+0x75e>
    1824:	4f c0       	rjmp	.+158    	; 0x18c4 <__umoddi3+0x7fc>
    1826:	a6 14       	cp	r10, r6
    1828:	b7 04       	cpc	r11, r7
    182a:	c8 04       	cpc	r12, r8
    182c:	d9 04       	cpc	r13, r9
    182e:	58 f0       	brcs	.+22     	; 0x1846 <__umoddi3+0x77e>
    1830:	6c 96       	adiw	r28, 0x1c	; 28
    1832:	ec ac       	ldd	r14, Y+60	; 0x3c
    1834:	fd ac       	ldd	r15, Y+61	; 0x3d
    1836:	0e ad       	ldd	r16, Y+62	; 0x3e
    1838:	1f ad       	ldd	r17, Y+63	; 0x3f
    183a:	6c 97       	sbiw	r28, 0x1c	; 28
    183c:	e2 14       	cp	r14, r2
    183e:	f3 04       	cpc	r15, r3
    1840:	04 05       	cpc	r16, r4
    1842:	15 05       	cpc	r17, r5
    1844:	68 f1       	brcs	.+90     	; 0x18a0 <__umoddi3+0x7d8>
    1846:	6c 96       	adiw	r28, 0x1c	; 28
    1848:	ec ac       	ldd	r14, Y+60	; 0x3c
    184a:	fd ac       	ldd	r15, Y+61	; 0x3d
    184c:	0e ad       	ldd	r16, Y+62	; 0x3e
    184e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1850:	6c 97       	sbiw	r28, 0x1c	; 28
    1852:	e2 18       	sub	r14, r2
    1854:	f3 08       	sbc	r15, r3
    1856:	04 09       	sbc	r16, r4
    1858:	15 09       	sbc	r17, r5
    185a:	a4 01       	movw	r20, r8
    185c:	93 01       	movw	r18, r6
    185e:	2a 19       	sub	r18, r10
    1860:	3b 09       	sbc	r19, r11
    1862:	4c 09       	sbc	r20, r12
    1864:	5d 09       	sbc	r21, r13
    1866:	aa 24       	eor	r10, r10
    1868:	bb 24       	eor	r11, r11
    186a:	65 01       	movw	r12, r10
    186c:	6c 96       	adiw	r28, 0x1c	; 28
    186e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1870:	7d ad       	ldd	r23, Y+61	; 0x3d
    1872:	8e ad       	ldd	r24, Y+62	; 0x3e
    1874:	9f ad       	ldd	r25, Y+63	; 0x3f
    1876:	6c 97       	sbiw	r28, 0x1c	; 28
    1878:	6e 15       	cp	r22, r14
    187a:	7f 05       	cpc	r23, r15
    187c:	80 07       	cpc	r24, r16
    187e:	91 07       	cpc	r25, r17
    1880:	28 f4       	brcc	.+10     	; 0x188c <__umoddi3+0x7c4>
    1882:	b1 e0       	ldi	r27, 0x01	; 1
    1884:	ab 2e       	mov	r10, r27
    1886:	b1 2c       	mov	r11, r1
    1888:	c1 2c       	mov	r12, r1
    188a:	d1 2c       	mov	r13, r1
    188c:	da 01       	movw	r26, r20
    188e:	c9 01       	movw	r24, r18
    1890:	8a 19       	sub	r24, r10
    1892:	9b 09       	sbc	r25, r11
    1894:	ac 09       	sbc	r26, r12
    1896:	bd 09       	sbc	r27, r13
    1898:	8d ab       	std	Y+53, r24	; 0x35
    189a:	9e ab       	std	Y+54, r25	; 0x36
    189c:	af ab       	std	Y+55, r26	; 0x37
    189e:	b8 af       	std	Y+56, r27	; 0x38
    18a0:	e9 8a       	std	Y+17, r14	; 0x11
    18a2:	fa 8a       	std	Y+18, r15	; 0x12
    18a4:	0b 8b       	std	Y+19, r16	; 0x13
    18a6:	1c 8b       	std	Y+20, r17	; 0x14
    18a8:	6d a8       	ldd	r6, Y+53	; 0x35
    18aa:	7e a8       	ldd	r7, Y+54	; 0x36
    18ac:	8f a8       	ldd	r8, Y+55	; 0x37
    18ae:	98 ac       	ldd	r9, Y+56	; 0x38
    18b0:	6d 8a       	std	Y+21, r6	; 0x15
    18b2:	7e 8a       	std	Y+22, r7	; 0x16
    18b4:	8f 8a       	std	Y+23, r8	; 0x17
    18b6:	98 8e       	std	Y+24, r9	; 0x18
    18b8:	2e 2d       	mov	r18, r14
    18ba:	3a 89       	ldd	r19, Y+18	; 0x12
    18bc:	4b 89       	ldd	r20, Y+19	; 0x13
    18be:	5c 89       	ldd	r21, Y+20	; 0x14
    18c0:	6d a9       	ldd	r22, Y+53	; 0x35
    18c2:	6a c2       	rjmp	.+1236   	; 0x1d98 <__umoddi3+0xcd0>
    18c4:	67 96       	adiw	r28, 0x17	; 23
    18c6:	8f af       	std	Y+63, r24	; 0x3f
    18c8:	67 97       	sbiw	r28, 0x17	; 23
    18ca:	a6 01       	movw	r20, r12
    18cc:	95 01       	movw	r18, r10
    18ce:	08 2e       	mov	r0, r24
    18d0:	04 c0       	rjmp	.+8      	; 0x18da <__umoddi3+0x812>
    18d2:	22 0f       	add	r18, r18
    18d4:	33 1f       	adc	r19, r19
    18d6:	44 1f       	adc	r20, r20
    18d8:	55 1f       	adc	r21, r21
    18da:	0a 94       	dec	r0
    18dc:	d2 f7       	brpl	.-12     	; 0x18d2 <__umoddi3+0x80a>
    18de:	a0 e2       	ldi	r26, 0x20	; 32
    18e0:	aa 2e       	mov	r10, r26
    18e2:	a8 1a       	sub	r10, r24
    18e4:	66 96       	adiw	r28, 0x16	; 22
    18e6:	af ae       	std	Y+63, r10	; 0x3f
    18e8:	66 97       	sbiw	r28, 0x16	; 22
    18ea:	d2 01       	movw	r26, r4
    18ec:	c1 01       	movw	r24, r2
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <__umoddi3+0x830>
    18f0:	b6 95       	lsr	r27
    18f2:	a7 95       	ror	r26
    18f4:	97 95       	ror	r25
    18f6:	87 95       	ror	r24
    18f8:	aa 94       	dec	r10
    18fa:	d2 f7       	brpl	.-12     	; 0x18f0 <__umoddi3+0x828>
    18fc:	6c 01       	movw	r12, r24
    18fe:	7d 01       	movw	r14, r26
    1900:	c2 2a       	or	r12, r18
    1902:	d3 2a       	or	r13, r19
    1904:	e4 2a       	or	r14, r20
    1906:	f5 2a       	or	r15, r21
    1908:	c9 a6       	std	Y+41, r12	; 0x29
    190a:	da a6       	std	Y+42, r13	; 0x2a
    190c:	eb a6       	std	Y+43, r14	; 0x2b
    190e:	fc a6       	std	Y+44, r15	; 0x2c
    1910:	82 01       	movw	r16, r4
    1912:	71 01       	movw	r14, r2
    1914:	67 96       	adiw	r28, 0x17	; 23
    1916:	0f ac       	ldd	r0, Y+63	; 0x3f
    1918:	67 97       	sbiw	r28, 0x17	; 23
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <__umoddi3+0x85c>
    191c:	ee 0c       	add	r14, r14
    191e:	ff 1c       	adc	r15, r15
    1920:	00 1f       	adc	r16, r16
    1922:	11 1f       	adc	r17, r17
    1924:	0a 94       	dec	r0
    1926:	d2 f7       	brpl	.-12     	; 0x191c <__umoddi3+0x854>
    1928:	ed a2       	std	Y+37, r14	; 0x25
    192a:	fe a2       	std	Y+38, r15	; 0x26
    192c:	0f a3       	std	Y+39, r16	; 0x27
    192e:	18 a7       	std	Y+40, r17	; 0x28
    1930:	64 01       	movw	r12, r8
    1932:	53 01       	movw	r10, r6
    1934:	66 96       	adiw	r28, 0x16	; 22
    1936:	0f ac       	ldd	r0, Y+63	; 0x3f
    1938:	66 97       	sbiw	r28, 0x16	; 22
    193a:	04 c0       	rjmp	.+8      	; 0x1944 <__umoddi3+0x87c>
    193c:	d6 94       	lsr	r13
    193e:	c7 94       	ror	r12
    1940:	b7 94       	ror	r11
    1942:	a7 94       	ror	r10
    1944:	0a 94       	dec	r0
    1946:	d2 f7       	brpl	.-12     	; 0x193c <__umoddi3+0x874>
    1948:	a4 01       	movw	r20, r8
    194a:	93 01       	movw	r18, r6
    194c:	67 96       	adiw	r28, 0x17	; 23
    194e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1950:	67 97       	sbiw	r28, 0x17	; 23
    1952:	04 c0       	rjmp	.+8      	; 0x195c <__umoddi3+0x894>
    1954:	22 0f       	add	r18, r18
    1956:	33 1f       	adc	r19, r19
    1958:	44 1f       	adc	r20, r20
    195a:	55 1f       	adc	r21, r21
    195c:	0a 94       	dec	r0
    195e:	d2 f7       	brpl	.-12     	; 0x1954 <__umoddi3+0x88c>
    1960:	6c 96       	adiw	r28, 0x1c	; 28
    1962:	8c ad       	ldd	r24, Y+60	; 0x3c
    1964:	9d ad       	ldd	r25, Y+61	; 0x3d
    1966:	ae ad       	ldd	r26, Y+62	; 0x3e
    1968:	bf ad       	ldd	r27, Y+63	; 0x3f
    196a:	6c 97       	sbiw	r28, 0x1c	; 28
    196c:	66 96       	adiw	r28, 0x16	; 22
    196e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1970:	66 97       	sbiw	r28, 0x16	; 22
    1972:	04 c0       	rjmp	.+8      	; 0x197c <__umoddi3+0x8b4>
    1974:	b6 95       	lsr	r27
    1976:	a7 95       	ror	r26
    1978:	97 95       	ror	r25
    197a:	87 95       	ror	r24
    197c:	0a 94       	dec	r0
    197e:	d2 f7       	brpl	.-12     	; 0x1974 <__umoddi3+0x8ac>
    1980:	3c 01       	movw	r6, r24
    1982:	4d 01       	movw	r8, r26
    1984:	62 2a       	or	r6, r18
    1986:	73 2a       	or	r7, r19
    1988:	84 2a       	or	r8, r20
    198a:	95 2a       	or	r9, r21
    198c:	69 a2       	std	Y+33, r6	; 0x21
    198e:	7a a2       	std	Y+34, r7	; 0x22
    1990:	8b a2       	std	Y+35, r8	; 0x23
    1992:	9c a2       	std	Y+36, r9	; 0x24
    1994:	6c 96       	adiw	r28, 0x1c	; 28
    1996:	ec ac       	ldd	r14, Y+60	; 0x3c
    1998:	fd ac       	ldd	r15, Y+61	; 0x3d
    199a:	0e ad       	ldd	r16, Y+62	; 0x3e
    199c:	1f ad       	ldd	r17, Y+63	; 0x3f
    199e:	6c 97       	sbiw	r28, 0x1c	; 28
    19a0:	67 96       	adiw	r28, 0x17	; 23
    19a2:	0f ac       	ldd	r0, Y+63	; 0x3f
    19a4:	67 97       	sbiw	r28, 0x17	; 23
    19a6:	04 c0       	rjmp	.+8      	; 0x19b0 <__umoddi3+0x8e8>
    19a8:	ee 0c       	add	r14, r14
    19aa:	ff 1c       	adc	r15, r15
    19ac:	00 1f       	adc	r16, r16
    19ae:	11 1f       	adc	r17, r17
    19b0:	0a 94       	dec	r0
    19b2:	d2 f7       	brpl	.-12     	; 0x19a8 <__umoddi3+0x8e0>
    19b4:	ed 8e       	std	Y+29, r14	; 0x1d
    19b6:	fe 8e       	std	Y+30, r15	; 0x1e
    19b8:	0f 8f       	std	Y+31, r16	; 0x1f
    19ba:	18 a3       	std	Y+32, r17	; 0x20
    19bc:	49 a5       	ldd	r20, Y+41	; 0x29
    19be:	5a a5       	ldd	r21, Y+42	; 0x2a
    19c0:	6b a5       	ldd	r22, Y+43	; 0x2b
    19c2:	7c a5       	ldd	r23, Y+44	; 0x2c
    19c4:	3b 01       	movw	r6, r22
    19c6:	88 24       	eor	r8, r8
    19c8:	99 24       	eor	r9, r9
    19ca:	60 70       	andi	r22, 0x00	; 0
    19cc:	70 70       	andi	r23, 0x00	; 0
    19ce:	2d 96       	adiw	r28, 0x0d	; 13
    19d0:	4c af       	std	Y+60, r20	; 0x3c
    19d2:	5d af       	std	Y+61, r21	; 0x3d
    19d4:	6e af       	std	Y+62, r22	; 0x3e
    19d6:	7f af       	std	Y+63, r23	; 0x3f
    19d8:	2d 97       	sbiw	r28, 0x0d	; 13
    19da:	c6 01       	movw	r24, r12
    19dc:	b5 01       	movw	r22, r10
    19de:	a4 01       	movw	r20, r8
    19e0:	93 01       	movw	r18, r6
    19e2:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    19e6:	7b 01       	movw	r14, r22
    19e8:	8c 01       	movw	r16, r24
    19ea:	c6 01       	movw	r24, r12
    19ec:	b5 01       	movw	r22, r10
    19ee:	a4 01       	movw	r20, r8
    19f0:	93 01       	movw	r18, r6
    19f2:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    19f6:	c9 01       	movw	r24, r18
    19f8:	da 01       	movw	r26, r20
    19fa:	1c 01       	movw	r2, r24
    19fc:	2d 01       	movw	r4, r26
    19fe:	c2 01       	movw	r24, r4
    1a00:	b1 01       	movw	r22, r2
    1a02:	2d 96       	adiw	r28, 0x0d	; 13
    1a04:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a06:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a08:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a0a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a0c:	2d 97       	sbiw	r28, 0x0d	; 13
    1a0e:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    1a12:	9b 01       	movw	r18, r22
    1a14:	ac 01       	movw	r20, r24
    1a16:	87 01       	movw	r16, r14
    1a18:	ff 24       	eor	r15, r15
    1a1a:	ee 24       	eor	r14, r14
    1a1c:	a9 a0       	ldd	r10, Y+33	; 0x21
    1a1e:	ba a0       	ldd	r11, Y+34	; 0x22
    1a20:	cb a0       	ldd	r12, Y+35	; 0x23
    1a22:	dc a0       	ldd	r13, Y+36	; 0x24
    1a24:	c6 01       	movw	r24, r12
    1a26:	aa 27       	eor	r26, r26
    1a28:	bb 27       	eor	r27, r27
    1a2a:	57 01       	movw	r10, r14
    1a2c:	68 01       	movw	r12, r16
    1a2e:	a8 2a       	or	r10, r24
    1a30:	b9 2a       	or	r11, r25
    1a32:	ca 2a       	or	r12, r26
    1a34:	db 2a       	or	r13, r27
    1a36:	a2 16       	cp	r10, r18
    1a38:	b3 06       	cpc	r11, r19
    1a3a:	c4 06       	cpc	r12, r20
    1a3c:	d5 06       	cpc	r13, r21
    1a3e:	00 f5       	brcc	.+64     	; 0x1a80 <__umoddi3+0x9b8>
    1a40:	08 94       	sec
    1a42:	21 08       	sbc	r2, r1
    1a44:	31 08       	sbc	r3, r1
    1a46:	41 08       	sbc	r4, r1
    1a48:	51 08       	sbc	r5, r1
    1a4a:	e9 a4       	ldd	r14, Y+41	; 0x29
    1a4c:	fa a4       	ldd	r15, Y+42	; 0x2a
    1a4e:	0b a5       	ldd	r16, Y+43	; 0x2b
    1a50:	1c a5       	ldd	r17, Y+44	; 0x2c
    1a52:	ae 0c       	add	r10, r14
    1a54:	bf 1c       	adc	r11, r15
    1a56:	c0 1e       	adc	r12, r16
    1a58:	d1 1e       	adc	r13, r17
    1a5a:	ae 14       	cp	r10, r14
    1a5c:	bf 04       	cpc	r11, r15
    1a5e:	c0 06       	cpc	r12, r16
    1a60:	d1 06       	cpc	r13, r17
    1a62:	70 f0       	brcs	.+28     	; 0x1a80 <__umoddi3+0x9b8>
    1a64:	a2 16       	cp	r10, r18
    1a66:	b3 06       	cpc	r11, r19
    1a68:	c4 06       	cpc	r12, r20
    1a6a:	d5 06       	cpc	r13, r21
    1a6c:	48 f4       	brcc	.+18     	; 0x1a80 <__umoddi3+0x9b8>
    1a6e:	08 94       	sec
    1a70:	21 08       	sbc	r2, r1
    1a72:	31 08       	sbc	r3, r1
    1a74:	41 08       	sbc	r4, r1
    1a76:	51 08       	sbc	r5, r1
    1a78:	ae 0c       	add	r10, r14
    1a7a:	bf 1c       	adc	r11, r15
    1a7c:	c0 1e       	adc	r12, r16
    1a7e:	d1 1e       	adc	r13, r17
    1a80:	a2 1a       	sub	r10, r18
    1a82:	b3 0a       	sbc	r11, r19
    1a84:	c4 0a       	sbc	r12, r20
    1a86:	d5 0a       	sbc	r13, r21
    1a88:	c6 01       	movw	r24, r12
    1a8a:	b5 01       	movw	r22, r10
    1a8c:	a4 01       	movw	r20, r8
    1a8e:	93 01       	movw	r18, r6
    1a90:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    1a94:	7b 01       	movw	r14, r22
    1a96:	8c 01       	movw	r16, r24
    1a98:	c6 01       	movw	r24, r12
    1a9a:	b5 01       	movw	r22, r10
    1a9c:	a4 01       	movw	r20, r8
    1a9e:	93 01       	movw	r18, r6
    1aa0:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    1aa4:	c9 01       	movw	r24, r18
    1aa6:	da 01       	movw	r26, r20
    1aa8:	3c 01       	movw	r6, r24
    1aaa:	4d 01       	movw	r8, r26
    1aac:	c4 01       	movw	r24, r8
    1aae:	b3 01       	movw	r22, r6
    1ab0:	2d 96       	adiw	r28, 0x0d	; 13
    1ab2:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ab4:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ab6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1aba:	2d 97       	sbiw	r28, 0x0d	; 13
    1abc:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    1ac0:	9b 01       	movw	r18, r22
    1ac2:	ac 01       	movw	r20, r24
    1ac4:	87 01       	movw	r16, r14
    1ac6:	ff 24       	eor	r15, r15
    1ac8:	ee 24       	eor	r14, r14
    1aca:	89 a1       	ldd	r24, Y+33	; 0x21
    1acc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ace:	ab a1       	ldd	r26, Y+35	; 0x23
    1ad0:	bc a1       	ldd	r27, Y+36	; 0x24
    1ad2:	a0 70       	andi	r26, 0x00	; 0
    1ad4:	b0 70       	andi	r27, 0x00	; 0
    1ad6:	57 01       	movw	r10, r14
    1ad8:	68 01       	movw	r12, r16
    1ada:	a8 2a       	or	r10, r24
    1adc:	b9 2a       	or	r11, r25
    1ade:	ca 2a       	or	r12, r26
    1ae0:	db 2a       	or	r13, r27
    1ae2:	a2 16       	cp	r10, r18
    1ae4:	b3 06       	cpc	r11, r19
    1ae6:	c4 06       	cpc	r12, r20
    1ae8:	d5 06       	cpc	r13, r21
    1aea:	00 f5       	brcc	.+64     	; 0x1b2c <__umoddi3+0xa64>
    1aec:	08 94       	sec
    1aee:	61 08       	sbc	r6, r1
    1af0:	71 08       	sbc	r7, r1
    1af2:	81 08       	sbc	r8, r1
    1af4:	91 08       	sbc	r9, r1
    1af6:	69 a5       	ldd	r22, Y+41	; 0x29
    1af8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1afa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1afc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1afe:	a6 0e       	add	r10, r22
    1b00:	b7 1e       	adc	r11, r23
    1b02:	c8 1e       	adc	r12, r24
    1b04:	d9 1e       	adc	r13, r25
    1b06:	a6 16       	cp	r10, r22
    1b08:	b7 06       	cpc	r11, r23
    1b0a:	c8 06       	cpc	r12, r24
    1b0c:	d9 06       	cpc	r13, r25
    1b0e:	70 f0       	brcs	.+28     	; 0x1b2c <__umoddi3+0xa64>
    1b10:	a2 16       	cp	r10, r18
    1b12:	b3 06       	cpc	r11, r19
    1b14:	c4 06       	cpc	r12, r20
    1b16:	d5 06       	cpc	r13, r21
    1b18:	48 f4       	brcc	.+18     	; 0x1b2c <__umoddi3+0xa64>
    1b1a:	08 94       	sec
    1b1c:	61 08       	sbc	r6, r1
    1b1e:	71 08       	sbc	r7, r1
    1b20:	81 08       	sbc	r8, r1
    1b22:	91 08       	sbc	r9, r1
    1b24:	a6 0e       	add	r10, r22
    1b26:	b7 1e       	adc	r11, r23
    1b28:	c8 1e       	adc	r12, r24
    1b2a:	d9 1e       	adc	r13, r25
    1b2c:	d6 01       	movw	r26, r12
    1b2e:	c5 01       	movw	r24, r10
    1b30:	82 1b       	sub	r24, r18
    1b32:	93 0b       	sbc	r25, r19
    1b34:	a4 0b       	sbc	r26, r20
    1b36:	b5 0b       	sbc	r27, r21
    1b38:	89 8f       	std	Y+25, r24	; 0x19
    1b3a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b3c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b3e:	bc 8f       	std	Y+28, r27	; 0x1c
    1b40:	d1 01       	movw	r26, r2
    1b42:	99 27       	eor	r25, r25
    1b44:	88 27       	eor	r24, r24
    1b46:	84 01       	movw	r16, r8
    1b48:	73 01       	movw	r14, r6
    1b4a:	e8 2a       	or	r14, r24
    1b4c:	f9 2a       	or	r15, r25
    1b4e:	0a 2b       	or	r16, r26
    1b50:	1b 2b       	or	r17, r27
    1b52:	4f ef       	ldi	r20, 0xFF	; 255
    1b54:	a4 2e       	mov	r10, r20
    1b56:	4f ef       	ldi	r20, 0xFF	; 255
    1b58:	b4 2e       	mov	r11, r20
    1b5a:	c1 2c       	mov	r12, r1
    1b5c:	d1 2c       	mov	r13, r1
    1b5e:	ae 20       	and	r10, r14
    1b60:	bf 20       	and	r11, r15
    1b62:	c0 22       	and	r12, r16
    1b64:	d1 22       	and	r13, r17
    1b66:	78 01       	movw	r14, r16
    1b68:	00 27       	eor	r16, r16
    1b6a:	11 27       	eor	r17, r17
    1b6c:	6d a0       	ldd	r6, Y+37	; 0x25
    1b6e:	7e a0       	ldd	r7, Y+38	; 0x26
    1b70:	8f a0       	ldd	r8, Y+39	; 0x27
    1b72:	98 a4       	ldd	r9, Y+40	; 0x28
    1b74:	4f ef       	ldi	r20, 0xFF	; 255
    1b76:	5f ef       	ldi	r21, 0xFF	; 255
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	64 22       	and	r6, r20
    1b7e:	75 22       	and	r7, r21
    1b80:	86 22       	and	r8, r22
    1b82:	97 22       	and	r9, r23
    1b84:	8d a1       	ldd	r24, Y+37	; 0x25
    1b86:	9e a1       	ldd	r25, Y+38	; 0x26
    1b88:	af a1       	ldd	r26, Y+39	; 0x27
    1b8a:	b8 a5       	ldd	r27, Y+40	; 0x28
    1b8c:	bd 01       	movw	r22, r26
    1b8e:	88 27       	eor	r24, r24
    1b90:	99 27       	eor	r25, r25
    1b92:	65 96       	adiw	r28, 0x15	; 21
    1b94:	6c af       	std	Y+60, r22	; 0x3c
    1b96:	7d af       	std	Y+61, r23	; 0x3d
    1b98:	8e af       	std	Y+62, r24	; 0x3e
    1b9a:	9f af       	std	Y+63, r25	; 0x3f
    1b9c:	65 97       	sbiw	r28, 0x15	; 21
    1b9e:	c6 01       	movw	r24, r12
    1ba0:	b5 01       	movw	r22, r10
    1ba2:	a4 01       	movw	r20, r8
    1ba4:	93 01       	movw	r18, r6
    1ba6:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    1baa:	61 96       	adiw	r28, 0x11	; 17
    1bac:	6c af       	std	Y+60, r22	; 0x3c
    1bae:	7d af       	std	Y+61, r23	; 0x3d
    1bb0:	8e af       	std	Y+62, r24	; 0x3e
    1bb2:	9f af       	std	Y+63, r25	; 0x3f
    1bb4:	61 97       	sbiw	r28, 0x11	; 17
    1bb6:	c6 01       	movw	r24, r12
    1bb8:	b5 01       	movw	r22, r10
    1bba:	65 96       	adiw	r28, 0x15	; 21
    1bbc:	2c ad       	ldd	r18, Y+60	; 0x3c
    1bbe:	3d ad       	ldd	r19, Y+61	; 0x3d
    1bc0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bc2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bc4:	65 97       	sbiw	r28, 0x15	; 21
    1bc6:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    1bca:	1b 01       	movw	r2, r22
    1bcc:	2c 01       	movw	r4, r24
    1bce:	c8 01       	movw	r24, r16
    1bd0:	b7 01       	movw	r22, r14
    1bd2:	a4 01       	movw	r20, r8
    1bd4:	93 01       	movw	r18, r6
    1bd6:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    1bda:	5b 01       	movw	r10, r22
    1bdc:	6c 01       	movw	r12, r24
    1bde:	c8 01       	movw	r24, r16
    1be0:	b7 01       	movw	r22, r14
    1be2:	65 96       	adiw	r28, 0x15	; 21
    1be4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1be6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1be8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bea:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bec:	65 97       	sbiw	r28, 0x15	; 21
    1bee:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    1bf2:	7b 01       	movw	r14, r22
    1bf4:	8c 01       	movw	r16, r24
    1bf6:	a6 01       	movw	r20, r12
    1bf8:	95 01       	movw	r18, r10
    1bfa:	22 0d       	add	r18, r2
    1bfc:	33 1d       	adc	r19, r3
    1bfe:	44 1d       	adc	r20, r4
    1c00:	55 1d       	adc	r21, r5
    1c02:	61 96       	adiw	r28, 0x11	; 17
    1c04:	6c ac       	ldd	r6, Y+60	; 0x3c
    1c06:	7d ac       	ldd	r7, Y+61	; 0x3d
    1c08:	8e ac       	ldd	r8, Y+62	; 0x3e
    1c0a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1c0c:	61 97       	sbiw	r28, 0x11	; 17
    1c0e:	c4 01       	movw	r24, r8
    1c10:	aa 27       	eor	r26, r26
    1c12:	bb 27       	eor	r27, r27
    1c14:	28 0f       	add	r18, r24
    1c16:	39 1f       	adc	r19, r25
    1c18:	4a 1f       	adc	r20, r26
    1c1a:	5b 1f       	adc	r21, r27
    1c1c:	2a 15       	cp	r18, r10
    1c1e:	3b 05       	cpc	r19, r11
    1c20:	4c 05       	cpc	r20, r12
    1c22:	5d 05       	cpc	r21, r13
    1c24:	48 f4       	brcc	.+18     	; 0x1c38 <__umoddi3+0xb70>
    1c26:	81 2c       	mov	r8, r1
    1c28:	91 2c       	mov	r9, r1
    1c2a:	e1 e0       	ldi	r30, 0x01	; 1
    1c2c:	ae 2e       	mov	r10, r30
    1c2e:	b1 2c       	mov	r11, r1
    1c30:	e8 0c       	add	r14, r8
    1c32:	f9 1c       	adc	r15, r9
    1c34:	0a 1d       	adc	r16, r10
    1c36:	1b 1d       	adc	r17, r11
    1c38:	ca 01       	movw	r24, r20
    1c3a:	aa 27       	eor	r26, r26
    1c3c:	bb 27       	eor	r27, r27
    1c3e:	57 01       	movw	r10, r14
    1c40:	68 01       	movw	r12, r16
    1c42:	a8 0e       	add	r10, r24
    1c44:	b9 1e       	adc	r11, r25
    1c46:	ca 1e       	adc	r12, r26
    1c48:	db 1e       	adc	r13, r27
    1c4a:	a9 01       	movw	r20, r18
    1c4c:	33 27       	eor	r19, r19
    1c4e:	22 27       	eor	r18, r18
    1c50:	61 96       	adiw	r28, 0x11	; 17
    1c52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c5a:	61 97       	sbiw	r28, 0x11	; 17
    1c5c:	a0 70       	andi	r26, 0x00	; 0
    1c5e:	b0 70       	andi	r27, 0x00	; 0
    1c60:	28 0f       	add	r18, r24
    1c62:	39 1f       	adc	r19, r25
    1c64:	4a 1f       	adc	r20, r26
    1c66:	5b 1f       	adc	r21, r27
    1c68:	e9 8c       	ldd	r14, Y+25	; 0x19
    1c6a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1c6c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1c6e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1c70:	ea 14       	cp	r14, r10
    1c72:	fb 04       	cpc	r15, r11
    1c74:	0c 05       	cpc	r16, r12
    1c76:	1d 05       	cpc	r17, r13
    1c78:	70 f0       	brcs	.+28     	; 0x1c96 <__umoddi3+0xbce>
    1c7a:	ae 14       	cp	r10, r14
    1c7c:	bf 04       	cpc	r11, r15
    1c7e:	c0 06       	cpc	r12, r16
    1c80:	d1 06       	cpc	r13, r17
    1c82:	69 f5       	brne	.+90     	; 0x1cde <__umoddi3+0xc16>
    1c84:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c86:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c8a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8c:	62 17       	cp	r22, r18
    1c8e:	73 07       	cpc	r23, r19
    1c90:	84 07       	cpc	r24, r20
    1c92:	95 07       	cpc	r25, r21
    1c94:	20 f5       	brcc	.+72     	; 0x1cde <__umoddi3+0xc16>
    1c96:	da 01       	movw	r26, r20
    1c98:	c9 01       	movw	r24, r18
    1c9a:	6d a0       	ldd	r6, Y+37	; 0x25
    1c9c:	7e a0       	ldd	r7, Y+38	; 0x26
    1c9e:	8f a0       	ldd	r8, Y+39	; 0x27
    1ca0:	98 a4       	ldd	r9, Y+40	; 0x28
    1ca2:	86 19       	sub	r24, r6
    1ca4:	97 09       	sbc	r25, r7
    1ca6:	a8 09       	sbc	r26, r8
    1ca8:	b9 09       	sbc	r27, r9
    1caa:	e9 a4       	ldd	r14, Y+41	; 0x29
    1cac:	fa a4       	ldd	r15, Y+42	; 0x2a
    1cae:	0b a5       	ldd	r16, Y+43	; 0x2b
    1cb0:	1c a5       	ldd	r17, Y+44	; 0x2c
    1cb2:	ae 18       	sub	r10, r14
    1cb4:	bf 08       	sbc	r11, r15
    1cb6:	c0 0a       	sbc	r12, r16
    1cb8:	d1 0a       	sbc	r13, r17
    1cba:	ee 24       	eor	r14, r14
    1cbc:	ff 24       	eor	r15, r15
    1cbe:	87 01       	movw	r16, r14
    1cc0:	28 17       	cp	r18, r24
    1cc2:	39 07       	cpc	r19, r25
    1cc4:	4a 07       	cpc	r20, r26
    1cc6:	5b 07       	cpc	r21, r27
    1cc8:	28 f4       	brcc	.+10     	; 0x1cd4 <__umoddi3+0xc0c>
    1cca:	21 e0       	ldi	r18, 0x01	; 1
    1ccc:	e2 2e       	mov	r14, r18
    1cce:	f1 2c       	mov	r15, r1
    1cd0:	01 2d       	mov	r16, r1
    1cd2:	11 2d       	mov	r17, r1
    1cd4:	ae 18       	sub	r10, r14
    1cd6:	bf 08       	sbc	r11, r15
    1cd8:	c0 0a       	sbc	r12, r16
    1cda:	d1 0a       	sbc	r13, r17
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <__umoddi3+0xc1a>
    1cde:	da 01       	movw	r26, r20
    1ce0:	c9 01       	movw	r24, r18
    1ce2:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1ce4:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1ce6:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1ce8:	98 a0       	ldd	r9, Y+32	; 0x20
    1cea:	68 1a       	sub	r6, r24
    1cec:	79 0a       	sbc	r7, r25
    1cee:	8a 0a       	sbc	r8, r26
    1cf0:	9b 0a       	sbc	r9, r27
    1cf2:	49 8d       	ldd	r20, Y+25	; 0x19
    1cf4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1cf6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1cf8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1cfa:	4a 19       	sub	r20, r10
    1cfc:	5b 09       	sbc	r21, r11
    1cfe:	6c 09       	sbc	r22, r12
    1d00:	7d 09       	sbc	r23, r13
    1d02:	5a 01       	movw	r10, r20
    1d04:	6b 01       	movw	r12, r22
    1d06:	22 24       	eor	r2, r2
    1d08:	33 24       	eor	r3, r3
    1d0a:	21 01       	movw	r4, r2
    1d0c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d0e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d12:	98 a1       	ldd	r25, Y+32	; 0x20
    1d14:	66 15       	cp	r22, r6
    1d16:	77 05       	cpc	r23, r7
    1d18:	88 05       	cpc	r24, r8
    1d1a:	99 05       	cpc	r25, r9
    1d1c:	28 f4       	brcc	.+10     	; 0x1d28 <__umoddi3+0xc60>
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	28 2e       	mov	r2, r24
    1d22:	31 2c       	mov	r3, r1
    1d24:	41 2c       	mov	r4, r1
    1d26:	51 2c       	mov	r5, r1
    1d28:	86 01       	movw	r16, r12
    1d2a:	75 01       	movw	r14, r10
    1d2c:	e2 18       	sub	r14, r2
    1d2e:	f3 08       	sbc	r15, r3
    1d30:	04 09       	sbc	r16, r4
    1d32:	15 09       	sbc	r17, r5
    1d34:	a8 01       	movw	r20, r16
    1d36:	97 01       	movw	r18, r14
    1d38:	66 96       	adiw	r28, 0x16	; 22
    1d3a:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d3c:	66 97       	sbiw	r28, 0x16	; 22
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <__umoddi3+0xc80>
    1d40:	22 0f       	add	r18, r18
    1d42:	33 1f       	adc	r19, r19
    1d44:	44 1f       	adc	r20, r20
    1d46:	55 1f       	adc	r21, r21
    1d48:	0a 94       	dec	r0
    1d4a:	d2 f7       	brpl	.-12     	; 0x1d40 <__umoddi3+0xc78>
    1d4c:	d4 01       	movw	r26, r8
    1d4e:	c3 01       	movw	r24, r6
    1d50:	67 96       	adiw	r28, 0x17	; 23
    1d52:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d54:	67 97       	sbiw	r28, 0x17	; 23
    1d56:	04 c0       	rjmp	.+8      	; 0x1d60 <__umoddi3+0xc98>
    1d58:	b6 95       	lsr	r27
    1d5a:	a7 95       	ror	r26
    1d5c:	97 95       	ror	r25
    1d5e:	87 95       	ror	r24
    1d60:	0a 94       	dec	r0
    1d62:	d2 f7       	brpl	.-12     	; 0x1d58 <__umoddi3+0xc90>
    1d64:	28 2b       	or	r18, r24
    1d66:	39 2b       	or	r19, r25
    1d68:	4a 2b       	or	r20, r26
    1d6a:	5b 2b       	or	r21, r27
    1d6c:	29 8b       	std	Y+17, r18	; 0x11
    1d6e:	3a 8b       	std	Y+18, r19	; 0x12
    1d70:	4b 8b       	std	Y+19, r20	; 0x13
    1d72:	5c 8b       	std	Y+20, r21	; 0x14
    1d74:	67 96       	adiw	r28, 0x17	; 23
    1d76:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d78:	67 97       	sbiw	r28, 0x17	; 23
    1d7a:	04 c0       	rjmp	.+8      	; 0x1d84 <__umoddi3+0xcbc>
    1d7c:	16 95       	lsr	r17
    1d7e:	07 95       	ror	r16
    1d80:	f7 94       	ror	r15
    1d82:	e7 94       	ror	r14
    1d84:	0a 94       	dec	r0
    1d86:	d2 f7       	brpl	.-12     	; 0x1d7c <__umoddi3+0xcb4>
    1d88:	ed 8a       	std	Y+21, r14	; 0x15
    1d8a:	fe 8a       	std	Y+22, r15	; 0x16
    1d8c:	0f 8b       	std	Y+23, r16	; 0x17
    1d8e:	18 8f       	std	Y+24, r17	; 0x18
    1d90:	3a 89       	ldd	r19, Y+18	; 0x12
    1d92:	4b 89       	ldd	r20, Y+19	; 0x13
    1d94:	5c 89       	ldd	r21, Y+20	; 0x14
    1d96:	6e 2d       	mov	r22, r14
    1d98:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9e:	c5 5a       	subi	r28, 0xA5	; 165
    1da0:	df 4f       	sbci	r29, 0xFF	; 255
    1da2:	e2 e1       	ldi	r30, 0x12	; 18
    1da4:	0c 94 9e 63 	jmp	0xc73c	; 0xc73c <__epilogue_restores__>

00001da8 <_fpadd_parts>:
    1da8:	a0 e0       	ldi	r26, 0x00	; 0
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ea ed       	ldi	r30, 0xDA	; 218
    1dae:	fe e0       	ldi	r31, 0x0E	; 14
    1db0:	0c 94 82 63 	jmp	0xc704	; 0xc704 <__prologue_saves__>
    1db4:	dc 01       	movw	r26, r24
    1db6:	2b 01       	movw	r4, r22
    1db8:	fa 01       	movw	r30, r20
    1dba:	9c 91       	ld	r25, X
    1dbc:	92 30       	cpi	r25, 0x02	; 2
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <_fpadd_parts+0x1a>
    1dc0:	39 c1       	rjmp	.+626    	; 0x2034 <_fpadd_parts+0x28c>
    1dc2:	eb 01       	movw	r28, r22
    1dc4:	88 81       	ld	r24, Y
    1dc6:	82 30       	cpi	r24, 0x02	; 2
    1dc8:	08 f4       	brcc	.+2      	; 0x1dcc <_fpadd_parts+0x24>
    1dca:	33 c1       	rjmp	.+614    	; 0x2032 <_fpadd_parts+0x28a>
    1dcc:	94 30       	cpi	r25, 0x04	; 4
    1dce:	69 f4       	brne	.+26     	; 0x1dea <_fpadd_parts+0x42>
    1dd0:	84 30       	cpi	r24, 0x04	; 4
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <_fpadd_parts+0x2e>
    1dd4:	2f c1       	rjmp	.+606    	; 0x2034 <_fpadd_parts+0x28c>
    1dd6:	11 96       	adiw	r26, 0x01	; 1
    1dd8:	9c 91       	ld	r25, X
    1dda:	11 97       	sbiw	r26, 0x01	; 1
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	98 17       	cp	r25, r24
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <_fpadd_parts+0x3c>
    1de2:	28 c1       	rjmp	.+592    	; 0x2034 <_fpadd_parts+0x28c>
    1de4:	a0 e6       	ldi	r26, 0x60	; 96
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	25 c1       	rjmp	.+586    	; 0x2034 <_fpadd_parts+0x28c>
    1dea:	84 30       	cpi	r24, 0x04	; 4
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <_fpadd_parts+0x48>
    1dee:	21 c1       	rjmp	.+578    	; 0x2032 <_fpadd_parts+0x28a>
    1df0:	82 30       	cpi	r24, 0x02	; 2
    1df2:	a9 f4       	brne	.+42     	; 0x1e1e <_fpadd_parts+0x76>
    1df4:	92 30       	cpi	r25, 0x02	; 2
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <_fpadd_parts+0x52>
    1df8:	1d c1       	rjmp	.+570    	; 0x2034 <_fpadd_parts+0x28c>
    1dfa:	9a 01       	movw	r18, r20
    1dfc:	ad 01       	movw	r20, r26
    1dfe:	88 e0       	ldi	r24, 0x08	; 8
    1e00:	ea 01       	movw	r28, r20
    1e02:	09 90       	ld	r0, Y+
    1e04:	ae 01       	movw	r20, r28
    1e06:	e9 01       	movw	r28, r18
    1e08:	09 92       	st	Y+, r0
    1e0a:	9e 01       	movw	r18, r28
    1e0c:	81 50       	subi	r24, 0x01	; 1
    1e0e:	c1 f7       	brne	.-16     	; 0x1e00 <_fpadd_parts+0x58>
    1e10:	e2 01       	movw	r28, r4
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	11 96       	adiw	r26, 0x01	; 1
    1e16:	9c 91       	ld	r25, X
    1e18:	89 23       	and	r24, r25
    1e1a:	81 83       	std	Z+1, r24	; 0x01
    1e1c:	08 c1       	rjmp	.+528    	; 0x202e <_fpadd_parts+0x286>
    1e1e:	92 30       	cpi	r25, 0x02	; 2
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <_fpadd_parts+0x7c>
    1e22:	07 c1       	rjmp	.+526    	; 0x2032 <_fpadd_parts+0x28a>
    1e24:	12 96       	adiw	r26, 0x02	; 2
    1e26:	2d 90       	ld	r2, X+
    1e28:	3c 90       	ld	r3, X
    1e2a:	13 97       	sbiw	r26, 0x03	; 3
    1e2c:	eb 01       	movw	r28, r22
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	14 96       	adiw	r26, 0x04	; 4
    1e34:	ad 90       	ld	r10, X+
    1e36:	bd 90       	ld	r11, X+
    1e38:	cd 90       	ld	r12, X+
    1e3a:	dc 90       	ld	r13, X
    1e3c:	17 97       	sbiw	r26, 0x07	; 7
    1e3e:	ec 80       	ldd	r14, Y+4	; 0x04
    1e40:	fd 80       	ldd	r15, Y+5	; 0x05
    1e42:	0e 81       	ldd	r16, Y+6	; 0x06
    1e44:	1f 81       	ldd	r17, Y+7	; 0x07
    1e46:	91 01       	movw	r18, r2
    1e48:	28 1b       	sub	r18, r24
    1e4a:	39 0b       	sbc	r19, r25
    1e4c:	b9 01       	movw	r22, r18
    1e4e:	37 ff       	sbrs	r19, 7
    1e50:	04 c0       	rjmp	.+8      	; 0x1e5a <_fpadd_parts+0xb2>
    1e52:	66 27       	eor	r22, r22
    1e54:	77 27       	eor	r23, r23
    1e56:	62 1b       	sub	r22, r18
    1e58:	73 0b       	sbc	r23, r19
    1e5a:	60 32       	cpi	r22, 0x20	; 32
    1e5c:	71 05       	cpc	r23, r1
    1e5e:	0c f0       	brlt	.+2      	; 0x1e62 <_fpadd_parts+0xba>
    1e60:	61 c0       	rjmp	.+194    	; 0x1f24 <_fpadd_parts+0x17c>
    1e62:	12 16       	cp	r1, r18
    1e64:	13 06       	cpc	r1, r19
    1e66:	6c f5       	brge	.+90     	; 0x1ec2 <_fpadd_parts+0x11a>
    1e68:	37 01       	movw	r6, r14
    1e6a:	48 01       	movw	r8, r16
    1e6c:	06 2e       	mov	r0, r22
    1e6e:	04 c0       	rjmp	.+8      	; 0x1e78 <_fpadd_parts+0xd0>
    1e70:	96 94       	lsr	r9
    1e72:	87 94       	ror	r8
    1e74:	77 94       	ror	r7
    1e76:	67 94       	ror	r6
    1e78:	0a 94       	dec	r0
    1e7a:	d2 f7       	brpl	.-12     	; 0x1e70 <_fpadd_parts+0xc8>
    1e7c:	21 e0       	ldi	r18, 0x01	; 1
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <_fpadd_parts+0xe6>
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	44 1f       	adc	r20, r20
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	6a 95       	dec	r22
    1e90:	d2 f7       	brpl	.-12     	; 0x1e86 <_fpadd_parts+0xde>
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	30 40       	sbci	r19, 0x00	; 0
    1e96:	40 40       	sbci	r20, 0x00	; 0
    1e98:	50 40       	sbci	r21, 0x00	; 0
    1e9a:	2e 21       	and	r18, r14
    1e9c:	3f 21       	and	r19, r15
    1e9e:	40 23       	and	r20, r16
    1ea0:	51 23       	and	r21, r17
    1ea2:	21 15       	cp	r18, r1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	41 05       	cpc	r20, r1
    1ea8:	51 05       	cpc	r21, r1
    1eaa:	21 f0       	breq	.+8      	; 0x1eb4 <_fpadd_parts+0x10c>
    1eac:	21 e0       	ldi	r18, 0x01	; 1
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	79 01       	movw	r14, r18
    1eb6:	8a 01       	movw	r16, r20
    1eb8:	e6 28       	or	r14, r6
    1eba:	f7 28       	or	r15, r7
    1ebc:	08 29       	or	r16, r8
    1ebe:	19 29       	or	r17, r9
    1ec0:	3c c0       	rjmp	.+120    	; 0x1f3a <_fpadd_parts+0x192>
    1ec2:	23 2b       	or	r18, r19
    1ec4:	d1 f1       	breq	.+116    	; 0x1f3a <_fpadd_parts+0x192>
    1ec6:	26 0e       	add	r2, r22
    1ec8:	37 1e       	adc	r3, r23
    1eca:	35 01       	movw	r6, r10
    1ecc:	46 01       	movw	r8, r12
    1ece:	06 2e       	mov	r0, r22
    1ed0:	04 c0       	rjmp	.+8      	; 0x1eda <_fpadd_parts+0x132>
    1ed2:	96 94       	lsr	r9
    1ed4:	87 94       	ror	r8
    1ed6:	77 94       	ror	r7
    1ed8:	67 94       	ror	r6
    1eda:	0a 94       	dec	r0
    1edc:	d2 f7       	brpl	.-12     	; 0x1ed2 <_fpadd_parts+0x12a>
    1ede:	21 e0       	ldi	r18, 0x01	; 1
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <_fpadd_parts+0x148>
    1ee8:	22 0f       	add	r18, r18
    1eea:	33 1f       	adc	r19, r19
    1eec:	44 1f       	adc	r20, r20
    1eee:	55 1f       	adc	r21, r21
    1ef0:	6a 95       	dec	r22
    1ef2:	d2 f7       	brpl	.-12     	; 0x1ee8 <_fpadd_parts+0x140>
    1ef4:	21 50       	subi	r18, 0x01	; 1
    1ef6:	30 40       	sbci	r19, 0x00	; 0
    1ef8:	40 40       	sbci	r20, 0x00	; 0
    1efa:	50 40       	sbci	r21, 0x00	; 0
    1efc:	2a 21       	and	r18, r10
    1efe:	3b 21       	and	r19, r11
    1f00:	4c 21       	and	r20, r12
    1f02:	5d 21       	and	r21, r13
    1f04:	21 15       	cp	r18, r1
    1f06:	31 05       	cpc	r19, r1
    1f08:	41 05       	cpc	r20, r1
    1f0a:	51 05       	cpc	r21, r1
    1f0c:	21 f0       	breq	.+8      	; 0x1f16 <_fpadd_parts+0x16e>
    1f0e:	21 e0       	ldi	r18, 0x01	; 1
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	59 01       	movw	r10, r18
    1f18:	6a 01       	movw	r12, r20
    1f1a:	a6 28       	or	r10, r6
    1f1c:	b7 28       	or	r11, r7
    1f1e:	c8 28       	or	r12, r8
    1f20:	d9 28       	or	r13, r9
    1f22:	0b c0       	rjmp	.+22     	; 0x1f3a <_fpadd_parts+0x192>
    1f24:	82 15       	cp	r24, r2
    1f26:	93 05       	cpc	r25, r3
    1f28:	2c f0       	brlt	.+10     	; 0x1f34 <_fpadd_parts+0x18c>
    1f2a:	1c 01       	movw	r2, r24
    1f2c:	aa 24       	eor	r10, r10
    1f2e:	bb 24       	eor	r11, r11
    1f30:	65 01       	movw	r12, r10
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <_fpadd_parts+0x192>
    1f34:	ee 24       	eor	r14, r14
    1f36:	ff 24       	eor	r15, r15
    1f38:	87 01       	movw	r16, r14
    1f3a:	11 96       	adiw	r26, 0x01	; 1
    1f3c:	9c 91       	ld	r25, X
    1f3e:	d2 01       	movw	r26, r4
    1f40:	11 96       	adiw	r26, 0x01	; 1
    1f42:	8c 91       	ld	r24, X
    1f44:	98 17       	cp	r25, r24
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <_fpadd_parts+0x1a2>
    1f48:	45 c0       	rjmp	.+138    	; 0x1fd4 <_fpadd_parts+0x22c>
    1f4a:	99 23       	and	r25, r25
    1f4c:	39 f0       	breq	.+14     	; 0x1f5c <_fpadd_parts+0x1b4>
    1f4e:	a8 01       	movw	r20, r16
    1f50:	97 01       	movw	r18, r14
    1f52:	2a 19       	sub	r18, r10
    1f54:	3b 09       	sbc	r19, r11
    1f56:	4c 09       	sbc	r20, r12
    1f58:	5d 09       	sbc	r21, r13
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <_fpadd_parts+0x1c0>
    1f5c:	a6 01       	movw	r20, r12
    1f5e:	95 01       	movw	r18, r10
    1f60:	2e 19       	sub	r18, r14
    1f62:	3f 09       	sbc	r19, r15
    1f64:	40 0b       	sbc	r20, r16
    1f66:	51 0b       	sbc	r21, r17
    1f68:	57 fd       	sbrc	r21, 7
    1f6a:	08 c0       	rjmp	.+16     	; 0x1f7c <_fpadd_parts+0x1d4>
    1f6c:	11 82       	std	Z+1, r1	; 0x01
    1f6e:	33 82       	std	Z+3, r3	; 0x03
    1f70:	22 82       	std	Z+2, r2	; 0x02
    1f72:	24 83       	std	Z+4, r18	; 0x04
    1f74:	35 83       	std	Z+5, r19	; 0x05
    1f76:	46 83       	std	Z+6, r20	; 0x06
    1f78:	57 83       	std	Z+7, r21	; 0x07
    1f7a:	1d c0       	rjmp	.+58     	; 0x1fb6 <_fpadd_parts+0x20e>
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	81 83       	std	Z+1, r24	; 0x01
    1f80:	33 82       	std	Z+3, r3	; 0x03
    1f82:	22 82       	std	Z+2, r2	; 0x02
    1f84:	88 27       	eor	r24, r24
    1f86:	99 27       	eor	r25, r25
    1f88:	dc 01       	movw	r26, r24
    1f8a:	82 1b       	sub	r24, r18
    1f8c:	93 0b       	sbc	r25, r19
    1f8e:	a4 0b       	sbc	r26, r20
    1f90:	b5 0b       	sbc	r27, r21
    1f92:	84 83       	std	Z+4, r24	; 0x04
    1f94:	95 83       	std	Z+5, r25	; 0x05
    1f96:	a6 83       	std	Z+6, r26	; 0x06
    1f98:	b7 83       	std	Z+7, r27	; 0x07
    1f9a:	0d c0       	rjmp	.+26     	; 0x1fb6 <_fpadd_parts+0x20e>
    1f9c:	22 0f       	add	r18, r18
    1f9e:	33 1f       	adc	r19, r19
    1fa0:	44 1f       	adc	r20, r20
    1fa2:	55 1f       	adc	r21, r21
    1fa4:	24 83       	std	Z+4, r18	; 0x04
    1fa6:	35 83       	std	Z+5, r19	; 0x05
    1fa8:	46 83       	std	Z+6, r20	; 0x06
    1faa:	57 83       	std	Z+7, r21	; 0x07
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	93 83       	std	Z+3, r25	; 0x03
    1fb4:	82 83       	std	Z+2, r24	; 0x02
    1fb6:	24 81       	ldd	r18, Z+4	; 0x04
    1fb8:	35 81       	ldd	r19, Z+5	; 0x05
    1fba:	46 81       	ldd	r20, Z+6	; 0x06
    1fbc:	57 81       	ldd	r21, Z+7	; 0x07
    1fbe:	da 01       	movw	r26, r20
    1fc0:	c9 01       	movw	r24, r18
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	a1 09       	sbc	r26, r1
    1fc6:	b1 09       	sbc	r27, r1
    1fc8:	8f 5f       	subi	r24, 0xFF	; 255
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	af 4f       	sbci	r26, 0xFF	; 255
    1fce:	bf 43       	sbci	r27, 0x3F	; 63
    1fd0:	28 f3       	brcs	.-54     	; 0x1f9c <_fpadd_parts+0x1f4>
    1fd2:	0b c0       	rjmp	.+22     	; 0x1fea <_fpadd_parts+0x242>
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	33 82       	std	Z+3, r3	; 0x03
    1fd8:	22 82       	std	Z+2, r2	; 0x02
    1fda:	ea 0c       	add	r14, r10
    1fdc:	fb 1c       	adc	r15, r11
    1fde:	0c 1d       	adc	r16, r12
    1fe0:	1d 1d       	adc	r17, r13
    1fe2:	e4 82       	std	Z+4, r14	; 0x04
    1fe4:	f5 82       	std	Z+5, r15	; 0x05
    1fe6:	06 83       	std	Z+6, r16	; 0x06
    1fe8:	17 83       	std	Z+7, r17	; 0x07
    1fea:	83 e0       	ldi	r24, 0x03	; 3
    1fec:	80 83       	st	Z, r24
    1fee:	24 81       	ldd	r18, Z+4	; 0x04
    1ff0:	35 81       	ldd	r19, Z+5	; 0x05
    1ff2:	46 81       	ldd	r20, Z+6	; 0x06
    1ff4:	57 81       	ldd	r21, Z+7	; 0x07
    1ff6:	57 ff       	sbrs	r21, 7
    1ff8:	1a c0       	rjmp	.+52     	; 0x202e <_fpadd_parts+0x286>
    1ffa:	c9 01       	movw	r24, r18
    1ffc:	aa 27       	eor	r26, r26
    1ffe:	97 fd       	sbrc	r25, 7
    2000:	a0 95       	com	r26
    2002:	ba 2f       	mov	r27, r26
    2004:	81 70       	andi	r24, 0x01	; 1
    2006:	90 70       	andi	r25, 0x00	; 0
    2008:	a0 70       	andi	r26, 0x00	; 0
    200a:	b0 70       	andi	r27, 0x00	; 0
    200c:	56 95       	lsr	r21
    200e:	47 95       	ror	r20
    2010:	37 95       	ror	r19
    2012:	27 95       	ror	r18
    2014:	82 2b       	or	r24, r18
    2016:	93 2b       	or	r25, r19
    2018:	a4 2b       	or	r26, r20
    201a:	b5 2b       	or	r27, r21
    201c:	84 83       	std	Z+4, r24	; 0x04
    201e:	95 83       	std	Z+5, r25	; 0x05
    2020:	a6 83       	std	Z+6, r26	; 0x06
    2022:	b7 83       	std	Z+7, r27	; 0x07
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	01 96       	adiw	r24, 0x01	; 1
    202a:	93 83       	std	Z+3, r25	; 0x03
    202c:	82 83       	std	Z+2, r24	; 0x02
    202e:	df 01       	movw	r26, r30
    2030:	01 c0       	rjmp	.+2      	; 0x2034 <_fpadd_parts+0x28c>
    2032:	d2 01       	movw	r26, r4
    2034:	cd 01       	movw	r24, r26
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	e2 e1       	ldi	r30, 0x12	; 18
    203c:	0c 94 9e 63 	jmp	0xc73c	; 0xc73c <__epilogue_restores__>

00002040 <__subsf3>:
    2040:	a0 e2       	ldi	r26, 0x20	; 32
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e6 e2       	ldi	r30, 0x26	; 38
    2046:	f0 e1       	ldi	r31, 0x10	; 16
    2048:	0c 94 8e 63 	jmp	0xc71c	; 0xc71c <__prologue_saves__+0x18>
    204c:	69 83       	std	Y+1, r22	; 0x01
    204e:	7a 83       	std	Y+2, r23	; 0x02
    2050:	8b 83       	std	Y+3, r24	; 0x03
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	2d 83       	std	Y+5, r18	; 0x05
    2056:	3e 83       	std	Y+6, r19	; 0x06
    2058:	4f 83       	std	Y+7, r20	; 0x07
    205a:	58 87       	std	Y+8, r21	; 0x08
    205c:	e9 e0       	ldi	r30, 0x09	; 9
    205e:	ee 2e       	mov	r14, r30
    2060:	f1 2c       	mov	r15, r1
    2062:	ec 0e       	add	r14, r28
    2064:	fd 1e       	adc	r15, r29
    2066:	ce 01       	movw	r24, r28
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	b7 01       	movw	r22, r14
    206c:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2070:	8e 01       	movw	r16, r28
    2072:	0f 5e       	subi	r16, 0xEF	; 239
    2074:	1f 4f       	sbci	r17, 0xFF	; 255
    2076:	ce 01       	movw	r24, r28
    2078:	05 96       	adiw	r24, 0x05	; 5
    207a:	b8 01       	movw	r22, r16
    207c:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2080:	8a 89       	ldd	r24, Y+18	; 0x12
    2082:	91 e0       	ldi	r25, 0x01	; 1
    2084:	89 27       	eor	r24, r25
    2086:	8a 8b       	std	Y+18, r24	; 0x12
    2088:	c7 01       	movw	r24, r14
    208a:	b8 01       	movw	r22, r16
    208c:	ae 01       	movw	r20, r28
    208e:	47 5e       	subi	r20, 0xE7	; 231
    2090:	5f 4f       	sbci	r21, 0xFF	; 255
    2092:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_fpadd_parts>
    2096:	0e 94 2e 14 	call	0x285c	; 0x285c <__pack_f>
    209a:	a0 96       	adiw	r28, 0x20	; 32
    209c:	e6 e0       	ldi	r30, 0x06	; 6
    209e:	0c 94 aa 63 	jmp	0xc754	; 0xc754 <__epilogue_restores__+0x18>

000020a2 <__addsf3>:
    20a2:	a0 e2       	ldi	r26, 0x20	; 32
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e7 e5       	ldi	r30, 0x57	; 87
    20a8:	f0 e1       	ldi	r31, 0x10	; 16
    20aa:	0c 94 8e 63 	jmp	0xc71c	; 0xc71c <__prologue_saves__+0x18>
    20ae:	69 83       	std	Y+1, r22	; 0x01
    20b0:	7a 83       	std	Y+2, r23	; 0x02
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    20b4:	9c 83       	std	Y+4, r25	; 0x04
    20b6:	2d 83       	std	Y+5, r18	; 0x05
    20b8:	3e 83       	std	Y+6, r19	; 0x06
    20ba:	4f 83       	std	Y+7, r20	; 0x07
    20bc:	58 87       	std	Y+8, r21	; 0x08
    20be:	f9 e0       	ldi	r31, 0x09	; 9
    20c0:	ef 2e       	mov	r14, r31
    20c2:	f1 2c       	mov	r15, r1
    20c4:	ec 0e       	add	r14, r28
    20c6:	fd 1e       	adc	r15, r29
    20c8:	ce 01       	movw	r24, r28
    20ca:	01 96       	adiw	r24, 0x01	; 1
    20cc:	b7 01       	movw	r22, r14
    20ce:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    20d2:	8e 01       	movw	r16, r28
    20d4:	0f 5e       	subi	r16, 0xEF	; 239
    20d6:	1f 4f       	sbci	r17, 0xFF	; 255
    20d8:	ce 01       	movw	r24, r28
    20da:	05 96       	adiw	r24, 0x05	; 5
    20dc:	b8 01       	movw	r22, r16
    20de:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    20e2:	c7 01       	movw	r24, r14
    20e4:	b8 01       	movw	r22, r16
    20e6:	ae 01       	movw	r20, r28
    20e8:	47 5e       	subi	r20, 0xE7	; 231
    20ea:	5f 4f       	sbci	r21, 0xFF	; 255
    20ec:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_fpadd_parts>
    20f0:	0e 94 2e 14 	call	0x285c	; 0x285c <__pack_f>
    20f4:	a0 96       	adiw	r28, 0x20	; 32
    20f6:	e6 e0       	ldi	r30, 0x06	; 6
    20f8:	0c 94 aa 63 	jmp	0xc754	; 0xc754 <__epilogue_restores__+0x18>

000020fc <__mulsf3>:
    20fc:	a0 e2       	ldi	r26, 0x20	; 32
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e4 e8       	ldi	r30, 0x84	; 132
    2102:	f0 e1       	ldi	r31, 0x10	; 16
    2104:	0c 94 82 63 	jmp	0xc704	; 0xc704 <__prologue_saves__>
    2108:	69 83       	std	Y+1, r22	; 0x01
    210a:	7a 83       	std	Y+2, r23	; 0x02
    210c:	8b 83       	std	Y+3, r24	; 0x03
    210e:	9c 83       	std	Y+4, r25	; 0x04
    2110:	2d 83       	std	Y+5, r18	; 0x05
    2112:	3e 83       	std	Y+6, r19	; 0x06
    2114:	4f 83       	std	Y+7, r20	; 0x07
    2116:	58 87       	std	Y+8, r21	; 0x08
    2118:	ce 01       	movw	r24, r28
    211a:	01 96       	adiw	r24, 0x01	; 1
    211c:	be 01       	movw	r22, r28
    211e:	67 5f       	subi	r22, 0xF7	; 247
    2120:	7f 4f       	sbci	r23, 0xFF	; 255
    2122:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2126:	ce 01       	movw	r24, r28
    2128:	05 96       	adiw	r24, 0x05	; 5
    212a:	be 01       	movw	r22, r28
    212c:	6f 5e       	subi	r22, 0xEF	; 239
    212e:	7f 4f       	sbci	r23, 0xFF	; 255
    2130:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2134:	99 85       	ldd	r25, Y+9	; 0x09
    2136:	92 30       	cpi	r25, 0x02	; 2
    2138:	88 f0       	brcs	.+34     	; 0x215c <__mulsf3+0x60>
    213a:	89 89       	ldd	r24, Y+17	; 0x11
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	c8 f0       	brcs	.+50     	; 0x2172 <__mulsf3+0x76>
    2140:	94 30       	cpi	r25, 0x04	; 4
    2142:	19 f4       	brne	.+6      	; 0x214a <__mulsf3+0x4e>
    2144:	82 30       	cpi	r24, 0x02	; 2
    2146:	51 f4       	brne	.+20     	; 0x215c <__mulsf3+0x60>
    2148:	04 c0       	rjmp	.+8      	; 0x2152 <__mulsf3+0x56>
    214a:	84 30       	cpi	r24, 0x04	; 4
    214c:	29 f4       	brne	.+10     	; 0x2158 <__mulsf3+0x5c>
    214e:	92 30       	cpi	r25, 0x02	; 2
    2150:	81 f4       	brne	.+32     	; 0x2172 <__mulsf3+0x76>
    2152:	80 e6       	ldi	r24, 0x60	; 96
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	c6 c0       	rjmp	.+396    	; 0x22e4 <__mulsf3+0x1e8>
    2158:	92 30       	cpi	r25, 0x02	; 2
    215a:	49 f4       	brne	.+18     	; 0x216e <__mulsf3+0x72>
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	8a 89       	ldd	r24, Y+18	; 0x12
    2162:	98 13       	cpse	r25, r24
    2164:	21 e0       	ldi	r18, 0x01	; 1
    2166:	2a 87       	std	Y+10, r18	; 0x0a
    2168:	ce 01       	movw	r24, r28
    216a:	09 96       	adiw	r24, 0x09	; 9
    216c:	bb c0       	rjmp	.+374    	; 0x22e4 <__mulsf3+0x1e8>
    216e:	82 30       	cpi	r24, 0x02	; 2
    2170:	49 f4       	brne	.+18     	; 0x2184 <__mulsf3+0x88>
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	8a 89       	ldd	r24, Y+18	; 0x12
    2178:	98 13       	cpse	r25, r24
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	2a 8b       	std	Y+18, r18	; 0x12
    217e:	ce 01       	movw	r24, r28
    2180:	41 96       	adiw	r24, 0x11	; 17
    2182:	b0 c0       	rjmp	.+352    	; 0x22e4 <__mulsf3+0x1e8>
    2184:	2d 84       	ldd	r2, Y+13	; 0x0d
    2186:	3e 84       	ldd	r3, Y+14	; 0x0e
    2188:	4f 84       	ldd	r4, Y+15	; 0x0f
    218a:	58 88       	ldd	r5, Y+16	; 0x10
    218c:	6d 88       	ldd	r6, Y+21	; 0x15
    218e:	7e 88       	ldd	r7, Y+22	; 0x16
    2190:	8f 88       	ldd	r8, Y+23	; 0x17
    2192:	98 8c       	ldd	r9, Y+24	; 0x18
    2194:	ee 24       	eor	r14, r14
    2196:	ff 24       	eor	r15, r15
    2198:	87 01       	movw	r16, r14
    219a:	aa 24       	eor	r10, r10
    219c:	bb 24       	eor	r11, r11
    219e:	65 01       	movw	r12, r10
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	e0 e0       	ldi	r30, 0x00	; 0
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	c1 01       	movw	r24, r2
    21ae:	81 70       	andi	r24, 0x01	; 1
    21b0:	90 70       	andi	r25, 0x00	; 0
    21b2:	89 2b       	or	r24, r25
    21b4:	e9 f0       	breq	.+58     	; 0x21f0 <__mulsf3+0xf4>
    21b6:	e6 0c       	add	r14, r6
    21b8:	f7 1c       	adc	r15, r7
    21ba:	08 1d       	adc	r16, r8
    21bc:	19 1d       	adc	r17, r9
    21be:	9a 01       	movw	r18, r20
    21c0:	ab 01       	movw	r20, r22
    21c2:	2a 0d       	add	r18, r10
    21c4:	3b 1d       	adc	r19, r11
    21c6:	4c 1d       	adc	r20, r12
    21c8:	5d 1d       	adc	r21, r13
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	a0 e0       	ldi	r26, 0x00	; 0
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e6 14       	cp	r14, r6
    21d4:	f7 04       	cpc	r15, r7
    21d6:	08 05       	cpc	r16, r8
    21d8:	19 05       	cpc	r17, r9
    21da:	20 f4       	brcc	.+8      	; 0x21e4 <__mulsf3+0xe8>
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a0 e0       	ldi	r26, 0x00	; 0
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	ba 01       	movw	r22, r20
    21e6:	a9 01       	movw	r20, r18
    21e8:	48 0f       	add	r20, r24
    21ea:	59 1f       	adc	r21, r25
    21ec:	6a 1f       	adc	r22, r26
    21ee:	7b 1f       	adc	r23, r27
    21f0:	aa 0c       	add	r10, r10
    21f2:	bb 1c       	adc	r11, r11
    21f4:	cc 1c       	adc	r12, r12
    21f6:	dd 1c       	adc	r13, r13
    21f8:	97 fe       	sbrs	r9, 7
    21fa:	08 c0       	rjmp	.+16     	; 0x220c <__mulsf3+0x110>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	a8 2a       	or	r10, r24
    2206:	b9 2a       	or	r11, r25
    2208:	ca 2a       	or	r12, r26
    220a:	db 2a       	or	r13, r27
    220c:	31 96       	adiw	r30, 0x01	; 1
    220e:	e0 32       	cpi	r30, 0x20	; 32
    2210:	f1 05       	cpc	r31, r1
    2212:	49 f0       	breq	.+18     	; 0x2226 <__mulsf3+0x12a>
    2214:	66 0c       	add	r6, r6
    2216:	77 1c       	adc	r7, r7
    2218:	88 1c       	adc	r8, r8
    221a:	99 1c       	adc	r9, r9
    221c:	56 94       	lsr	r5
    221e:	47 94       	ror	r4
    2220:	37 94       	ror	r3
    2222:	27 94       	ror	r2
    2224:	c3 cf       	rjmp	.-122    	; 0x21ac <__mulsf3+0xb0>
    2226:	fa 85       	ldd	r31, Y+10	; 0x0a
    2228:	ea 89       	ldd	r30, Y+18	; 0x12
    222a:	2b 89       	ldd	r18, Y+19	; 0x13
    222c:	3c 89       	ldd	r19, Y+20	; 0x14
    222e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2230:	9c 85       	ldd	r25, Y+12	; 0x0c
    2232:	28 0f       	add	r18, r24
    2234:	39 1f       	adc	r19, r25
    2236:	2e 5f       	subi	r18, 0xFE	; 254
    2238:	3f 4f       	sbci	r19, 0xFF	; 255
    223a:	17 c0       	rjmp	.+46     	; 0x226a <__mulsf3+0x16e>
    223c:	ca 01       	movw	r24, r20
    223e:	81 70       	andi	r24, 0x01	; 1
    2240:	90 70       	andi	r25, 0x00	; 0
    2242:	89 2b       	or	r24, r25
    2244:	61 f0       	breq	.+24     	; 0x225e <__mulsf3+0x162>
    2246:	16 95       	lsr	r17
    2248:	07 95       	ror	r16
    224a:	f7 94       	ror	r15
    224c:	e7 94       	ror	r14
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 e0       	ldi	r26, 0x00	; 0
    2254:	b0 e8       	ldi	r27, 0x80	; 128
    2256:	e8 2a       	or	r14, r24
    2258:	f9 2a       	or	r15, r25
    225a:	0a 2b       	or	r16, r26
    225c:	1b 2b       	or	r17, r27
    225e:	76 95       	lsr	r23
    2260:	67 95       	ror	r22
    2262:	57 95       	ror	r21
    2264:	47 95       	ror	r20
    2266:	2f 5f       	subi	r18, 0xFF	; 255
    2268:	3f 4f       	sbci	r19, 0xFF	; 255
    226a:	77 fd       	sbrc	r23, 7
    226c:	e7 cf       	rjmp	.-50     	; 0x223c <__mulsf3+0x140>
    226e:	0c c0       	rjmp	.+24     	; 0x2288 <__mulsf3+0x18c>
    2270:	44 0f       	add	r20, r20
    2272:	55 1f       	adc	r21, r21
    2274:	66 1f       	adc	r22, r22
    2276:	77 1f       	adc	r23, r23
    2278:	17 fd       	sbrc	r17, 7
    227a:	41 60       	ori	r20, 0x01	; 1
    227c:	ee 0c       	add	r14, r14
    227e:	ff 1c       	adc	r15, r15
    2280:	00 1f       	adc	r16, r16
    2282:	11 1f       	adc	r17, r17
    2284:	21 50       	subi	r18, 0x01	; 1
    2286:	30 40       	sbci	r19, 0x00	; 0
    2288:	40 30       	cpi	r20, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	59 07       	cpc	r21, r25
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	69 07       	cpc	r22, r25
    2292:	90 e4       	ldi	r25, 0x40	; 64
    2294:	79 07       	cpc	r23, r25
    2296:	60 f3       	brcs	.-40     	; 0x2270 <__mulsf3+0x174>
    2298:	2b 8f       	std	Y+27, r18	; 0x1b
    229a:	3c 8f       	std	Y+28, r19	; 0x1c
    229c:	db 01       	movw	r26, r22
    229e:	ca 01       	movw	r24, r20
    22a0:	8f 77       	andi	r24, 0x7F	; 127
    22a2:	90 70       	andi	r25, 0x00	; 0
    22a4:	a0 70       	andi	r26, 0x00	; 0
    22a6:	b0 70       	andi	r27, 0x00	; 0
    22a8:	80 34       	cpi	r24, 0x40	; 64
    22aa:	91 05       	cpc	r25, r1
    22ac:	a1 05       	cpc	r26, r1
    22ae:	b1 05       	cpc	r27, r1
    22b0:	61 f4       	brne	.+24     	; 0x22ca <__mulsf3+0x1ce>
    22b2:	47 fd       	sbrc	r20, 7
    22b4:	0a c0       	rjmp	.+20     	; 0x22ca <__mulsf3+0x1ce>
    22b6:	e1 14       	cp	r14, r1
    22b8:	f1 04       	cpc	r15, r1
    22ba:	01 05       	cpc	r16, r1
    22bc:	11 05       	cpc	r17, r1
    22be:	29 f0       	breq	.+10     	; 0x22ca <__mulsf3+0x1ce>
    22c0:	40 5c       	subi	r20, 0xC0	; 192
    22c2:	5f 4f       	sbci	r21, 0xFF	; 255
    22c4:	6f 4f       	sbci	r22, 0xFF	; 255
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	40 78       	andi	r20, 0x80	; 128
    22ca:	1a 8e       	std	Y+26, r1	; 0x1a
    22cc:	fe 17       	cp	r31, r30
    22ce:	11 f0       	breq	.+4      	; 0x22d4 <__mulsf3+0x1d8>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	8a 8f       	std	Y+26, r24	; 0x1a
    22d4:	4d 8f       	std	Y+29, r20	; 0x1d
    22d6:	5e 8f       	std	Y+30, r21	; 0x1e
    22d8:	6f 8f       	std	Y+31, r22	; 0x1f
    22da:	78 a3       	std	Y+32, r23	; 0x20
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	89 8f       	std	Y+25, r24	; 0x19
    22e0:	ce 01       	movw	r24, r28
    22e2:	49 96       	adiw	r24, 0x19	; 25
    22e4:	0e 94 2e 14 	call	0x285c	; 0x285c <__pack_f>
    22e8:	a0 96       	adiw	r28, 0x20	; 32
    22ea:	e2 e1       	ldi	r30, 0x12	; 18
    22ec:	0c 94 9e 63 	jmp	0xc73c	; 0xc73c <__epilogue_restores__>

000022f0 <__divsf3>:
    22f0:	a8 e1       	ldi	r26, 0x18	; 24
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	ee e7       	ldi	r30, 0x7E	; 126
    22f6:	f1 e1       	ldi	r31, 0x11	; 17
    22f8:	0c 94 8a 63 	jmp	0xc714	; 0xc714 <__prologue_saves__+0x10>
    22fc:	69 83       	std	Y+1, r22	; 0x01
    22fe:	7a 83       	std	Y+2, r23	; 0x02
    2300:	8b 83       	std	Y+3, r24	; 0x03
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	2d 83       	std	Y+5, r18	; 0x05
    2306:	3e 83       	std	Y+6, r19	; 0x06
    2308:	4f 83       	std	Y+7, r20	; 0x07
    230a:	58 87       	std	Y+8, r21	; 0x08
    230c:	b9 e0       	ldi	r27, 0x09	; 9
    230e:	eb 2e       	mov	r14, r27
    2310:	f1 2c       	mov	r15, r1
    2312:	ec 0e       	add	r14, r28
    2314:	fd 1e       	adc	r15, r29
    2316:	ce 01       	movw	r24, r28
    2318:	01 96       	adiw	r24, 0x01	; 1
    231a:	b7 01       	movw	r22, r14
    231c:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2320:	8e 01       	movw	r16, r28
    2322:	0f 5e       	subi	r16, 0xEF	; 239
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	ce 01       	movw	r24, r28
    2328:	05 96       	adiw	r24, 0x05	; 5
    232a:	b8 01       	movw	r22, r16
    232c:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2330:	29 85       	ldd	r18, Y+9	; 0x09
    2332:	22 30       	cpi	r18, 0x02	; 2
    2334:	08 f4       	brcc	.+2      	; 0x2338 <__divsf3+0x48>
    2336:	7e c0       	rjmp	.+252    	; 0x2434 <__divsf3+0x144>
    2338:	39 89       	ldd	r19, Y+17	; 0x11
    233a:	32 30       	cpi	r19, 0x02	; 2
    233c:	10 f4       	brcc	.+4      	; 0x2342 <__divsf3+0x52>
    233e:	b8 01       	movw	r22, r16
    2340:	7c c0       	rjmp	.+248    	; 0x243a <__divsf3+0x14a>
    2342:	8a 85       	ldd	r24, Y+10	; 0x0a
    2344:	9a 89       	ldd	r25, Y+18	; 0x12
    2346:	89 27       	eor	r24, r25
    2348:	8a 87       	std	Y+10, r24	; 0x0a
    234a:	24 30       	cpi	r18, 0x04	; 4
    234c:	11 f0       	breq	.+4      	; 0x2352 <__divsf3+0x62>
    234e:	22 30       	cpi	r18, 0x02	; 2
    2350:	31 f4       	brne	.+12     	; 0x235e <__divsf3+0x6e>
    2352:	23 17       	cp	r18, r19
    2354:	09 f0       	breq	.+2      	; 0x2358 <__divsf3+0x68>
    2356:	6e c0       	rjmp	.+220    	; 0x2434 <__divsf3+0x144>
    2358:	60 e6       	ldi	r22, 0x60	; 96
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	6e c0       	rjmp	.+220    	; 0x243a <__divsf3+0x14a>
    235e:	34 30       	cpi	r19, 0x04	; 4
    2360:	39 f4       	brne	.+14     	; 0x2370 <__divsf3+0x80>
    2362:	1d 86       	std	Y+13, r1	; 0x0d
    2364:	1e 86       	std	Y+14, r1	; 0x0e
    2366:	1f 86       	std	Y+15, r1	; 0x0f
    2368:	18 8a       	std	Y+16, r1	; 0x10
    236a:	1c 86       	std	Y+12, r1	; 0x0c
    236c:	1b 86       	std	Y+11, r1	; 0x0b
    236e:	04 c0       	rjmp	.+8      	; 0x2378 <__divsf3+0x88>
    2370:	32 30       	cpi	r19, 0x02	; 2
    2372:	21 f4       	brne	.+8      	; 0x237c <__divsf3+0x8c>
    2374:	84 e0       	ldi	r24, 0x04	; 4
    2376:	89 87       	std	Y+9, r24	; 0x09
    2378:	b7 01       	movw	r22, r14
    237a:	5f c0       	rjmp	.+190    	; 0x243a <__divsf3+0x14a>
    237c:	2b 85       	ldd	r18, Y+11	; 0x0b
    237e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2380:	8b 89       	ldd	r24, Y+19	; 0x13
    2382:	9c 89       	ldd	r25, Y+20	; 0x14
    2384:	28 1b       	sub	r18, r24
    2386:	39 0b       	sbc	r19, r25
    2388:	3c 87       	std	Y+12, r19	; 0x0c
    238a:	2b 87       	std	Y+11, r18	; 0x0b
    238c:	ed 84       	ldd	r14, Y+13	; 0x0d
    238e:	fe 84       	ldd	r15, Y+14	; 0x0e
    2390:	0f 85       	ldd	r16, Y+15	; 0x0f
    2392:	18 89       	ldd	r17, Y+16	; 0x10
    2394:	ad 88       	ldd	r10, Y+21	; 0x15
    2396:	be 88       	ldd	r11, Y+22	; 0x16
    2398:	cf 88       	ldd	r12, Y+23	; 0x17
    239a:	d8 8c       	ldd	r13, Y+24	; 0x18
    239c:	ea 14       	cp	r14, r10
    239e:	fb 04       	cpc	r15, r11
    23a0:	0c 05       	cpc	r16, r12
    23a2:	1d 05       	cpc	r17, r13
    23a4:	40 f4       	brcc	.+16     	; 0x23b6 <__divsf3+0xc6>
    23a6:	ee 0c       	add	r14, r14
    23a8:	ff 1c       	adc	r15, r15
    23aa:	00 1f       	adc	r16, r16
    23ac:	11 1f       	adc	r17, r17
    23ae:	21 50       	subi	r18, 0x01	; 1
    23b0:	30 40       	sbci	r19, 0x00	; 0
    23b2:	3c 87       	std	Y+12, r19	; 0x0c
    23b4:	2b 87       	std	Y+11, r18	; 0x0b
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	b0 e4       	ldi	r27, 0x40	; 64
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	ea 14       	cp	r14, r10
    23cc:	fb 04       	cpc	r15, r11
    23ce:	0c 05       	cpc	r16, r12
    23d0:	1d 05       	cpc	r17, r13
    23d2:	40 f0       	brcs	.+16     	; 0x23e4 <__divsf3+0xf4>
    23d4:	28 2b       	or	r18, r24
    23d6:	39 2b       	or	r19, r25
    23d8:	4a 2b       	or	r20, r26
    23da:	5b 2b       	or	r21, r27
    23dc:	ea 18       	sub	r14, r10
    23de:	fb 08       	sbc	r15, r11
    23e0:	0c 09       	sbc	r16, r12
    23e2:	1d 09       	sbc	r17, r13
    23e4:	b6 95       	lsr	r27
    23e6:	a7 95       	ror	r26
    23e8:	97 95       	ror	r25
    23ea:	87 95       	ror	r24
    23ec:	ee 0c       	add	r14, r14
    23ee:	ff 1c       	adc	r15, r15
    23f0:	00 1f       	adc	r16, r16
    23f2:	11 1f       	adc	r17, r17
    23f4:	6f 5f       	subi	r22, 0xFF	; 255
    23f6:	7f 4f       	sbci	r23, 0xFF	; 255
    23f8:	6f 31       	cpi	r22, 0x1F	; 31
    23fa:	71 05       	cpc	r23, r1
    23fc:	31 f7       	brne	.-52     	; 0x23ca <__divsf3+0xda>
    23fe:	da 01       	movw	r26, r20
    2400:	c9 01       	movw	r24, r18
    2402:	8f 77       	andi	r24, 0x7F	; 127
    2404:	90 70       	andi	r25, 0x00	; 0
    2406:	a0 70       	andi	r26, 0x00	; 0
    2408:	b0 70       	andi	r27, 0x00	; 0
    240a:	80 34       	cpi	r24, 0x40	; 64
    240c:	91 05       	cpc	r25, r1
    240e:	a1 05       	cpc	r26, r1
    2410:	b1 05       	cpc	r27, r1
    2412:	61 f4       	brne	.+24     	; 0x242c <__divsf3+0x13c>
    2414:	27 fd       	sbrc	r18, 7
    2416:	0a c0       	rjmp	.+20     	; 0x242c <__divsf3+0x13c>
    2418:	e1 14       	cp	r14, r1
    241a:	f1 04       	cpc	r15, r1
    241c:	01 05       	cpc	r16, r1
    241e:	11 05       	cpc	r17, r1
    2420:	29 f0       	breq	.+10     	; 0x242c <__divsf3+0x13c>
    2422:	20 5c       	subi	r18, 0xC0	; 192
    2424:	3f 4f       	sbci	r19, 0xFF	; 255
    2426:	4f 4f       	sbci	r20, 0xFF	; 255
    2428:	5f 4f       	sbci	r21, 0xFF	; 255
    242a:	20 78       	andi	r18, 0x80	; 128
    242c:	2d 87       	std	Y+13, r18	; 0x0d
    242e:	3e 87       	std	Y+14, r19	; 0x0e
    2430:	4f 87       	std	Y+15, r20	; 0x0f
    2432:	58 8b       	std	Y+16, r21	; 0x10
    2434:	be 01       	movw	r22, r28
    2436:	67 5f       	subi	r22, 0xF7	; 247
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	cb 01       	movw	r24, r22
    243c:	0e 94 2e 14 	call	0x285c	; 0x285c <__pack_f>
    2440:	68 96       	adiw	r28, 0x18	; 24
    2442:	ea e0       	ldi	r30, 0x0A	; 10
    2444:	0c 94 a6 63 	jmp	0xc74c	; 0xc74c <__epilogue_restores__+0x10>

00002448 <__gtsf2>:
    2448:	a8 e1       	ldi	r26, 0x18	; 24
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	ea e2       	ldi	r30, 0x2A	; 42
    244e:	f2 e1       	ldi	r31, 0x12	; 18
    2450:	0c 94 8e 63 	jmp	0xc71c	; 0xc71c <__prologue_saves__+0x18>
    2454:	69 83       	std	Y+1, r22	; 0x01
    2456:	7a 83       	std	Y+2, r23	; 0x02
    2458:	8b 83       	std	Y+3, r24	; 0x03
    245a:	9c 83       	std	Y+4, r25	; 0x04
    245c:	2d 83       	std	Y+5, r18	; 0x05
    245e:	3e 83       	std	Y+6, r19	; 0x06
    2460:	4f 83       	std	Y+7, r20	; 0x07
    2462:	58 87       	std	Y+8, r21	; 0x08
    2464:	89 e0       	ldi	r24, 0x09	; 9
    2466:	e8 2e       	mov	r14, r24
    2468:	f1 2c       	mov	r15, r1
    246a:	ec 0e       	add	r14, r28
    246c:	fd 1e       	adc	r15, r29
    246e:	ce 01       	movw	r24, r28
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	b7 01       	movw	r22, r14
    2474:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2478:	8e 01       	movw	r16, r28
    247a:	0f 5e       	subi	r16, 0xEF	; 239
    247c:	1f 4f       	sbci	r17, 0xFF	; 255
    247e:	ce 01       	movw	r24, r28
    2480:	05 96       	adiw	r24, 0x05	; 5
    2482:	b8 01       	movw	r22, r16
    2484:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	82 30       	cpi	r24, 0x02	; 2
    248c:	40 f0       	brcs	.+16     	; 0x249e <__gtsf2+0x56>
    248e:	89 89       	ldd	r24, Y+17	; 0x11
    2490:	82 30       	cpi	r24, 0x02	; 2
    2492:	28 f0       	brcs	.+10     	; 0x249e <__gtsf2+0x56>
    2494:	c7 01       	movw	r24, r14
    2496:	b8 01       	movw	r22, r16
    2498:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <__fpcmp_parts_f>
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <__gtsf2+0x58>
    249e:	8f ef       	ldi	r24, 0xFF	; 255
    24a0:	68 96       	adiw	r28, 0x18	; 24
    24a2:	e6 e0       	ldi	r30, 0x06	; 6
    24a4:	0c 94 aa 63 	jmp	0xc754	; 0xc754 <__epilogue_restores__+0x18>

000024a8 <__gesf2>:
    24a8:	a8 e1       	ldi	r26, 0x18	; 24
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	ea e5       	ldi	r30, 0x5A	; 90
    24ae:	f2 e1       	ldi	r31, 0x12	; 18
    24b0:	0c 94 8e 63 	jmp	0xc71c	; 0xc71c <__prologue_saves__+0x18>
    24b4:	69 83       	std	Y+1, r22	; 0x01
    24b6:	7a 83       	std	Y+2, r23	; 0x02
    24b8:	8b 83       	std	Y+3, r24	; 0x03
    24ba:	9c 83       	std	Y+4, r25	; 0x04
    24bc:	2d 83       	std	Y+5, r18	; 0x05
    24be:	3e 83       	std	Y+6, r19	; 0x06
    24c0:	4f 83       	std	Y+7, r20	; 0x07
    24c2:	58 87       	std	Y+8, r21	; 0x08
    24c4:	89 e0       	ldi	r24, 0x09	; 9
    24c6:	e8 2e       	mov	r14, r24
    24c8:	f1 2c       	mov	r15, r1
    24ca:	ec 0e       	add	r14, r28
    24cc:	fd 1e       	adc	r15, r29
    24ce:	ce 01       	movw	r24, r28
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	b7 01       	movw	r22, r14
    24d4:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    24d8:	8e 01       	movw	r16, r28
    24da:	0f 5e       	subi	r16, 0xEF	; 239
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	ce 01       	movw	r24, r28
    24e0:	05 96       	adiw	r24, 0x05	; 5
    24e2:	b8 01       	movw	r22, r16
    24e4:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    24e8:	89 85       	ldd	r24, Y+9	; 0x09
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	40 f0       	brcs	.+16     	; 0x24fe <__gesf2+0x56>
    24ee:	89 89       	ldd	r24, Y+17	; 0x11
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	28 f0       	brcs	.+10     	; 0x24fe <__gesf2+0x56>
    24f4:	c7 01       	movw	r24, r14
    24f6:	b8 01       	movw	r22, r16
    24f8:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <__fpcmp_parts_f>
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <__gesf2+0x58>
    24fe:	8f ef       	ldi	r24, 0xFF	; 255
    2500:	68 96       	adiw	r28, 0x18	; 24
    2502:	e6 e0       	ldi	r30, 0x06	; 6
    2504:	0c 94 aa 63 	jmp	0xc754	; 0xc754 <__epilogue_restores__+0x18>

00002508 <__ltsf2>:
    2508:	a8 e1       	ldi	r26, 0x18	; 24
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ea e8       	ldi	r30, 0x8A	; 138
    250e:	f2 e1       	ldi	r31, 0x12	; 18
    2510:	0c 94 8e 63 	jmp	0xc71c	; 0xc71c <__prologue_saves__+0x18>
    2514:	69 83       	std	Y+1, r22	; 0x01
    2516:	7a 83       	std	Y+2, r23	; 0x02
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	2d 83       	std	Y+5, r18	; 0x05
    251e:	3e 83       	std	Y+6, r19	; 0x06
    2520:	4f 83       	std	Y+7, r20	; 0x07
    2522:	58 87       	std	Y+8, r21	; 0x08
    2524:	89 e0       	ldi	r24, 0x09	; 9
    2526:	e8 2e       	mov	r14, r24
    2528:	f1 2c       	mov	r15, r1
    252a:	ec 0e       	add	r14, r28
    252c:	fd 1e       	adc	r15, r29
    252e:	ce 01       	movw	r24, r28
    2530:	01 96       	adiw	r24, 0x01	; 1
    2532:	b7 01       	movw	r22, r14
    2534:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2538:	8e 01       	movw	r16, r28
    253a:	0f 5e       	subi	r16, 0xEF	; 239
    253c:	1f 4f       	sbci	r17, 0xFF	; 255
    253e:	ce 01       	movw	r24, r28
    2540:	05 96       	adiw	r24, 0x05	; 5
    2542:	b8 01       	movw	r22, r16
    2544:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2548:	89 85       	ldd	r24, Y+9	; 0x09
    254a:	82 30       	cpi	r24, 0x02	; 2
    254c:	40 f0       	brcs	.+16     	; 0x255e <__ltsf2+0x56>
    254e:	89 89       	ldd	r24, Y+17	; 0x11
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	28 f0       	brcs	.+10     	; 0x255e <__ltsf2+0x56>
    2554:	c7 01       	movw	r24, r14
    2556:	b8 01       	movw	r22, r16
    2558:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <__fpcmp_parts_f>
    255c:	01 c0       	rjmp	.+2      	; 0x2560 <__ltsf2+0x58>
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	68 96       	adiw	r28, 0x18	; 24
    2562:	e6 e0       	ldi	r30, 0x06	; 6
    2564:	0c 94 aa 63 	jmp	0xc754	; 0xc754 <__epilogue_restores__+0x18>

00002568 <__floatsisf>:
    2568:	a8 e0       	ldi	r26, 0x08	; 8
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ea eb       	ldi	r30, 0xBA	; 186
    256e:	f2 e1       	ldi	r31, 0x12	; 18
    2570:	0c 94 8b 63 	jmp	0xc716	; 0xc716 <__prologue_saves__+0x12>
    2574:	9b 01       	movw	r18, r22
    2576:	ac 01       	movw	r20, r24
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	da 01       	movw	r26, r20
    257e:	c9 01       	movw	r24, r18
    2580:	88 27       	eor	r24, r24
    2582:	b7 fd       	sbrc	r27, 7
    2584:	83 95       	inc	r24
    2586:	99 27       	eor	r25, r25
    2588:	aa 27       	eor	r26, r26
    258a:	bb 27       	eor	r27, r27
    258c:	b8 2e       	mov	r11, r24
    258e:	21 15       	cp	r18, r1
    2590:	31 05       	cpc	r19, r1
    2592:	41 05       	cpc	r20, r1
    2594:	51 05       	cpc	r21, r1
    2596:	19 f4       	brne	.+6      	; 0x259e <__floatsisf+0x36>
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	3a c0       	rjmp	.+116    	; 0x2612 <__floatsisf+0xaa>
    259e:	88 23       	and	r24, r24
    25a0:	a9 f0       	breq	.+42     	; 0x25cc <__floatsisf+0x64>
    25a2:	20 30       	cpi	r18, 0x00	; 0
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	38 07       	cpc	r19, r24
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	48 07       	cpc	r20, r24
    25ac:	80 e8       	ldi	r24, 0x80	; 128
    25ae:	58 07       	cpc	r21, r24
    25b0:	29 f4       	brne	.+10     	; 0x25bc <__floatsisf+0x54>
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	9f ec       	ldi	r25, 0xCF	; 207
    25ba:	30 c0       	rjmp	.+96     	; 0x261c <__floatsisf+0xb4>
    25bc:	ee 24       	eor	r14, r14
    25be:	ff 24       	eor	r15, r15
    25c0:	87 01       	movw	r16, r14
    25c2:	e2 1a       	sub	r14, r18
    25c4:	f3 0a       	sbc	r15, r19
    25c6:	04 0b       	sbc	r16, r20
    25c8:	15 0b       	sbc	r17, r21
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <__floatsisf+0x68>
    25cc:	79 01       	movw	r14, r18
    25ce:	8a 01       	movw	r16, r20
    25d0:	8e e1       	ldi	r24, 0x1E	; 30
    25d2:	c8 2e       	mov	r12, r24
    25d4:	d1 2c       	mov	r13, r1
    25d6:	dc 82       	std	Y+4, r13	; 0x04
    25d8:	cb 82       	std	Y+3, r12	; 0x03
    25da:	ed 82       	std	Y+5, r14	; 0x05
    25dc:	fe 82       	std	Y+6, r15	; 0x06
    25de:	0f 83       	std	Y+7, r16	; 0x07
    25e0:	18 87       	std	Y+8, r17	; 0x08
    25e2:	c8 01       	movw	r24, r16
    25e4:	b7 01       	movw	r22, r14
    25e6:	0e 94 df 13 	call	0x27be	; 0x27be <__clzsi2>
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	18 16       	cp	r1, r24
    25ee:	19 06       	cpc	r1, r25
    25f0:	84 f4       	brge	.+32     	; 0x2612 <__floatsisf+0xaa>
    25f2:	08 2e       	mov	r0, r24
    25f4:	04 c0       	rjmp	.+8      	; 0x25fe <__floatsisf+0x96>
    25f6:	ee 0c       	add	r14, r14
    25f8:	ff 1c       	adc	r15, r15
    25fa:	00 1f       	adc	r16, r16
    25fc:	11 1f       	adc	r17, r17
    25fe:	0a 94       	dec	r0
    2600:	d2 f7       	brpl	.-12     	; 0x25f6 <__floatsisf+0x8e>
    2602:	ed 82       	std	Y+5, r14	; 0x05
    2604:	fe 82       	std	Y+6, r15	; 0x06
    2606:	0f 83       	std	Y+7, r16	; 0x07
    2608:	18 87       	std	Y+8, r17	; 0x08
    260a:	c8 1a       	sub	r12, r24
    260c:	d9 0a       	sbc	r13, r25
    260e:	dc 82       	std	Y+4, r13	; 0x04
    2610:	cb 82       	std	Y+3, r12	; 0x03
    2612:	ba 82       	std	Y+2, r11	; 0x02
    2614:	ce 01       	movw	r24, r28
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	0e 94 2e 14 	call	0x285c	; 0x285c <__pack_f>
    261c:	28 96       	adiw	r28, 0x08	; 8
    261e:	e9 e0       	ldi	r30, 0x09	; 9
    2620:	0c 94 a7 63 	jmp	0xc74e	; 0xc74e <__epilogue_restores__+0x12>

00002624 <__fixsfsi>:
    2624:	ac e0       	ldi	r26, 0x0C	; 12
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e8 e1       	ldi	r30, 0x18	; 24
    262a:	f3 e1       	ldi	r31, 0x13	; 19
    262c:	0c 94 92 63 	jmp	0xc724	; 0xc724 <__prologue_saves__+0x20>
    2630:	69 83       	std	Y+1, r22	; 0x01
    2632:	7a 83       	std	Y+2, r23	; 0x02
    2634:	8b 83       	std	Y+3, r24	; 0x03
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	ce 01       	movw	r24, r28
    263a:	01 96       	adiw	r24, 0x01	; 1
    263c:	be 01       	movw	r22, r28
    263e:	6b 5f       	subi	r22, 0xFB	; 251
    2640:	7f 4f       	sbci	r23, 0xFF	; 255
    2642:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__unpack_f>
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	61 f1       	breq	.+88     	; 0x26a4 <__fixsfsi+0x80>
    264c:	82 30       	cpi	r24, 0x02	; 2
    264e:	50 f1       	brcs	.+84     	; 0x26a4 <__fixsfsi+0x80>
    2650:	84 30       	cpi	r24, 0x04	; 4
    2652:	21 f4       	brne	.+8      	; 0x265c <__fixsfsi+0x38>
    2654:	8e 81       	ldd	r24, Y+6	; 0x06
    2656:	88 23       	and	r24, r24
    2658:	51 f1       	breq	.+84     	; 0x26ae <__fixsfsi+0x8a>
    265a:	2e c0       	rjmp	.+92     	; 0x26b8 <__fixsfsi+0x94>
    265c:	2f 81       	ldd	r18, Y+7	; 0x07
    265e:	38 85       	ldd	r19, Y+8	; 0x08
    2660:	37 fd       	sbrc	r19, 7
    2662:	20 c0       	rjmp	.+64     	; 0x26a4 <__fixsfsi+0x80>
    2664:	6e 81       	ldd	r22, Y+6	; 0x06
    2666:	2f 31       	cpi	r18, 0x1F	; 31
    2668:	31 05       	cpc	r19, r1
    266a:	1c f0       	brlt	.+6      	; 0x2672 <__fixsfsi+0x4e>
    266c:	66 23       	and	r22, r22
    266e:	f9 f0       	breq	.+62     	; 0x26ae <__fixsfsi+0x8a>
    2670:	23 c0       	rjmp	.+70     	; 0x26b8 <__fixsfsi+0x94>
    2672:	8e e1       	ldi	r24, 0x1E	; 30
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	82 1b       	sub	r24, r18
    2678:	93 0b       	sbc	r25, r19
    267a:	29 85       	ldd	r18, Y+9	; 0x09
    267c:	3a 85       	ldd	r19, Y+10	; 0x0a
    267e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2680:	5c 85       	ldd	r21, Y+12	; 0x0c
    2682:	04 c0       	rjmp	.+8      	; 0x268c <__fixsfsi+0x68>
    2684:	56 95       	lsr	r21
    2686:	47 95       	ror	r20
    2688:	37 95       	ror	r19
    268a:	27 95       	ror	r18
    268c:	8a 95       	dec	r24
    268e:	d2 f7       	brpl	.-12     	; 0x2684 <__fixsfsi+0x60>
    2690:	66 23       	and	r22, r22
    2692:	b1 f0       	breq	.+44     	; 0x26c0 <__fixsfsi+0x9c>
    2694:	50 95       	com	r21
    2696:	40 95       	com	r20
    2698:	30 95       	com	r19
    269a:	21 95       	neg	r18
    269c:	3f 4f       	sbci	r19, 0xFF	; 255
    269e:	4f 4f       	sbci	r20, 0xFF	; 255
    26a0:	5f 4f       	sbci	r21, 0xFF	; 255
    26a2:	0e c0       	rjmp	.+28     	; 0x26c0 <__fixsfsi+0x9c>
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	09 c0       	rjmp	.+18     	; 0x26c0 <__fixsfsi+0x9c>
    26ae:	2f ef       	ldi	r18, 0xFF	; 255
    26b0:	3f ef       	ldi	r19, 0xFF	; 255
    26b2:	4f ef       	ldi	r20, 0xFF	; 255
    26b4:	5f e7       	ldi	r21, 0x7F	; 127
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <__fixsfsi+0x9c>
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	50 e8       	ldi	r21, 0x80	; 128
    26c0:	b9 01       	movw	r22, r18
    26c2:	ca 01       	movw	r24, r20
    26c4:	2c 96       	adiw	r28, 0x0c	; 12
    26c6:	e2 e0       	ldi	r30, 0x02	; 2
    26c8:	0c 94 ae 63 	jmp	0xc75c	; 0xc75c <__epilogue_restores__+0x20>

000026cc <__floatunsisf>:
    26cc:	a8 e0       	ldi	r26, 0x08	; 8
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	ec e6       	ldi	r30, 0x6C	; 108
    26d2:	f3 e1       	ldi	r31, 0x13	; 19
    26d4:	0c 94 8a 63 	jmp	0xc714	; 0xc714 <__prologue_saves__+0x10>
    26d8:	7b 01       	movw	r14, r22
    26da:	8c 01       	movw	r16, r24
    26dc:	61 15       	cp	r22, r1
    26de:	71 05       	cpc	r23, r1
    26e0:	81 05       	cpc	r24, r1
    26e2:	91 05       	cpc	r25, r1
    26e4:	19 f4       	brne	.+6      	; 0x26ec <__floatunsisf+0x20>
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	60 c0       	rjmp	.+192    	; 0x27ac <__floatunsisf+0xe0>
    26ec:	83 e0       	ldi	r24, 0x03	; 3
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	8e e1       	ldi	r24, 0x1E	; 30
    26f2:	c8 2e       	mov	r12, r24
    26f4:	d1 2c       	mov	r13, r1
    26f6:	dc 82       	std	Y+4, r13	; 0x04
    26f8:	cb 82       	std	Y+3, r12	; 0x03
    26fa:	ed 82       	std	Y+5, r14	; 0x05
    26fc:	fe 82       	std	Y+6, r15	; 0x06
    26fe:	0f 83       	std	Y+7, r16	; 0x07
    2700:	18 87       	std	Y+8, r17	; 0x08
    2702:	c8 01       	movw	r24, r16
    2704:	b7 01       	movw	r22, r14
    2706:	0e 94 df 13 	call	0x27be	; 0x27be <__clzsi2>
    270a:	fc 01       	movw	r30, r24
    270c:	31 97       	sbiw	r30, 0x01	; 1
    270e:	f7 ff       	sbrs	r31, 7
    2710:	3b c0       	rjmp	.+118    	; 0x2788 <__floatunsisf+0xbc>
    2712:	22 27       	eor	r18, r18
    2714:	33 27       	eor	r19, r19
    2716:	2e 1b       	sub	r18, r30
    2718:	3f 0b       	sbc	r19, r31
    271a:	57 01       	movw	r10, r14
    271c:	68 01       	movw	r12, r16
    271e:	02 2e       	mov	r0, r18
    2720:	04 c0       	rjmp	.+8      	; 0x272a <__floatunsisf+0x5e>
    2722:	d6 94       	lsr	r13
    2724:	c7 94       	ror	r12
    2726:	b7 94       	ror	r11
    2728:	a7 94       	ror	r10
    272a:	0a 94       	dec	r0
    272c:	d2 f7       	brpl	.-12     	; 0x2722 <__floatunsisf+0x56>
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	70 e0       	ldi	r23, 0x00	; 0
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	a0 e0       	ldi	r26, 0x00	; 0
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	04 c0       	rjmp	.+8      	; 0x2748 <__floatunsisf+0x7c>
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	aa 1f       	adc	r26, r26
    2746:	bb 1f       	adc	r27, r27
    2748:	2a 95       	dec	r18
    274a:	d2 f7       	brpl	.-12     	; 0x2740 <__floatunsisf+0x74>
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	a1 09       	sbc	r26, r1
    2750:	b1 09       	sbc	r27, r1
    2752:	8e 21       	and	r24, r14
    2754:	9f 21       	and	r25, r15
    2756:	a0 23       	and	r26, r16
    2758:	b1 23       	and	r27, r17
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	a1 05       	cpc	r26, r1
    275e:	b1 05       	cpc	r27, r1
    2760:	21 f0       	breq	.+8      	; 0x276a <__floatunsisf+0x9e>
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	4a 29       	or	r20, r10
    276c:	5b 29       	or	r21, r11
    276e:	6c 29       	or	r22, r12
    2770:	7d 29       	or	r23, r13
    2772:	4d 83       	std	Y+5, r20	; 0x05
    2774:	5e 83       	std	Y+6, r21	; 0x06
    2776:	6f 83       	std	Y+7, r22	; 0x07
    2778:	78 87       	std	Y+8, r23	; 0x08
    277a:	8e e1       	ldi	r24, 0x1E	; 30
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	8e 1b       	sub	r24, r30
    2780:	9f 0b       	sbc	r25, r31
    2782:	9c 83       	std	Y+4, r25	; 0x04
    2784:	8b 83       	std	Y+3, r24	; 0x03
    2786:	12 c0       	rjmp	.+36     	; 0x27ac <__floatunsisf+0xe0>
    2788:	30 97       	sbiw	r30, 0x00	; 0
    278a:	81 f0       	breq	.+32     	; 0x27ac <__floatunsisf+0xe0>
    278c:	0e 2e       	mov	r0, r30
    278e:	04 c0       	rjmp	.+8      	; 0x2798 <__floatunsisf+0xcc>
    2790:	ee 0c       	add	r14, r14
    2792:	ff 1c       	adc	r15, r15
    2794:	00 1f       	adc	r16, r16
    2796:	11 1f       	adc	r17, r17
    2798:	0a 94       	dec	r0
    279a:	d2 f7       	brpl	.-12     	; 0x2790 <__floatunsisf+0xc4>
    279c:	ed 82       	std	Y+5, r14	; 0x05
    279e:	fe 82       	std	Y+6, r15	; 0x06
    27a0:	0f 83       	std	Y+7, r16	; 0x07
    27a2:	18 87       	std	Y+8, r17	; 0x08
    27a4:	ce 1a       	sub	r12, r30
    27a6:	df 0a       	sbc	r13, r31
    27a8:	dc 82       	std	Y+4, r13	; 0x04
    27aa:	cb 82       	std	Y+3, r12	; 0x03
    27ac:	1a 82       	std	Y+2, r1	; 0x02
    27ae:	ce 01       	movw	r24, r28
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	0e 94 2e 14 	call	0x285c	; 0x285c <__pack_f>
    27b6:	28 96       	adiw	r28, 0x08	; 8
    27b8:	ea e0       	ldi	r30, 0x0A	; 10
    27ba:	0c 94 a6 63 	jmp	0xc74c	; 0xc74c <__epilogue_restores__+0x10>

000027be <__clzsi2>:
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	7b 01       	movw	r14, r22
    27c8:	8c 01       	movw	r16, r24
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	e8 16       	cp	r14, r24
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	f8 06       	cpc	r15, r24
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	08 07       	cpc	r16, r24
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	18 07       	cpc	r17, r24
    27da:	88 f4       	brcc	.+34     	; 0x27fe <__clzsi2+0x40>
    27dc:	8f ef       	ldi	r24, 0xFF	; 255
    27de:	e8 16       	cp	r14, r24
    27e0:	f1 04       	cpc	r15, r1
    27e2:	01 05       	cpc	r16, r1
    27e4:	11 05       	cpc	r17, r1
    27e6:	31 f0       	breq	.+12     	; 0x27f4 <__clzsi2+0x36>
    27e8:	28 f0       	brcs	.+10     	; 0x27f4 <__clzsi2+0x36>
    27ea:	88 e0       	ldi	r24, 0x08	; 8
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	a0 e0       	ldi	r26, 0x00	; 0
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	17 c0       	rjmp	.+46     	; 0x2822 <__clzsi2+0x64>
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e0       	ldi	r26, 0x00	; 0
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	12 c0       	rjmp	.+36     	; 0x2822 <__clzsi2+0x64>
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	e8 16       	cp	r14, r24
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	f8 06       	cpc	r15, r24
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	08 07       	cpc	r16, r24
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	18 07       	cpc	r17, r24
    280e:	28 f0       	brcs	.+10     	; 0x281a <__clzsi2+0x5c>
    2810:	88 e1       	ldi	r24, 0x18	; 24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 e0       	ldi	r26, 0x00	; 0
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	04 c0       	rjmp	.+8      	; 0x2822 <__clzsi2+0x64>
    281a:	80 e1       	ldi	r24, 0x10	; 16
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a0 e0       	ldi	r26, 0x00	; 0
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	20 e2       	ldi	r18, 0x20	; 32
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	28 1b       	sub	r18, r24
    282c:	39 0b       	sbc	r19, r25
    282e:	4a 0b       	sbc	r20, r26
    2830:	5b 0b       	sbc	r21, r27
    2832:	04 c0       	rjmp	.+8      	; 0x283c <__clzsi2+0x7e>
    2834:	16 95       	lsr	r17
    2836:	07 95       	ror	r16
    2838:	f7 94       	ror	r15
    283a:	e7 94       	ror	r14
    283c:	8a 95       	dec	r24
    283e:	d2 f7       	brpl	.-12     	; 0x2834 <__clzsi2+0x76>
    2840:	f7 01       	movw	r30, r14
    2842:	e8 59       	subi	r30, 0x98	; 152
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	28 1b       	sub	r18, r24
    284a:	31 09       	sbc	r19, r1
    284c:	41 09       	sbc	r20, r1
    284e:	51 09       	sbc	r21, r1
    2850:	c9 01       	movw	r24, r18
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	ff 90       	pop	r15
    2858:	ef 90       	pop	r14
    285a:	08 95       	ret

0000285c <__pack_f>:
    285c:	df 92       	push	r13
    285e:	ef 92       	push	r14
    2860:	ff 92       	push	r15
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	fc 01       	movw	r30, r24
    2868:	e4 80       	ldd	r14, Z+4	; 0x04
    286a:	f5 80       	ldd	r15, Z+5	; 0x05
    286c:	06 81       	ldd	r16, Z+6	; 0x06
    286e:	17 81       	ldd	r17, Z+7	; 0x07
    2870:	d1 80       	ldd	r13, Z+1	; 0x01
    2872:	80 81       	ld	r24, Z
    2874:	82 30       	cpi	r24, 0x02	; 2
    2876:	48 f4       	brcc	.+18     	; 0x288a <__pack_f+0x2e>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e1       	ldi	r26, 0x10	; 16
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e8 2a       	or	r14, r24
    2882:	f9 2a       	or	r15, r25
    2884:	0a 2b       	or	r16, r26
    2886:	1b 2b       	or	r17, r27
    2888:	a5 c0       	rjmp	.+330    	; 0x29d4 <__pack_f+0x178>
    288a:	84 30       	cpi	r24, 0x04	; 4
    288c:	09 f4       	brne	.+2      	; 0x2890 <__pack_f+0x34>
    288e:	9f c0       	rjmp	.+318    	; 0x29ce <__pack_f+0x172>
    2890:	82 30       	cpi	r24, 0x02	; 2
    2892:	21 f4       	brne	.+8      	; 0x289c <__pack_f+0x40>
    2894:	ee 24       	eor	r14, r14
    2896:	ff 24       	eor	r15, r15
    2898:	87 01       	movw	r16, r14
    289a:	05 c0       	rjmp	.+10     	; 0x28a6 <__pack_f+0x4a>
    289c:	e1 14       	cp	r14, r1
    289e:	f1 04       	cpc	r15, r1
    28a0:	01 05       	cpc	r16, r1
    28a2:	11 05       	cpc	r17, r1
    28a4:	19 f4       	brne	.+6      	; 0x28ac <__pack_f+0x50>
    28a6:	e0 e0       	ldi	r30, 0x00	; 0
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	96 c0       	rjmp	.+300    	; 0x29d8 <__pack_f+0x17c>
    28ac:	62 81       	ldd	r22, Z+2	; 0x02
    28ae:	73 81       	ldd	r23, Z+3	; 0x03
    28b0:	9f ef       	ldi	r25, 0xFF	; 255
    28b2:	62 38       	cpi	r22, 0x82	; 130
    28b4:	79 07       	cpc	r23, r25
    28b6:	0c f0       	brlt	.+2      	; 0x28ba <__pack_f+0x5e>
    28b8:	5b c0       	rjmp	.+182    	; 0x2970 <__pack_f+0x114>
    28ba:	22 e8       	ldi	r18, 0x82	; 130
    28bc:	3f ef       	ldi	r19, 0xFF	; 255
    28be:	26 1b       	sub	r18, r22
    28c0:	37 0b       	sbc	r19, r23
    28c2:	2a 31       	cpi	r18, 0x1A	; 26
    28c4:	31 05       	cpc	r19, r1
    28c6:	2c f0       	brlt	.+10     	; 0x28d2 <__pack_f+0x76>
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	2a c0       	rjmp	.+84     	; 0x2926 <__pack_f+0xca>
    28d2:	b8 01       	movw	r22, r16
    28d4:	a7 01       	movw	r20, r14
    28d6:	02 2e       	mov	r0, r18
    28d8:	04 c0       	rjmp	.+8      	; 0x28e2 <__pack_f+0x86>
    28da:	76 95       	lsr	r23
    28dc:	67 95       	ror	r22
    28de:	57 95       	ror	r21
    28e0:	47 95       	ror	r20
    28e2:	0a 94       	dec	r0
    28e4:	d2 f7       	brpl	.-12     	; 0x28da <__pack_f+0x7e>
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a0 e0       	ldi	r26, 0x00	; 0
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <__pack_f+0x9c>
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	aa 1f       	adc	r26, r26
    28f6:	bb 1f       	adc	r27, r27
    28f8:	2a 95       	dec	r18
    28fa:	d2 f7       	brpl	.-12     	; 0x28f0 <__pack_f+0x94>
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	a1 09       	sbc	r26, r1
    2900:	b1 09       	sbc	r27, r1
    2902:	8e 21       	and	r24, r14
    2904:	9f 21       	and	r25, r15
    2906:	a0 23       	and	r26, r16
    2908:	b1 23       	and	r27, r17
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	a1 05       	cpc	r26, r1
    290e:	b1 05       	cpc	r27, r1
    2910:	21 f0       	breq	.+8      	; 0x291a <__pack_f+0xbe>
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	a0 e0       	ldi	r26, 0x00	; 0
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	9a 01       	movw	r18, r20
    291c:	ab 01       	movw	r20, r22
    291e:	28 2b       	or	r18, r24
    2920:	39 2b       	or	r19, r25
    2922:	4a 2b       	or	r20, r26
    2924:	5b 2b       	or	r21, r27
    2926:	da 01       	movw	r26, r20
    2928:	c9 01       	movw	r24, r18
    292a:	8f 77       	andi	r24, 0x7F	; 127
    292c:	90 70       	andi	r25, 0x00	; 0
    292e:	a0 70       	andi	r26, 0x00	; 0
    2930:	b0 70       	andi	r27, 0x00	; 0
    2932:	80 34       	cpi	r24, 0x40	; 64
    2934:	91 05       	cpc	r25, r1
    2936:	a1 05       	cpc	r26, r1
    2938:	b1 05       	cpc	r27, r1
    293a:	39 f4       	brne	.+14     	; 0x294a <__pack_f+0xee>
    293c:	27 ff       	sbrs	r18, 7
    293e:	09 c0       	rjmp	.+18     	; 0x2952 <__pack_f+0xf6>
    2940:	20 5c       	subi	r18, 0xC0	; 192
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	4f 4f       	sbci	r20, 0xFF	; 255
    2946:	5f 4f       	sbci	r21, 0xFF	; 255
    2948:	04 c0       	rjmp	.+8      	; 0x2952 <__pack_f+0xf6>
    294a:	21 5c       	subi	r18, 0xC1	; 193
    294c:	3f 4f       	sbci	r19, 0xFF	; 255
    294e:	4f 4f       	sbci	r20, 0xFF	; 255
    2950:	5f 4f       	sbci	r21, 0xFF	; 255
    2952:	e0 e0       	ldi	r30, 0x00	; 0
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	20 30       	cpi	r18, 0x00	; 0
    2958:	a0 e0       	ldi	r26, 0x00	; 0
    295a:	3a 07       	cpc	r19, r26
    295c:	a0 e0       	ldi	r26, 0x00	; 0
    295e:	4a 07       	cpc	r20, r26
    2960:	a0 e4       	ldi	r26, 0x40	; 64
    2962:	5a 07       	cpc	r21, r26
    2964:	10 f0       	brcs	.+4      	; 0x296a <__pack_f+0x10e>
    2966:	e1 e0       	ldi	r30, 0x01	; 1
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	79 01       	movw	r14, r18
    296c:	8a 01       	movw	r16, r20
    296e:	27 c0       	rjmp	.+78     	; 0x29be <__pack_f+0x162>
    2970:	60 38       	cpi	r22, 0x80	; 128
    2972:	71 05       	cpc	r23, r1
    2974:	64 f5       	brge	.+88     	; 0x29ce <__pack_f+0x172>
    2976:	fb 01       	movw	r30, r22
    2978:	e1 58       	subi	r30, 0x81	; 129
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	d8 01       	movw	r26, r16
    297e:	c7 01       	movw	r24, r14
    2980:	8f 77       	andi	r24, 0x7F	; 127
    2982:	90 70       	andi	r25, 0x00	; 0
    2984:	a0 70       	andi	r26, 0x00	; 0
    2986:	b0 70       	andi	r27, 0x00	; 0
    2988:	80 34       	cpi	r24, 0x40	; 64
    298a:	91 05       	cpc	r25, r1
    298c:	a1 05       	cpc	r26, r1
    298e:	b1 05       	cpc	r27, r1
    2990:	39 f4       	brne	.+14     	; 0x29a0 <__pack_f+0x144>
    2992:	e7 fe       	sbrs	r14, 7
    2994:	0d c0       	rjmp	.+26     	; 0x29b0 <__pack_f+0x154>
    2996:	80 e4       	ldi	r24, 0x40	; 64
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a0 e0       	ldi	r26, 0x00	; 0
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	04 c0       	rjmp	.+8      	; 0x29a8 <__pack_f+0x14c>
    29a0:	8f e3       	ldi	r24, 0x3F	; 63
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	a0 e0       	ldi	r26, 0x00	; 0
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e8 0e       	add	r14, r24
    29aa:	f9 1e       	adc	r15, r25
    29ac:	0a 1f       	adc	r16, r26
    29ae:	1b 1f       	adc	r17, r27
    29b0:	17 ff       	sbrs	r17, 7
    29b2:	05 c0       	rjmp	.+10     	; 0x29be <__pack_f+0x162>
    29b4:	16 95       	lsr	r17
    29b6:	07 95       	ror	r16
    29b8:	f7 94       	ror	r15
    29ba:	e7 94       	ror	r14
    29bc:	31 96       	adiw	r30, 0x01	; 1
    29be:	87 e0       	ldi	r24, 0x07	; 7
    29c0:	16 95       	lsr	r17
    29c2:	07 95       	ror	r16
    29c4:	f7 94       	ror	r15
    29c6:	e7 94       	ror	r14
    29c8:	8a 95       	dec	r24
    29ca:	d1 f7       	brne	.-12     	; 0x29c0 <__pack_f+0x164>
    29cc:	05 c0       	rjmp	.+10     	; 0x29d8 <__pack_f+0x17c>
    29ce:	ee 24       	eor	r14, r14
    29d0:	ff 24       	eor	r15, r15
    29d2:	87 01       	movw	r16, r14
    29d4:	ef ef       	ldi	r30, 0xFF	; 255
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	6e 2f       	mov	r22, r30
    29da:	67 95       	ror	r22
    29dc:	66 27       	eor	r22, r22
    29de:	67 95       	ror	r22
    29e0:	90 2f       	mov	r25, r16
    29e2:	9f 77       	andi	r25, 0x7F	; 127
    29e4:	d7 94       	ror	r13
    29e6:	dd 24       	eor	r13, r13
    29e8:	d7 94       	ror	r13
    29ea:	8e 2f       	mov	r24, r30
    29ec:	86 95       	lsr	r24
    29ee:	49 2f       	mov	r20, r25
    29f0:	46 2b       	or	r20, r22
    29f2:	58 2f       	mov	r21, r24
    29f4:	5d 29       	or	r21, r13
    29f6:	b7 01       	movw	r22, r14
    29f8:	ca 01       	movw	r24, r20
    29fa:	1f 91       	pop	r17
    29fc:	0f 91       	pop	r16
    29fe:	ff 90       	pop	r15
    2a00:	ef 90       	pop	r14
    2a02:	df 90       	pop	r13
    2a04:	08 95       	ret

00002a06 <__unpack_f>:
    2a06:	fc 01       	movw	r30, r24
    2a08:	db 01       	movw	r26, r22
    2a0a:	40 81       	ld	r20, Z
    2a0c:	51 81       	ldd	r21, Z+1	; 0x01
    2a0e:	22 81       	ldd	r18, Z+2	; 0x02
    2a10:	62 2f       	mov	r22, r18
    2a12:	6f 77       	andi	r22, 0x7F	; 127
    2a14:	70 e0       	ldi	r23, 0x00	; 0
    2a16:	22 1f       	adc	r18, r18
    2a18:	22 27       	eor	r18, r18
    2a1a:	22 1f       	adc	r18, r18
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	89 2f       	mov	r24, r25
    2a20:	88 0f       	add	r24, r24
    2a22:	82 2b       	or	r24, r18
    2a24:	28 2f       	mov	r18, r24
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	99 1f       	adc	r25, r25
    2a2a:	99 27       	eor	r25, r25
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	11 96       	adiw	r26, 0x01	; 1
    2a30:	9c 93       	st	X, r25
    2a32:	11 97       	sbiw	r26, 0x01	; 1
    2a34:	21 15       	cp	r18, r1
    2a36:	31 05       	cpc	r19, r1
    2a38:	a9 f5       	brne	.+106    	; 0x2aa4 <__unpack_f+0x9e>
    2a3a:	41 15       	cp	r20, r1
    2a3c:	51 05       	cpc	r21, r1
    2a3e:	61 05       	cpc	r22, r1
    2a40:	71 05       	cpc	r23, r1
    2a42:	11 f4       	brne	.+4      	; 0x2a48 <__unpack_f+0x42>
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	37 c0       	rjmp	.+110    	; 0x2ab6 <__unpack_f+0xb0>
    2a48:	82 e8       	ldi	r24, 0x82	; 130
    2a4a:	9f ef       	ldi	r25, 0xFF	; 255
    2a4c:	13 96       	adiw	r26, 0x03	; 3
    2a4e:	9c 93       	st	X, r25
    2a50:	8e 93       	st	-X, r24
    2a52:	12 97       	sbiw	r26, 0x02	; 2
    2a54:	9a 01       	movw	r18, r20
    2a56:	ab 01       	movw	r20, r22
    2a58:	67 e0       	ldi	r22, 0x07	; 7
    2a5a:	22 0f       	add	r18, r18
    2a5c:	33 1f       	adc	r19, r19
    2a5e:	44 1f       	adc	r20, r20
    2a60:	55 1f       	adc	r21, r21
    2a62:	6a 95       	dec	r22
    2a64:	d1 f7       	brne	.-12     	; 0x2a5a <__unpack_f+0x54>
    2a66:	83 e0       	ldi	r24, 0x03	; 3
    2a68:	8c 93       	st	X, r24
    2a6a:	0d c0       	rjmp	.+26     	; 0x2a86 <__unpack_f+0x80>
    2a6c:	22 0f       	add	r18, r18
    2a6e:	33 1f       	adc	r19, r19
    2a70:	44 1f       	adc	r20, r20
    2a72:	55 1f       	adc	r21, r21
    2a74:	12 96       	adiw	r26, 0x02	; 2
    2a76:	8d 91       	ld	r24, X+
    2a78:	9c 91       	ld	r25, X
    2a7a:	13 97       	sbiw	r26, 0x03	; 3
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	13 96       	adiw	r26, 0x03	; 3
    2a80:	9c 93       	st	X, r25
    2a82:	8e 93       	st	-X, r24
    2a84:	12 97       	sbiw	r26, 0x02	; 2
    2a86:	20 30       	cpi	r18, 0x00	; 0
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	38 07       	cpc	r19, r24
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	48 07       	cpc	r20, r24
    2a90:	80 e4       	ldi	r24, 0x40	; 64
    2a92:	58 07       	cpc	r21, r24
    2a94:	58 f3       	brcs	.-42     	; 0x2a6c <__unpack_f+0x66>
    2a96:	14 96       	adiw	r26, 0x04	; 4
    2a98:	2d 93       	st	X+, r18
    2a9a:	3d 93       	st	X+, r19
    2a9c:	4d 93       	st	X+, r20
    2a9e:	5c 93       	st	X, r21
    2aa0:	17 97       	sbiw	r26, 0x07	; 7
    2aa2:	08 95       	ret
    2aa4:	2f 3f       	cpi	r18, 0xFF	; 255
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	79 f4       	brne	.+30     	; 0x2ac8 <__unpack_f+0xc2>
    2aaa:	41 15       	cp	r20, r1
    2aac:	51 05       	cpc	r21, r1
    2aae:	61 05       	cpc	r22, r1
    2ab0:	71 05       	cpc	r23, r1
    2ab2:	19 f4       	brne	.+6      	; 0x2aba <__unpack_f+0xb4>
    2ab4:	84 e0       	ldi	r24, 0x04	; 4
    2ab6:	8c 93       	st	X, r24
    2ab8:	08 95       	ret
    2aba:	64 ff       	sbrs	r22, 4
    2abc:	03 c0       	rjmp	.+6      	; 0x2ac4 <__unpack_f+0xbe>
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	8c 93       	st	X, r24
    2ac2:	12 c0       	rjmp	.+36     	; 0x2ae8 <__unpack_f+0xe2>
    2ac4:	1c 92       	st	X, r1
    2ac6:	10 c0       	rjmp	.+32     	; 0x2ae8 <__unpack_f+0xe2>
    2ac8:	2f 57       	subi	r18, 0x7F	; 127
    2aca:	30 40       	sbci	r19, 0x00	; 0
    2acc:	13 96       	adiw	r26, 0x03	; 3
    2ace:	3c 93       	st	X, r19
    2ad0:	2e 93       	st	-X, r18
    2ad2:	12 97       	sbiw	r26, 0x02	; 2
    2ad4:	83 e0       	ldi	r24, 0x03	; 3
    2ad6:	8c 93       	st	X, r24
    2ad8:	87 e0       	ldi	r24, 0x07	; 7
    2ada:	44 0f       	add	r20, r20
    2adc:	55 1f       	adc	r21, r21
    2ade:	66 1f       	adc	r22, r22
    2ae0:	77 1f       	adc	r23, r23
    2ae2:	8a 95       	dec	r24
    2ae4:	d1 f7       	brne	.-12     	; 0x2ada <__unpack_f+0xd4>
    2ae6:	70 64       	ori	r23, 0x40	; 64
    2ae8:	14 96       	adiw	r26, 0x04	; 4
    2aea:	4d 93       	st	X+, r20
    2aec:	5d 93       	st	X+, r21
    2aee:	6d 93       	st	X+, r22
    2af0:	7c 93       	st	X, r23
    2af2:	17 97       	sbiw	r26, 0x07	; 7
    2af4:	08 95       	ret

00002af6 <__fpcmp_parts_f>:
    2af6:	1f 93       	push	r17
    2af8:	dc 01       	movw	r26, r24
    2afa:	fb 01       	movw	r30, r22
    2afc:	9c 91       	ld	r25, X
    2afe:	92 30       	cpi	r25, 0x02	; 2
    2b00:	08 f4       	brcc	.+2      	; 0x2b04 <__fpcmp_parts_f+0xe>
    2b02:	47 c0       	rjmp	.+142    	; 0x2b92 <__fpcmp_parts_f+0x9c>
    2b04:	80 81       	ld	r24, Z
    2b06:	82 30       	cpi	r24, 0x02	; 2
    2b08:	08 f4       	brcc	.+2      	; 0x2b0c <__fpcmp_parts_f+0x16>
    2b0a:	43 c0       	rjmp	.+134    	; 0x2b92 <__fpcmp_parts_f+0x9c>
    2b0c:	94 30       	cpi	r25, 0x04	; 4
    2b0e:	51 f4       	brne	.+20     	; 0x2b24 <__fpcmp_parts_f+0x2e>
    2b10:	11 96       	adiw	r26, 0x01	; 1
    2b12:	1c 91       	ld	r17, X
    2b14:	84 30       	cpi	r24, 0x04	; 4
    2b16:	99 f5       	brne	.+102    	; 0x2b7e <__fpcmp_parts_f+0x88>
    2b18:	81 81       	ldd	r24, Z+1	; 0x01
    2b1a:	68 2f       	mov	r22, r24
    2b1c:	70 e0       	ldi	r23, 0x00	; 0
    2b1e:	61 1b       	sub	r22, r17
    2b20:	71 09       	sbc	r23, r1
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <__fpcmp_parts_f+0xac>
    2b24:	84 30       	cpi	r24, 0x04	; 4
    2b26:	21 f0       	breq	.+8      	; 0x2b30 <__fpcmp_parts_f+0x3a>
    2b28:	92 30       	cpi	r25, 0x02	; 2
    2b2a:	31 f4       	brne	.+12     	; 0x2b38 <__fpcmp_parts_f+0x42>
    2b2c:	82 30       	cpi	r24, 0x02	; 2
    2b2e:	b9 f1       	breq	.+110    	; 0x2b9e <__fpcmp_parts_f+0xa8>
    2b30:	81 81       	ldd	r24, Z+1	; 0x01
    2b32:	88 23       	and	r24, r24
    2b34:	89 f1       	breq	.+98     	; 0x2b98 <__fpcmp_parts_f+0xa2>
    2b36:	2d c0       	rjmp	.+90     	; 0x2b92 <__fpcmp_parts_f+0x9c>
    2b38:	11 96       	adiw	r26, 0x01	; 1
    2b3a:	1c 91       	ld	r17, X
    2b3c:	11 97       	sbiw	r26, 0x01	; 1
    2b3e:	82 30       	cpi	r24, 0x02	; 2
    2b40:	f1 f0       	breq	.+60     	; 0x2b7e <__fpcmp_parts_f+0x88>
    2b42:	81 81       	ldd	r24, Z+1	; 0x01
    2b44:	18 17       	cp	r17, r24
    2b46:	d9 f4       	brne	.+54     	; 0x2b7e <__fpcmp_parts_f+0x88>
    2b48:	12 96       	adiw	r26, 0x02	; 2
    2b4a:	2d 91       	ld	r18, X+
    2b4c:	3c 91       	ld	r19, X
    2b4e:	13 97       	sbiw	r26, 0x03	; 3
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	82 17       	cp	r24, r18
    2b56:	93 07       	cpc	r25, r19
    2b58:	94 f0       	brlt	.+36     	; 0x2b7e <__fpcmp_parts_f+0x88>
    2b5a:	28 17       	cp	r18, r24
    2b5c:	39 07       	cpc	r19, r25
    2b5e:	bc f0       	brlt	.+46     	; 0x2b8e <__fpcmp_parts_f+0x98>
    2b60:	14 96       	adiw	r26, 0x04	; 4
    2b62:	8d 91       	ld	r24, X+
    2b64:	9d 91       	ld	r25, X+
    2b66:	0d 90       	ld	r0, X+
    2b68:	bc 91       	ld	r27, X
    2b6a:	a0 2d       	mov	r26, r0
    2b6c:	24 81       	ldd	r18, Z+4	; 0x04
    2b6e:	35 81       	ldd	r19, Z+5	; 0x05
    2b70:	46 81       	ldd	r20, Z+6	; 0x06
    2b72:	57 81       	ldd	r21, Z+7	; 0x07
    2b74:	28 17       	cp	r18, r24
    2b76:	39 07       	cpc	r19, r25
    2b78:	4a 07       	cpc	r20, r26
    2b7a:	5b 07       	cpc	r21, r27
    2b7c:	18 f4       	brcc	.+6      	; 0x2b84 <__fpcmp_parts_f+0x8e>
    2b7e:	11 23       	and	r17, r17
    2b80:	41 f0       	breq	.+16     	; 0x2b92 <__fpcmp_parts_f+0x9c>
    2b82:	0a c0       	rjmp	.+20     	; 0x2b98 <__fpcmp_parts_f+0xa2>
    2b84:	82 17       	cp	r24, r18
    2b86:	93 07       	cpc	r25, r19
    2b88:	a4 07       	cpc	r26, r20
    2b8a:	b5 07       	cpc	r27, r21
    2b8c:	40 f4       	brcc	.+16     	; 0x2b9e <__fpcmp_parts_f+0xa8>
    2b8e:	11 23       	and	r17, r17
    2b90:	19 f0       	breq	.+6      	; 0x2b98 <__fpcmp_parts_f+0xa2>
    2b92:	61 e0       	ldi	r22, 0x01	; 1
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	05 c0       	rjmp	.+10     	; 0x2ba2 <__fpcmp_parts_f+0xac>
    2b98:	6f ef       	ldi	r22, 0xFF	; 255
    2b9a:	7f ef       	ldi	r23, 0xFF	; 255
    2b9c:	02 c0       	rjmp	.+4      	; 0x2ba2 <__fpcmp_parts_f+0xac>
    2b9e:	60 e0       	ldi	r22, 0x00	; 0
    2ba0:	70 e0       	ldi	r23, 0x00	; 0
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	1f 91       	pop	r17
    2ba6:	08 95       	ret

00002ba8 <WDT_Init>:
#include"WDT_priv.h"
#include"WDT_config.h"


ES_t WDT_Init(void)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	0f 92       	push	r0
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	89 83       	std	Y+1, r24	; 0x01

	WDTCR = 0x00 ;
    2bb6:	e1 e4       	ldi	r30, 0x41	; 65
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	10 82       	st	Z, r1
	if( WDT_PRES >= WDT_PRES_16K && WDT_PRES <= WDT_PRES_2048K )
	{
		WDTCR |= ( ( ( WDT_PRES - WDT_PRES_16K)& THREE_BITS_MASK ) << WDP0 ) ;
    2bbc:	a1 e4       	ldi	r26, 0x41	; 65
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e1 e4       	ldi	r30, 0x41	; 65
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	86 60       	ori	r24, 0x06	; 6
    2bc8:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK ;
    2bca:	19 82       	std	Y+1, r1	; 0x01
		WDTCR |= ( THREE_BITS_MASK << WDP0 ) ;
		Local_enuErrorState = ES_OUT_RANGE ;
		#warning "WDT_Init(): Unidentified Prescale Option . WDT_PRES_2048K is selected ."
	}

	return Local_enuErrorState ;
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bce:	0f 90       	pop	r0
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <WDT_SetPrescale>:

ES_t WDT_SetPrescale( u8 Copy_u8PrescaleValue )
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <WDT_SetPrescale+0x6>
    2bdc:	0f 92       	push	r0
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	8b 83       	std	Y+3, r24	; 0x03

	ES_t Local_enuErrorState = ES_NOK ;
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_u8PrescaleValue >= WDT_PRES_16K && Copy_u8PrescaleValue <= WDT_PRES_2048K )
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	84 31       	cpi	r24, 0x14	; 20
    2bec:	20 f1       	brcs	.+72     	; 0x2c36 <WDT_SetPrescale+0x60>
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	8c 31       	cpi	r24, 0x1C	; 28
    2bf2:	08 f5       	brcc	.+66     	; 0x2c36 <WDT_SetPrescale+0x60>
	{
		u8 Local_u8CopyWDTCR = WDTCR ;
    2bf4:	e1 e4       	ldi	r30, 0x41	; 65
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	89 83       	std	Y+1, r24	; 0x01

		Local_u8CopyWDTCR |= ( BIT_MASK <<  WDTOE );
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	80 61       	ori	r24, 0x10	; 16
    2c00:	89 83       	std	Y+1, r24	; 0x01
		Local_u8CopyWDTCR |= ( BIT_MASK <<  WDE ) ;
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	88 60       	ori	r24, 0x08	; 8
    2c06:	89 83       	std	Y+1, r24	; 0x01

		WDTCR = Local_u8CopyWDTCR;
    2c08:	e1 e4       	ldi	r30, 0x41	; 65
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	80 83       	st	Z, r24
		WDTCR = 0x00;
    2c10:	e1 e4       	ldi	r30, 0x41	; 65
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	10 82       	st	Z, r1

		WDTCR |= ( ( (WDT_PRES - WDT_PRES_16K)& THREE_BITS_MASK ) << WDP0 ) ;
    2c16:	a1 e4       	ldi	r26, 0x41	; 65
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e1 e4       	ldi	r30, 0x41	; 65
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	86 60       	ori	r24, 0x06	; 6
    2c22:	8c 93       	st	X, r24

		WDTCR |= ( BIT_MASK <<  WDE ) ;
    2c24:	a1 e4       	ldi	r26, 0x41	; 65
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	e1 e4       	ldi	r30, 0x41	; 65
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	88 60       	ori	r24, 0x08	; 8
    2c30:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK ;
    2c32:	1a 82       	std	Y+2, r1	; 0x02
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <WDT_SetPrescale+0x64>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2c36:	82 e0       	ldi	r24, 0x02	; 2
    2c38:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState ;
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <WDT_Enable>:

ES_t WDT_Enable(void)
{
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= ( BIT_MASK <<  WDE ) ;
    2c50:	a1 e4       	ldi	r26, 0x41	; 65
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e1 e4       	ldi	r30, 0x41	; 65
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	88 60       	ori	r24, 0x08	; 8
    2c5c:	8c 93       	st	X, r24

	return ES_OK ;
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
}
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <WDT_Disable>:


ES_t WDT_Disable(void)
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	00 d0       	rcall	.+0      	; 0x2c6c <WDT_Disable+0x6>
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Init_WDTCR = WDTCR ;
    2c70:	e1 e4       	ldi	r30, 0x41	; 65
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Final_WDTCR = Local_u8Init_WDTCR & THREE_BITS_MASK ;
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	87 70       	andi	r24, 0x07	; 7
    2c7c:	89 83       	std	Y+1, r24	; 0x01

	Local_u8Init_WDTCR |= ( BIT_MASK <<  WDTOE );
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	80 61       	ori	r24, 0x10	; 16
    2c82:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8Init_WDTCR |= ( BIT_MASK <<  WDE ) ;
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	88 60       	ori	r24, 0x08	; 8
    2c88:	8a 83       	std	Y+2, r24	; 0x02

	WDTCR = Local_u8Init_WDTCR;
    2c8a:	e1 e4       	ldi	r30, 0x41	; 65
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	80 83       	st	Z, r24
	WDTCR = Local_u8Final_WDTCR;
    2c92:	e1 e4       	ldi	r30, 0x41	; 65
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	80 83       	st	Z, r24

	return ES_OK ;
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
}
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <WDT_Reset>:

void WDT_Reset(void)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
	asm("WDR");
    2cae:	a8 95       	wdr
}
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <UART_enuInit>:
													};



ES_t UART_enuInit( void )
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	0f 92       	push	r0
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	89 83       	std	Y+1, r24	; 0x01

	UCSRC |= (BIT_MASK << URSEL_BIT );
    2cc4:	a0 e4       	ldi	r26, 0x40	; 64
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	e0 e4       	ldi	r30, 0x40	; 64
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	80 68       	ori	r24, 0x80	; 128
    2cd0:	8c 93       	st	X, r24
	UCSRC &= 0x80 ;
    2cd2:	a0 e4       	ldi	r26, 0x40	; 64
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e0 e4       	ldi	r30, 0x40	; 64
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	80 78       	andi	r24, 0x80	; 128
    2cde:	8c 93       	st	X, r24
	UCSRB = 0x00 ;
    2ce0:	ea e2       	ldi	r30, 0x2A	; 42
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	10 82       	st	Z, r1
	UCSRA = 0x00 ;
    2ce6:	eb e2       	ldi	r30, 0x2B	; 43
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	10 82       	st	Z, r1

	/****************************************************************/
	/*	Setting Synchronous Mode / Operating Mode / Clock Polarity	*/
	/****************************************************************/
#if SYNC_MODE == ASYNCHRONOUS
	UCSRC |= (BIT_MASK << URSEL_BIT );
    2cec:	a0 e4       	ldi	r26, 0x40	; 64
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e0 e4       	ldi	r30, 0x40	; 64
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	80 68       	ori	r24, 0x80	; 128
    2cf8:	8c 93       	st	X, r24
	UCSRC &= ~(BIT_MASK << UMSEL_BIT );
    2cfa:	a0 e4       	ldi	r26, 0x40	; 64
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e0 e4       	ldi	r30, 0x40	; 64
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	8f 7b       	andi	r24, 0xBF	; 191
    2d06:	8c 93       	st	X, r24
	UCSRC &= ~(BIT_MASK << UCPOL_BIT );
    2d08:	a0 e4       	ldi	r26, 0x40	; 64
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	e0 e4       	ldi	r30, 0x40	; 64
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	8e 7f       	andi	r24, 0xFE	; 254
    2d14:	8c 93       	st	X, r24

	#if OPERATING_MODE == NORMAL_SPEED
	UCSRA &=~(BIT_MASK << U2X_BIT );
	#elif OPERATING_MODE == DOUBLE_SPEED
	UCSRA |= (BIT_MASK << U2X_BIT );
    2d16:	ab e2       	ldi	r26, 0x2B	; 43
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	eb e2       	ldi	r30, 0x2B	; 43
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	82 60       	ori	r24, 0x02	; 2
    2d22:	8c 93       	st	X, r24
	#endif

#else
#error " UART_enuInit(): Unidentified Synchronization Mode. "
#endif
	UCSRA &= TWO_BITS_MASK ;
    2d24:	ab e2       	ldi	r26, 0x2B	; 43
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	eb e2       	ldi	r30, 0x2B	; 43
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	83 70       	andi	r24, 0x03	; 3
    2d30:	8c 93       	st	X, r24

	/************************************************/
	/*			Setting Frame Data bits 			*/
	/************************************************/
#if DATA_BITS >= FIVE_BITS && DATA_BITS <= EIGHT_BITS
	UCSRC |= (BIT_MASK << URSEL_BIT );
    2d32:	a0 e4       	ldi	r26, 0x40	; 64
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	e0 e4       	ldi	r30, 0x40	; 64
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	80 68       	ori	r24, 0x80	; 128
    2d3e:	8c 93       	st	X, r24
	UCSRC |= ( ( DATA_BITS - FIVE_BITS )& TWO_BITS_MASK ) << UCSZ0_BIT ;
    2d40:	a0 e4       	ldi	r26, 0x40	; 64
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e0 e4       	ldi	r30, 0x40	; 64
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	86 60       	ori	r24, 0x06	; 6
    2d4c:	8c 93       	st	X, r24

	/************************************************/
	/*			Setting Frame Parity bits 			*/
	/************************************************/
#if PARITY_STATUS == NO_PARITY
	UCSRC |= (BIT_MASK << URSEL_BIT );
    2d4e:	a0 e4       	ldi	r26, 0x40	; 64
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e0 e4       	ldi	r30, 0x40	; 64
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	80 68       	ori	r24, 0x80	; 128
    2d5a:	8c 93       	st	X, r24
	UCSRC &= ~(BIT_MASK << UPM1_BIT );
    2d5c:	a0 e4       	ldi	r26, 0x40	; 64
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e0 e4       	ldi	r30, 0x40	; 64
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	8f 7d       	andi	r24, 0xDF	; 223
    2d68:	8c 93       	st	X, r24
	UCSRC &= ~(BIT_MASK << UPM0_BIT );
    2d6a:	a0 e4       	ldi	r26, 0x40	; 64
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e0 e4       	ldi	r30, 0x40	; 64
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	8f 7e       	andi	r24, 0xEF	; 239
    2d76:	8c 93       	st	X, r24

	/************************************************/
	/*			Setting Frame STOP bits 			*/
	/************************************************/
#if STOP_STATUS == ONE_STOP_BIT
	UCSRC |= (BIT_MASK << URSEL_BIT );
    2d78:	a0 e4       	ldi	r26, 0x40	; 64
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e0 e4       	ldi	r30, 0x40	; 64
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	80 68       	ori	r24, 0x80	; 128
    2d84:	8c 93       	st	X, r24
	UCSRC &= ~(BIT_MASK << USBS_BIT );
    2d86:	a0 e4       	ldi	r26, 0x40	; 64
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e0 e4       	ldi	r30, 0x40	; 64
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	87 7f       	andi	r24, 0xF7	; 247
    2d92:	8c 93       	st	X, r24
#endif

	/************************************************/
	/*				Setting BAUD Rate	 			*/
	/************************************************/
	UBRRH &= ~(BIT_MASK << URSEL_BIT );
    2d94:	a0 e4       	ldi	r26, 0x40	; 64
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	e0 e4       	ldi	r30, 0x40	; 64
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	8f 77       	andi	r24, 0x7F	; 127
    2da0:	8c 93       	st	X, r24
	UBRRH |= ( ( ( UBRR_VALUE( BAUD_RATE ) ) >> BYTE_SHIFT ) & NIBBLE_MASK ) ;
    2da2:	a0 e4       	ldi	r26, 0x40	; 64
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e0 e4       	ldi	r30, 0x40	; 64
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	8c 93       	st	X, r24
	UBRRL =  UBRR_VALUE( BAUD_RATE ) ;
    2dae:	e9 e2       	ldi	r30, 0x29	; 41
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	8f ec       	ldi	r24, 0xCF	; 207
    2db4:	80 83       	st	Z, r24
	#if UART_MODE == TRANSMITTER
	UCSRB |= ( BIT_MASK << TXEN_BIT );
#elif UART_MODE == RECEIVER
	UCSRB |= ( BIT_MASK << RXEN_BIT );
#elif UART_MODE == TRANSCEIVER
	UCSRB |= ( BIT_MASK << TXEN_BIT );
    2db6:	aa e2       	ldi	r26, 0x2A	; 42
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	ea e2       	ldi	r30, 0x2A	; 42
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	88 60       	ori	r24, 0x08	; 8
    2dc2:	8c 93       	st	X, r24
	UCSRB |= ( BIT_MASK << RXEN_BIT );
    2dc4:	aa e2       	ldi	r26, 0x2A	; 42
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	ea e2       	ldi	r30, 0x2A	; 42
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	80 61       	ori	r24, 0x10	; 16
    2dd0:	8c 93       	st	X, r24
#else
#warning " UART_enuInit(): Unidentified UART Mode. Disabled UART "
#endif

	return Local_enuErrorState ;
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <UART_ReceiveFrame>:

ES_t UART_ReceiveFrame( void *Copy_pReceivedData)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <UART_ReceiveFrame+0x6>
    2de2:	0f 92       	push	r0
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	9b 83       	std	Y+3, r25	; 0x03
    2dea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pReceivedData != NULL )
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	9b 81       	ldd	r25, Y+3	; 0x03
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	69 f0       	breq	.+26     	; 0x2e12 <UART_ReceiveFrame+0x36>
	{
		while( !( ( UCSRA >> RXC_BIT ) & BIT_MASK ) );		/*	Waiting for RX Complete Flag	*/
    2df8:	eb e2       	ldi	r30, 0x2B	; 43
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	88 23       	and	r24, r24
    2e00:	dc f7       	brge	.-10     	; 0x2df8 <UART_ReceiveFrame+0x1c>
			*( (u16 *)Copy_pReceivedData ) |=	RXB ;
			SREG = Local_u8CopySERG ;
		}
		else
		{
			*( (u8 *)Copy_pReceivedData ) = RXB ;
    2e02:	ea 81       	ldd	r30, Y+2	; 0x02
    2e04:	fb 81       	ldd	r31, Y+3	; 0x03
    2e06:	ac e2       	ldi	r26, 0x2C	; 44
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	8c 91       	ld	r24, X
    2e0c:	80 83       	st	Z, r24
		}
		Local_enuErrorState = ES_OK;
    2e0e:	19 82       	std	Y+1, r1	; 0x01
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <UART_ReceiveFrame+0x3a>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    2e12:	83 e0       	ldi	r24, 0x03	; 3
    2e14:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	08 95       	ret

00002e24 <UART_SendFrame>:

ES_t UART_SendFrame( void *Copy_pData)
{
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	00 d0       	rcall	.+0      	; 0x2e2a <UART_SendFrame+0x6>
    2e2a:	0f 92       	push	r0
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	9b 83       	std	Y+3, r25	; 0x03
    2e32:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	89 83       	std	Y+1, r24	; 0x01

	while( !( ( UCSRA>> UDRE_BIT ) & BIT_MASK ) );		/*	Waiting for UDR Empty Flag	*/
    2e38:	eb e2       	ldi	r30, 0x2B	; 43
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	82 95       	swap	r24
    2e40:	86 95       	lsr	r24
    2e42:	87 70       	andi	r24, 0x07	; 7
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	81 70       	andi	r24, 0x01	; 1
    2e4a:	90 70       	andi	r25, 0x00	; 0
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	a1 f3       	breq	.-24     	; 0x2e38 <UART_SendFrame+0x14>
		TXB = *( (u16 *)Copy_pData ) ;
		SREG = Local_u8CopySERG ;
	}
	else
	{
		TXB = *( (u8 *)Copy_pData ) ;					/*	Writing Data to UDR			*/
    2e50:	ac e2       	ldi	r26, 0x2C	; 44
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	ea 81       	ldd	r30, Y+2	; 0x02
    2e56:	fb 81       	ldd	r31, Y+3	; 0x03
    2e58:	80 81       	ld	r24, Z
    2e5a:	8c 93       	st	X, r24
	}
	Local_enuErrorState = ES_OK ;
    2e5c:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <UART_enuSendPacket>:


ES_t UART_enuSendPacket( void *Copy_pcData )
{
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <UART_enuSendPacket+0x6>
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <UART_enuSendPacket+0x8>
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	9c 83       	std	Y+4, r25	; 0x04
    2e7a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	8a 83       	std	Y+2, r24	; 0x02
    2e80:	17 c0       	rjmp	.+46     	; 0x2eb0 <UART_enuSendPacket+0x44>
	}
	else
	{
		while( *((u8 *)Copy_pcData) != '\0' )
		{
			while( !( ( UCSRA>> UDRE_BIT ) & BIT_MASK ) );		/*	Waiting for UDR Empty Flag	*/
    2e82:	eb e2       	ldi	r30, 0x2B	; 43
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	82 95       	swap	r24
    2e8a:	86 95       	lsr	r24
    2e8c:	87 70       	andi	r24, 0x07	; 7
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	81 70       	andi	r24, 0x01	; 1
    2e94:	90 70       	andi	r25, 0x00	; 0
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	a1 f3       	breq	.-24     	; 0x2e82 <UART_enuSendPacket+0x16>
			TXB = *( (u8 *)Copy_pcData ) ;						/*	Writing Data to UDR			*/
    2e9a:	ac e2       	ldi	r26, 0x2C	; 44
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea2:	80 81       	ld	r24, Z
    2ea4:	8c 93       	st	X, r24
			(u8 *)Copy_pcData++ ;
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eaa:	01 96       	adiw	r24, 0x01	; 1
    2eac:	9c 83       	std	Y+4, r25	; 0x04
    2eae:	8b 83       	std	Y+3, r24	; 0x03
			(u16 *)Copy_pcData++ ;
		}
	}
	else
	{
		while( *((u8 *)Copy_pcData) != '\0' )
    2eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb4:	80 81       	ld	r24, Z
    2eb6:	88 23       	and	r24, r24
    2eb8:	21 f7       	brne	.-56     	; 0x2e82 <UART_enuSendPacket+0x16>
			TXB = *( (u8 *)Copy_pcData ) ;						/*	Writing Data to UDR			*/
			(u8 *)Copy_pcData++ ;
		}

	}
	Local_enuErrorState = ES_OK ;
    2eba:	1a 82       	std	Y+2, r1	; 0x02


	return Local_enuErrorState ;
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <UART_enuRecievePacket>:

ES_t UART_enuRecievePacket(void *Copy_pcData)
{
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <UART_enuRecievePacket+0x6>
    2ed2:	00 d0       	rcall	.+0      	; 0x2ed4 <UART_enuRecievePacket+0x8>
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	9c 83       	std	Y+4, r25	; 0x04
    2eda:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	8a 83       	std	Y+2, r24	; 0x02

		if( Copy_pcData != NULL )
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	e9 f0       	breq	.+58     	; 0x2f22 <UART_enuRecievePacket+0x56>
		{
			while( !( ( UCSRA >> RXC_BIT ) & BIT_MASK ) );		/*	Waiting for RX Complete Flag	*/
    2ee8:	eb e2       	ldi	r30, 0x2B	; 43
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	88 23       	and	r24, r24
    2ef0:	dc f7       	brge	.-10     	; 0x2ee8 <UART_enuRecievePacket+0x1c>
    2ef2:	10 c0       	rjmp	.+32     	; 0x2f14 <UART_enuRecievePacket+0x48>
			}
			else
			{
				while( *((u8 *)Copy_pcData) != '\0' )
				{
					while( !( ( UCSRA >> RXC_BIT ) & BIT_MASK ) );		/*	Waiting for RX Complete Flag	*/
    2ef4:	eb e2       	ldi	r30, 0x2B	; 43
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	88 23       	and	r24, r24
    2efc:	dc f7       	brge	.-10     	; 0x2ef4 <UART_enuRecievePacket+0x28>
					*( (u8 *)Copy_pcData ) = RXB ;
    2efe:	ab 81       	ldd	r26, Y+3	; 0x03
    2f00:	bc 81       	ldd	r27, Y+4	; 0x04
    2f02:	ec e2       	ldi	r30, 0x2C	; 44
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	8c 93       	st	X, r24
					(u8 *)Copy_pcData++ ;
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	01 96       	adiw	r24, 0x01	; 1
    2f10:	9c 83       	std	Y+4, r25	; 0x04
    2f12:	8b 83       	std	Y+3, r24	; 0x03
				}

			}
			else
			{
				while( *((u8 *)Copy_pcData) != '\0' )
    2f14:	eb 81       	ldd	r30, Y+3	; 0x03
    2f16:	fc 81       	ldd	r31, Y+4	; 0x04
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 23       	and	r24, r24
    2f1c:	59 f7       	brne	.-42     	; 0x2ef4 <UART_enuRecievePacket+0x28>
					*( (u8 *)Copy_pcData ) = RXB ;
					(u8 *)Copy_pcData++ ;
				}

			}
			Local_enuErrorState = ES_OK;
    2f1e:	1a 82       	std	Y+2, r1	; 0x02
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <UART_enuRecievePacket+0x5a>
		}
		else Local_enuErrorState = ES_NULL_POINTER;
    2f22:	83 e0       	ldi	r24, 0x03	; 3
    2f24:	8a 83       	std	Y+2, r24	; 0x02

		return Local_enuErrorState ;
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	08 95       	ret

00002f36 <UART_enuCallBack>:


ES_t UART_enuCallBack( u8 Copy_u8InterruptName , void ( *Copy_pAppFun )(void *) , void *Copy_pAppVar )
{
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	27 97       	sbiw	r28, 0x07	; 7
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	8b 83       	std	Y+3, r24	; 0x03
    2f4c:	7d 83       	std	Y+5, r23	; 0x05
    2f4e:	6c 83       	std	Y+4, r22	; 0x04
    2f50:	5f 83       	std	Y+7, r21	; 0x07
    2f52:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_pAppFun != NULL )
    2f58:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <UART_enuCallBack+0x2c>
    2f60:	43 c0       	rjmp	.+134    	; 0x2fe8 <UART_enuCallBack+0xb2>
	{

		u8 Local_u8Iter = 0 ;
    2f62:	19 82       	std	Y+1, r1	; 0x01
    2f64:	38 c0       	rjmp	.+112    	; 0x2fd6 <UART_enuCallBack+0xa0>
		for( ; Local_u8Iter < UART_INTERRUPTS ; Local_u8Iter++ )
		{
			if( Global_AstrUART_Pointers[Local_u8Iter].InterruptName == Copy_u8InterruptName )
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	c9 01       	movw	r24, r18
    2f6e:	88 0f       	add	r24, r24
    2f70:	99 1f       	adc	r25, r25
    2f72:	88 0f       	add	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	82 0f       	add	r24, r18
    2f78:	93 1f       	adc	r25, r19
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	e8 59       	subi	r30, 0x98	; 152
    2f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f80:	90 81       	ld	r25, Z
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	98 17       	cp	r25, r24
    2f86:	21 f5       	brne	.+72     	; 0x2fd0 <UART_enuCallBack+0x9a>
			{
				Global_AstrUART_Pointers[Local_u8Iter].ptrFun = Copy_pAppFun ;
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	c9 01       	movw	r24, r18
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	82 0f       	add	r24, r18
    2f9a:	93 1f       	adc	r25, r19
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	e5 59       	subi	r30, 0x95	; 149
    2fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa6:	91 83       	std	Z+1, r25	; 0x01
    2fa8:	80 83       	st	Z, r24
				Global_AstrUART_Pointers[Local_u8Iter].ptrVar = Copy_pAppVar ;
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	28 2f       	mov	r18, r24
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	c9 01       	movw	r24, r18
    2fb2:	88 0f       	add	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	82 0f       	add	r24, r18
    2fbc:	93 1f       	adc	r25, r19
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	e7 59       	subi	r30, 0x97	; 151
    2fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc8:	91 83       	std	Z+1, r25	; 0x01
    2fca:	80 83       	st	Z, r24
				Local_enuErrorState = ES_OK;
    2fcc:	1a 82       	std	Y+2, r1	; 0x02
    2fce:	06 c0       	rjmp	.+12     	; 0x2fdc <UART_enuCallBack+0xa6>

	if( Copy_pAppFun != NULL )
	{

		u8 Local_u8Iter = 0 ;
		for( ; Local_u8Iter < UART_INTERRUPTS ; Local_u8Iter++ )
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
    2fd2:	8f 5f       	subi	r24, 0xFF	; 255
    2fd4:	89 83       	std	Y+1, r24	; 0x01
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	83 30       	cpi	r24, 0x03	; 3
    2fda:	28 f2       	brcs	.-118    	; 0x2f66 <UART_enuCallBack+0x30>
				Global_AstrUART_Pointers[Local_u8Iter].ptrVar = Copy_pAppVar ;
				Local_enuErrorState = ES_OK;
				break;
			}
		}
		if( Local_u8Iter ==  UART_INTERRUPTS )
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	83 30       	cpi	r24, 0x03	; 3
    2fe0:	29 f4       	brne	.+10     	; 0x2fec <UART_enuCallBack+0xb6>
		{
			Local_enuErrorState = ES_OUT_RANGE;
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	8a 83       	std	Y+2, r24	; 0x02
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <UART_enuCallBack+0xb6>
			#warning " UART_enuCallBack() : Unidentified Interrupt Name, No Action Taken."
		}

	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    2fe8:	83 e0       	ldi	r24, 0x03	; 3
    2fea:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState ;
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2fee:	27 96       	adiw	r28, 0x07	; 7
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	de bf       	out	0x3e, r29	; 62
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	cd bf       	out	0x3d, r28	; 61
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	08 95       	ret

00003000 <__vector_13>:
void __vector_13( void )__attribute__((signal));
void __vector_14( void )__attribute__((signal));
void __vector_15( void )__attribute__((signal));

void __vector_13( void )	/*	RXCIE : RX Complete Interrupt	*/
{
    3000:	1f 92       	push	r1
    3002:	0f 92       	push	r0
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	0f 92       	push	r0
    3008:	11 24       	eor	r1, r1
    300a:	2f 93       	push	r18
    300c:	3f 93       	push	r19
    300e:	4f 93       	push	r20
    3010:	5f 93       	push	r21
    3012:	6f 93       	push	r22
    3014:	7f 93       	push	r23
    3016:	8f 93       	push	r24
    3018:	9f 93       	push	r25
    301a:	af 93       	push	r26
    301c:	bf 93       	push	r27
    301e:	ef 93       	push	r30
    3020:	ff 93       	push	r31
    3022:	df 93       	push	r29
    3024:	cf 93       	push	r28
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrUART_Pointers[0].ptrFun != NULL)
    302a:	80 91 6b 01 	lds	r24, 0x016B
    302e:	90 91 6c 01 	lds	r25, 0x016C
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	49 f0       	breq	.+18     	; 0x3048 <__vector_13+0x48>
	{
		( *Global_AstrUART_Pointers[0].ptrFun )( Global_AstrUART_Pointers[0].ptrVar );
    3036:	e0 91 6b 01 	lds	r30, 0x016B
    303a:	f0 91 6c 01 	lds	r31, 0x016C
    303e:	80 91 69 01 	lds	r24, 0x0169
    3042:	90 91 6a 01 	lds	r25, 0x016A
    3046:	09 95       	icall
	}
}
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	ff 91       	pop	r31
    304e:	ef 91       	pop	r30
    3050:	bf 91       	pop	r27
    3052:	af 91       	pop	r26
    3054:	9f 91       	pop	r25
    3056:	8f 91       	pop	r24
    3058:	7f 91       	pop	r23
    305a:	6f 91       	pop	r22
    305c:	5f 91       	pop	r21
    305e:	4f 91       	pop	r20
    3060:	3f 91       	pop	r19
    3062:	2f 91       	pop	r18
    3064:	0f 90       	pop	r0
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	0f 90       	pop	r0
    306a:	1f 90       	pop	r1
    306c:	18 95       	reti

0000306e <__vector_14>:

void __vector_14( void )	/*	UDRE : UDR register Empty Interrupt	*/
{
    306e:	1f 92       	push	r1
    3070:	0f 92       	push	r0
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	0f 92       	push	r0
    3076:	11 24       	eor	r1, r1
    3078:	2f 93       	push	r18
    307a:	3f 93       	push	r19
    307c:	4f 93       	push	r20
    307e:	5f 93       	push	r21
    3080:	6f 93       	push	r22
    3082:	7f 93       	push	r23
    3084:	8f 93       	push	r24
    3086:	9f 93       	push	r25
    3088:	af 93       	push	r26
    308a:	bf 93       	push	r27
    308c:	ef 93       	push	r30
    308e:	ff 93       	push	r31
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrUART_Pointers[1].ptrFun != NULL)
    3098:	80 91 70 01 	lds	r24, 0x0170
    309c:	90 91 71 01 	lds	r25, 0x0171
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	49 f0       	breq	.+18     	; 0x30b6 <__vector_14+0x48>
	{
		( *Global_AstrUART_Pointers[1].ptrFun )( Global_AstrUART_Pointers[1].ptrVar );
    30a4:	e0 91 70 01 	lds	r30, 0x0170
    30a8:	f0 91 71 01 	lds	r31, 0x0171
    30ac:	80 91 6e 01 	lds	r24, 0x016E
    30b0:	90 91 6f 01 	lds	r25, 0x016F
    30b4:	09 95       	icall
	}
}
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	ff 91       	pop	r31
    30bc:	ef 91       	pop	r30
    30be:	bf 91       	pop	r27
    30c0:	af 91       	pop	r26
    30c2:	9f 91       	pop	r25
    30c4:	8f 91       	pop	r24
    30c6:	7f 91       	pop	r23
    30c8:	6f 91       	pop	r22
    30ca:	5f 91       	pop	r21
    30cc:	4f 91       	pop	r20
    30ce:	3f 91       	pop	r19
    30d0:	2f 91       	pop	r18
    30d2:	0f 90       	pop	r0
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	0f 90       	pop	r0
    30d8:	1f 90       	pop	r1
    30da:	18 95       	reti

000030dc <__vector_15>:

void __vector_15( void )	/*	TXCIE : TX Complete Interrupt	*/
{
    30dc:	1f 92       	push	r1
    30de:	0f 92       	push	r0
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	0f 92       	push	r0
    30e4:	11 24       	eor	r1, r1
    30e6:	2f 93       	push	r18
    30e8:	3f 93       	push	r19
    30ea:	4f 93       	push	r20
    30ec:	5f 93       	push	r21
    30ee:	6f 93       	push	r22
    30f0:	7f 93       	push	r23
    30f2:	8f 93       	push	r24
    30f4:	9f 93       	push	r25
    30f6:	af 93       	push	r26
    30f8:	bf 93       	push	r27
    30fa:	ef 93       	push	r30
    30fc:	ff 93       	push	r31
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrUART_Pointers[2].ptrFun != NULL)
    3106:	80 91 75 01 	lds	r24, 0x0175
    310a:	90 91 76 01 	lds	r25, 0x0176
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	49 f0       	breq	.+18     	; 0x3124 <__vector_15+0x48>
	{
		( *Global_AstrUART_Pointers[2].ptrFun)( Global_AstrUART_Pointers[2].ptrVar );
    3112:	e0 91 75 01 	lds	r30, 0x0175
    3116:	f0 91 76 01 	lds	r31, 0x0176
    311a:	80 91 73 01 	lds	r24, 0x0173
    311e:	90 91 74 01 	lds	r25, 0x0174
    3122:	09 95       	icall
	}
}
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	ff 91       	pop	r31
    312a:	ef 91       	pop	r30
    312c:	bf 91       	pop	r27
    312e:	af 91       	pop	r26
    3130:	9f 91       	pop	r25
    3132:	8f 91       	pop	r24
    3134:	7f 91       	pop	r23
    3136:	6f 91       	pop	r22
    3138:	5f 91       	pop	r21
    313a:	4f 91       	pop	r20
    313c:	3f 91       	pop	r19
    313e:	2f 91       	pop	r18
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	0f 90       	pop	r0
    3146:	1f 90       	pop	r1
    3148:	18 95       	reti

0000314a <Timer_enuInit>:
															{ OCIE2 ,	NULL, NULL},
														};


ES_t Timer_enuInit( void )
{
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
    3152:	28 97       	sbiw	r28, 0x08	; 8
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	de bf       	out	0x3e, r29	; 62
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK ;
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ClkSelect ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    3162:	19 82       	std	Y+1, r1	; 0x01
    3164:	b8 c1       	rjmp	.+880    	; 0x34d6 <Timer_enuInit+0x38c>
	{
		if( Timers[Local_u8Iter].TimerNum == TIMER0)
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	28 2f       	mov	r18, r24
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	c9 01       	movw	r24, r18
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	88 0f       	add	r24, r24
    3174:	99 1f       	adc	r25, r25
    3176:	82 0f       	add	r24, r18
    3178:	93 1f       	adc	r25, r19
    317a:	fc 01       	movw	r30, r24
    317c:	e6 58       	subi	r30, 0x86	; 134
    317e:	fe 4f       	sbci	r31, 0xFE	; 254
    3180:	80 81       	ld	r24, Z
    3182:	88 3c       	cpi	r24, 0xC8	; 200
    3184:	09 f0       	breq	.+2      	; 0x3188 <Timer_enuInit+0x3e>
    3186:	c8 c0       	rjmp	.+400    	; 0x3318 <Timer_enuInit+0x1ce>
		{
			TIMSK &= ~( TC0_INT_EN_MASK ) ;			// Disable All Interrupts before setting all conditions
    3188:	a9 e5       	ldi	r26, 0x59	; 89
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	e9 e5       	ldi	r30, 0x59	; 89
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	8c 7f       	andi	r24, 0xFC	; 252
    3194:	8c 93       	st	X, r24
			TCCR0 = 0x00 ;							// Masks all bits in TCCR0
    3196:	e3 e5       	ldi	r30, 0x53	; 83
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	10 82       	st	Z, r1
			OCR0  = 0x00 ;							// Clears Output Compare Register
    319c:	ec e5       	ldi	r30, 0x5C	; 92
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	10 82       	st	Z, r1
			/*	Set Clock Selection	*/
			Global_u32Timer0_Clk = Timer_u32TimerClock( TIMER0 , Timers[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	c9 01       	movw	r24, r18
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	88 0f       	add	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	82 0f       	add	r24, r18
    31b4:	93 1f       	adc	r25, r19
    31b6:	fc 01       	movw	r30, r24
    31b8:	e5 58       	subi	r30, 0x85	; 133
    31ba:	fe 4f       	sbci	r31, 0xFE	; 254
    31bc:	90 81       	ld	r25, Z
    31be:	9e 01       	movw	r18, r28
    31c0:	2d 5f       	subi	r18, 0xFD	; 253
    31c2:	3f 4f       	sbci	r19, 0xFF	; 255
    31c4:	88 ec       	ldi	r24, 0xC8	; 200
    31c6:	69 2f       	mov	r22, r25
    31c8:	a9 01       	movw	r20, r18
    31ca:	0e 94 82 1a 	call	0x3504	; 0x3504 <Timer_u32TimerClock>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	80 93 32 02 	sts	0x0232, r24
    31d6:	90 93 33 02 	sts	0x0233, r25
    31da:	a0 93 34 02 	sts	0x0234, r26
    31de:	b0 93 35 02 	sts	0x0235, r27
			TCCR0 |= ( Local_u8ClkSelect  << CLK0_SEL_BITS );
    31e2:	a3 e5       	ldi	r26, 0x53	; 83
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	e3 e5       	ldi	r30, 0x53	; 83
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	90 81       	ld	r25, Z
    31ec:	8b 81       	ldd	r24, Y+3	; 0x03
    31ee:	89 2b       	or	r24, r25
    31f0:	8c 93       	st	X, r24
			/*	Set Compare Output Mode	*/
			TCCR0 |= ( ( Timers[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COMP0_MAT_OUT_MODE_BITS );
    31f2:	a3 e5       	ldi	r26, 0x53	; 83
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	e3 e5       	ldi	r30, 0x53	; 83
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	48 2f       	mov	r20, r24
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	28 2f       	mov	r18, r24
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	c9 01       	movw	r24, r18
    3206:	88 0f       	add	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	88 0f       	add	r24, r24
    320c:	99 1f       	adc	r25, r25
    320e:	82 0f       	add	r24, r18
    3210:	93 1f       	adc	r25, r19
    3212:	fc 01       	movw	r30, r24
    3214:	e4 58       	subi	r30, 0x84	; 132
    3216:	fe 4f       	sbci	r31, 0xFE	; 254
    3218:	80 81       	ld	r24, Z
    321a:	88 2f       	mov	r24, r24
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	44 97       	sbiw	r24, 0x14	; 20
    3220:	82 95       	swap	r24
    3222:	92 95       	swap	r25
    3224:	90 7f       	andi	r25, 0xF0	; 240
    3226:	98 27       	eor	r25, r24
    3228:	80 7f       	andi	r24, 0xF0	; 240
    322a:	98 27       	eor	r25, r24
    322c:	84 2b       	or	r24, r20
    322e:	8c 93       	st	X, r24
			/*	Set Waveform Generation Mode	*/
			if( Timers[Local_u8Iter].WaveGenMode == WGM_NORMAL_MODE	||
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	28 2f       	mov	r18, r24
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	c9 01       	movw	r24, r18
    3238:	88 0f       	add	r24, r24
    323a:	99 1f       	adc	r25, r25
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	82 0f       	add	r24, r18
    3242:	93 1f       	adc	r25, r19
    3244:	fc 01       	movw	r30, r24
    3246:	e3 58       	subi	r30, 0x83	; 131
    3248:	fe 4f       	sbci	r31, 0xFE	; 254
    324a:	80 81       	ld	r24, Z
    324c:	8e 31       	cpi	r24, 0x1E	; 30
    324e:	81 f0       	breq	.+32     	; 0x3270 <Timer_enuInit+0x126>
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	28 2f       	mov	r18, r24
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	c9 01       	movw	r24, r18
    3258:	88 0f       	add	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	88 0f       	add	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	82 0f       	add	r24, r18
    3262:	93 1f       	adc	r25, r19
    3264:	fc 01       	movw	r30, r24
    3266:	e3 58       	subi	r30, 0x83	; 131
    3268:	fe 4f       	sbci	r31, 0xFE	; 254
    326a:	80 81       	ld	r24, Z
    326c:	80 32       	cpi	r24, 0x20	; 32
    326e:	11 f5       	brne	.+68     	; 0x32b4 <Timer_enuInit+0x16a>
				Timers[Local_u8Iter].WaveGenMode == WGM_CTC_MODE	)
			{
				TCCR0 |= ( ( ( Timers[Local_u8Iter].WaveGenMode - WGM_NORMAL_MODE ) >> BIT0_MASK ) << WGM01_BIT );
    3270:	a3 e5       	ldi	r26, 0x53	; 83
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e3 e5       	ldi	r30, 0x53	; 83
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	48 2f       	mov	r20, r24
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	c9 01       	movw	r24, r18
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	88 0f       	add	r24, r24
    328a:	99 1f       	adc	r25, r25
    328c:	82 0f       	add	r24, r18
    328e:	93 1f       	adc	r25, r19
    3290:	fc 01       	movw	r30, r24
    3292:	e3 58       	subi	r30, 0x83	; 131
    3294:	fe 4f       	sbci	r31, 0xFE	; 254
    3296:	80 81       	ld	r24, Z
    3298:	88 2f       	mov	r24, r24
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	4e 97       	sbiw	r24, 0x1e	; 30
    329e:	95 95       	asr	r25
    32a0:	87 95       	ror	r24
    32a2:	88 0f       	add	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	88 0f       	add	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	84 2b       	or	r24, r20
    32b0:	8c 93       	st	X, r24
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <Timer_enuInit+0x16e>
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    32b4:	82 e0       	ldi	r24, 0x02	; 2
    32b6:	8a 83       	std	Y+2, r24	; 0x02
				#warning "Timer_Init(): Non Supported Waveform Gen mode for Timer0. Timer0 WGM is set to WGM_NORMAL_MODE"
			}
			/*	Set Interrupt Mode	*/
			switch( Timers[Local_u8Iter].InterruptMode )
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	28 2f       	mov	r18, r24
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	c9 01       	movw	r24, r18
    32c0:	88 0f       	add	r24, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	82 0f       	add	r24, r18
    32ca:	93 1f       	adc	r25, r19
    32cc:	fc 01       	movw	r30, r24
    32ce:	e2 58       	subi	r30, 0x82	; 130
    32d0:	fe 4f       	sbci	r31, 0xFE	; 254
    32d2:	80 81       	ld	r24, Z
    32d4:	28 2f       	mov	r18, r24
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	38 87       	std	Y+8, r19	; 0x08
    32da:	2f 83       	std	Y+7, r18	; 0x07
    32dc:	8f 81       	ldd	r24, Y+7	; 0x07
    32de:	98 85       	ldd	r25, Y+8	; 0x08
    32e0:	89 32       	cpi	r24, 0x29	; 41
    32e2:	91 05       	cpc	r25, r1
    32e4:	31 f0       	breq	.+12     	; 0x32f2 <Timer_enuInit+0x1a8>
    32e6:	2f 81       	ldd	r18, Y+7	; 0x07
    32e8:	38 85       	ldd	r19, Y+8	; 0x08
    32ea:	2a 32       	cpi	r18, 0x2A	; 42
    32ec:	31 05       	cpc	r19, r1
    32ee:	49 f0       	breq	.+18     	; 0x3302 <Timer_enuInit+0x1b8>
    32f0:	10 c0       	rjmp	.+32     	; 0x3312 <Timer_enuInit+0x1c8>
			{
				case TC_OVERFLOW_INT	:	TIMSK |= ( BIT0_MASK << TOIE0_BIT );	/*	Enable TOIE0 Interrupt */
    32f2:	a9 e5       	ldi	r26, 0x59	; 89
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	e9 e5       	ldi	r30, 0x59	; 89
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	81 60       	ori	r24, 0x01	; 1
    32fe:	8c 93       	st	X, r24
    3300:	e7 c0       	rjmp	.+462    	; 0x34d0 <Timer_enuInit+0x386>
											break;
				case TC_OUT_COMP_INT	:	TIMSK |= ( BIT0_MASK << OCIE0_BIT );	/*	Enable OCIE0 Interrupt */
    3302:	a9 e5       	ldi	r26, 0x59	; 89
    3304:	b0 e0       	ldi	r27, 0x00	; 0
    3306:	e9 e5       	ldi	r30, 0x59	; 89
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	80 81       	ld	r24, Z
    330c:	82 60       	ori	r24, 0x02	; 2
    330e:	8c 93       	st	X, r24
    3310:	df c0       	rjmp	.+446    	; 0x34d0 <Timer_enuInit+0x386>
											break;

				default :	Local_enuErrorState = ES_OUT_RANGE ;
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	8a 83       	std	Y+2, r24	; 0x02
    3316:	dc c0       	rjmp	.+440    	; 0x34d0 <Timer_enuInit+0x386>
							#warning " Timer_Init(): Non Supported Interrupt mode for Timer0. Timer0 Interrupts are Disabled"
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else if( Timers[Local_u8Iter].TimerNum == TIMER2)
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	c9 01       	movw	r24, r18
    3320:	88 0f       	add	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	82 0f       	add	r24, r18
    332a:	93 1f       	adc	r25, r19
    332c:	fc 01       	movw	r30, r24
    332e:	e6 58       	subi	r30, 0x86	; 134
    3330:	fe 4f       	sbci	r31, 0xFE	; 254
    3332:	80 81       	ld	r24, Z
    3334:	8b 3c       	cpi	r24, 0xCB	; 203
    3336:	09 f0       	breq	.+2      	; 0x333a <Timer_enuInit+0x1f0>
    3338:	c8 c0       	rjmp	.+400    	; 0x34ca <Timer_enuInit+0x380>
		{
			TIMSK &= ~( TC2_INT_EN_MASK ) ;			// Disable All Interrupts before setting all conditions
    333a:	a9 e5       	ldi	r26, 0x59	; 89
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e9 e5       	ldi	r30, 0x59	; 89
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	8f 73       	andi	r24, 0x3F	; 63
    3346:	8c 93       	st	X, r24
			TCCR2 = 0x00 ;							// Masks all bits in TCCR2
    3348:	e5 e4       	ldi	r30, 0x45	; 69
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	10 82       	st	Z, r1
			OCR2  = 0x00 ;							// Clears Output Compare Register
    334e:	e3 e4       	ldi	r30, 0x43	; 67
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	10 82       	st	Z, r1

			/*	Set Clock Selection	*/
			Global_u32Timer2_Clk = Timer_u32TimerClock( TIMER2 , Timers[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	28 2f       	mov	r18, r24
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	c9 01       	movw	r24, r18
    335c:	88 0f       	add	r24, r24
    335e:	99 1f       	adc	r25, r25
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	82 0f       	add	r24, r18
    3366:	93 1f       	adc	r25, r19
    3368:	fc 01       	movw	r30, r24
    336a:	e5 58       	subi	r30, 0x85	; 133
    336c:	fe 4f       	sbci	r31, 0xFE	; 254
    336e:	90 81       	ld	r25, Z
    3370:	9e 01       	movw	r18, r28
    3372:	2d 5f       	subi	r18, 0xFD	; 253
    3374:	3f 4f       	sbci	r19, 0xFF	; 255
    3376:	8b ec       	ldi	r24, 0xCB	; 203
    3378:	69 2f       	mov	r22, r25
    337a:	a9 01       	movw	r20, r18
    337c:	0e 94 82 1a 	call	0x3504	; 0x3504 <Timer_u32TimerClock>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	80 93 36 02 	sts	0x0236, r24
    3388:	90 93 37 02 	sts	0x0237, r25
    338c:	a0 93 38 02 	sts	0x0238, r26
    3390:	b0 93 39 02 	sts	0x0239, r27
			TCCR2 |= ( Local_u8ClkSelect << CLK2_SEL_BITS );
    3394:	a5 e4       	ldi	r26, 0x45	; 69
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	e5 e4       	ldi	r30, 0x45	; 69
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	90 81       	ld	r25, Z
    339e:	8b 81       	ldd	r24, Y+3	; 0x03
    33a0:	89 2b       	or	r24, r25
    33a2:	8c 93       	st	X, r24
			/*	Set Compare Output Mode	*/
			TCCR2 |= ( ( Timers[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COMP2_MAT_OUT_MODE_BITS );
    33a4:	a5 e4       	ldi	r26, 0x45	; 69
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	e5 e4       	ldi	r30, 0x45	; 69
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	80 81       	ld	r24, Z
    33ae:	48 2f       	mov	r20, r24
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	c9 01       	movw	r24, r18
    33b8:	88 0f       	add	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	88 0f       	add	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	82 0f       	add	r24, r18
    33c2:	93 1f       	adc	r25, r19
    33c4:	fc 01       	movw	r30, r24
    33c6:	e4 58       	subi	r30, 0x84	; 132
    33c8:	fe 4f       	sbci	r31, 0xFE	; 254
    33ca:	80 81       	ld	r24, Z
    33cc:	88 2f       	mov	r24, r24
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	44 97       	sbiw	r24, 0x14	; 20
    33d2:	82 95       	swap	r24
    33d4:	92 95       	swap	r25
    33d6:	90 7f       	andi	r25, 0xF0	; 240
    33d8:	98 27       	eor	r25, r24
    33da:	80 7f       	andi	r24, 0xF0	; 240
    33dc:	98 27       	eor	r25, r24
    33de:	84 2b       	or	r24, r20
    33e0:	8c 93       	st	X, r24
			/*	Set Waveform Generation Mode	*/
			if( Timers[Local_u8Iter].WaveGenMode == WGM_NORMAL_MODE ||
    33e2:	89 81       	ldd	r24, Y+1	; 0x01
    33e4:	28 2f       	mov	r18, r24
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	c9 01       	movw	r24, r18
    33ea:	88 0f       	add	r24, r24
    33ec:	99 1f       	adc	r25, r25
    33ee:	88 0f       	add	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	82 0f       	add	r24, r18
    33f4:	93 1f       	adc	r25, r19
    33f6:	fc 01       	movw	r30, r24
    33f8:	e3 58       	subi	r30, 0x83	; 131
    33fa:	fe 4f       	sbci	r31, 0xFE	; 254
    33fc:	80 81       	ld	r24, Z
    33fe:	8e 31       	cpi	r24, 0x1E	; 30
    3400:	81 f0       	breq	.+32     	; 0x3422 <Timer_enuInit+0x2d8>
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	28 2f       	mov	r18, r24
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	c9 01       	movw	r24, r18
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	82 0f       	add	r24, r18
    3414:	93 1f       	adc	r25, r19
    3416:	fc 01       	movw	r30, r24
    3418:	e3 58       	subi	r30, 0x83	; 131
    341a:	fe 4f       	sbci	r31, 0xFE	; 254
    341c:	80 81       	ld	r24, Z
    341e:	80 32       	cpi	r24, 0x20	; 32
    3420:	11 f5       	brne	.+68     	; 0x3466 <Timer_enuInit+0x31c>
				Timers[Local_u8Iter].WaveGenMode == WGM_CTC_MODE	 )
			{
				TCCR2 |= ( ( ( Timers[Local_u8Iter].WaveGenMode - WGM_NORMAL_MODE ) >> BIT0_MASK ) << WGM21_BIT );
    3422:	a5 e4       	ldi	r26, 0x45	; 69
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	e5 e4       	ldi	r30, 0x45	; 69
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	48 2f       	mov	r20, r24
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	28 2f       	mov	r18, r24
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	c9 01       	movw	r24, r18
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	82 0f       	add	r24, r18
    3440:	93 1f       	adc	r25, r19
    3442:	fc 01       	movw	r30, r24
    3444:	e3 58       	subi	r30, 0x83	; 131
    3446:	fe 4f       	sbci	r31, 0xFE	; 254
    3448:	80 81       	ld	r24, Z
    344a:	88 2f       	mov	r24, r24
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	4e 97       	sbiw	r24, 0x1e	; 30
    3450:	95 95       	asr	r25
    3452:	87 95       	ror	r24
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	88 0f       	add	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	84 2b       	or	r24, r20
    3462:	8c 93       	st	X, r24
    3464:	02 c0       	rjmp	.+4      	; 0x346a <Timer_enuInit+0x320>
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    3466:	82 e0       	ldi	r24, 0x02	; 2
    3468:	8a 83       	std	Y+2, r24	; 0x02
				#warning "Timer_Init(): Non Supported Waveform Gen mode for Timer2. Timer2 WGM is set to WGM_NORMAL_MODE"
			}
			/*	Set Interrupt Mode	*/
			switch( Timers[Local_u8Iter].InterruptMode )
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	c9 01       	movw	r24, r18
    3472:	88 0f       	add	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	88 0f       	add	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	82 0f       	add	r24, r18
    347c:	93 1f       	adc	r25, r19
    347e:	fc 01       	movw	r30, r24
    3480:	e2 58       	subi	r30, 0x82	; 130
    3482:	fe 4f       	sbci	r31, 0xFE	; 254
    3484:	80 81       	ld	r24, Z
    3486:	28 2f       	mov	r18, r24
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	3e 83       	std	Y+6, r19	; 0x06
    348c:	2d 83       	std	Y+5, r18	; 0x05
    348e:	8d 81       	ldd	r24, Y+5	; 0x05
    3490:	9e 81       	ldd	r25, Y+6	; 0x06
    3492:	89 32       	cpi	r24, 0x29	; 41
    3494:	91 05       	cpc	r25, r1
    3496:	31 f0       	breq	.+12     	; 0x34a4 <Timer_enuInit+0x35a>
    3498:	2d 81       	ldd	r18, Y+5	; 0x05
    349a:	3e 81       	ldd	r19, Y+6	; 0x06
    349c:	2a 32       	cpi	r18, 0x2A	; 42
    349e:	31 05       	cpc	r19, r1
    34a0:	49 f0       	breq	.+18     	; 0x34b4 <Timer_enuInit+0x36a>
    34a2:	10 c0       	rjmp	.+32     	; 0x34c4 <Timer_enuInit+0x37a>
			{
				case TC_OVERFLOW_INT	:	TIMSK |= ( BIT0_MASK << TOIE2_BIT );	/*	Enable TOIE2 Interrupt */
    34a4:	a9 e5       	ldi	r26, 0x59	; 89
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e9 e5       	ldi	r30, 0x59	; 89
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	80 64       	ori	r24, 0x40	; 64
    34b0:	8c 93       	st	X, r24
    34b2:	0e c0       	rjmp	.+28     	; 0x34d0 <Timer_enuInit+0x386>
											break;
				case TC_OUT_COMP_INT	:	TIMSK |= ( BIT0_MASK << OCIE2_BIT );	/*	Enable OCIE2 Interrupt */
    34b4:	a9 e5       	ldi	r26, 0x59	; 89
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	e9 e5       	ldi	r30, 0x59	; 89
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	80 68       	ori	r24, 0x80	; 128
    34c0:	8c 93       	st	X, r24
    34c2:	06 c0       	rjmp	.+12     	; 0x34d0 <Timer_enuInit+0x386>
											break;

				default :	Local_enuErrorState = ES_OUT_RANGE ;
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	8a 83       	std	Y+2, r24	; 0x02
    34c8:	03 c0       	rjmp	.+6      	; 0x34d0 <Timer_enuInit+0x386>
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE ;
    34ca:	82 e0       	ldi	r24, 0x02	; 2
    34cc:	8a 83       	std	Y+2, r24	; 0x02
    34ce:	09 c0       	rjmp	.+18     	; 0x34e2 <Timer_enuInit+0x398>
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    34d0:	89 81       	ldd	r24, Y+1	; 0x01
    34d2:	8f 5f       	subi	r24, 0xFF	; 255
    34d4:	89 83       	std	Y+1, r24	; 0x01
    34d6:	90 91 77 01 	lds	r25, 0x0177
    34da:	89 81       	ldd	r24, Y+1	; 0x01
    34dc:	89 17       	cp	r24, r25
    34de:	08 f4       	brcc	.+2      	; 0x34e2 <Timer_enuInit+0x398>
    34e0:	42 ce       	rjmp	.-892    	; 0x3166 <Timer_enuInit+0x1c>
			#warning " Timer_Init(): Non Supported Timer Number , Initialization is terminated."
			break;
		}
	}

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    34e2:	8a 81       	ldd	r24, Y+2	; 0x02
    34e4:	81 30       	cpi	r24, 0x01	; 1
    34e6:	19 f0       	breq	.+6      	; 0x34ee <Timer_enuInit+0x3a4>
    34e8:	3a 81       	ldd	r19, Y+2	; 0x02
    34ea:	3c 83       	std	Y+4, r19	; 0x04
    34ec:	01 c0       	rjmp	.+2      	; 0x34f0 <Timer_enuInit+0x3a6>
    34ee:	1c 82       	std	Y+4, r1	; 0x04
    34f0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    34f2:	28 96       	adiw	r28, 0x08	; 8
    34f4:	0f b6       	in	r0, 0x3f	; 63
    34f6:	f8 94       	cli
    34f8:	de bf       	out	0x3e, r29	; 62
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	cd bf       	out	0x3d, r28	; 61
    34fe:	cf 91       	pop	r28
    3500:	df 91       	pop	r29
    3502:	08 95       	ret

00003504 <Timer_u32TimerClock>:

static u32 Timer_u32TimerClock( u8 Copy_u8TimerNum ,u8 Copy_u8ClkSelectNum ,u8 *Copy_pu8ClkSelectPrescalar )
{
    3504:	df 93       	push	r29
    3506:	cf 93       	push	r28
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	2a 97       	sbiw	r28, 0x0a	; 10
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	8d 83       	std	Y+5, r24	; 0x05
    351a:	6e 83       	std	Y+6, r22	; 0x06
    351c:	58 87       	std	Y+8, r21	; 0x08
    351e:	4f 83       	std	Y+7, r20	; 0x07
	u32 Copy_u32TimerClk = CPU_CLOCK;
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	94 e2       	ldi	r25, 0x24	; 36
    3524:	a4 ef       	ldi	r26, 0xF4	; 244
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	89 83       	std	Y+1, r24	; 0x01
    352a:	9a 83       	std	Y+2, r25	; 0x02
    352c:	ab 83       	std	Y+3, r26	; 0x03
    352e:	bc 83       	std	Y+4, r27	; 0x04


	switch( Copy_u8ClkSelectNum )
    3530:	8e 81       	ldd	r24, Y+6	; 0x06
    3532:	28 2f       	mov	r18, r24
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	3a 87       	std	Y+10, r19	; 0x0a
    3538:	29 87       	std	Y+9, r18	; 0x09
    353a:	89 85       	ldd	r24, Y+9	; 0x09
    353c:	9a 85       	ldd	r25, Y+10	; 0x0a
    353e:	8e 30       	cpi	r24, 0x0E	; 14
    3540:	91 05       	cpc	r25, r1
    3542:	09 f4       	brne	.+2      	; 0x3546 <Timer_u32TimerClock+0x42>
    3544:	81 c0       	rjmp	.+258    	; 0x3648 <Timer_u32TimerClock+0x144>
    3546:	29 85       	ldd	r18, Y+9	; 0x09
    3548:	3a 85       	ldd	r19, Y+10	; 0x0a
    354a:	2f 30       	cpi	r18, 0x0F	; 15
    354c:	31 05       	cpc	r19, r1
    354e:	ec f4       	brge	.+58     	; 0x358a <Timer_u32TimerClock+0x86>
    3550:	89 85       	ldd	r24, Y+9	; 0x09
    3552:	9a 85       	ldd	r25, Y+10	; 0x0a
    3554:	8b 30       	cpi	r24, 0x0B	; 11
    3556:	91 05       	cpc	r25, r1
    3558:	09 f4       	brne	.+2      	; 0x355c <Timer_u32TimerClock+0x58>
    355a:	44 c0       	rjmp	.+136    	; 0x35e4 <Timer_u32TimerClock+0xe0>
    355c:	29 85       	ldd	r18, Y+9	; 0x09
    355e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3560:	2c 30       	cpi	r18, 0x0C	; 12
    3562:	31 05       	cpc	r19, r1
    3564:	34 f4       	brge	.+12     	; 0x3572 <Timer_u32TimerClock+0x6e>
    3566:	89 85       	ldd	r24, Y+9	; 0x09
    3568:	9a 85       	ldd	r25, Y+10	; 0x0a
    356a:	8a 30       	cpi	r24, 0x0A	; 10
    356c:	91 05       	cpc	r25, r1
    356e:	91 f1       	breq	.+100    	; 0x35d4 <Timer_u32TimerClock+0xd0>
    3570:	f7 c0       	rjmp	.+494    	; 0x3760 <Timer_u32TimerClock+0x25c>
    3572:	29 85       	ldd	r18, Y+9	; 0x09
    3574:	3a 85       	ldd	r19, Y+10	; 0x0a
    3576:	2c 30       	cpi	r18, 0x0C	; 12
    3578:	31 05       	cpc	r19, r1
    357a:	c9 f1       	breq	.+114    	; 0x35ee <Timer_u32TimerClock+0xea>
    357c:	89 85       	ldd	r24, Y+9	; 0x09
    357e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3580:	8d 30       	cpi	r24, 0x0D	; 13
    3582:	91 05       	cpc	r25, r1
    3584:	09 f4       	brne	.+2      	; 0x3588 <Timer_u32TimerClock+0x84>
    3586:	48 c0       	rjmp	.+144    	; 0x3618 <Timer_u32TimerClock+0x114>
    3588:	eb c0       	rjmp	.+470    	; 0x3760 <Timer_u32TimerClock+0x25c>
    358a:	29 85       	ldd	r18, Y+9	; 0x09
    358c:	3a 85       	ldd	r19, Y+10	; 0x0a
    358e:	21 31       	cpi	r18, 0x11	; 17
    3590:	31 05       	cpc	r19, r1
    3592:	09 f4       	brne	.+2      	; 0x3596 <Timer_u32TimerClock+0x92>
    3594:	a7 c0       	rjmp	.+334    	; 0x36e4 <Timer_u32TimerClock+0x1e0>
    3596:	89 85       	ldd	r24, Y+9	; 0x09
    3598:	9a 85       	ldd	r25, Y+10	; 0x0a
    359a:	82 31       	cpi	r24, 0x12	; 18
    359c:	91 05       	cpc	r25, r1
    359e:	6c f4       	brge	.+26     	; 0x35ba <Timer_u32TimerClock+0xb6>
    35a0:	29 85       	ldd	r18, Y+9	; 0x09
    35a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    35a4:	2f 30       	cpi	r18, 0x0F	; 15
    35a6:	31 05       	cpc	r19, r1
    35a8:	09 f4       	brne	.+2      	; 0x35ac <Timer_u32TimerClock+0xa8>
    35aa:	6b c0       	rjmp	.+214    	; 0x3682 <Timer_u32TimerClock+0x17e>
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b0:	80 31       	cpi	r24, 0x10	; 16
    35b2:	91 05       	cpc	r25, r1
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <Timer_u32TimerClock+0xb4>
    35b6:	7d c0       	rjmp	.+250    	; 0x36b2 <Timer_u32TimerClock+0x1ae>
    35b8:	d3 c0       	rjmp	.+422    	; 0x3760 <Timer_u32TimerClock+0x25c>
    35ba:	29 85       	ldd	r18, Y+9	; 0x09
    35bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    35be:	22 31       	cpi	r18, 0x12	; 18
    35c0:	31 05       	cpc	r19, r1
    35c2:	09 f4       	brne	.+2      	; 0x35c6 <Timer_u32TimerClock+0xc2>
    35c4:	ad c0       	rjmp	.+346    	; 0x3720 <Timer_u32TimerClock+0x21c>
    35c6:	89 85       	ldd	r24, Y+9	; 0x09
    35c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ca:	83 31       	cpi	r24, 0x13	; 19
    35cc:	91 05       	cpc	r25, r1
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <Timer_u32TimerClock+0xce>
    35d0:	b7 c0       	rjmp	.+366    	; 0x3740 <Timer_u32TimerClock+0x23c>
    35d2:	c6 c0       	rjmp	.+396    	; 0x3760 <Timer_u32TimerClock+0x25c>
	{
		case NO_CLK		:	*Copy_pu8ClkSelectPrescalar = 0;
    35d4:	ef 81       	ldd	r30, Y+7	; 0x07
    35d6:	f8 85       	ldd	r31, Y+8	; 0x08
    35d8:	10 82       	st	Z, r1
							Copy_u32TimerClk = 0 ;
    35da:	19 82       	std	Y+1, r1	; 0x01
    35dc:	1a 82       	std	Y+2, r1	; 0x02
    35de:	1b 82       	std	Y+3, r1	; 0x03
    35e0:	1c 82       	std	Y+4, r1	; 0x04
    35e2:	c2 c0       	rjmp	.+388    	; 0x3768 <Timer_u32TimerClock+0x264>
							break;
		case PRES_1		:	*Copy_pu8ClkSelectPrescalar = 1;
    35e4:	ef 81       	ldd	r30, Y+7	; 0x07
    35e6:	f8 85       	ldd	r31, Y+8	; 0x08
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	80 83       	st	Z, r24
    35ec:	bd c0       	rjmp	.+378    	; 0x3768 <Timer_u32TimerClock+0x264>
						break;
		case PRES_8 	:	*Copy_pu8ClkSelectPrescalar = 2;
    35ee:	ef 81       	ldd	r30, Y+7	; 0x07
    35f0:	f8 85       	ldd	r31, Y+8	; 0x08
    35f2:	82 e0       	ldi	r24, 0x02	; 2
    35f4:	80 83       	st	Z, r24
							Copy_u32TimerClk >>= 3 ;
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	9a 81       	ldd	r25, Y+2	; 0x02
    35fa:	ab 81       	ldd	r26, Y+3	; 0x03
    35fc:	bc 81       	ldd	r27, Y+4	; 0x04
    35fe:	68 94       	set
    3600:	12 f8       	bld	r1, 2
    3602:	b6 95       	lsr	r27
    3604:	a7 95       	ror	r26
    3606:	97 95       	ror	r25
    3608:	87 95       	ror	r24
    360a:	16 94       	lsr	r1
    360c:	d1 f7       	brne	.-12     	; 0x3602 <Timer_u32TimerClock+0xfe>
    360e:	89 83       	std	Y+1, r24	; 0x01
    3610:	9a 83       	std	Y+2, r25	; 0x02
    3612:	ab 83       	std	Y+3, r26	; 0x03
    3614:	bc 83       	std	Y+4, r27	; 0x04
    3616:	a8 c0       	rjmp	.+336    	; 0x3768 <Timer_u32TimerClock+0x264>
						break;
		case PRES_32 	:	if( Copy_u8TimerNum == TIMER2 )
    3618:	8d 81       	ldd	r24, Y+5	; 0x05
    361a:	8b 3c       	cpi	r24, 0xCB	; 203
    361c:	a9 f4       	brne	.+42     	; 0x3648 <Timer_u32TimerClock+0x144>
							{
								*Copy_pu8ClkSelectPrescalar = 3;
    361e:	ef 81       	ldd	r30, Y+7	; 0x07
    3620:	f8 85       	ldd	r31, Y+8	; 0x08
    3622:	83 e0       	ldi	r24, 0x03	; 3
    3624:	80 83       	st	Z, r24
								Copy_u32TimerClk >>= 5 ;
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	9a 81       	ldd	r25, Y+2	; 0x02
    362a:	ab 81       	ldd	r26, Y+3	; 0x03
    362c:	bc 81       	ldd	r27, Y+4	; 0x04
    362e:	68 94       	set
    3630:	14 f8       	bld	r1, 4
    3632:	b6 95       	lsr	r27
    3634:	a7 95       	ror	r26
    3636:	97 95       	ror	r25
    3638:	87 95       	ror	r24
    363a:	16 94       	lsr	r1
    363c:	d1 f7       	brne	.-12     	; 0x3632 <Timer_u32TimerClock+0x12e>
    363e:	89 83       	std	Y+1, r24	; 0x01
    3640:	9a 83       	std	Y+2, r25	; 0x02
    3642:	ab 83       	std	Y+3, r26	; 0x03
    3644:	bc 83       	std	Y+4, r27	; 0x04
    3646:	90 c0       	rjmp	.+288    	; 0x3768 <Timer_u32TimerClock+0x264>
								break;
							}
							#warning "Clock Select Number selected is not supported in Timer0/Timer1 , shifted to PRES_64"
							/*	NO BREAK IN CASE OF NOT TIMER2	*/
		case PRES_64 	:	Copy_u32TimerClk >>= 6 ;
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	9a 81       	ldd	r25, Y+2	; 0x02
    364c:	ab 81       	ldd	r26, Y+3	; 0x03
    364e:	bc 81       	ldd	r27, Y+4	; 0x04
    3650:	68 94       	set
    3652:	15 f8       	bld	r1, 5
    3654:	b6 95       	lsr	r27
    3656:	a7 95       	ror	r26
    3658:	97 95       	ror	r25
    365a:	87 95       	ror	r24
    365c:	16 94       	lsr	r1
    365e:	d1 f7       	brne	.-12     	; 0x3654 <Timer_u32TimerClock+0x150>
    3660:	89 83       	std	Y+1, r24	; 0x01
    3662:	9a 83       	std	Y+2, r25	; 0x02
    3664:	ab 83       	std	Y+3, r26	; 0x03
    3666:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 4;
    3668:	8d 81       	ldd	r24, Y+5	; 0x05
    366a:	8b 3c       	cpi	r24, 0xCB	; 203
    366c:	29 f4       	brne	.+10     	; 0x3678 <Timer_u32TimerClock+0x174>
    366e:	ef 81       	ldd	r30, Y+7	; 0x07
    3670:	f8 85       	ldd	r31, Y+8	; 0x08
    3672:	84 e0       	ldi	r24, 0x04	; 4
    3674:	80 83       	st	Z, r24
    3676:	78 c0       	rjmp	.+240    	; 0x3768 <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 3;
    3678:	ef 81       	ldd	r30, Y+7	; 0x07
    367a:	f8 85       	ldd	r31, Y+8	; 0x08
    367c:	83 e0       	ldi	r24, 0x03	; 3
    367e:	80 83       	st	Z, r24
    3680:	73 c0       	rjmp	.+230    	; 0x3768 <Timer_u32TimerClock+0x264>
						break;
		case PRES_128 	:	if( Copy_u8TimerNum == TIMER2 )
    3682:	8d 81       	ldd	r24, Y+5	; 0x05
    3684:	8b 3c       	cpi	r24, 0xCB	; 203
    3686:	a9 f4       	brne	.+42     	; 0x36b2 <Timer_u32TimerClock+0x1ae>
							{
								*Copy_pu8ClkSelectPrescalar = 5;
    3688:	ef 81       	ldd	r30, Y+7	; 0x07
    368a:	f8 85       	ldd	r31, Y+8	; 0x08
    368c:	85 e0       	ldi	r24, 0x05	; 5
    368e:	80 83       	st	Z, r24
								Copy_u32TimerClk >>= 7 ;
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	9a 81       	ldd	r25, Y+2	; 0x02
    3694:	ab 81       	ldd	r26, Y+3	; 0x03
    3696:	bc 81       	ldd	r27, Y+4	; 0x04
    3698:	68 94       	set
    369a:	16 f8       	bld	r1, 6
    369c:	b6 95       	lsr	r27
    369e:	a7 95       	ror	r26
    36a0:	97 95       	ror	r25
    36a2:	87 95       	ror	r24
    36a4:	16 94       	lsr	r1
    36a6:	d1 f7       	brne	.-12     	; 0x369c <Timer_u32TimerClock+0x198>
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	9a 83       	std	Y+2, r25	; 0x02
    36ac:	ab 83       	std	Y+3, r26	; 0x03
    36ae:	bc 83       	std	Y+4, r27	; 0x04
    36b0:	5b c0       	rjmp	.+182    	; 0x3768 <Timer_u32TimerClock+0x264>
								break;
							}
							#warning "Clock Select Number selected is not supported in Timer0/Timer1 , shifted to PRES_256"
							/*	NO BREAK IN CASE OF NOT TIMER2	*/
		case PRES_256	 :	Copy_u32TimerClk >>= 8 ;
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	9a 81       	ldd	r25, Y+2	; 0x02
    36b6:	ab 81       	ldd	r26, Y+3	; 0x03
    36b8:	bc 81       	ldd	r27, Y+4	; 0x04
    36ba:	89 2f       	mov	r24, r25
    36bc:	9a 2f       	mov	r25, r26
    36be:	ab 2f       	mov	r26, r27
    36c0:	bb 27       	eor	r27, r27
    36c2:	89 83       	std	Y+1, r24	; 0x01
    36c4:	9a 83       	std	Y+2, r25	; 0x02
    36c6:	ab 83       	std	Y+3, r26	; 0x03
    36c8:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 6;
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	8b 3c       	cpi	r24, 0xCB	; 203
    36ce:	29 f4       	brne	.+10     	; 0x36da <Timer_u32TimerClock+0x1d6>
    36d0:	ef 81       	ldd	r30, Y+7	; 0x07
    36d2:	f8 85       	ldd	r31, Y+8	; 0x08
    36d4:	86 e0       	ldi	r24, 0x06	; 6
    36d6:	80 83       	st	Z, r24
    36d8:	47 c0       	rjmp	.+142    	; 0x3768 <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 4;
    36da:	ef 81       	ldd	r30, Y+7	; 0x07
    36dc:	f8 85       	ldd	r31, Y+8	; 0x08
    36de:	84 e0       	ldi	r24, 0x04	; 4
    36e0:	80 83       	st	Z, r24
    36e2:	42 c0       	rjmp	.+132    	; 0x3768 <Timer_u32TimerClock+0x264>
						break;
		case PRES_1024 :	Copy_u32TimerClk >>= 10 ;
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	9a 81       	ldd	r25, Y+2	; 0x02
    36e8:	ab 81       	ldd	r26, Y+3	; 0x03
    36ea:	bc 81       	ldd	r27, Y+4	; 0x04
    36ec:	07 2e       	mov	r0, r23
    36ee:	7a e0       	ldi	r23, 0x0A	; 10
    36f0:	b6 95       	lsr	r27
    36f2:	a7 95       	ror	r26
    36f4:	97 95       	ror	r25
    36f6:	87 95       	ror	r24
    36f8:	7a 95       	dec	r23
    36fa:	d1 f7       	brne	.-12     	; 0x36f0 <Timer_u32TimerClock+0x1ec>
    36fc:	70 2d       	mov	r23, r0
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	9a 83       	std	Y+2, r25	; 0x02
    3702:	ab 83       	std	Y+3, r26	; 0x03
    3704:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 7;
    3706:	8d 81       	ldd	r24, Y+5	; 0x05
    3708:	8b 3c       	cpi	r24, 0xCB	; 203
    370a:	29 f4       	brne	.+10     	; 0x3716 <Timer_u32TimerClock+0x212>
    370c:	ef 81       	ldd	r30, Y+7	; 0x07
    370e:	f8 85       	ldd	r31, Y+8	; 0x08
    3710:	87 e0       	ldi	r24, 0x07	; 7
    3712:	80 83       	st	Z, r24
    3714:	29 c0       	rjmp	.+82     	; 0x3768 <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 5;
    3716:	ef 81       	ldd	r30, Y+7	; 0x07
    3718:	f8 85       	ldd	r31, Y+8	; 0x08
    371a:	85 e0       	ldi	r24, 0x05	; 5
    371c:	80 83       	st	Z, r24
    371e:	24 c0       	rjmp	.+72     	; 0x3768 <Timer_u32TimerClock+0x264>
						break;
		case EXT_CLK_FALL	 :		Copy_u32TimerClk = EXT_CLOCK ;
    3720:	8f ef       	ldi	r24, 0xFF	; 255
    3722:	9f ef       	ldi	r25, 0xFF	; 255
    3724:	af ef       	ldi	r26, 0xFF	; 255
    3726:	bf ef       	ldi	r27, 0xFF	; 255
    3728:	89 83       	std	Y+1, r24	; 0x01
    372a:	9a 83       	std	Y+2, r25	; 0x02
    372c:	ab 83       	std	Y+3, r26	; 0x03
    372e:	bc 83       	std	Y+4, r27	; 0x04
									if( Copy_u8TimerNum == TIMER0 )
    3730:	8d 81       	ldd	r24, Y+5	; 0x05
    3732:	88 3c       	cpi	r24, 0xC8	; 200
    3734:	c9 f4       	brne	.+50     	; 0x3768 <Timer_u32TimerClock+0x264>
									{
										*Copy_pu8ClkSelectPrescalar = 6;
    3736:	ef 81       	ldd	r30, Y+7	; 0x07
    3738:	f8 85       	ldd	r31, Y+8	; 0x08
    373a:	86 e0       	ldi	r24, 0x06	; 6
    373c:	80 83       	st	Z, r24
    373e:	14 c0       	rjmp	.+40     	; 0x3768 <Timer_u32TimerClock+0x264>
										break;
									}
									#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		case EXT_CLK_RISE	 :		Copy_u32TimerClk = EXT_CLOCK ;
    3740:	8f ef       	ldi	r24, 0xFF	; 255
    3742:	9f ef       	ldi	r25, 0xFF	; 255
    3744:	af ef       	ldi	r26, 0xFF	; 255
    3746:	bf ef       	ldi	r27, 0xFF	; 255
    3748:	89 83       	std	Y+1, r24	; 0x01
    374a:	9a 83       	std	Y+2, r25	; 0x02
    374c:	ab 83       	std	Y+3, r26	; 0x03
    374e:	bc 83       	std	Y+4, r27	; 0x04
									if( Copy_u8TimerNum == TIMER0 )
    3750:	8d 81       	ldd	r24, Y+5	; 0x05
    3752:	88 3c       	cpi	r24, 0xC8	; 200
    3754:	49 f4       	brne	.+18     	; 0x3768 <Timer_u32TimerClock+0x264>
									{
										*Copy_pu8ClkSelectPrescalar = 7;
    3756:	ef 81       	ldd	r30, Y+7	; 0x07
    3758:	f8 85       	ldd	r31, Y+8	; 0x08
    375a:	87 e0       	ldi	r24, 0x07	; 7
    375c:	80 83       	st	Z, r24
    375e:	04 c0       	rjmp	.+8      	; 0x3768 <Timer_u32TimerClock+0x264>
										break;
									}
									#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		default:	Copy_u32TimerClk = 0;
    3760:	19 82       	std	Y+1, r1	; 0x01
    3762:	1a 82       	std	Y+2, r1	; 0x02
    3764:	1b 82       	std	Y+3, r1	; 0x03
    3766:	1c 82       	std	Y+4, r1	; 0x04
					#warning "Unsupported Clock mode is selected , Timer is disabled"
	}

	return Copy_u32TimerClk ;
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	9a 81       	ldd	r25, Y+2	; 0x02
    376c:	ab 81       	ldd	r26, Y+3	; 0x03
    376e:	bc 81       	ldd	r27, Y+4	; 0x04

}
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	2a 96       	adiw	r28, 0x0a	; 10
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	f8 94       	cli
    377a:	de bf       	out	0x3e, r29	; 62
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	cd bf       	out	0x3d, r28	; 61
    3780:	cf 91       	pop	r28
    3782:	df 91       	pop	r29
    3784:	08 95       	ret

00003786 <Timer_enuGetClock>:

ES_t Timer_enuGetClock( u8 Copy_u8TimerNum , u32 *Copy_pu32TimerClk)
{
    3786:	df 93       	push	r29
    3788:	cf 93       	push	r28
    378a:	00 d0       	rcall	.+0      	; 0x378c <Timer_enuGetClock+0x6>
    378c:	00 d0       	rcall	.+0      	; 0x378e <Timer_enuGetClock+0x8>
    378e:	0f 92       	push	r0
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
    3794:	8a 83       	std	Y+2, r24	; 0x02
    3796:	7c 83       	std	Y+4, r23	; 0x04
    3798:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 )
    379e:	8a 81       	ldd	r24, Y+2	; 0x02
    37a0:	88 3c       	cpi	r24, 0xC8	; 200
    37a2:	79 f4       	brne	.+30     	; 0x37c2 <Timer_enuGetClock+0x3c>
		*Copy_pu32TimerClk = Global_u32Timer0_Clk;
    37a4:	80 91 32 02 	lds	r24, 0x0232
    37a8:	90 91 33 02 	lds	r25, 0x0233
    37ac:	a0 91 34 02 	lds	r26, 0x0234
    37b0:	b0 91 35 02 	lds	r27, 0x0235
    37b4:	eb 81       	ldd	r30, Y+3	; 0x03
    37b6:	fc 81       	ldd	r31, Y+4	; 0x04
    37b8:	80 83       	st	Z, r24
    37ba:	91 83       	std	Z+1, r25	; 0x01
    37bc:	a2 83       	std	Z+2, r26	; 0x02
    37be:	b3 83       	std	Z+3, r27	; 0x03
    37c0:	14 c0       	rjmp	.+40     	; 0x37ea <Timer_enuGetClock+0x64>
	else if( Copy_u8TimerNum == TIMER2 )
    37c2:	8a 81       	ldd	r24, Y+2	; 0x02
    37c4:	8b 3c       	cpi	r24, 0xCB	; 203
    37c6:	79 f4       	brne	.+30     	; 0x37e6 <Timer_enuGetClock+0x60>
		*Copy_pu32TimerClk = Global_u32Timer2_Clk;
    37c8:	80 91 36 02 	lds	r24, 0x0236
    37cc:	90 91 37 02 	lds	r25, 0x0237
    37d0:	a0 91 38 02 	lds	r26, 0x0238
    37d4:	b0 91 39 02 	lds	r27, 0x0239
    37d8:	eb 81       	ldd	r30, Y+3	; 0x03
    37da:	fc 81       	ldd	r31, Y+4	; 0x04
    37dc:	80 83       	st	Z, r24
    37de:	91 83       	std	Z+1, r25	; 0x01
    37e0:	a2 83       	std	Z+2, r26	; 0x02
    37e2:	b3 83       	std	Z+3, r27	; 0x03
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <Timer_enuGetClock+0x64>
	else Local_enuErrorState = ES_OUT_RANGE ;
    37e6:	82 e0       	ldi	r24, 0x02	; 2
    37e8:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
    37ec:	81 30       	cpi	r24, 0x01	; 1
    37ee:	19 f0       	breq	.+6      	; 0x37f6 <Timer_enuGetClock+0x70>
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	8d 83       	std	Y+5, r24	; 0x05
    37f4:	01 c0       	rjmp	.+2      	; 0x37f8 <Timer_enuGetClock+0x72>
    37f6:	1d 82       	std	Y+5, r1	; 0x05
    37f8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <Timer_enuSetClkPrescaler>:


ES_t Timer_enuSetClkPrescaler( u8 Copy_u8TimerNum , u8 Copy_u8PrescalerValue )
{
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	2a 97       	sbiw	r28, 0x0a	; 10
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	88 87       	std	Y+8, r24	; 0x08
    3820:	69 87       	std	Y+9, r22	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8ClkSelectPrescaler = NO_CLK ;
    3826:	8a e0       	ldi	r24, 0x0A	; 10
    3828:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    382a:	e9 e5       	ldi	r30, 0x59	; 89
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	80 81       	ld	r24, Z
    3830:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32TimerClk = Timer_u32TimerClock( Copy_u8TimerNum , Copy_u8PrescalerValue , &Local_u8ClkSelectPrescaler ) ;
    3832:	9e 01       	movw	r18, r28
    3834:	29 5f       	subi	r18, 0xF9	; 249
    3836:	3f 4f       	sbci	r19, 0xFF	; 255
    3838:	88 85       	ldd	r24, Y+8	; 0x08
    383a:	69 85       	ldd	r22, Y+9	; 0x09
    383c:	a9 01       	movw	r20, r18
    383e:	0e 94 82 1a 	call	0x3504	; 0x3504 <Timer_u32TimerClock>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	89 83       	std	Y+1, r24	; 0x01
    3848:	9a 83       	std	Y+2, r25	; 0x02
    384a:	ab 83       	std	Y+3, r26	; 0x03
    384c:	bc 83       	std	Y+4, r27	; 0x04

	if( Copy_u8TimerNum == TIMER0 )
    384e:	88 85       	ldd	r24, Y+8	; 0x08
    3850:	88 3c       	cpi	r24, 0xC8	; 200
    3852:	31 f5       	brne	.+76     	; 0x38a0 <Timer_enuSetClkPrescaler+0x96>
	{
		TIMSK &= ~( TC0_INT_EN_MASK ) ;								// Disable Timer0 Interrupts
    3854:	a9 e5       	ldi	r26, 0x59	; 89
    3856:	b0 e0       	ldi	r27, 0x00	; 0
    3858:	e9 e5       	ldi	r30, 0x59	; 89
    385a:	f0 e0       	ldi	r31, 0x00	; 0
    385c:	80 81       	ld	r24, Z
    385e:	8c 7f       	andi	r24, 0xFC	; 252
    3860:	8c 93       	st	X, r24
		TCCR0 &= ~( CLK0_SEL_BITS_MASK ) ;							// Masking Clock Select bits
    3862:	a3 e5       	ldi	r26, 0x53	; 83
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	e3 e5       	ldi	r30, 0x53	; 83
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	80 81       	ld	r24, Z
    386c:	88 7f       	andi	r24, 0xF8	; 248
    386e:	8c 93       	st	X, r24
		TCCR0 |= ( Local_u8ClkSelectPrescaler  << CLK0_SEL_BITS ) ;	// Setting New Prescaler
    3870:	a3 e5       	ldi	r26, 0x53	; 83
    3872:	b0 e0       	ldi	r27, 0x00	; 0
    3874:	e3 e5       	ldi	r30, 0x53	; 83
    3876:	f0 e0       	ldi	r31, 0x00	; 0
    3878:	90 81       	ld	r25, Z
    387a:	8f 81       	ldd	r24, Y+7	; 0x07
    387c:	89 2b       	or	r24, r25
    387e:	8c 93       	st	X, r24
		Global_u32Timer0_Clk = Local_u32TimerClk ;					// Saving New Actual Timer0 Clock
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	9a 81       	ldd	r25, Y+2	; 0x02
    3884:	ab 81       	ldd	r26, Y+3	; 0x03
    3886:	bc 81       	ldd	r27, Y+4	; 0x04
    3888:	80 93 32 02 	sts	0x0232, r24
    388c:	90 93 33 02 	sts	0x0233, r25
    3890:	a0 93 34 02 	sts	0x0234, r26
    3894:	b0 93 35 02 	sts	0x0235, r27
		Timers[ TIMER0 - TIMER0 ].ClkSelect = Copy_u8PrescalerValue ;
    3898:	89 85       	ldd	r24, Y+9	; 0x09
    389a:	80 93 7b 01 	sts	0x017B, r24
    389e:	2b c0       	rjmp	.+86     	; 0x38f6 <Timer_enuSetClkPrescaler+0xec>
	}
	else if( Copy_u8TimerNum == TIMER2 )
    38a0:	88 85       	ldd	r24, Y+8	; 0x08
    38a2:	8b 3c       	cpi	r24, 0xCB	; 203
    38a4:	31 f5       	brne	.+76     	; 0x38f2 <Timer_enuSetClkPrescaler+0xe8>
	{
		TIMSK &= ~( TC2_INT_EN_MASK ) ;								// Disable Timer2 Interrupts
    38a6:	a9 e5       	ldi	r26, 0x59	; 89
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	e9 e5       	ldi	r30, 0x59	; 89
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	8f 73       	andi	r24, 0x3F	; 63
    38b2:	8c 93       	st	X, r24
		TCCR2 &= ~( CLK2_SEL_BITS_MASK );							// Masking Clock Select bits
    38b4:	a5 e4       	ldi	r26, 0x45	; 69
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	e5 e4       	ldi	r30, 0x45	; 69
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	80 81       	ld	r24, Z
    38be:	88 7f       	andi	r24, 0xF8	; 248
    38c0:	8c 93       	st	X, r24
		TCCR2 |= ( Local_u8ClkSelectPrescaler  << CLK2_SEL_BITS );	// Setting New Prescaler
    38c2:	a5 e4       	ldi	r26, 0x45	; 69
    38c4:	b0 e0       	ldi	r27, 0x00	; 0
    38c6:	e5 e4       	ldi	r30, 0x45	; 69
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	90 81       	ld	r25, Z
    38cc:	8f 81       	ldd	r24, Y+7	; 0x07
    38ce:	89 2b       	or	r24, r25
    38d0:	8c 93       	st	X, r24
		Global_u32Timer2_Clk = Local_u32TimerClk ;					// Saving New Actual Timer2 Clock
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	9a 81       	ldd	r25, Y+2	; 0x02
    38d6:	ab 81       	ldd	r26, Y+3	; 0x03
    38d8:	bc 81       	ldd	r27, Y+4	; 0x04
    38da:	80 93 36 02 	sts	0x0236, r24
    38de:	90 93 37 02 	sts	0x0237, r25
    38e2:	a0 93 38 02 	sts	0x0238, r26
    38e6:	b0 93 39 02 	sts	0x0239, r27
		Timers[ TIMER2 - TIMER0 ].ClkSelect = Copy_u8PrescalerValue ;
    38ea:	89 85       	ldd	r24, Y+9	; 0x09
    38ec:	80 93 8a 01 	sts	0x018A, r24
    38f0:	02 c0       	rjmp	.+4      	; 0x38f6 <Timer_enuSetClkPrescaler+0xec>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    38f2:	82 e0       	ldi	r24, 0x02	; 2
    38f4:	8e 83       	std	Y+6, r24	; 0x06

	TIMSK = Local_u8CopyTIMSK ;										// Re-setting Timer Interrupt Mask Register to its Status
    38f6:	e9 e5       	ldi	r30, 0x59	; 89
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	8d 81       	ldd	r24, Y+5	; 0x05
    38fc:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    38fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3900:	81 30       	cpi	r24, 0x01	; 1
    3902:	19 f0       	breq	.+6      	; 0x390a <Timer_enuSetClkPrescaler+0x100>
    3904:	8e 81       	ldd	r24, Y+6	; 0x06
    3906:	8a 87       	std	Y+10, r24	; 0x0a
    3908:	01 c0       	rjmp	.+2      	; 0x390c <Timer_enuSetClkPrescaler+0x102>
    390a:	1a 86       	std	Y+10, r1	; 0x0a
    390c:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    390e:	2a 96       	adiw	r28, 0x0a	; 10
    3910:	0f b6       	in	r0, 0x3f	; 63
    3912:	f8 94       	cli
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	cf 91       	pop	r28
    391c:	df 91       	pop	r29
    391e:	08 95       	ret

00003920 <Timer_enuGetClkSelect>:

ES_t Timer_enuGetClkSelect( u8 Copy_u8TimerNum , u16 *Copy_pu8TimerClkSelect )
{
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	00 d0       	rcall	.+0      	; 0x3926 <Timer_enuGetClkSelect+0x6>
    3926:	00 d0       	rcall	.+0      	; 0x3928 <Timer_enuGetClkSelect+0x8>
    3928:	0f 92       	push	r0
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	8b 83       	std	Y+3, r24	; 0x03
    3930:	7d 83       	std	Y+5, r23	; 0x05
    3932:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_OUT_RANGE ;
    3934:	82 e0       	ldi	r24, 0x02	; 2
    3936:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    3938:	19 82       	std	Y+1, r1	; 0x01
    393a:	29 c0       	rjmp	.+82     	; 0x398e <Timer_enuGetClkSelect+0x6e>
	{
		if( Timers[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    393c:	89 81       	ldd	r24, Y+1	; 0x01
    393e:	28 2f       	mov	r18, r24
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	c9 01       	movw	r24, r18
    3944:	88 0f       	add	r24, r24
    3946:	99 1f       	adc	r25, r25
    3948:	88 0f       	add	r24, r24
    394a:	99 1f       	adc	r25, r25
    394c:	82 0f       	add	r24, r18
    394e:	93 1f       	adc	r25, r19
    3950:	fc 01       	movw	r30, r24
    3952:	e6 58       	subi	r30, 0x86	; 134
    3954:	fe 4f       	sbci	r31, 0xFE	; 254
    3956:	90 81       	ld	r25, Z
    3958:	8b 81       	ldd	r24, Y+3	; 0x03
    395a:	98 17       	cp	r25, r24
    395c:	a9 f4       	brne	.+42     	; 0x3988 <Timer_enuGetClkSelect+0x68>
		{
			*Copy_pu8TimerClkSelect = Timers[Local_u8Iter].ClkSelect;
    395e:	89 81       	ldd	r24, Y+1	; 0x01
    3960:	28 2f       	mov	r18, r24
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	c9 01       	movw	r24, r18
    3966:	88 0f       	add	r24, r24
    3968:	99 1f       	adc	r25, r25
    396a:	88 0f       	add	r24, r24
    396c:	99 1f       	adc	r25, r25
    396e:	82 0f       	add	r24, r18
    3970:	93 1f       	adc	r25, r19
    3972:	fc 01       	movw	r30, r24
    3974:	e5 58       	subi	r30, 0x85	; 133
    3976:	fe 4f       	sbci	r31, 0xFE	; 254
    3978:	80 81       	ld	r24, Z
    397a:	88 2f       	mov	r24, r24
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	ec 81       	ldd	r30, Y+4	; 0x04
    3980:	fd 81       	ldd	r31, Y+5	; 0x05
    3982:	91 83       	std	Z+1, r25	; 0x01
    3984:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK ;
    3986:	1a 82       	std	Y+2, r1	; 0x02

ES_t Timer_enuGetClkSelect( u8 Copy_u8TimerNum , u16 *Copy_pu8TimerClkSelect )
{
	ES_t Local_enuErrorState = ES_OUT_RANGE ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    3988:	89 81       	ldd	r24, Y+1	; 0x01
    398a:	8f 5f       	subi	r24, 0xFF	; 255
    398c:	89 83       	std	Y+1, r24	; 0x01
    398e:	90 91 77 01 	lds	r25, 0x0177
    3992:	89 81       	ldd	r24, Y+1	; 0x01
    3994:	89 17       	cp	r24, r25
    3996:	90 f2       	brcs	.-92     	; 0x393c <Timer_enuGetClkSelect+0x1c>
			Local_enuErrorState = ES_OK ;
		}
	}


	return Local_enuErrorState ;
    3998:	8a 81       	ldd	r24, Y+2	; 0x02
}
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	0f 90       	pop	r0
    39a2:	0f 90       	pop	r0
    39a4:	cf 91       	pop	r28
    39a6:	df 91       	pop	r29
    39a8:	08 95       	ret

000039aa <Timer_enuSetOCn_Mode>:

ES_t Timer_enuSetOCn_Mode( u8 Copy_u8TimerNum , u8 Copy_u8COM_Mode )
{
    39aa:	df 93       	push	r29
    39ac:	cf 93       	push	r28
    39ae:	00 d0       	rcall	.+0      	; 0x39b0 <Timer_enuSetOCn_Mode+0x6>
    39b0:	00 d0       	rcall	.+0      	; 0x39b2 <Timer_enuSetOCn_Mode+0x8>
    39b2:	0f 92       	push	r0
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	8b 83       	std	Y+3, r24	; 0x03
    39ba:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    39c0:	e9 e5       	ldi	r30, 0x59	; 89
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	80 81       	ld	r24, Z
    39c6:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 )
    39c8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ca:	88 3c       	cpi	r24, 0xC8	; 200
    39cc:	21 f5       	brne	.+72     	; 0x3a16 <Timer_enuSetOCn_Mode+0x6c>
	{
		TIMSK &= ~( TC0_INT_EN_MASK ) ;													// Disable Timer0 Interrupts
    39ce:	a9 e5       	ldi	r26, 0x59	; 89
    39d0:	b0 e0       	ldi	r27, 0x00	; 0
    39d2:	e9 e5       	ldi	r30, 0x59	; 89
    39d4:	f0 e0       	ldi	r31, 0x00	; 0
    39d6:	80 81       	ld	r24, Z
    39d8:	8c 7f       	andi	r24, 0xFC	; 252
    39da:	8c 93       	st	X, r24
		TCCR0 &= ~( COMP0_MAT_OUT_MODE_BITS_MASK ) ;									// Masking COM Select bits
    39dc:	a3 e5       	ldi	r26, 0x53	; 83
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	e3 e5       	ldi	r30, 0x53	; 83
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	80 81       	ld	r24, Z
    39e6:	8f 7c       	andi	r24, 0xCF	; 207
    39e8:	8c 93       	st	X, r24
		TCCR0 |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COMP0_MAT_OUT_MODE_BITS ) ;		// Setting New Compare Output Mode
    39ea:	a3 e5       	ldi	r26, 0x53	; 83
    39ec:	b0 e0       	ldi	r27, 0x00	; 0
    39ee:	e3 e5       	ldi	r30, 0x53	; 83
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	80 81       	ld	r24, Z
    39f4:	28 2f       	mov	r18, r24
    39f6:	8c 81       	ldd	r24, Y+4	; 0x04
    39f8:	88 2f       	mov	r24, r24
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	44 97       	sbiw	r24, 0x14	; 20
    39fe:	82 95       	swap	r24
    3a00:	92 95       	swap	r25
    3a02:	90 7f       	andi	r25, 0xF0	; 240
    3a04:	98 27       	eor	r25, r24
    3a06:	80 7f       	andi	r24, 0xF0	; 240
    3a08:	98 27       	eor	r25, r24
    3a0a:	82 2b       	or	r24, r18
    3a0c:	8c 93       	st	X, r24
		Timers[ TIMER0 - TIMER0 ].CompOutMode = Copy_u8COM_Mode ;
    3a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a10:	80 93 7c 01 	sts	0x017C, r24
    3a14:	29 c0       	rjmp	.+82     	; 0x3a68 <Timer_enuSetOCn_Mode+0xbe>
	}
	else if( Copy_u8TimerNum == TIMER2 )
    3a16:	8b 81       	ldd	r24, Y+3	; 0x03
    3a18:	8b 3c       	cpi	r24, 0xCB	; 203
    3a1a:	21 f5       	brne	.+72     	; 0x3a64 <Timer_enuSetOCn_Mode+0xba>
	{
		TIMSK &= ~( TC2_INT_EN_MASK ) ;													// Disable Timer2 Interrupts
    3a1c:	a9 e5       	ldi	r26, 0x59	; 89
    3a1e:	b0 e0       	ldi	r27, 0x00	; 0
    3a20:	e9 e5       	ldi	r30, 0x59	; 89
    3a22:	f0 e0       	ldi	r31, 0x00	; 0
    3a24:	80 81       	ld	r24, Z
    3a26:	8f 73       	andi	r24, 0x3F	; 63
    3a28:	8c 93       	st	X, r24
		TCCR2 &= ~( COMP2_MAT_OUT_MODE_BITS_MASK ) ;									// Masking COM Select bits
    3a2a:	a5 e4       	ldi	r26, 0x45	; 69
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	e5 e4       	ldi	r30, 0x45	; 69
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	8f 7c       	andi	r24, 0xCF	; 207
    3a36:	8c 93       	st	X, r24
		TCCR2 |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COMP2_MAT_OUT_MODE_BITS ) ;		// Setting New Compare Output Mode
    3a38:	a5 e4       	ldi	r26, 0x45	; 69
    3a3a:	b0 e0       	ldi	r27, 0x00	; 0
    3a3c:	e5 e4       	ldi	r30, 0x45	; 69
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	80 81       	ld	r24, Z
    3a42:	28 2f       	mov	r18, r24
    3a44:	8c 81       	ldd	r24, Y+4	; 0x04
    3a46:	88 2f       	mov	r24, r24
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	44 97       	sbiw	r24, 0x14	; 20
    3a4c:	82 95       	swap	r24
    3a4e:	92 95       	swap	r25
    3a50:	90 7f       	andi	r25, 0xF0	; 240
    3a52:	98 27       	eor	r25, r24
    3a54:	80 7f       	andi	r24, 0xF0	; 240
    3a56:	98 27       	eor	r25, r24
    3a58:	82 2b       	or	r24, r18
    3a5a:	8c 93       	st	X, r24
		Timers[ TIMER2 - TIMER0 ].CompOutMode = Copy_u8COM_Mode ;
    3a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a5e:	80 93 8b 01 	sts	0x018B, r24
    3a62:	02 c0       	rjmp	.+4      	; 0x3a68 <Timer_enuSetOCn_Mode+0xbe>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    3a64:	82 e0       	ldi	r24, 0x02	; 2
    3a66:	8a 83       	std	Y+2, r24	; 0x02

	TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    3a68:	e9 e5       	ldi	r30, 0x59	; 89
    3a6a:	f0 e0       	ldi	r31, 0x00	; 0
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
    3a6e:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3a70:	8a 81       	ldd	r24, Y+2	; 0x02
    3a72:	81 30       	cpi	r24, 0x01	; 1
    3a74:	19 f0       	breq	.+6      	; 0x3a7c <Timer_enuSetOCn_Mode+0xd2>
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	8d 83       	std	Y+5, r24	; 0x05
    3a7a:	01 c0       	rjmp	.+2      	; 0x3a7e <Timer_enuSetOCn_Mode+0xd4>
    3a7c:	1d 82       	std	Y+5, r1	; 0x05
    3a7e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	cf 91       	pop	r28
    3a8c:	df 91       	pop	r29
    3a8e:	08 95       	ret

00003a90 <Timer_enuGetOCn_Mode>:

ES_t Timer_enuGetOCn_Mode( u8 Copy_u8TimerNum , u8 *Copy_pu8TimerCOM_Mode)
{
    3a90:	df 93       	push	r29
    3a92:	cf 93       	push	r28
    3a94:	00 d0       	rcall	.+0      	; 0x3a96 <Timer_enuGetOCn_Mode+0x6>
    3a96:	00 d0       	rcall	.+0      	; 0x3a98 <Timer_enuGetOCn_Mode+0x8>
    3a98:	0f 92       	push	r0
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
    3a9e:	8b 83       	std	Y+3, r24	; 0x03
    3aa0:	7d 83       	std	Y+5, r23	; 0x05
    3aa2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_OUT_RANGE ;
    3aa4:	82 e0       	ldi	r24, 0x02	; 2
    3aa6:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    3aa8:	19 82       	std	Y+1, r1	; 0x01
    3aaa:	26 c0       	rjmp	.+76     	; 0x3af8 <Timer_enuGetOCn_Mode+0x68>
	{
		if( Timers[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	28 2f       	mov	r18, r24
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	c9 01       	movw	r24, r18
    3ab4:	88 0f       	add	r24, r24
    3ab6:	99 1f       	adc	r25, r25
    3ab8:	88 0f       	add	r24, r24
    3aba:	99 1f       	adc	r25, r25
    3abc:	82 0f       	add	r24, r18
    3abe:	93 1f       	adc	r25, r19
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	e6 58       	subi	r30, 0x86	; 134
    3ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac6:	90 81       	ld	r25, Z
    3ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aca:	98 17       	cp	r25, r24
    3acc:	91 f4       	brne	.+36     	; 0x3af2 <Timer_enuGetOCn_Mode+0x62>
		{
			*Copy_pu8TimerCOM_Mode = Timers[Local_u8Iter].CompOutMode;
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	28 2f       	mov	r18, r24
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	c9 01       	movw	r24, r18
    3ad6:	88 0f       	add	r24, r24
    3ad8:	99 1f       	adc	r25, r25
    3ada:	88 0f       	add	r24, r24
    3adc:	99 1f       	adc	r25, r25
    3ade:	82 0f       	add	r24, r18
    3ae0:	93 1f       	adc	r25, r19
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	e4 58       	subi	r30, 0x84	; 132
    3ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae8:	80 81       	ld	r24, Z
    3aea:	ec 81       	ldd	r30, Y+4	; 0x04
    3aec:	fd 81       	ldd	r31, Y+5	; 0x05
    3aee:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK ;
    3af0:	1a 82       	std	Y+2, r1	; 0x02

ES_t Timer_enuGetOCn_Mode( u8 Copy_u8TimerNum , u8 *Copy_pu8TimerCOM_Mode)
{
	ES_t Local_enuErrorState = ES_OUT_RANGE ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	8f 5f       	subi	r24, 0xFF	; 255
    3af6:	89 83       	std	Y+1, r24	; 0x01
    3af8:	90 91 77 01 	lds	r25, 0x0177
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
    3afe:	89 17       	cp	r24, r25
    3b00:	a8 f2       	brcs	.-86     	; 0x3aac <Timer_enuGetOCn_Mode+0x1c>
			*Copy_pu8TimerCOM_Mode = Timers[Local_u8Iter].CompOutMode;
			Local_enuErrorState = ES_OK ;
		}
	}

	return Local_enuErrorState ;
    3b02:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	cf 91       	pop	r28
    3b10:	df 91       	pop	r29
    3b12:	08 95       	ret

00003b14 <Timer_enuSetTimer_Mode>:


ES_t Timer_enuSetTimer_Mode( u8 Copy_u8TimerNum , u8 Copy_u8WGM_Mode )
{
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	00 d0       	rcall	.+0      	; 0x3b1a <Timer_enuSetTimer_Mode+0x6>
    3b1a:	00 d0       	rcall	.+0      	; 0x3b1c <Timer_enuSetTimer_Mode+0x8>
    3b1c:	0f 92       	push	r0
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	8b 83       	std	Y+3, r24	; 0x03
    3b24:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	8a 83       	std	Y+2, r24	; 0x02


	if( Copy_u8WGM_Mode == WGM_NORMAL_MODE || Copy_u8WGM_Mode == WGM_CTC_MODE || Copy_u8WGM_Mode == WGM_CTC_IRC1_MODE )
    3b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b2c:	8e 31       	cpi	r24, 0x1E	; 30
    3b2e:	39 f0       	breq	.+14     	; 0x3b3e <Timer_enuSetTimer_Mode+0x2a>
    3b30:	8c 81       	ldd	r24, Y+4	; 0x04
    3b32:	80 32       	cpi	r24, 0x20	; 32
    3b34:	21 f0       	breq	.+8      	; 0x3b3e <Timer_enuSetTimer_Mode+0x2a>
    3b36:	8c 81       	ldd	r24, Y+4	; 0x04
    3b38:	81 32       	cpi	r24, 0x21	; 33
    3b3a:	09 f0       	breq	.+2      	; 0x3b3e <Timer_enuSetTimer_Mode+0x2a>
    3b3c:	69 c0       	rjmp	.+210    	; 0x3c10 <Timer_enuSetTimer_Mode+0xfc>
	{
		u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    3b3e:	e9 e5       	ldi	r30, 0x59	; 89
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	80 81       	ld	r24, Z
    3b44:	89 83       	std	Y+1, r24	; 0x01

		if( Copy_u8TimerNum == TIMER0 && ( Copy_u8WGM_Mode == WGM_NORMAL_MODE || Copy_u8WGM_Mode == WGM_CTC_MODE ) )
    3b46:	8b 81       	ldd	r24, Y+3	; 0x03
    3b48:	88 3c       	cpi	r24, 0xC8	; 200
    3b4a:	61 f5       	brne	.+88     	; 0x3ba4 <Timer_enuSetTimer_Mode+0x90>
    3b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b4e:	8e 31       	cpi	r24, 0x1E	; 30
    3b50:	19 f0       	breq	.+6      	; 0x3b58 <Timer_enuSetTimer_Mode+0x44>
    3b52:	8c 81       	ldd	r24, Y+4	; 0x04
    3b54:	80 32       	cpi	r24, 0x20	; 32
    3b56:	31 f5       	brne	.+76     	; 0x3ba4 <Timer_enuSetTimer_Mode+0x90>
		{
			TIMSK &= ~( TC0_INT_EN_MASK ) ;													// Disable Timer0 Interrupts
    3b58:	a9 e5       	ldi	r26, 0x59	; 89
    3b5a:	b0 e0       	ldi	r27, 0x00	; 0
    3b5c:	e9 e5       	ldi	r30, 0x59	; 89
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	80 81       	ld	r24, Z
    3b62:	8c 7f       	andi	r24, 0xFC	; 252
    3b64:	8c 93       	st	X, r24
			TCCR0 &= ~( BIT0_MASK<< WGM01_BIT ) ;											// Masking WGM01 Select bit
    3b66:	a3 e5       	ldi	r26, 0x53	; 83
    3b68:	b0 e0       	ldi	r27, 0x00	; 0
    3b6a:	e3 e5       	ldi	r30, 0x53	; 83
    3b6c:	f0 e0       	ldi	r31, 0x00	; 0
    3b6e:	80 81       	ld	r24, Z
    3b70:	87 7f       	andi	r24, 0xF7	; 247
    3b72:	8c 93       	st	X, r24
			TCCR0 |= ((( Copy_u8WGM_Mode - WGM_NORMAL_MODE ) >> BIT0_MASK ) << WGM01_BIT );	// Setting New Waveform Generation Mode
    3b74:	a3 e5       	ldi	r26, 0x53	; 83
    3b76:	b0 e0       	ldi	r27, 0x00	; 0
    3b78:	e3 e5       	ldi	r30, 0x53	; 83
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	80 81       	ld	r24, Z
    3b7e:	28 2f       	mov	r18, r24
    3b80:	8c 81       	ldd	r24, Y+4	; 0x04
    3b82:	88 2f       	mov	r24, r24
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	4e 97       	sbiw	r24, 0x1e	; 30
    3b88:	95 95       	asr	r25
    3b8a:	87 95       	ror	r24
    3b8c:	88 0f       	add	r24, r24
    3b8e:	99 1f       	adc	r25, r25
    3b90:	88 0f       	add	r24, r24
    3b92:	99 1f       	adc	r25, r25
    3b94:	88 0f       	add	r24, r24
    3b96:	99 1f       	adc	r25, r25
    3b98:	82 2b       	or	r24, r18
    3b9a:	8c 93       	st	X, r24
			Timers[ TIMER0 - TIMER0 ].WaveGenMode = Copy_u8WGM_Mode ;
    3b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b9e:	80 93 7d 01 	sts	0x017D, r24
    3ba2:	31 c0       	rjmp	.+98     	; 0x3c06 <Timer_enuSetTimer_Mode+0xf2>
		}
		else if( Copy_u8TimerNum == TIMER2 && ( Copy_u8WGM_Mode == WGM_NORMAL_MODE || Copy_u8WGM_Mode == WGM_CTC_MODE ) )
    3ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba6:	8b 3c       	cpi	r24, 0xCB	; 203
    3ba8:	61 f5       	brne	.+88     	; 0x3c02 <Timer_enuSetTimer_Mode+0xee>
    3baa:	8c 81       	ldd	r24, Y+4	; 0x04
    3bac:	8e 31       	cpi	r24, 0x1E	; 30
    3bae:	19 f0       	breq	.+6      	; 0x3bb6 <Timer_enuSetTimer_Mode+0xa2>
    3bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb2:	80 32       	cpi	r24, 0x20	; 32
    3bb4:	31 f5       	brne	.+76     	; 0x3c02 <Timer_enuSetTimer_Mode+0xee>
		{
			TIMSK &= ~( TC2_INT_EN_MASK ) ;													// Disable Timer2 Interrupts
    3bb6:	a9 e5       	ldi	r26, 0x59	; 89
    3bb8:	b0 e0       	ldi	r27, 0x00	; 0
    3bba:	e9 e5       	ldi	r30, 0x59	; 89
    3bbc:	f0 e0       	ldi	r31, 0x00	; 0
    3bbe:	80 81       	ld	r24, Z
    3bc0:	8f 73       	andi	r24, 0x3F	; 63
    3bc2:	8c 93       	st	X, r24
			TCCR2 &= ~( BIT0_MASK<< WGM21_BIT ) ;											// Masking WGM21 Select bit
    3bc4:	a5 e4       	ldi	r26, 0x45	; 69
    3bc6:	b0 e0       	ldi	r27, 0x00	; 0
    3bc8:	e5 e4       	ldi	r30, 0x45	; 69
    3bca:	f0 e0       	ldi	r31, 0x00	; 0
    3bcc:	80 81       	ld	r24, Z
    3bce:	87 7f       	andi	r24, 0xF7	; 247
    3bd0:	8c 93       	st	X, r24
			TCCR2 |= ((( Copy_u8WGM_Mode - WGM_NORMAL_MODE ) >> BIT0_MASK ) << WGM21_BIT  );// Setting New Waveform Generation Mode
    3bd2:	a5 e4       	ldi	r26, 0x45	; 69
    3bd4:	b0 e0       	ldi	r27, 0x00	; 0
    3bd6:	e5 e4       	ldi	r30, 0x45	; 69
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	80 81       	ld	r24, Z
    3bdc:	28 2f       	mov	r18, r24
    3bde:	8c 81       	ldd	r24, Y+4	; 0x04
    3be0:	88 2f       	mov	r24, r24
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	4e 97       	sbiw	r24, 0x1e	; 30
    3be6:	95 95       	asr	r25
    3be8:	87 95       	ror	r24
    3bea:	88 0f       	add	r24, r24
    3bec:	99 1f       	adc	r25, r25
    3bee:	88 0f       	add	r24, r24
    3bf0:	99 1f       	adc	r25, r25
    3bf2:	88 0f       	add	r24, r24
    3bf4:	99 1f       	adc	r25, r25
    3bf6:	82 2b       	or	r24, r18
    3bf8:	8c 93       	st	X, r24
			Timers[ TIMER2 - TIMER0 ].WaveGenMode = Copy_u8WGM_Mode ;
    3bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    3bfc:	80 93 8c 01 	sts	0x018C, r24
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <Timer_enuSetTimer_Mode+0xf2>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    3c02:	82 e0       	ldi	r24, 0x02	; 2
    3c04:	8a 83       	std	Y+2, r24	; 0x02

		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    3c06:	e9 e5       	ldi	r30, 0x59	; 89
    3c08:	f0 e0       	ldi	r31, 0x00	; 0
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	80 83       	st	Z, r24
    3c0e:	02 c0       	rjmp	.+4      	; 0x3c14 <Timer_enuSetTimer_Mode+0x100>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    3c10:	82 e0       	ldi	r24, 0x02	; 2
    3c12:	8a 83       	std	Y+2, r24	; 0x02

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3c14:	8a 81       	ldd	r24, Y+2	; 0x02
    3c16:	81 30       	cpi	r24, 0x01	; 1
    3c18:	19 f0       	breq	.+6      	; 0x3c20 <Timer_enuSetTimer_Mode+0x10c>
    3c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1c:	8d 83       	std	Y+5, r24	; 0x05
    3c1e:	01 c0       	rjmp	.+2      	; 0x3c22 <Timer_enuSetTimer_Mode+0x10e>
    3c20:	1d 82       	std	Y+5, r1	; 0x05
    3c22:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	cf 91       	pop	r28
    3c30:	df 91       	pop	r29
    3c32:	08 95       	ret

00003c34 <Timer_enuGetTimer_Mode>:

ES_t Timer_enuGetTimer_Mode( u8 Copy_u8TimerNum , u8 *Copy_pu8TimerWGM_Mode)
{
    3c34:	df 93       	push	r29
    3c36:	cf 93       	push	r28
    3c38:	00 d0       	rcall	.+0      	; 0x3c3a <Timer_enuGetTimer_Mode+0x6>
    3c3a:	00 d0       	rcall	.+0      	; 0x3c3c <Timer_enuGetTimer_Mode+0x8>
    3c3c:	0f 92       	push	r0
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
    3c42:	8b 83       	std	Y+3, r24	; 0x03
    3c44:	7d 83       	std	Y+5, r23	; 0x05
    3c46:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_OUT_RANGE ;
    3c48:	82 e0       	ldi	r24, 0x02	; 2
    3c4a:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    3c4c:	19 82       	std	Y+1, r1	; 0x01
    3c4e:	26 c0       	rjmp	.+76     	; 0x3c9c <Timer_enuGetTimer_Mode+0x68>
	{
		if( Timers[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	28 2f       	mov	r18, r24
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	c9 01       	movw	r24, r18
    3c58:	88 0f       	add	r24, r24
    3c5a:	99 1f       	adc	r25, r25
    3c5c:	88 0f       	add	r24, r24
    3c5e:	99 1f       	adc	r25, r25
    3c60:	82 0f       	add	r24, r18
    3c62:	93 1f       	adc	r25, r19
    3c64:	fc 01       	movw	r30, r24
    3c66:	e6 58       	subi	r30, 0x86	; 134
    3c68:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6a:	90 81       	ld	r25, Z
    3c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6e:	98 17       	cp	r25, r24
    3c70:	91 f4       	brne	.+36     	; 0x3c96 <Timer_enuGetTimer_Mode+0x62>
		{
			*Copy_pu8TimerWGM_Mode = Timers[Local_u8Iter].WaveGenMode;
    3c72:	89 81       	ldd	r24, Y+1	; 0x01
    3c74:	28 2f       	mov	r18, r24
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	c9 01       	movw	r24, r18
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	88 0f       	add	r24, r24
    3c80:	99 1f       	adc	r25, r25
    3c82:	82 0f       	add	r24, r18
    3c84:	93 1f       	adc	r25, r19
    3c86:	fc 01       	movw	r30, r24
    3c88:	e3 58       	subi	r30, 0x83	; 131
    3c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c8c:	80 81       	ld	r24, Z
    3c8e:	ec 81       	ldd	r30, Y+4	; 0x04
    3c90:	fd 81       	ldd	r31, Y+5	; 0x05
    3c92:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK ;
    3c94:	1a 82       	std	Y+2, r1	; 0x02

ES_t Timer_enuGetTimer_Mode( u8 Copy_u8TimerNum , u8 *Copy_pu8TimerWGM_Mode)
{
	ES_t Local_enuErrorState = ES_OUT_RANGE ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	8f 5f       	subi	r24, 0xFF	; 255
    3c9a:	89 83       	std	Y+1, r24	; 0x01
    3c9c:	90 91 77 01 	lds	r25, 0x0177
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	89 17       	cp	r24, r25
    3ca4:	a8 f2       	brcs	.-86     	; 0x3c50 <Timer_enuGetTimer_Mode+0x1c>
		{
			*Copy_pu8TimerWGM_Mode = Timers[Local_u8Iter].WaveGenMode;
			Local_enuErrorState = ES_OK ;
		}
	}
	return Local_enuErrorState ;
    3ca6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	cf 91       	pop	r28
    3cb4:	df 91       	pop	r29
    3cb6:	08 95       	ret

00003cb8 <Timer_enuReset>:

ES_t Timer_enuReset( u8 Copy_u8TimerNum )
{
    3cb8:	df 93       	push	r29
    3cba:	cf 93       	push	r28
    3cbc:	00 d0       	rcall	.+0      	; 0x3cbe <Timer_enuReset+0x6>
    3cbe:	00 d0       	rcall	.+0      	; 0x3cc0 <Timer_enuReset+0x8>
    3cc0:	cd b7       	in	r28, 0x3d	; 61
    3cc2:	de b7       	in	r29, 0x3e	; 62
    3cc4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Temp = SREG ;									// Saving a Copy of AVR Status Register
    3cca:	ef e5       	ldi	r30, 0x5F	; 95
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	80 81       	ld	r24, Z
    3cd0:	89 83       	std	Y+1, r24	; 0x01
	asm( "CLI" );												// Disable All Interrupts while writing to Counter Register
    3cd2:	f8 94       	cli

	if( Copy_u8TimerNum == TIMER0 )
    3cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd6:	88 3c       	cpi	r24, 0xC8	; 200
    3cd8:	21 f4       	brne	.+8      	; 0x3ce2 <Timer_enuReset+0x2a>
	{
		TCNT0 = 0x00 ;
    3cda:	e2 e5       	ldi	r30, 0x52	; 82
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	10 82       	st	Z, r1
    3ce0:	09 c0       	rjmp	.+18     	; 0x3cf4 <Timer_enuReset+0x3c>
	}
	else if( Copy_u8TimerNum == TIMER2 )
    3ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce4:	8b 3c       	cpi	r24, 0xCB	; 203
    3ce6:	21 f4       	brne	.+8      	; 0x3cf0 <Timer_enuReset+0x38>
	{
		TCNT2 = 0x00 ;
    3ce8:	e4 e4       	ldi	r30, 0x44	; 68
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	10 82       	st	Z, r1
    3cee:	02 c0       	rjmp	.+4      	; 0x3cf4 <Timer_enuReset+0x3c>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3cf0:	82 e0       	ldi	r24, 0x02	; 2
    3cf2:	8a 83       	std	Y+2, r24	; 0x02

	SREG = Local_u8Temp;										// Re-setting AVR Status Register to its Status
    3cf4:	ef e5       	ldi	r30, 0x5F	; 95
    3cf6:	f0 e0       	ldi	r31, 0x00	; 0
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfe:	81 30       	cpi	r24, 0x01	; 1
    3d00:	19 f0       	breq	.+6      	; 0x3d08 <Timer_enuReset+0x50>
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	8c 83       	std	Y+4, r24	; 0x04
    3d06:	01 c0       	rjmp	.+2      	; 0x3d0a <Timer_enuReset+0x52>
    3d08:	1c 82       	std	Y+4, r1	; 0x04
    3d0a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	cf 91       	pop	r28
    3d16:	df 91       	pop	r29
    3d18:	08 95       	ret

00003d1a <Timer_enuPreLoad>:

ES_t Timer_enuPreLoad( u8 Copy_u8TimerNum , u16 Copy_u16PreLoad) ///////////////////////////////////////////////////////////////////
{
    3d1a:	df 93       	push	r29
    3d1c:	cf 93       	push	r28
    3d1e:	00 d0       	rcall	.+0      	; 0x3d20 <Timer_enuPreLoad+0x6>
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <Timer_enuPreLoad+0x8>
    3d22:	00 d0       	rcall	.+0      	; 0x3d24 <Timer_enuPreLoad+0xa>
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	8b 83       	std	Y+3, r24	; 0x03
    3d2a:	7d 83       	std	Y+5, r23	; 0x05
    3d2c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Temp = SREG ;									// Saving a Copy of AVR Status Register
    3d32:	ef e5       	ldi	r30, 0x5F	; 95
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	80 81       	ld	r24, Z
    3d38:	89 83       	std	Y+1, r24	; 0x01
	asm( "CLI" );												// Disable All Interrupts while writing to Counter Register
    3d3a:	f8 94       	cli

	if( Copy_u8TimerNum == TIMER0 )
    3d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3e:	88 3c       	cpi	r24, 0xC8	; 200
    3d40:	29 f4       	brne	.+10     	; 0x3d4c <Timer_enuPreLoad+0x32>
	{
		TCNT0 = (u8)Copy_u16PreLoad ;
    3d42:	e2 e5       	ldi	r30, 0x52	; 82
    3d44:	f0 e0       	ldi	r31, 0x00	; 0
    3d46:	8c 81       	ldd	r24, Y+4	; 0x04
    3d48:	80 83       	st	Z, r24
    3d4a:	0a c0       	rjmp	.+20     	; 0x3d60 <Timer_enuPreLoad+0x46>
	}
	else if( Copy_u8TimerNum == TIMER2 )
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	8b 3c       	cpi	r24, 0xCB	; 203
    3d50:	29 f4       	brne	.+10     	; 0x3d5c <Timer_enuPreLoad+0x42>
	{
		TCNT2 = (u8)Copy_u16PreLoad ;
    3d52:	e4 e4       	ldi	r30, 0x44	; 68
    3d54:	f0 e0       	ldi	r31, 0x00	; 0
    3d56:	8c 81       	ldd	r24, Y+4	; 0x04
    3d58:	80 83       	st	Z, r24
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <Timer_enuPreLoad+0x46>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3d5c:	82 e0       	ldi	r24, 0x02	; 2
    3d5e:	8a 83       	std	Y+2, r24	; 0x02

	SREG = Local_u8Temp;										// Re-setting AVR Status Register to its Status
    3d60:	ef e5       	ldi	r30, 0x5F	; 95
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3d68:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6a:	81 30       	cpi	r24, 0x01	; 1
    3d6c:	19 f0       	breq	.+6      	; 0x3d74 <Timer_enuPreLoad+0x5a>
    3d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d70:	8e 83       	std	Y+6, r24	; 0x06
    3d72:	01 c0       	rjmp	.+2      	; 0x3d76 <Timer_enuPreLoad+0x5c>
    3d74:	1e 82       	std	Y+6, r1	; 0x06
    3d76:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3d78:	26 96       	adiw	r28, 0x06	; 6
    3d7a:	0f b6       	in	r0, 0x3f	; 63
    3d7c:	f8 94       	cli
    3d7e:	de bf       	out	0x3e, r29	; 62
    3d80:	0f be       	out	0x3f, r0	; 63
    3d82:	cd bf       	out	0x3d, r28	; 61
    3d84:	cf 91       	pop	r28
    3d86:	df 91       	pop	r29
    3d88:	08 95       	ret

00003d8a <Timer_enuReadCounterValue>:

ES_t Timer_enuReadCounterValue( u8 Copy_u8TimerNum , void *Copy_pCounterValue )
{
    3d8a:	df 93       	push	r29
    3d8c:	cf 93       	push	r28
    3d8e:	00 d0       	rcall	.+0      	; 0x3d90 <Timer_enuReadCounterValue+0x6>
    3d90:	00 d0       	rcall	.+0      	; 0x3d92 <Timer_enuReadCounterValue+0x8>
    3d92:	0f 92       	push	r0
    3d94:	cd b7       	in	r28, 0x3d	; 61
    3d96:	de b7       	in	r29, 0x3e	; 62
    3d98:	8a 83       	std	Y+2, r24	; 0x02
    3d9a:	7c 83       	std	Y+4, r23	; 0x04
    3d9c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pCounterValue != NULL )
    3da2:	8b 81       	ldd	r24, Y+3	; 0x03
    3da4:	9c 81       	ldd	r25, Y+4	; 0x04
    3da6:	00 97       	sbiw	r24, 0x00	; 0
    3da8:	b9 f0       	breq	.+46     	; 0x3dd8 <Timer_enuReadCounterValue+0x4e>
	{
		if( Copy_u8TimerNum == TIMER0 )
    3daa:	8a 81       	ldd	r24, Y+2	; 0x02
    3dac:	88 3c       	cpi	r24, 0xC8	; 200
    3dae:	39 f4       	brne	.+14     	; 0x3dbe <Timer_enuReadCounterValue+0x34>
		{
			*( (u8 *)Copy_pCounterValue ) = TCNT0 ;
    3db0:	eb 81       	ldd	r30, Y+3	; 0x03
    3db2:	fc 81       	ldd	r31, Y+4	; 0x04
    3db4:	a2 e5       	ldi	r26, 0x52	; 82
    3db6:	b0 e0       	ldi	r27, 0x00	; 0
    3db8:	8c 91       	ld	r24, X
    3dba:	80 83       	st	Z, r24
    3dbc:	0f c0       	rjmp	.+30     	; 0x3ddc <Timer_enuReadCounterValue+0x52>
		}
		else if( Copy_u8TimerNum == TIMER2 )
    3dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc0:	8b 3c       	cpi	r24, 0xCB	; 203
    3dc2:	39 f4       	brne	.+14     	; 0x3dd2 <Timer_enuReadCounterValue+0x48>
		{
			*( (u8 *)Copy_pCounterValue ) = TCNT2 ;
    3dc4:	eb 81       	ldd	r30, Y+3	; 0x03
    3dc6:	fc 81       	ldd	r31, Y+4	; 0x04
    3dc8:	a4 e4       	ldi	r26, 0x44	; 68
    3dca:	b0 e0       	ldi	r27, 0x00	; 0
    3dcc:	8c 91       	ld	r24, X
    3dce:	80 83       	st	Z, r24
    3dd0:	05 c0       	rjmp	.+10     	; 0x3ddc <Timer_enuReadCounterValue+0x52>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    3dd2:	82 e0       	ldi	r24, 0x02	; 2
    3dd4:	89 83       	std	Y+1, r24	; 0x01
    3dd6:	02 c0       	rjmp	.+4      	; 0x3ddc <Timer_enuReadCounterValue+0x52>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    3dd8:	83 e0       	ldi	r24, 0x03	; 3
    3dda:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
    3dde:	81 30       	cpi	r24, 0x01	; 1
    3de0:	19 f0       	breq	.+6      	; 0x3de8 <Timer_enuReadCounterValue+0x5e>
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	8d 83       	std	Y+5, r24	; 0x05
    3de6:	01 c0       	rjmp	.+2      	; 0x3dea <Timer_enuReadCounterValue+0x60>
    3de8:	1d 82       	std	Y+5, r1	; 0x05
    3dea:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3dec:	0f 90       	pop	r0
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	0f 90       	pop	r0
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	08 95       	ret

00003dfc <Timer_enuSetOCRnValue>:

ES_t Timer_enuSetOCRnValue( u8 Copy_u8TimerNum , u16 Copy_u16OCRnValue )
{
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	00 d0       	rcall	.+0      	; 0x3e02 <Timer_enuSetOCRnValue+0x6>
    3e02:	00 d0       	rcall	.+0      	; 0x3e04 <Timer_enuSetOCRnValue+0x8>
    3e04:	0f 92       	push	r0
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	8a 83       	std	Y+2, r24	; 0x02
    3e0c:	7c 83       	std	Y+4, r23	; 0x04
    3e0e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 && Copy_u16OCRnValue <= Timer0Max )
    3e14:	8a 81       	ldd	r24, Y+2	; 0x02
    3e16:	88 3c       	cpi	r24, 0xC8	; 200
    3e18:	99 f4       	brne	.+38     	; 0x3e40 <Timer_enuSetOCRnValue+0x44>
    3e1a:	80 91 78 01 	lds	r24, 0x0178
    3e1e:	28 2f       	mov	r18, r24
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	8b 81       	ldd	r24, Y+3	; 0x03
    3e24:	9c 81       	ldd	r25, Y+4	; 0x04
    3e26:	28 17       	cp	r18, r24
    3e28:	39 07       	cpc	r19, r25
    3e2a:	50 f0       	brcs	.+20     	; 0x3e40 <Timer_enuSetOCRnValue+0x44>
	{
		OCR0 = Copy_u16OCRnValue ;
    3e2c:	ec e5       	ldi	r30, 0x5C	; 92
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	8b 81       	ldd	r24, Y+3	; 0x03
    3e32:	80 83       	st	Z, r24
		Global_u8OCR0_Value = OCR0 ;
    3e34:	ec e5       	ldi	r30, 0x5C	; 92
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	80 81       	ld	r24, Z
    3e3a:	80 93 30 02 	sts	0x0230, r24
    3e3e:	18 c0       	rjmp	.+48     	; 0x3e70 <Timer_enuSetOCRnValue+0x74>
	}
	else if( Copy_u8TimerNum == TIMER2 && Copy_u16OCRnValue <= Timer2Max )
    3e40:	8a 81       	ldd	r24, Y+2	; 0x02
    3e42:	8b 3c       	cpi	r24, 0xCB	; 203
    3e44:	99 f4       	brne	.+38     	; 0x3e6c <Timer_enuSetOCRnValue+0x70>
    3e46:	80 91 79 01 	lds	r24, 0x0179
    3e4a:	28 2f       	mov	r18, r24
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e50:	9c 81       	ldd	r25, Y+4	; 0x04
    3e52:	28 17       	cp	r18, r24
    3e54:	39 07       	cpc	r19, r25
    3e56:	50 f0       	brcs	.+20     	; 0x3e6c <Timer_enuSetOCRnValue+0x70>
	{
		OCR2 = Copy_u16OCRnValue ;
    3e58:	e3 e4       	ldi	r30, 0x43	; 67
    3e5a:	f0 e0       	ldi	r31, 0x00	; 0
    3e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5e:	80 83       	st	Z, r24
		Global_u8OCR2_Value = OCR2 ;
    3e60:	e3 e4       	ldi	r30, 0x43	; 67
    3e62:	f0 e0       	ldi	r31, 0x00	; 0
    3e64:	80 81       	ld	r24, Z
    3e66:	80 93 31 02 	sts	0x0231, r24
    3e6a:	02 c0       	rjmp	.+4      	; 0x3e70 <Timer_enuSetOCRnValue+0x74>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    3e6c:	82 e0       	ldi	r24, 0x02	; 2
    3e6e:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
    3e72:	81 30       	cpi	r24, 0x01	; 1
    3e74:	19 f0       	breq	.+6      	; 0x3e7c <Timer_enuSetOCRnValue+0x80>
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	8d 83       	std	Y+5, r24	; 0x05
    3e7a:	01 c0       	rjmp	.+2      	; 0x3e7e <Timer_enuSetOCRnValue+0x82>
    3e7c:	1d 82       	std	Y+5, r1	; 0x05
    3e7e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3e80:	0f 90       	pop	r0
    3e82:	0f 90       	pop	r0
    3e84:	0f 90       	pop	r0
    3e86:	0f 90       	pop	r0
    3e88:	0f 90       	pop	r0
    3e8a:	cf 91       	pop	r28
    3e8c:	df 91       	pop	r29
    3e8e:	08 95       	ret

00003e90 <Timer_enuReadOCRnValue>:

ES_t Timer_enuReadOCRnValue( u8 Copy_u8TimerNum , void *Copy_pCounterValue )
{
    3e90:	df 93       	push	r29
    3e92:	cf 93       	push	r28
    3e94:	00 d0       	rcall	.+0      	; 0x3e96 <Timer_enuReadOCRnValue+0x6>
    3e96:	00 d0       	rcall	.+0      	; 0x3e98 <Timer_enuReadOCRnValue+0x8>
    3e98:	0f 92       	push	r0
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
    3e9e:	8a 83       	std	Y+2, r24	; 0x02
    3ea0:	7c 83       	std	Y+4, r23	; 0x04
    3ea2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
    3ea6:	89 83       	std	Y+1, r24	; 0x01

		if( Copy_u8TimerNum == TIMER0 )
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eaa:	88 3c       	cpi	r24, 0xC8	; 200
    3eac:	31 f4       	brne	.+12     	; 0x3eba <Timer_enuReadOCRnValue+0x2a>
		{
			*( (u8 *)Copy_pCounterValue ) = Global_u8OCR0_Value ;
    3eae:	eb 81       	ldd	r30, Y+3	; 0x03
    3eb0:	fc 81       	ldd	r31, Y+4	; 0x04
    3eb2:	80 91 30 02 	lds	r24, 0x0230
    3eb6:	80 83       	st	Z, r24
    3eb8:	0b c0       	rjmp	.+22     	; 0x3ed0 <Timer_enuReadOCRnValue+0x40>
		}
		else if( Copy_u8TimerNum == TIMER2 )
    3eba:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebc:	8b 3c       	cpi	r24, 0xCB	; 203
    3ebe:	31 f4       	brne	.+12     	; 0x3ecc <Timer_enuReadOCRnValue+0x3c>
		{
			*( (u8 *)Copy_pCounterValue ) = Global_u8OCR2_Value ;
    3ec0:	eb 81       	ldd	r30, Y+3	; 0x03
    3ec2:	fc 81       	ldd	r31, Y+4	; 0x04
    3ec4:	80 91 31 02 	lds	r24, 0x0231
    3ec8:	80 83       	st	Z, r24
    3eca:	02 c0       	rjmp	.+4      	; 0x3ed0 <Timer_enuReadOCRnValue+0x40>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    3ecc:	82 e0       	ldi	r24, 0x02	; 2
    3ece:	89 83       	std	Y+1, r24	; 0x01

		return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	81 30       	cpi	r24, 0x01	; 1
    3ed4:	19 f0       	breq	.+6      	; 0x3edc <Timer_enuReadOCRnValue+0x4c>
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	8d 83       	std	Y+5, r24	; 0x05
    3eda:	01 c0       	rjmp	.+2      	; 0x3ede <Timer_enuReadOCRnValue+0x4e>
    3edc:	1d 82       	std	Y+5, r1	; 0x05
    3ede:	8d 81       	ldd	r24, Y+5	; 0x05

}
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	0f 90       	pop	r0
    3ee8:	0f 90       	pop	r0
    3eea:	cf 91       	pop	r28
    3eec:	df 91       	pop	r29
    3eee:	08 95       	ret

00003ef0 <Timer_PollingDelay>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ES_t Timer_PollingDelay(u8 Copy_u8TimerNum ,u16 Copy_u16Delay_ms ) // POLLING Delay*******************************************///////////////////////////////////
{
    3ef0:	2f 92       	push	r2
    3ef2:	3f 92       	push	r3
    3ef4:	4f 92       	push	r4
    3ef6:	5f 92       	push	r5
    3ef8:	6f 92       	push	r6
    3efa:	7f 92       	push	r7
    3efc:	8f 92       	push	r8
    3efe:	9f 92       	push	r9
    3f00:	af 92       	push	r10
    3f02:	bf 92       	push	r11
    3f04:	cf 92       	push	r12
    3f06:	df 92       	push	r13
    3f08:	ef 92       	push	r14
    3f0a:	ff 92       	push	r15
    3f0c:	0f 93       	push	r16
    3f0e:	1f 93       	push	r17
    3f10:	df 93       	push	r29
    3f12:	cf 93       	push	r28
    3f14:	cd b7       	in	r28, 0x3d	; 61
    3f16:	de b7       	in	r29, 0x3e	; 62
    3f18:	c1 54       	subi	r28, 0x41	; 65
    3f1a:	d1 40       	sbci	r29, 0x01	; 1
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	88 87       	std	Y+8, r24	; 0x08
    3f28:	7a 87       	std	Y+10, r23	; 0x0a
    3f2a:	69 87       	std	Y+9, r22	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8COMmode = 0;						/////////////////////////////////////////////////////******************************************
    3f30:	1e 82       	std	Y+6, r1	; 0x06
	u32 Local_u32OverFlowCounts ;

	for( u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    3f32:	19 82       	std	Y+1, r1	; 0x01
    3f34:	24 c0       	rjmp	.+72     	; 0x3f7e <Timer_PollingDelay+0x8e>
	{
		if( Timers[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	28 2f       	mov	r18, r24
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	c9 01       	movw	r24, r18
    3f3e:	88 0f       	add	r24, r24
    3f40:	99 1f       	adc	r25, r25
    3f42:	88 0f       	add	r24, r24
    3f44:	99 1f       	adc	r25, r25
    3f46:	82 0f       	add	r24, r18
    3f48:	93 1f       	adc	r25, r19
    3f4a:	fc 01       	movw	r30, r24
    3f4c:	e6 58       	subi	r30, 0x86	; 134
    3f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f50:	90 81       	ld	r25, Z
    3f52:	88 85       	ldd	r24, Y+8	; 0x08
    3f54:	98 17       	cp	r25, r24
    3f56:	81 f4       	brne	.+32     	; 0x3f78 <Timer_PollingDelay+0x88>
			{
				Local_u8COMmode = Timers[Local_u8Iter].CompOutMode;
    3f58:	89 81       	ldd	r24, Y+1	; 0x01
    3f5a:	28 2f       	mov	r18, r24
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	c9 01       	movw	r24, r18
    3f60:	88 0f       	add	r24, r24
    3f62:	99 1f       	adc	r25, r25
    3f64:	88 0f       	add	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	82 0f       	add	r24, r18
    3f6a:	93 1f       	adc	r25, r19
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	e4 58       	subi	r30, 0x84	; 132
    3f70:	fe 4f       	sbci	r31, 0xFE	; 254
    3f72:	80 81       	ld	r24, Z
    3f74:	8e 83       	std	Y+6, r24	; 0x06
    3f76:	08 c0       	rjmp	.+16     	; 0x3f88 <Timer_PollingDelay+0x98>
	ES_t Local_enuErrorState = ES_NOK;

	u8 Local_u8COMmode = 0;						/////////////////////////////////////////////////////******************************************
	u32 Local_u32OverFlowCounts ;

	for( u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
    3f7a:	8f 5f       	subi	r24, 0xFF	; 255
    3f7c:	89 83       	std	Y+1, r24	; 0x01
    3f7e:	90 91 77 01 	lds	r25, 0x0177
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	89 17       	cp	r24, r25
    3f86:	b8 f2       	brcs	.-82     	; 0x3f36 <Timer_PollingDelay+0x46>
				Local_u8COMmode = Timers[Local_u8Iter].CompOutMode;
				break;
			}
	}

	if( Copy_u8TimerNum == TIMER0)
    3f88:	88 85       	ldd	r24, Y+8	; 0x08
    3f8a:	88 3c       	cpi	r24, 0xC8	; 200
    3f8c:	11 f0       	breq	.+4      	; 0x3f92 <Timer_PollingDelay+0xa2>
    3f8e:	0c 94 3a 2d 	jmp	0x5a74	; 0x5a74 <Timer_PollingDelay+0x1b84>
	{
		if( Global_u32Timer0_Clk )
    3f92:	80 91 32 02 	lds	r24, 0x0232
    3f96:	90 91 33 02 	lds	r25, 0x0233
    3f9a:	a0 91 34 02 	lds	r26, 0x0234
    3f9e:	b0 91 35 02 	lds	r27, 0x0235
    3fa2:	00 97       	sbiw	r24, 0x00	; 0
    3fa4:	a1 05       	cpc	r26, r1
    3fa6:	b1 05       	cpc	r27, r1
    3fa8:	11 f4       	brne	.+4      	; 0x3fae <Timer_PollingDelay+0xbe>
    3faa:	0c 94 6f 39 	jmp	0x72de	; 0x72de <Timer_PollingDelay+0x33ee>
		{
			switch( Local_u8COMmode )
    3fae:	8e 81       	ldd	r24, Y+6	; 0x06
    3fb0:	08 2f       	mov	r16, r24
    3fb2:	10 e0       	ldi	r17, 0x00	; 0
    3fb4:	c2 57       	subi	r28, 0x72	; 114
    3fb6:	df 4f       	sbci	r29, 0xFF	; 255
    3fb8:	19 83       	std	Y+1, r17	; 0x01
    3fba:	08 83       	st	Y, r16
    3fbc:	ce 58       	subi	r28, 0x8E	; 142
    3fbe:	d0 40       	sbci	r29, 0x00	; 0
    3fc0:	c2 57       	subi	r28, 0x72	; 114
    3fc2:	df 4f       	sbci	r29, 0xFF	; 255
    3fc4:	28 81       	ld	r18, Y
    3fc6:	39 81       	ldd	r19, Y+1	; 0x01
    3fc8:	ce 58       	subi	r28, 0x8E	; 142
    3fca:	d0 40       	sbci	r29, 0x00	; 0
    3fcc:	25 31       	cpi	r18, 0x15	; 21
    3fce:	31 05       	cpc	r19, r1
    3fd0:	09 f4       	brne	.+2      	; 0x3fd4 <Timer_PollingDelay+0xe4>
    3fd2:	5d c4       	rjmp	.+2234   	; 0x488e <Timer_PollingDelay+0x99e>
    3fd4:	c2 57       	subi	r28, 0x72	; 114
    3fd6:	df 4f       	sbci	r29, 0xFF	; 255
    3fd8:	48 81       	ld	r20, Y
    3fda:	59 81       	ldd	r21, Y+1	; 0x01
    3fdc:	ce 58       	subi	r28, 0x8E	; 142
    3fde:	d0 40       	sbci	r29, 0x00	; 0
    3fe0:	46 31       	cpi	r20, 0x16	; 22
    3fe2:	51 05       	cpc	r21, r1
    3fe4:	5c f4       	brge	.+22     	; 0x3ffc <Timer_PollingDelay+0x10c>
    3fe6:	c2 57       	subi	r28, 0x72	; 114
    3fe8:	df 4f       	sbci	r29, 0xFF	; 255
    3fea:	68 81       	ld	r22, Y
    3fec:	79 81       	ldd	r23, Y+1	; 0x01
    3fee:	ce 58       	subi	r28, 0x8E	; 142
    3ff0:	d0 40       	sbci	r29, 0x00	; 0
    3ff2:	64 31       	cpi	r22, 0x14	; 20
    3ff4:	71 05       	cpc	r23, r1
    3ff6:	79 f0       	breq	.+30     	; 0x4016 <Timer_PollingDelay+0x126>
    3ff8:	0c 94 36 2d 	jmp	0x5a6c	; 0x5a6c <Timer_PollingDelay+0x1b7c>
    3ffc:	c2 57       	subi	r28, 0x72	; 114
    3ffe:	df 4f       	sbci	r29, 0xFF	; 255
    4000:	88 81       	ld	r24, Y
    4002:	99 81       	ldd	r25, Y+1	; 0x01
    4004:	ce 58       	subi	r28, 0x8E	; 142
    4006:	d0 40       	sbci	r29, 0x00	; 0
    4008:	88 31       	cpi	r24, 0x18	; 24
    400a:	91 05       	cpc	r25, r1
    400c:	14 f0       	brlt	.+4      	; 0x4012 <Timer_PollingDelay+0x122>
    400e:	0c 94 36 2d 	jmp	0x5a6c	; 0x5a6c <Timer_PollingDelay+0x1b7c>
    4012:	0c 94 c9 28 	jmp	0x5192	; 0x5192 <Timer_PollingDelay+0x12a2>
			{
			case  COMP_NORMAL		:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / ( 1000UL ) )
    4016:	89 85       	ldd	r24, Y+9	; 0x09
    4018:	9a 85       	ldd	r25, Y+10	; 0x0a
    401a:	5c 01       	movw	r10, r24
    401c:	cc 24       	eor	r12, r12
    401e:	dd 24       	eor	r13, r13
    4020:	ee 24       	eor	r14, r14
    4022:	ff 24       	eor	r15, r15
    4024:	87 01       	movw	r16, r14
    4026:	80 91 32 02 	lds	r24, 0x0232
    402a:	90 91 33 02 	lds	r25, 0x0233
    402e:	a0 91 34 02 	lds	r26, 0x0234
    4032:	b0 91 35 02 	lds	r27, 0x0235
    4036:	1c 01       	movw	r2, r24
    4038:	2d 01       	movw	r4, r26
    403a:	66 24       	eor	r6, r6
    403c:	77 24       	eor	r7, r7
    403e:	43 01       	movw	r8, r6
    4040:	2a 2d       	mov	r18, r10
    4042:	3b 2d       	mov	r19, r11
    4044:	4c 2d       	mov	r20, r12
    4046:	5d 2d       	mov	r21, r13
    4048:	6e 2d       	mov	r22, r14
    404a:	7f 2d       	mov	r23, r15
    404c:	80 2f       	mov	r24, r16
    404e:	91 2f       	mov	r25, r17
    4050:	a2 2c       	mov	r10, r2
    4052:	b3 2c       	mov	r11, r3
    4054:	c4 2c       	mov	r12, r4
    4056:	d5 2c       	mov	r13, r5
    4058:	e6 2c       	mov	r14, r6
    405a:	f7 2c       	mov	r15, r7
    405c:	08 2d       	mov	r16, r8
    405e:	19 2d       	mov	r17, r9
    4060:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    4064:	22 2e       	mov	r2, r18
    4066:	33 2e       	mov	r3, r19
    4068:	44 2e       	mov	r4, r20
    406a:	55 2e       	mov	r5, r21
    406c:	66 2e       	mov	r6, r22
    406e:	77 2e       	mov	r7, r23
    4070:	88 2e       	mov	r8, r24
    4072:	99 2e       	mov	r9, r25
    4074:	a2 2c       	mov	r10, r2
    4076:	b3 2c       	mov	r11, r3
    4078:	c4 2c       	mov	r12, r4
    407a:	d5 2c       	mov	r13, r5
    407c:	e6 2c       	mov	r14, r6
    407e:	f7 2c       	mov	r15, r7
    4080:	08 2d       	mov	r16, r8
    4082:	19 2d       	mov	r17, r9
    4084:	2a 2d       	mov	r18, r10
    4086:	3b 2d       	mov	r19, r11
    4088:	4c 2d       	mov	r20, r12
    408a:	5d 2d       	mov	r21, r13
    408c:	6e 2d       	mov	r22, r14
    408e:	7f 2d       	mov	r23, r15
    4090:	80 2f       	mov	r24, r16
    4092:	91 2f       	mov	r25, r17
    4094:	0f 2e       	mov	r0, r31
    4096:	f8 ee       	ldi	r31, 0xE8	; 232
    4098:	af 2e       	mov	r10, r31
    409a:	f0 2d       	mov	r31, r0
    409c:	0f 2e       	mov	r0, r31
    409e:	f3 e0       	ldi	r31, 0x03	; 3
    40a0:	bf 2e       	mov	r11, r31
    40a2:	f0 2d       	mov	r31, r0
    40a4:	cc 24       	eor	r12, r12
    40a6:	dd 24       	eor	r13, r13
    40a8:	ee 24       	eor	r14, r14
    40aa:	ff 24       	eor	r15, r15
    40ac:	00 e0       	ldi	r16, 0x00	; 0
    40ae:	10 e0       	ldi	r17, 0x00	; 0
    40b0:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    40b4:	a2 2e       	mov	r10, r18
    40b6:	b3 2e       	mov	r11, r19
    40b8:	c4 2e       	mov	r12, r20
    40ba:	d5 2e       	mov	r13, r21
    40bc:	e6 2e       	mov	r14, r22
    40be:	f7 2e       	mov	r15, r23
    40c0:	08 2f       	mov	r16, r24
    40c2:	19 2f       	mov	r17, r25
    40c4:	ca 57       	subi	r28, 0x7A	; 122
    40c6:	df 4f       	sbci	r29, 0xFF	; 255
    40c8:	a8 82       	st	Y, r10
    40ca:	c6 58       	subi	r28, 0x86	; 134
    40cc:	d0 40       	sbci	r29, 0x00	; 0
    40ce:	c9 57       	subi	r28, 0x79	; 121
    40d0:	df 4f       	sbci	r29, 0xFF	; 255
    40d2:	b8 82       	st	Y, r11
    40d4:	c7 58       	subi	r28, 0x87	; 135
    40d6:	d0 40       	sbci	r29, 0x00	; 0
    40d8:	c8 57       	subi	r28, 0x78	; 120
    40da:	df 4f       	sbci	r29, 0xFF	; 255
    40dc:	c8 82       	st	Y, r12
    40de:	c8 58       	subi	r28, 0x88	; 136
    40e0:	d0 40       	sbci	r29, 0x00	; 0
    40e2:	c7 57       	subi	r28, 0x77	; 119
    40e4:	df 4f       	sbci	r29, 0xFF	; 255
    40e6:	d8 82       	st	Y, r13
    40e8:	c9 58       	subi	r28, 0x89	; 137
    40ea:	d0 40       	sbci	r29, 0x00	; 0
    40ec:	c6 57       	subi	r28, 0x76	; 118
    40ee:	df 4f       	sbci	r29, 0xFF	; 255
    40f0:	e8 82       	st	Y, r14
    40f2:	ca 58       	subi	r28, 0x8A	; 138
    40f4:	d0 40       	sbci	r29, 0x00	; 0
    40f6:	c5 57       	subi	r28, 0x75	; 117
    40f8:	df 4f       	sbci	r29, 0xFF	; 255
    40fa:	f8 82       	st	Y, r15
    40fc:	cb 58       	subi	r28, 0x8B	; 139
    40fe:	d0 40       	sbci	r29, 0x00	; 0
    4100:	c4 57       	subi	r28, 0x74	; 116
    4102:	df 4f       	sbci	r29, 0xFF	; 255
    4104:	08 83       	st	Y, r16
    4106:	cc 58       	subi	r28, 0x8C	; 140
    4108:	d0 40       	sbci	r29, 0x00	; 0
    410a:	c3 57       	subi	r28, 0x73	; 115
    410c:	df 4f       	sbci	r29, 0xFF	; 255
    410e:	18 83       	st	Y, r17
    4110:	cd 58       	subi	r28, 0x8D	; 141
    4112:	d0 40       	sbci	r29, 0x00	; 0
    4114:	9f ef       	ldi	r25, 0xFF	; 255
    4116:	c0 57       	subi	r28, 0x70	; 112
    4118:	df 4f       	sbci	r29, 0xFF	; 255
    411a:	98 83       	st	Y, r25
    411c:	c0 59       	subi	r28, 0x90	; 144
    411e:	d0 40       	sbci	r29, 0x00	; 0
    4120:	cf 56       	subi	r28, 0x6F	; 111
    4122:	df 4f       	sbci	r29, 0xFF	; 255
    4124:	18 82       	st	Y, r1
    4126:	c1 59       	subi	r28, 0x91	; 145
    4128:	d0 40       	sbci	r29, 0x00	; 0
    412a:	ce 56       	subi	r28, 0x6E	; 110
    412c:	df 4f       	sbci	r29, 0xFF	; 255
    412e:	18 82       	st	Y, r1
    4130:	c2 59       	subi	r28, 0x92	; 146
    4132:	d0 40       	sbci	r29, 0x00	; 0
    4134:	cd 56       	subi	r28, 0x6D	; 109
    4136:	df 4f       	sbci	r29, 0xFF	; 255
    4138:	18 82       	st	Y, r1
    413a:	c3 59       	subi	r28, 0x93	; 147
    413c:	d0 40       	sbci	r29, 0x00	; 0
    413e:	cc 56       	subi	r28, 0x6C	; 108
    4140:	df 4f       	sbci	r29, 0xFF	; 255
    4142:	18 82       	st	Y, r1
    4144:	c4 59       	subi	r28, 0x94	; 148
    4146:	d0 40       	sbci	r29, 0x00	; 0
    4148:	cb 56       	subi	r28, 0x6B	; 107
    414a:	df 4f       	sbci	r29, 0xFF	; 255
    414c:	18 82       	st	Y, r1
    414e:	c5 59       	subi	r28, 0x95	; 149
    4150:	d0 40       	sbci	r29, 0x00	; 0
    4152:	ca 56       	subi	r28, 0x6A	; 106
    4154:	df 4f       	sbci	r29, 0xFF	; 255
    4156:	18 82       	st	Y, r1
    4158:	c6 59       	subi	r28, 0x96	; 150
    415a:	d0 40       	sbci	r29, 0x00	; 0
    415c:	c9 56       	subi	r28, 0x69	; 105
    415e:	df 4f       	sbci	r29, 0xFF	; 255
    4160:	18 82       	st	Y, r1
    4162:	c7 59       	subi	r28, 0x97	; 151
    4164:	d0 40       	sbci	r29, 0x00	; 0
    4166:	ca 57       	subi	r28, 0x7A	; 122
    4168:	df 4f       	sbci	r29, 0xFF	; 255
    416a:	e8 81       	ld	r30, Y
    416c:	c6 58       	subi	r28, 0x86	; 134
    416e:	d0 40       	sbci	r29, 0x00	; 0
    4170:	c0 57       	subi	r28, 0x70	; 112
    4172:	df 4f       	sbci	r29, 0xFF	; 255
    4174:	f8 81       	ld	r31, Y
    4176:	c0 59       	subi	r28, 0x90	; 144
    4178:	d0 40       	sbci	r29, 0x00	; 0
    417a:	ef 0f       	add	r30, r31
    417c:	c8 56       	subi	r28, 0x68	; 104
    417e:	df 4f       	sbci	r29, 0xFF	; 255
    4180:	e8 83       	st	Y, r30
    4182:	c8 59       	subi	r28, 0x98	; 152
    4184:	d0 40       	sbci	r29, 0x00	; 0
    4186:	01 e0       	ldi	r16, 0x01	; 1
    4188:	c0 56       	subi	r28, 0x60	; 96
    418a:	df 4f       	sbci	r29, 0xFF	; 255
    418c:	08 83       	st	Y, r16
    418e:	c0 5a       	subi	r28, 0xA0	; 160
    4190:	d0 40       	sbci	r29, 0x00	; 0
    4192:	c8 56       	subi	r28, 0x68	; 104
    4194:	df 4f       	sbci	r29, 0xFF	; 255
    4196:	18 81       	ld	r17, Y
    4198:	c8 59       	subi	r28, 0x98	; 152
    419a:	d0 40       	sbci	r29, 0x00	; 0
    419c:	ca 57       	subi	r28, 0x7A	; 122
    419e:	df 4f       	sbci	r29, 0xFF	; 255
    41a0:	28 81       	ld	r18, Y
    41a2:	c6 58       	subi	r28, 0x86	; 134
    41a4:	d0 40       	sbci	r29, 0x00	; 0
    41a6:	12 17       	cp	r17, r18
    41a8:	28 f0       	brcs	.+10     	; 0x41b4 <Timer_PollingDelay+0x2c4>
    41aa:	c0 56       	subi	r28, 0x60	; 96
    41ac:	df 4f       	sbci	r29, 0xFF	; 255
    41ae:	18 82       	st	Y, r1
    41b0:	c0 5a       	subi	r28, 0xA0	; 160
    41b2:	d0 40       	sbci	r29, 0x00	; 0
    41b4:	c9 57       	subi	r28, 0x79	; 121
    41b6:	df 4f       	sbci	r29, 0xFF	; 255
    41b8:	38 81       	ld	r19, Y
    41ba:	c7 58       	subi	r28, 0x87	; 135
    41bc:	d0 40       	sbci	r29, 0x00	; 0
    41be:	cf 56       	subi	r28, 0x6F	; 111
    41c0:	df 4f       	sbci	r29, 0xFF	; 255
    41c2:	48 81       	ld	r20, Y
    41c4:	c1 59       	subi	r28, 0x91	; 145
    41c6:	d0 40       	sbci	r29, 0x00	; 0
    41c8:	34 0f       	add	r19, r20
    41ca:	c7 56       	subi	r28, 0x67	; 103
    41cc:	df 4f       	sbci	r29, 0xFF	; 255
    41ce:	38 83       	st	Y, r19
    41d0:	c9 59       	subi	r28, 0x99	; 153
    41d2:	d0 40       	sbci	r29, 0x00	; 0
    41d4:	51 e0       	ldi	r21, 0x01	; 1
    41d6:	cf 55       	subi	r28, 0x5F	; 95
    41d8:	df 4f       	sbci	r29, 0xFF	; 255
    41da:	58 83       	st	Y, r21
    41dc:	c1 5a       	subi	r28, 0xA1	; 161
    41de:	d0 40       	sbci	r29, 0x00	; 0
    41e0:	c7 56       	subi	r28, 0x67	; 103
    41e2:	df 4f       	sbci	r29, 0xFF	; 255
    41e4:	68 81       	ld	r22, Y
    41e6:	c9 59       	subi	r28, 0x99	; 153
    41e8:	d0 40       	sbci	r29, 0x00	; 0
    41ea:	c9 57       	subi	r28, 0x79	; 121
    41ec:	df 4f       	sbci	r29, 0xFF	; 255
    41ee:	78 81       	ld	r23, Y
    41f0:	c7 58       	subi	r28, 0x87	; 135
    41f2:	d0 40       	sbci	r29, 0x00	; 0
    41f4:	67 17       	cp	r22, r23
    41f6:	28 f0       	brcs	.+10     	; 0x4202 <Timer_PollingDelay+0x312>
    41f8:	cf 55       	subi	r28, 0x5F	; 95
    41fa:	df 4f       	sbci	r29, 0xFF	; 255
    41fc:	18 82       	st	Y, r1
    41fe:	c1 5a       	subi	r28, 0xA1	; 161
    4200:	d0 40       	sbci	r29, 0x00	; 0
    4202:	c0 56       	subi	r28, 0x60	; 96
    4204:	df 4f       	sbci	r29, 0xFF	; 255
    4206:	88 81       	ld	r24, Y
    4208:	c0 5a       	subi	r28, 0xA0	; 160
    420a:	d0 40       	sbci	r29, 0x00	; 0
    420c:	c7 56       	subi	r28, 0x67	; 103
    420e:	df 4f       	sbci	r29, 0xFF	; 255
    4210:	98 81       	ld	r25, Y
    4212:	c9 59       	subi	r28, 0x99	; 153
    4214:	d0 40       	sbci	r29, 0x00	; 0
    4216:	89 0f       	add	r24, r25
    4218:	ce 55       	subi	r28, 0x5E	; 94
    421a:	df 4f       	sbci	r29, 0xFF	; 255
    421c:	88 83       	st	Y, r24
    421e:	c2 5a       	subi	r28, 0xA2	; 162
    4220:	d0 40       	sbci	r29, 0x00	; 0
    4222:	e1 e0       	ldi	r30, 0x01	; 1
    4224:	cd 55       	subi	r28, 0x5D	; 93
    4226:	df 4f       	sbci	r29, 0xFF	; 255
    4228:	e8 83       	st	Y, r30
    422a:	c3 5a       	subi	r28, 0xA3	; 163
    422c:	d0 40       	sbci	r29, 0x00	; 0
    422e:	ce 55       	subi	r28, 0x5E	; 94
    4230:	df 4f       	sbci	r29, 0xFF	; 255
    4232:	f8 81       	ld	r31, Y
    4234:	c2 5a       	subi	r28, 0xA2	; 162
    4236:	d0 40       	sbci	r29, 0x00	; 0
    4238:	c7 56       	subi	r28, 0x67	; 103
    423a:	df 4f       	sbci	r29, 0xFF	; 255
    423c:	08 81       	ld	r16, Y
    423e:	c9 59       	subi	r28, 0x99	; 153
    4240:	d0 40       	sbci	r29, 0x00	; 0
    4242:	f0 17       	cp	r31, r16
    4244:	28 f0       	brcs	.+10     	; 0x4250 <Timer_PollingDelay+0x360>
    4246:	cd 55       	subi	r28, 0x5D	; 93
    4248:	df 4f       	sbci	r29, 0xFF	; 255
    424a:	18 82       	st	Y, r1
    424c:	c3 5a       	subi	r28, 0xA3	; 163
    424e:	d0 40       	sbci	r29, 0x00	; 0
    4250:	cf 55       	subi	r28, 0x5F	; 95
    4252:	df 4f       	sbci	r29, 0xFF	; 255
    4254:	18 81       	ld	r17, Y
    4256:	c1 5a       	subi	r28, 0xA1	; 161
    4258:	d0 40       	sbci	r29, 0x00	; 0
    425a:	cd 55       	subi	r28, 0x5D	; 93
    425c:	df 4f       	sbci	r29, 0xFF	; 255
    425e:	28 81       	ld	r18, Y
    4260:	c3 5a       	subi	r28, 0xA3	; 163
    4262:	d0 40       	sbci	r29, 0x00	; 0
    4264:	12 2b       	or	r17, r18
    4266:	cf 55       	subi	r28, 0x5F	; 95
    4268:	df 4f       	sbci	r29, 0xFF	; 255
    426a:	18 83       	st	Y, r17
    426c:	c1 5a       	subi	r28, 0xA1	; 161
    426e:	d0 40       	sbci	r29, 0x00	; 0
    4270:	ce 55       	subi	r28, 0x5E	; 94
    4272:	df 4f       	sbci	r29, 0xFF	; 255
    4274:	38 81       	ld	r19, Y
    4276:	c2 5a       	subi	r28, 0xA2	; 162
    4278:	d0 40       	sbci	r29, 0x00	; 0
    427a:	c7 56       	subi	r28, 0x67	; 103
    427c:	df 4f       	sbci	r29, 0xFF	; 255
    427e:	38 83       	st	Y, r19
    4280:	c9 59       	subi	r28, 0x99	; 153
    4282:	d0 40       	sbci	r29, 0x00	; 0
    4284:	c8 57       	subi	r28, 0x78	; 120
    4286:	df 4f       	sbci	r29, 0xFF	; 255
    4288:	48 81       	ld	r20, Y
    428a:	c8 58       	subi	r28, 0x88	; 136
    428c:	d0 40       	sbci	r29, 0x00	; 0
    428e:	ce 56       	subi	r28, 0x6E	; 110
    4290:	df 4f       	sbci	r29, 0xFF	; 255
    4292:	58 81       	ld	r21, Y
    4294:	c2 59       	subi	r28, 0x92	; 146
    4296:	d0 40       	sbci	r29, 0x00	; 0
    4298:	45 0f       	add	r20, r21
    429a:	c6 56       	subi	r28, 0x66	; 102
    429c:	df 4f       	sbci	r29, 0xFF	; 255
    429e:	48 83       	st	Y, r20
    42a0:	ca 59       	subi	r28, 0x9A	; 154
    42a2:	d0 40       	sbci	r29, 0x00	; 0
    42a4:	61 e0       	ldi	r22, 0x01	; 1
    42a6:	cc 55       	subi	r28, 0x5C	; 92
    42a8:	df 4f       	sbci	r29, 0xFF	; 255
    42aa:	68 83       	st	Y, r22
    42ac:	c4 5a       	subi	r28, 0xA4	; 164
    42ae:	d0 40       	sbci	r29, 0x00	; 0
    42b0:	c6 56       	subi	r28, 0x66	; 102
    42b2:	df 4f       	sbci	r29, 0xFF	; 255
    42b4:	78 81       	ld	r23, Y
    42b6:	ca 59       	subi	r28, 0x9A	; 154
    42b8:	d0 40       	sbci	r29, 0x00	; 0
    42ba:	c8 57       	subi	r28, 0x78	; 120
    42bc:	df 4f       	sbci	r29, 0xFF	; 255
    42be:	88 81       	ld	r24, Y
    42c0:	c8 58       	subi	r28, 0x88	; 136
    42c2:	d0 40       	sbci	r29, 0x00	; 0
    42c4:	78 17       	cp	r23, r24
    42c6:	28 f0       	brcs	.+10     	; 0x42d2 <Timer_PollingDelay+0x3e2>
    42c8:	cc 55       	subi	r28, 0x5C	; 92
    42ca:	df 4f       	sbci	r29, 0xFF	; 255
    42cc:	18 82       	st	Y, r1
    42ce:	c4 5a       	subi	r28, 0xA4	; 164
    42d0:	d0 40       	sbci	r29, 0x00	; 0
    42d2:	cf 55       	subi	r28, 0x5F	; 95
    42d4:	df 4f       	sbci	r29, 0xFF	; 255
    42d6:	98 81       	ld	r25, Y
    42d8:	c1 5a       	subi	r28, 0xA1	; 161
    42da:	d0 40       	sbci	r29, 0x00	; 0
    42dc:	c6 56       	subi	r28, 0x66	; 102
    42de:	df 4f       	sbci	r29, 0xFF	; 255
    42e0:	e8 81       	ld	r30, Y
    42e2:	ca 59       	subi	r28, 0x9A	; 154
    42e4:	d0 40       	sbci	r29, 0x00	; 0
    42e6:	9e 0f       	add	r25, r30
    42e8:	cb 55       	subi	r28, 0x5B	; 91
    42ea:	df 4f       	sbci	r29, 0xFF	; 255
    42ec:	98 83       	st	Y, r25
    42ee:	c5 5a       	subi	r28, 0xA5	; 165
    42f0:	d0 40       	sbci	r29, 0x00	; 0
    42f2:	f1 e0       	ldi	r31, 0x01	; 1
    42f4:	ca 55       	subi	r28, 0x5A	; 90
    42f6:	df 4f       	sbci	r29, 0xFF	; 255
    42f8:	f8 83       	st	Y, r31
    42fa:	c6 5a       	subi	r28, 0xA6	; 166
    42fc:	d0 40       	sbci	r29, 0x00	; 0
    42fe:	cb 55       	subi	r28, 0x5B	; 91
    4300:	df 4f       	sbci	r29, 0xFF	; 255
    4302:	08 81       	ld	r16, Y
    4304:	c5 5a       	subi	r28, 0xA5	; 165
    4306:	d0 40       	sbci	r29, 0x00	; 0
    4308:	c6 56       	subi	r28, 0x66	; 102
    430a:	df 4f       	sbci	r29, 0xFF	; 255
    430c:	18 81       	ld	r17, Y
    430e:	ca 59       	subi	r28, 0x9A	; 154
    4310:	d0 40       	sbci	r29, 0x00	; 0
    4312:	01 17       	cp	r16, r17
    4314:	28 f0       	brcs	.+10     	; 0x4320 <Timer_PollingDelay+0x430>
    4316:	ca 55       	subi	r28, 0x5A	; 90
    4318:	df 4f       	sbci	r29, 0xFF	; 255
    431a:	18 82       	st	Y, r1
    431c:	c6 5a       	subi	r28, 0xA6	; 166
    431e:	d0 40       	sbci	r29, 0x00	; 0
    4320:	cc 55       	subi	r28, 0x5C	; 92
    4322:	df 4f       	sbci	r29, 0xFF	; 255
    4324:	28 81       	ld	r18, Y
    4326:	c4 5a       	subi	r28, 0xA4	; 164
    4328:	d0 40       	sbci	r29, 0x00	; 0
    432a:	ca 55       	subi	r28, 0x5A	; 90
    432c:	df 4f       	sbci	r29, 0xFF	; 255
    432e:	38 81       	ld	r19, Y
    4330:	c6 5a       	subi	r28, 0xA6	; 166
    4332:	d0 40       	sbci	r29, 0x00	; 0
    4334:	23 2b       	or	r18, r19
    4336:	cc 55       	subi	r28, 0x5C	; 92
    4338:	df 4f       	sbci	r29, 0xFF	; 255
    433a:	28 83       	st	Y, r18
    433c:	c4 5a       	subi	r28, 0xA4	; 164
    433e:	d0 40       	sbci	r29, 0x00	; 0
    4340:	cb 55       	subi	r28, 0x5B	; 91
    4342:	df 4f       	sbci	r29, 0xFF	; 255
    4344:	48 81       	ld	r20, Y
    4346:	c5 5a       	subi	r28, 0xA5	; 165
    4348:	d0 40       	sbci	r29, 0x00	; 0
    434a:	c6 56       	subi	r28, 0x66	; 102
    434c:	df 4f       	sbci	r29, 0xFF	; 255
    434e:	48 83       	st	Y, r20
    4350:	ca 59       	subi	r28, 0x9A	; 154
    4352:	d0 40       	sbci	r29, 0x00	; 0
    4354:	c7 57       	subi	r28, 0x77	; 119
    4356:	df 4f       	sbci	r29, 0xFF	; 255
    4358:	58 81       	ld	r21, Y
    435a:	c9 58       	subi	r28, 0x89	; 137
    435c:	d0 40       	sbci	r29, 0x00	; 0
    435e:	cd 56       	subi	r28, 0x6D	; 109
    4360:	df 4f       	sbci	r29, 0xFF	; 255
    4362:	68 81       	ld	r22, Y
    4364:	c3 59       	subi	r28, 0x93	; 147
    4366:	d0 40       	sbci	r29, 0x00	; 0
    4368:	56 0f       	add	r21, r22
    436a:	c5 56       	subi	r28, 0x65	; 101
    436c:	df 4f       	sbci	r29, 0xFF	; 255
    436e:	58 83       	st	Y, r21
    4370:	cb 59       	subi	r28, 0x9B	; 155
    4372:	d0 40       	sbci	r29, 0x00	; 0
    4374:	71 e0       	ldi	r23, 0x01	; 1
    4376:	c9 55       	subi	r28, 0x59	; 89
    4378:	df 4f       	sbci	r29, 0xFF	; 255
    437a:	78 83       	st	Y, r23
    437c:	c7 5a       	subi	r28, 0xA7	; 167
    437e:	d0 40       	sbci	r29, 0x00	; 0
    4380:	c5 56       	subi	r28, 0x65	; 101
    4382:	df 4f       	sbci	r29, 0xFF	; 255
    4384:	88 81       	ld	r24, Y
    4386:	cb 59       	subi	r28, 0x9B	; 155
    4388:	d0 40       	sbci	r29, 0x00	; 0
    438a:	c7 57       	subi	r28, 0x77	; 119
    438c:	df 4f       	sbci	r29, 0xFF	; 255
    438e:	98 81       	ld	r25, Y
    4390:	c9 58       	subi	r28, 0x89	; 137
    4392:	d0 40       	sbci	r29, 0x00	; 0
    4394:	89 17       	cp	r24, r25
    4396:	28 f0       	brcs	.+10     	; 0x43a2 <Timer_PollingDelay+0x4b2>
    4398:	c9 55       	subi	r28, 0x59	; 89
    439a:	df 4f       	sbci	r29, 0xFF	; 255
    439c:	18 82       	st	Y, r1
    439e:	c7 5a       	subi	r28, 0xA7	; 167
    43a0:	d0 40       	sbci	r29, 0x00	; 0
    43a2:	cc 55       	subi	r28, 0x5C	; 92
    43a4:	df 4f       	sbci	r29, 0xFF	; 255
    43a6:	e8 81       	ld	r30, Y
    43a8:	c4 5a       	subi	r28, 0xA4	; 164
    43aa:	d0 40       	sbci	r29, 0x00	; 0
    43ac:	c5 56       	subi	r28, 0x65	; 101
    43ae:	df 4f       	sbci	r29, 0xFF	; 255
    43b0:	f8 81       	ld	r31, Y
    43b2:	cb 59       	subi	r28, 0x9B	; 155
    43b4:	d0 40       	sbci	r29, 0x00	; 0
    43b6:	ef 0f       	add	r30, r31
    43b8:	c8 55       	subi	r28, 0x58	; 88
    43ba:	df 4f       	sbci	r29, 0xFF	; 255
    43bc:	e8 83       	st	Y, r30
    43be:	c8 5a       	subi	r28, 0xA8	; 168
    43c0:	d0 40       	sbci	r29, 0x00	; 0
    43c2:	01 e0       	ldi	r16, 0x01	; 1
    43c4:	c7 55       	subi	r28, 0x57	; 87
    43c6:	df 4f       	sbci	r29, 0xFF	; 255
    43c8:	08 83       	st	Y, r16
    43ca:	c9 5a       	subi	r28, 0xA9	; 169
    43cc:	d0 40       	sbci	r29, 0x00	; 0
    43ce:	c8 55       	subi	r28, 0x58	; 88
    43d0:	df 4f       	sbci	r29, 0xFF	; 255
    43d2:	18 81       	ld	r17, Y
    43d4:	c8 5a       	subi	r28, 0xA8	; 168
    43d6:	d0 40       	sbci	r29, 0x00	; 0
    43d8:	c5 56       	subi	r28, 0x65	; 101
    43da:	df 4f       	sbci	r29, 0xFF	; 255
    43dc:	28 81       	ld	r18, Y
    43de:	cb 59       	subi	r28, 0x9B	; 155
    43e0:	d0 40       	sbci	r29, 0x00	; 0
    43e2:	12 17       	cp	r17, r18
    43e4:	28 f0       	brcs	.+10     	; 0x43f0 <Timer_PollingDelay+0x500>
    43e6:	c7 55       	subi	r28, 0x57	; 87
    43e8:	df 4f       	sbci	r29, 0xFF	; 255
    43ea:	18 82       	st	Y, r1
    43ec:	c9 5a       	subi	r28, 0xA9	; 169
    43ee:	d0 40       	sbci	r29, 0x00	; 0
    43f0:	c9 55       	subi	r28, 0x59	; 89
    43f2:	df 4f       	sbci	r29, 0xFF	; 255
    43f4:	38 81       	ld	r19, Y
    43f6:	c7 5a       	subi	r28, 0xA7	; 167
    43f8:	d0 40       	sbci	r29, 0x00	; 0
    43fa:	c7 55       	subi	r28, 0x57	; 87
    43fc:	df 4f       	sbci	r29, 0xFF	; 255
    43fe:	48 81       	ld	r20, Y
    4400:	c9 5a       	subi	r28, 0xA9	; 169
    4402:	d0 40       	sbci	r29, 0x00	; 0
    4404:	34 2b       	or	r19, r20
    4406:	c9 55       	subi	r28, 0x59	; 89
    4408:	df 4f       	sbci	r29, 0xFF	; 255
    440a:	38 83       	st	Y, r19
    440c:	c7 5a       	subi	r28, 0xA7	; 167
    440e:	d0 40       	sbci	r29, 0x00	; 0
    4410:	c8 55       	subi	r28, 0x58	; 88
    4412:	df 4f       	sbci	r29, 0xFF	; 255
    4414:	58 81       	ld	r21, Y
    4416:	c8 5a       	subi	r28, 0xA8	; 168
    4418:	d0 40       	sbci	r29, 0x00	; 0
    441a:	c5 56       	subi	r28, 0x65	; 101
    441c:	df 4f       	sbci	r29, 0xFF	; 255
    441e:	58 83       	st	Y, r21
    4420:	cb 59       	subi	r28, 0x9B	; 155
    4422:	d0 40       	sbci	r29, 0x00	; 0
    4424:	c6 57       	subi	r28, 0x76	; 118
    4426:	df 4f       	sbci	r29, 0xFF	; 255
    4428:	68 81       	ld	r22, Y
    442a:	ca 58       	subi	r28, 0x8A	; 138
    442c:	d0 40       	sbci	r29, 0x00	; 0
    442e:	cc 56       	subi	r28, 0x6C	; 108
    4430:	df 4f       	sbci	r29, 0xFF	; 255
    4432:	78 81       	ld	r23, Y
    4434:	c4 59       	subi	r28, 0x94	; 148
    4436:	d0 40       	sbci	r29, 0x00	; 0
    4438:	67 0f       	add	r22, r23
    443a:	c4 56       	subi	r28, 0x64	; 100
    443c:	df 4f       	sbci	r29, 0xFF	; 255
    443e:	68 83       	st	Y, r22
    4440:	cc 59       	subi	r28, 0x9C	; 156
    4442:	d0 40       	sbci	r29, 0x00	; 0
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	c6 55       	subi	r28, 0x56	; 86
    4448:	df 4f       	sbci	r29, 0xFF	; 255
    444a:	88 83       	st	Y, r24
    444c:	ca 5a       	subi	r28, 0xAA	; 170
    444e:	d0 40       	sbci	r29, 0x00	; 0
    4450:	c4 56       	subi	r28, 0x64	; 100
    4452:	df 4f       	sbci	r29, 0xFF	; 255
    4454:	98 81       	ld	r25, Y
    4456:	cc 59       	subi	r28, 0x9C	; 156
    4458:	d0 40       	sbci	r29, 0x00	; 0
    445a:	c6 57       	subi	r28, 0x76	; 118
    445c:	df 4f       	sbci	r29, 0xFF	; 255
    445e:	e8 81       	ld	r30, Y
    4460:	ca 58       	subi	r28, 0x8A	; 138
    4462:	d0 40       	sbci	r29, 0x00	; 0
    4464:	9e 17       	cp	r25, r30
    4466:	28 f0       	brcs	.+10     	; 0x4472 <Timer_PollingDelay+0x582>
    4468:	c6 55       	subi	r28, 0x56	; 86
    446a:	df 4f       	sbci	r29, 0xFF	; 255
    446c:	18 82       	st	Y, r1
    446e:	ca 5a       	subi	r28, 0xAA	; 170
    4470:	d0 40       	sbci	r29, 0x00	; 0
    4472:	c9 55       	subi	r28, 0x59	; 89
    4474:	df 4f       	sbci	r29, 0xFF	; 255
    4476:	f8 81       	ld	r31, Y
    4478:	c7 5a       	subi	r28, 0xA7	; 167
    447a:	d0 40       	sbci	r29, 0x00	; 0
    447c:	c4 56       	subi	r28, 0x64	; 100
    447e:	df 4f       	sbci	r29, 0xFF	; 255
    4480:	08 81       	ld	r16, Y
    4482:	cc 59       	subi	r28, 0x9C	; 156
    4484:	d0 40       	sbci	r29, 0x00	; 0
    4486:	f0 0f       	add	r31, r16
    4488:	c5 55       	subi	r28, 0x55	; 85
    448a:	df 4f       	sbci	r29, 0xFF	; 255
    448c:	f8 83       	st	Y, r31
    448e:	cb 5a       	subi	r28, 0xAB	; 171
    4490:	d0 40       	sbci	r29, 0x00	; 0
    4492:	11 e0       	ldi	r17, 0x01	; 1
    4494:	c4 55       	subi	r28, 0x54	; 84
    4496:	df 4f       	sbci	r29, 0xFF	; 255
    4498:	18 83       	st	Y, r17
    449a:	cc 5a       	subi	r28, 0xAC	; 172
    449c:	d0 40       	sbci	r29, 0x00	; 0
    449e:	c5 55       	subi	r28, 0x55	; 85
    44a0:	df 4f       	sbci	r29, 0xFF	; 255
    44a2:	28 81       	ld	r18, Y
    44a4:	cb 5a       	subi	r28, 0xAB	; 171
    44a6:	d0 40       	sbci	r29, 0x00	; 0
    44a8:	c4 56       	subi	r28, 0x64	; 100
    44aa:	df 4f       	sbci	r29, 0xFF	; 255
    44ac:	38 81       	ld	r19, Y
    44ae:	cc 59       	subi	r28, 0x9C	; 156
    44b0:	d0 40       	sbci	r29, 0x00	; 0
    44b2:	23 17       	cp	r18, r19
    44b4:	28 f0       	brcs	.+10     	; 0x44c0 <Timer_PollingDelay+0x5d0>
    44b6:	c4 55       	subi	r28, 0x54	; 84
    44b8:	df 4f       	sbci	r29, 0xFF	; 255
    44ba:	18 82       	st	Y, r1
    44bc:	cc 5a       	subi	r28, 0xAC	; 172
    44be:	d0 40       	sbci	r29, 0x00	; 0
    44c0:	c6 55       	subi	r28, 0x56	; 86
    44c2:	df 4f       	sbci	r29, 0xFF	; 255
    44c4:	48 81       	ld	r20, Y
    44c6:	ca 5a       	subi	r28, 0xAA	; 170
    44c8:	d0 40       	sbci	r29, 0x00	; 0
    44ca:	c4 55       	subi	r28, 0x54	; 84
    44cc:	df 4f       	sbci	r29, 0xFF	; 255
    44ce:	58 81       	ld	r21, Y
    44d0:	cc 5a       	subi	r28, 0xAC	; 172
    44d2:	d0 40       	sbci	r29, 0x00	; 0
    44d4:	45 2b       	or	r20, r21
    44d6:	c6 55       	subi	r28, 0x56	; 86
    44d8:	df 4f       	sbci	r29, 0xFF	; 255
    44da:	48 83       	st	Y, r20
    44dc:	ca 5a       	subi	r28, 0xAA	; 170
    44de:	d0 40       	sbci	r29, 0x00	; 0
    44e0:	c5 55       	subi	r28, 0x55	; 85
    44e2:	df 4f       	sbci	r29, 0xFF	; 255
    44e4:	68 81       	ld	r22, Y
    44e6:	cb 5a       	subi	r28, 0xAB	; 171
    44e8:	d0 40       	sbci	r29, 0x00	; 0
    44ea:	c4 56       	subi	r28, 0x64	; 100
    44ec:	df 4f       	sbci	r29, 0xFF	; 255
    44ee:	68 83       	st	Y, r22
    44f0:	cc 59       	subi	r28, 0x9C	; 156
    44f2:	d0 40       	sbci	r29, 0x00	; 0
    44f4:	c5 57       	subi	r28, 0x75	; 117
    44f6:	df 4f       	sbci	r29, 0xFF	; 255
    44f8:	78 81       	ld	r23, Y
    44fa:	cb 58       	subi	r28, 0x8B	; 139
    44fc:	d0 40       	sbci	r29, 0x00	; 0
    44fe:	cb 56       	subi	r28, 0x6B	; 107
    4500:	df 4f       	sbci	r29, 0xFF	; 255
    4502:	88 81       	ld	r24, Y
    4504:	c5 59       	subi	r28, 0x95	; 149
    4506:	d0 40       	sbci	r29, 0x00	; 0
    4508:	78 0f       	add	r23, r24
    450a:	c3 56       	subi	r28, 0x63	; 99
    450c:	df 4f       	sbci	r29, 0xFF	; 255
    450e:	78 83       	st	Y, r23
    4510:	cd 59       	subi	r28, 0x9D	; 157
    4512:	d0 40       	sbci	r29, 0x00	; 0
    4514:	91 e0       	ldi	r25, 0x01	; 1
    4516:	c3 55       	subi	r28, 0x53	; 83
    4518:	df 4f       	sbci	r29, 0xFF	; 255
    451a:	98 83       	st	Y, r25
    451c:	cd 5a       	subi	r28, 0xAD	; 173
    451e:	d0 40       	sbci	r29, 0x00	; 0
    4520:	c3 56       	subi	r28, 0x63	; 99
    4522:	df 4f       	sbci	r29, 0xFF	; 255
    4524:	e8 81       	ld	r30, Y
    4526:	cd 59       	subi	r28, 0x9D	; 157
    4528:	d0 40       	sbci	r29, 0x00	; 0
    452a:	c5 57       	subi	r28, 0x75	; 117
    452c:	df 4f       	sbci	r29, 0xFF	; 255
    452e:	f8 81       	ld	r31, Y
    4530:	cb 58       	subi	r28, 0x8B	; 139
    4532:	d0 40       	sbci	r29, 0x00	; 0
    4534:	ef 17       	cp	r30, r31
    4536:	28 f0       	brcs	.+10     	; 0x4542 <Timer_PollingDelay+0x652>
    4538:	c3 55       	subi	r28, 0x53	; 83
    453a:	df 4f       	sbci	r29, 0xFF	; 255
    453c:	18 82       	st	Y, r1
    453e:	cd 5a       	subi	r28, 0xAD	; 173
    4540:	d0 40       	sbci	r29, 0x00	; 0
    4542:	c6 55       	subi	r28, 0x56	; 86
    4544:	df 4f       	sbci	r29, 0xFF	; 255
    4546:	08 81       	ld	r16, Y
    4548:	ca 5a       	subi	r28, 0xAA	; 170
    454a:	d0 40       	sbci	r29, 0x00	; 0
    454c:	c3 56       	subi	r28, 0x63	; 99
    454e:	df 4f       	sbci	r29, 0xFF	; 255
    4550:	18 81       	ld	r17, Y
    4552:	cd 59       	subi	r28, 0x9D	; 157
    4554:	d0 40       	sbci	r29, 0x00	; 0
    4556:	01 0f       	add	r16, r17
    4558:	c2 55       	subi	r28, 0x52	; 82
    455a:	df 4f       	sbci	r29, 0xFF	; 255
    455c:	08 83       	st	Y, r16
    455e:	ce 5a       	subi	r28, 0xAE	; 174
    4560:	d0 40       	sbci	r29, 0x00	; 0
    4562:	21 e0       	ldi	r18, 0x01	; 1
    4564:	c1 55       	subi	r28, 0x51	; 81
    4566:	df 4f       	sbci	r29, 0xFF	; 255
    4568:	28 83       	st	Y, r18
    456a:	cf 5a       	subi	r28, 0xAF	; 175
    456c:	d0 40       	sbci	r29, 0x00	; 0
    456e:	c2 55       	subi	r28, 0x52	; 82
    4570:	df 4f       	sbci	r29, 0xFF	; 255
    4572:	38 81       	ld	r19, Y
    4574:	ce 5a       	subi	r28, 0xAE	; 174
    4576:	d0 40       	sbci	r29, 0x00	; 0
    4578:	c3 56       	subi	r28, 0x63	; 99
    457a:	df 4f       	sbci	r29, 0xFF	; 255
    457c:	48 81       	ld	r20, Y
    457e:	cd 59       	subi	r28, 0x9D	; 157
    4580:	d0 40       	sbci	r29, 0x00	; 0
    4582:	34 17       	cp	r19, r20
    4584:	28 f0       	brcs	.+10     	; 0x4590 <Timer_PollingDelay+0x6a0>
    4586:	c1 55       	subi	r28, 0x51	; 81
    4588:	df 4f       	sbci	r29, 0xFF	; 255
    458a:	18 82       	st	Y, r1
    458c:	cf 5a       	subi	r28, 0xAF	; 175
    458e:	d0 40       	sbci	r29, 0x00	; 0
    4590:	c3 55       	subi	r28, 0x53	; 83
    4592:	df 4f       	sbci	r29, 0xFF	; 255
    4594:	58 81       	ld	r21, Y
    4596:	cd 5a       	subi	r28, 0xAD	; 173
    4598:	d0 40       	sbci	r29, 0x00	; 0
    459a:	c1 55       	subi	r28, 0x51	; 81
    459c:	df 4f       	sbci	r29, 0xFF	; 255
    459e:	68 81       	ld	r22, Y
    45a0:	cf 5a       	subi	r28, 0xAF	; 175
    45a2:	d0 40       	sbci	r29, 0x00	; 0
    45a4:	56 2b       	or	r21, r22
    45a6:	c3 55       	subi	r28, 0x53	; 83
    45a8:	df 4f       	sbci	r29, 0xFF	; 255
    45aa:	58 83       	st	Y, r21
    45ac:	cd 5a       	subi	r28, 0xAD	; 173
    45ae:	d0 40       	sbci	r29, 0x00	; 0
    45b0:	c2 55       	subi	r28, 0x52	; 82
    45b2:	df 4f       	sbci	r29, 0xFF	; 255
    45b4:	78 81       	ld	r23, Y
    45b6:	ce 5a       	subi	r28, 0xAE	; 174
    45b8:	d0 40       	sbci	r29, 0x00	; 0
    45ba:	c3 56       	subi	r28, 0x63	; 99
    45bc:	df 4f       	sbci	r29, 0xFF	; 255
    45be:	78 83       	st	Y, r23
    45c0:	cd 59       	subi	r28, 0x9D	; 157
    45c2:	d0 40       	sbci	r29, 0x00	; 0
    45c4:	c4 57       	subi	r28, 0x74	; 116
    45c6:	df 4f       	sbci	r29, 0xFF	; 255
    45c8:	88 81       	ld	r24, Y
    45ca:	cc 58       	subi	r28, 0x8C	; 140
    45cc:	d0 40       	sbci	r29, 0x00	; 0
    45ce:	ca 56       	subi	r28, 0x6A	; 106
    45d0:	df 4f       	sbci	r29, 0xFF	; 255
    45d2:	98 81       	ld	r25, Y
    45d4:	c6 59       	subi	r28, 0x96	; 150
    45d6:	d0 40       	sbci	r29, 0x00	; 0
    45d8:	89 0f       	add	r24, r25
    45da:	c2 56       	subi	r28, 0x62	; 98
    45dc:	df 4f       	sbci	r29, 0xFF	; 255
    45de:	88 83       	st	Y, r24
    45e0:	ce 59       	subi	r28, 0x9E	; 158
    45e2:	d0 40       	sbci	r29, 0x00	; 0
    45e4:	e1 e0       	ldi	r30, 0x01	; 1
    45e6:	c0 55       	subi	r28, 0x50	; 80
    45e8:	df 4f       	sbci	r29, 0xFF	; 255
    45ea:	e8 83       	st	Y, r30
    45ec:	c0 5b       	subi	r28, 0xB0	; 176
    45ee:	d0 40       	sbci	r29, 0x00	; 0
    45f0:	c2 56       	subi	r28, 0x62	; 98
    45f2:	df 4f       	sbci	r29, 0xFF	; 255
    45f4:	f8 81       	ld	r31, Y
    45f6:	ce 59       	subi	r28, 0x9E	; 158
    45f8:	d0 40       	sbci	r29, 0x00	; 0
    45fa:	c4 57       	subi	r28, 0x74	; 116
    45fc:	df 4f       	sbci	r29, 0xFF	; 255
    45fe:	08 81       	ld	r16, Y
    4600:	cc 58       	subi	r28, 0x8C	; 140
    4602:	d0 40       	sbci	r29, 0x00	; 0
    4604:	f0 17       	cp	r31, r16
    4606:	28 f0       	brcs	.+10     	; 0x4612 <Timer_PollingDelay+0x722>
    4608:	c0 55       	subi	r28, 0x50	; 80
    460a:	df 4f       	sbci	r29, 0xFF	; 255
    460c:	18 82       	st	Y, r1
    460e:	c0 5b       	subi	r28, 0xB0	; 176
    4610:	d0 40       	sbci	r29, 0x00	; 0
    4612:	c3 55       	subi	r28, 0x53	; 83
    4614:	df 4f       	sbci	r29, 0xFF	; 255
    4616:	18 81       	ld	r17, Y
    4618:	cd 5a       	subi	r28, 0xAD	; 173
    461a:	d0 40       	sbci	r29, 0x00	; 0
    461c:	c2 56       	subi	r28, 0x62	; 98
    461e:	df 4f       	sbci	r29, 0xFF	; 255
    4620:	28 81       	ld	r18, Y
    4622:	ce 59       	subi	r28, 0x9E	; 158
    4624:	d0 40       	sbci	r29, 0x00	; 0
    4626:	12 0f       	add	r17, r18
    4628:	cf 54       	subi	r28, 0x4F	; 79
    462a:	df 4f       	sbci	r29, 0xFF	; 255
    462c:	18 83       	st	Y, r17
    462e:	c1 5b       	subi	r28, 0xB1	; 177
    4630:	d0 40       	sbci	r29, 0x00	; 0
    4632:	31 e0       	ldi	r19, 0x01	; 1
    4634:	ce 54       	subi	r28, 0x4E	; 78
    4636:	df 4f       	sbci	r29, 0xFF	; 255
    4638:	38 83       	st	Y, r19
    463a:	c2 5b       	subi	r28, 0xB2	; 178
    463c:	d0 40       	sbci	r29, 0x00	; 0
    463e:	cf 54       	subi	r28, 0x4F	; 79
    4640:	df 4f       	sbci	r29, 0xFF	; 255
    4642:	48 81       	ld	r20, Y
    4644:	c1 5b       	subi	r28, 0xB1	; 177
    4646:	d0 40       	sbci	r29, 0x00	; 0
    4648:	c2 56       	subi	r28, 0x62	; 98
    464a:	df 4f       	sbci	r29, 0xFF	; 255
    464c:	58 81       	ld	r21, Y
    464e:	ce 59       	subi	r28, 0x9E	; 158
    4650:	d0 40       	sbci	r29, 0x00	; 0
    4652:	45 17       	cp	r20, r21
    4654:	28 f0       	brcs	.+10     	; 0x4660 <Timer_PollingDelay+0x770>
    4656:	ce 54       	subi	r28, 0x4E	; 78
    4658:	df 4f       	sbci	r29, 0xFF	; 255
    465a:	18 82       	st	Y, r1
    465c:	c2 5b       	subi	r28, 0xB2	; 178
    465e:	d0 40       	sbci	r29, 0x00	; 0
    4660:	c0 55       	subi	r28, 0x50	; 80
    4662:	df 4f       	sbci	r29, 0xFF	; 255
    4664:	68 81       	ld	r22, Y
    4666:	c0 5b       	subi	r28, 0xB0	; 176
    4668:	d0 40       	sbci	r29, 0x00	; 0
    466a:	ce 54       	subi	r28, 0x4E	; 78
    466c:	df 4f       	sbci	r29, 0xFF	; 255
    466e:	78 81       	ld	r23, Y
    4670:	c2 5b       	subi	r28, 0xB2	; 178
    4672:	d0 40       	sbci	r29, 0x00	; 0
    4674:	67 2b       	or	r22, r23
    4676:	c0 55       	subi	r28, 0x50	; 80
    4678:	df 4f       	sbci	r29, 0xFF	; 255
    467a:	68 83       	st	Y, r22
    467c:	c0 5b       	subi	r28, 0xB0	; 176
    467e:	d0 40       	sbci	r29, 0x00	; 0
    4680:	cf 54       	subi	r28, 0x4F	; 79
    4682:	df 4f       	sbci	r29, 0xFF	; 255
    4684:	88 81       	ld	r24, Y
    4686:	c1 5b       	subi	r28, 0xB1	; 177
    4688:	d0 40       	sbci	r29, 0x00	; 0
    468a:	c2 56       	subi	r28, 0x62	; 98
    468c:	df 4f       	sbci	r29, 0xFF	; 255
    468e:	88 83       	st	Y, r24
    4690:	ce 59       	subi	r28, 0x9E	; 158
    4692:	d0 40       	sbci	r29, 0x00	; 0
    4694:	c3 57       	subi	r28, 0x73	; 115
    4696:	df 4f       	sbci	r29, 0xFF	; 255
    4698:	98 81       	ld	r25, Y
    469a:	cd 58       	subi	r28, 0x8D	; 141
    469c:	d0 40       	sbci	r29, 0x00	; 0
    469e:	c9 56       	subi	r28, 0x69	; 105
    46a0:	df 4f       	sbci	r29, 0xFF	; 255
    46a2:	e8 81       	ld	r30, Y
    46a4:	c7 59       	subi	r28, 0x97	; 151
    46a6:	d0 40       	sbci	r29, 0x00	; 0
    46a8:	9e 0f       	add	r25, r30
    46aa:	c1 56       	subi	r28, 0x61	; 97
    46ac:	df 4f       	sbci	r29, 0xFF	; 255
    46ae:	98 83       	st	Y, r25
    46b0:	cf 59       	subi	r28, 0x9F	; 159
    46b2:	d0 40       	sbci	r29, 0x00	; 0
    46b4:	c0 55       	subi	r28, 0x50	; 80
    46b6:	df 4f       	sbci	r29, 0xFF	; 255
    46b8:	88 81       	ld	r24, Y
    46ba:	c0 5b       	subi	r28, 0xB0	; 176
    46bc:	d0 40       	sbci	r29, 0x00	; 0
    46be:	c1 56       	subi	r28, 0x61	; 97
    46c0:	df 4f       	sbci	r29, 0xFF	; 255
    46c2:	f8 81       	ld	r31, Y
    46c4:	cf 59       	subi	r28, 0x9F	; 159
    46c6:	d0 40       	sbci	r29, 0x00	; 0
    46c8:	8f 0f       	add	r24, r31
    46ca:	c1 56       	subi	r28, 0x61	; 97
    46cc:	df 4f       	sbci	r29, 0xFF	; 255
    46ce:	88 83       	st	Y, r24
    46d0:	cf 59       	subi	r28, 0x9F	; 159
    46d2:	d0 40       	sbci	r29, 0x00	; 0
    46d4:	c8 56       	subi	r28, 0x68	; 104
    46d6:	df 4f       	sbci	r29, 0xFF	; 255
    46d8:	a8 80       	ld	r10, Y
    46da:	c8 59       	subi	r28, 0x98	; 152
    46dc:	d0 40       	sbci	r29, 0x00	; 0
    46de:	c7 56       	subi	r28, 0x67	; 103
    46e0:	df 4f       	sbci	r29, 0xFF	; 255
    46e2:	b8 80       	ld	r11, Y
    46e4:	c9 59       	subi	r28, 0x99	; 153
    46e6:	d0 40       	sbci	r29, 0x00	; 0
    46e8:	c6 56       	subi	r28, 0x66	; 102
    46ea:	df 4f       	sbci	r29, 0xFF	; 255
    46ec:	c8 80       	ld	r12, Y
    46ee:	ca 59       	subi	r28, 0x9A	; 154
    46f0:	d0 40       	sbci	r29, 0x00	; 0
    46f2:	c5 56       	subi	r28, 0x65	; 101
    46f4:	df 4f       	sbci	r29, 0xFF	; 255
    46f6:	d8 80       	ld	r13, Y
    46f8:	cb 59       	subi	r28, 0x9B	; 155
    46fa:	d0 40       	sbci	r29, 0x00	; 0
    46fc:	c4 56       	subi	r28, 0x64	; 100
    46fe:	df 4f       	sbci	r29, 0xFF	; 255
    4700:	e8 80       	ld	r14, Y
    4702:	cc 59       	subi	r28, 0x9C	; 156
    4704:	d0 40       	sbci	r29, 0x00	; 0
    4706:	c3 56       	subi	r28, 0x63	; 99
    4708:	df 4f       	sbci	r29, 0xFF	; 255
    470a:	f8 80       	ld	r15, Y
    470c:	cd 59       	subi	r28, 0x9D	; 157
    470e:	d0 40       	sbci	r29, 0x00	; 0
    4710:	c2 56       	subi	r28, 0x62	; 98
    4712:	df 4f       	sbci	r29, 0xFF	; 255
    4714:	08 81       	ld	r16, Y
    4716:	ce 59       	subi	r28, 0x9E	; 158
    4718:	d0 40       	sbci	r29, 0x00	; 0
    471a:	c1 56       	subi	r28, 0x61	; 97
    471c:	df 4f       	sbci	r29, 0xFF	; 255
    471e:	18 81       	ld	r17, Y
    4720:	cf 59       	subi	r28, 0x9F	; 159
    4722:	d0 40       	sbci	r29, 0x00	; 0
    4724:	2a 2d       	mov	r18, r10
    4726:	3b 2d       	mov	r19, r11
    4728:	4c 2d       	mov	r20, r12
    472a:	5d 2d       	mov	r21, r13
    472c:	6e 2d       	mov	r22, r14
    472e:	7f 2d       	mov	r23, r15
    4730:	80 2f       	mov	r24, r16
    4732:	91 2f       	mov	r25, r17
    4734:	08 e0       	ldi	r16, 0x08	; 8
    4736:	0e 94 44 01 	call	0x288	; 0x288 <__lshrdi3>
    473a:	a2 2e       	mov	r10, r18
    473c:	b3 2e       	mov	r11, r19
    473e:	c4 2e       	mov	r12, r20
    4740:	d5 2e       	mov	r13, r21
    4742:	e6 2e       	mov	r14, r22
    4744:	f7 2e       	mov	r15, r23
    4746:	08 2f       	mov	r16, r24
    4748:	19 2f       	mov	r17, r25
    474a:	2a 2d       	mov	r18, r10
    474c:	3b 2d       	mov	r19, r11
    474e:	4c 2d       	mov	r20, r12
    4750:	5d 2d       	mov	r21, r13
    4752:	6e 2d       	mov	r22, r14
    4754:	7f 2d       	mov	r23, r15
    4756:	80 2f       	mov	r24, r16
    4758:	91 2f       	mov	r25, r17
    475a:	2a 83       	std	Y+2, r18	; 0x02
    475c:	3b 83       	std	Y+3, r19	; 0x03
    475e:	4c 83       	std	Y+4, r20	; 0x04
    4760:	5d 83       	std	Y+5, r21	; 0x05
																										+ TIMER0_MAX ) / ( TIMER0_MAX + 1 );	/*	Total Overflows	*/
										TCNT0 = ( TIMER0_MAX + 1 ) -
    4762:	02 e5       	ldi	r16, 0x52	; 82
    4764:	10 e0       	ldi	r17, 0x00	; 0
    4766:	cc 57       	subi	r28, 0x7C	; 124
    4768:	df 4f       	sbci	r29, 0xFF	; 255
    476a:	19 83       	std	Y+1, r17	; 0x01
    476c:	08 83       	st	Y, r16
    476e:	c4 58       	subi	r28, 0x84	; 132
    4770:	d0 40       	sbci	r29, 0x00	; 0
    4772:	89 85       	ldd	r24, Y+9	; 0x09
    4774:	9a 85       	ldd	r25, Y+10	; 0x0a
    4776:	5c 01       	movw	r10, r24
    4778:	cc 24       	eor	r12, r12
    477a:	dd 24       	eor	r13, r13
    477c:	ee 24       	eor	r14, r14
    477e:	ff 24       	eor	r15, r15
    4780:	87 01       	movw	r16, r14
    4782:	80 91 32 02 	lds	r24, 0x0232
    4786:	90 91 33 02 	lds	r25, 0x0233
    478a:	a0 91 34 02 	lds	r26, 0x0234
    478e:	b0 91 35 02 	lds	r27, 0x0235
    4792:	1c 01       	movw	r2, r24
    4794:	2d 01       	movw	r4, r26
    4796:	66 24       	eor	r6, r6
    4798:	77 24       	eor	r7, r7
    479a:	43 01       	movw	r8, r6
    479c:	2a 2d       	mov	r18, r10
    479e:	3b 2d       	mov	r19, r11
    47a0:	4c 2d       	mov	r20, r12
    47a2:	5d 2d       	mov	r21, r13
    47a4:	6e 2d       	mov	r22, r14
    47a6:	7f 2d       	mov	r23, r15
    47a8:	80 2f       	mov	r24, r16
    47aa:	91 2f       	mov	r25, r17
    47ac:	a2 2c       	mov	r10, r2
    47ae:	b3 2c       	mov	r11, r3
    47b0:	c4 2c       	mov	r12, r4
    47b2:	d5 2c       	mov	r13, r5
    47b4:	e6 2c       	mov	r14, r6
    47b6:	f7 2c       	mov	r15, r7
    47b8:	08 2d       	mov	r16, r8
    47ba:	19 2d       	mov	r17, r9
    47bc:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    47c0:	22 2e       	mov	r2, r18
    47c2:	33 2e       	mov	r3, r19
    47c4:	44 2e       	mov	r4, r20
    47c6:	55 2e       	mov	r5, r21
    47c8:	66 2e       	mov	r6, r22
    47ca:	77 2e       	mov	r7, r23
    47cc:	88 2e       	mov	r8, r24
    47ce:	99 2e       	mov	r9, r25
    47d0:	a2 2c       	mov	r10, r2
    47d2:	b3 2c       	mov	r11, r3
    47d4:	c4 2c       	mov	r12, r4
    47d6:	d5 2c       	mov	r13, r5
    47d8:	e6 2c       	mov	r14, r6
    47da:	f7 2c       	mov	r15, r7
    47dc:	08 2d       	mov	r16, r8
    47de:	19 2d       	mov	r17, r9
    47e0:	2a 2d       	mov	r18, r10
    47e2:	3b 2d       	mov	r19, r11
    47e4:	4c 2d       	mov	r20, r12
    47e6:	5d 2d       	mov	r21, r13
    47e8:	6e 2d       	mov	r22, r14
    47ea:	7f 2d       	mov	r23, r15
    47ec:	80 2f       	mov	r24, r16
    47ee:	91 2f       	mov	r25, r17
    47f0:	0f 2e       	mov	r0, r31
    47f2:	f8 ee       	ldi	r31, 0xE8	; 232
    47f4:	af 2e       	mov	r10, r31
    47f6:	f0 2d       	mov	r31, r0
    47f8:	0f 2e       	mov	r0, r31
    47fa:	f3 e0       	ldi	r31, 0x03	; 3
    47fc:	bf 2e       	mov	r11, r31
    47fe:	f0 2d       	mov	r31, r0
    4800:	cc 24       	eor	r12, r12
    4802:	dd 24       	eor	r13, r13
    4804:	ee 24       	eor	r14, r14
    4806:	ff 24       	eor	r15, r15
    4808:	00 e0       	ldi	r16, 0x00	; 0
    480a:	10 e0       	ldi	r17, 0x00	; 0
    480c:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    4810:	a2 2e       	mov	r10, r18
    4812:	b3 2e       	mov	r11, r19
    4814:	c4 2e       	mov	r12, r20
    4816:	d5 2e       	mov	r13, r21
    4818:	e6 2e       	mov	r14, r22
    481a:	f7 2e       	mov	r15, r23
    481c:	08 2f       	mov	r16, r24
    481e:	19 2f       	mov	r17, r25
    4820:	2a 2d       	mov	r18, r10
    4822:	3b 2d       	mov	r19, r11
    4824:	4c 2d       	mov	r20, r12
    4826:	5d 2d       	mov	r21, r13
    4828:	6e 2d       	mov	r22, r14
    482a:	7f 2d       	mov	r23, r15
    482c:	80 2f       	mov	r24, r16
    482e:	91 2f       	mov	r25, r17
    4830:	82 2f       	mov	r24, r18
    4832:	81 95       	neg	r24
    4834:	cc 57       	subi	r28, 0x7C	; 124
    4836:	df 4f       	sbci	r29, 0xFF	; 255
    4838:	e8 81       	ld	r30, Y
    483a:	f9 81       	ldd	r31, Y+1	; 0x01
    483c:	c4 58       	subi	r28, 0x84	; 132
    483e:	d0 40       	sbci	r29, 0x00	; 0
    4840:	80 83       	st	Z, r24
    4842:	1b c0       	rjmp	.+54     	; 0x487a <Timer_PollingDelay+0x98a>
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / ( 1000UL ) ) % (u16)( TIMER0_MAX + 1 ) );	/* PRE-LOAD value	*/									/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER0_BOTTOM )									/*	Delay LOOP							*/
										{
											while( !(( TIFR >> TOV0_BIT) & BIT0_MASK ) );									/*	Waiting for Timer0 Overflow flag	*/
    4844:	e8 e5       	ldi	r30, 0x58	; 88
    4846:	f0 e0       	ldi	r31, 0x00	; 0
    4848:	80 81       	ld	r24, Z
    484a:	88 2f       	mov	r24, r24
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	81 70       	andi	r24, 0x01	; 1
    4850:	90 70       	andi	r25, 0x00	; 0
    4852:	00 97       	sbiw	r24, 0x00	; 0
    4854:	b9 f3       	breq	.-18     	; 0x4844 <Timer_PollingDelay+0x954>
											Local_u32OverFlowCounts--;
    4856:	8a 81       	ldd	r24, Y+2	; 0x02
    4858:	9b 81       	ldd	r25, Y+3	; 0x03
    485a:	ac 81       	ldd	r26, Y+4	; 0x04
    485c:	bd 81       	ldd	r27, Y+5	; 0x05
    485e:	01 97       	sbiw	r24, 0x01	; 1
    4860:	a1 09       	sbc	r26, r1
    4862:	b1 09       	sbc	r27, r1
    4864:	8a 83       	std	Y+2, r24	; 0x02
    4866:	9b 83       	std	Y+3, r25	; 0x03
    4868:	ac 83       	std	Y+4, r26	; 0x04
    486a:	bd 83       	std	Y+5, r27	; 0x05
											TIFR |= (BIT0_MASK << TOV0_BIT);												/*	Clearing Timer0 Overflow flag		*/
    486c:	a8 e5       	ldi	r26, 0x58	; 88
    486e:	b0 e0       	ldi	r27, 0x00	; 0
    4870:	e8 e5       	ldi	r30, 0x58	; 88
    4872:	f0 e0       	ldi	r31, 0x00	; 0
    4874:	80 81       	ld	r24, Z
    4876:	81 60       	ori	r24, 0x01	; 1
    4878:	8c 93       	st	X, r24
			case  COMP_NORMAL		:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / ( 1000UL ) )
																										+ TIMER0_MAX ) / ( TIMER0_MAX + 1 );	/*	Total Overflows	*/
										TCNT0 = ( TIMER0_MAX + 1 ) -
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / ( 1000UL ) ) % (u16)( TIMER0_MAX + 1 ) );	/* PRE-LOAD value	*/									/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER0_BOTTOM )									/*	Delay LOOP							*/
    487a:	8a 81       	ldd	r24, Y+2	; 0x02
    487c:	9b 81       	ldd	r25, Y+3	; 0x03
    487e:	ac 81       	ldd	r26, Y+4	; 0x04
    4880:	bd 81       	ldd	r27, Y+5	; 0x05
    4882:	00 97       	sbiw	r24, 0x00	; 0
    4884:	a1 05       	cpc	r26, r1
    4886:	b1 05       	cpc	r27, r1
    4888:	e9 f6       	brne	.-70     	; 0x4844 <Timer_PollingDelay+0x954>
    488a:	0c 94 6f 39 	jmp	0x72de	; 0x72de <Timer_PollingDelay+0x33ee>
											Local_u32OverFlowCounts--;
											TIFR |= (BIT0_MASK << TOV0_BIT);												/*	Clearing Timer0 Overflow flag		*/
										}
										break;

			case  COMP_TOG_ON_MATCH	:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / (2 * 1000UL ) )
    488e:	89 85       	ldd	r24, Y+9	; 0x09
    4890:	9a 85       	ldd	r25, Y+10	; 0x0a
    4892:	5c 01       	movw	r10, r24
    4894:	cc 24       	eor	r12, r12
    4896:	dd 24       	eor	r13, r13
    4898:	ee 24       	eor	r14, r14
    489a:	ff 24       	eor	r15, r15
    489c:	87 01       	movw	r16, r14
    489e:	80 91 32 02 	lds	r24, 0x0232
    48a2:	90 91 33 02 	lds	r25, 0x0233
    48a6:	a0 91 34 02 	lds	r26, 0x0234
    48aa:	b0 91 35 02 	lds	r27, 0x0235
    48ae:	1c 01       	movw	r2, r24
    48b0:	2d 01       	movw	r4, r26
    48b2:	66 24       	eor	r6, r6
    48b4:	77 24       	eor	r7, r7
    48b6:	43 01       	movw	r8, r6
    48b8:	2a 2d       	mov	r18, r10
    48ba:	3b 2d       	mov	r19, r11
    48bc:	4c 2d       	mov	r20, r12
    48be:	5d 2d       	mov	r21, r13
    48c0:	6e 2d       	mov	r22, r14
    48c2:	7f 2d       	mov	r23, r15
    48c4:	80 2f       	mov	r24, r16
    48c6:	91 2f       	mov	r25, r17
    48c8:	a2 2c       	mov	r10, r2
    48ca:	b3 2c       	mov	r11, r3
    48cc:	c4 2c       	mov	r12, r4
    48ce:	d5 2c       	mov	r13, r5
    48d0:	e6 2c       	mov	r14, r6
    48d2:	f7 2c       	mov	r15, r7
    48d4:	08 2d       	mov	r16, r8
    48d6:	19 2d       	mov	r17, r9
    48d8:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    48dc:	22 2e       	mov	r2, r18
    48de:	33 2e       	mov	r3, r19
    48e0:	44 2e       	mov	r4, r20
    48e2:	55 2e       	mov	r5, r21
    48e4:	66 2e       	mov	r6, r22
    48e6:	77 2e       	mov	r7, r23
    48e8:	88 2e       	mov	r8, r24
    48ea:	99 2e       	mov	r9, r25
    48ec:	a2 2c       	mov	r10, r2
    48ee:	b3 2c       	mov	r11, r3
    48f0:	c4 2c       	mov	r12, r4
    48f2:	d5 2c       	mov	r13, r5
    48f4:	e6 2c       	mov	r14, r6
    48f6:	f7 2c       	mov	r15, r7
    48f8:	08 2d       	mov	r16, r8
    48fa:	19 2d       	mov	r17, r9
    48fc:	2a 2d       	mov	r18, r10
    48fe:	3b 2d       	mov	r19, r11
    4900:	4c 2d       	mov	r20, r12
    4902:	5d 2d       	mov	r21, r13
    4904:	6e 2d       	mov	r22, r14
    4906:	7f 2d       	mov	r23, r15
    4908:	80 2f       	mov	r24, r16
    490a:	91 2f       	mov	r25, r17
    490c:	0f 2e       	mov	r0, r31
    490e:	f0 ed       	ldi	r31, 0xD0	; 208
    4910:	af 2e       	mov	r10, r31
    4912:	f0 2d       	mov	r31, r0
    4914:	0f 2e       	mov	r0, r31
    4916:	f7 e0       	ldi	r31, 0x07	; 7
    4918:	bf 2e       	mov	r11, r31
    491a:	f0 2d       	mov	r31, r0
    491c:	cc 24       	eor	r12, r12
    491e:	dd 24       	eor	r13, r13
    4920:	ee 24       	eor	r14, r14
    4922:	ff 24       	eor	r15, r15
    4924:	00 e0       	ldi	r16, 0x00	; 0
    4926:	10 e0       	ldi	r17, 0x00	; 0
    4928:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    492c:	a2 2e       	mov	r10, r18
    492e:	b3 2e       	mov	r11, r19
    4930:	c4 2e       	mov	r12, r20
    4932:	d5 2e       	mov	r13, r21
    4934:	e6 2e       	mov	r14, r22
    4936:	f7 2e       	mov	r15, r23
    4938:	08 2f       	mov	r16, r24
    493a:	19 2f       	mov	r17, r25
    493c:	ed 96       	adiw	r28, 0x3d	; 61
    493e:	af ae       	std	Y+63, r10	; 0x3f
    4940:	ed 97       	sbiw	r28, 0x3d	; 61
    4942:	ee 96       	adiw	r28, 0x3e	; 62
    4944:	bf ae       	std	Y+63, r11	; 0x3f
    4946:	ee 97       	sbiw	r28, 0x3e	; 62
    4948:	ef 96       	adiw	r28, 0x3f	; 63
    494a:	cf ae       	std	Y+63, r12	; 0x3f
    494c:	ef 97       	sbiw	r28, 0x3f	; 63
    494e:	c1 58       	subi	r28, 0x81	; 129
    4950:	df 4f       	sbci	r29, 0xFF	; 255
    4952:	d8 82       	st	Y, r13
    4954:	cf 57       	subi	r28, 0x7F	; 127
    4956:	d0 40       	sbci	r29, 0x00	; 0
    4958:	c0 58       	subi	r28, 0x80	; 128
    495a:	df 4f       	sbci	r29, 0xFF	; 255
    495c:	e8 82       	st	Y, r14
    495e:	c0 58       	subi	r28, 0x80	; 128
    4960:	d0 40       	sbci	r29, 0x00	; 0
    4962:	cf 57       	subi	r28, 0x7F	; 127
    4964:	df 4f       	sbci	r29, 0xFF	; 255
    4966:	f8 82       	st	Y, r15
    4968:	c1 58       	subi	r28, 0x81	; 129
    496a:	d0 40       	sbci	r29, 0x00	; 0
    496c:	ce 57       	subi	r28, 0x7E	; 126
    496e:	df 4f       	sbci	r29, 0xFF	; 255
    4970:	08 83       	st	Y, r16
    4972:	c2 58       	subi	r28, 0x82	; 130
    4974:	d0 40       	sbci	r29, 0x00	; 0
    4976:	cd 57       	subi	r28, 0x7D	; 125
    4978:	df 4f       	sbci	r29, 0xFF	; 255
    497a:	18 83       	st	Y, r17
    497c:	c3 58       	subi	r28, 0x83	; 131
    497e:	d0 40       	sbci	r29, 0x00	; 0
    4980:	80 91 30 02 	lds	r24, 0x0230
    4984:	08 2f       	mov	r16, r24
    4986:	10 e0       	ldi	r17, 0x00	; 0
    4988:	20 e0       	ldi	r18, 0x00	; 0
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	40 e0       	ldi	r20, 0x00	; 0
    498e:	50 e0       	ldi	r21, 0x00	; 0
    4990:	60 e0       	ldi	r22, 0x00	; 0
    4992:	70 e0       	ldi	r23, 0x00	; 0
    4994:	e5 96       	adiw	r28, 0x35	; 53
    4996:	0f af       	std	Y+63, r16	; 0x3f
    4998:	e5 97       	sbiw	r28, 0x35	; 53
    499a:	e6 96       	adiw	r28, 0x36	; 54
    499c:	1f af       	std	Y+63, r17	; 0x3f
    499e:	e6 97       	sbiw	r28, 0x36	; 54
    49a0:	e7 96       	adiw	r28, 0x37	; 55
    49a2:	2f af       	std	Y+63, r18	; 0x3f
    49a4:	e7 97       	sbiw	r28, 0x37	; 55
    49a6:	e8 96       	adiw	r28, 0x38	; 56
    49a8:	3f af       	std	Y+63, r19	; 0x3f
    49aa:	e8 97       	sbiw	r28, 0x38	; 56
    49ac:	e9 96       	adiw	r28, 0x39	; 57
    49ae:	4f af       	std	Y+63, r20	; 0x3f
    49b0:	e9 97       	sbiw	r28, 0x39	; 57
    49b2:	ea 96       	adiw	r28, 0x3a	; 58
    49b4:	5f af       	std	Y+63, r21	; 0x3f
    49b6:	ea 97       	sbiw	r28, 0x3a	; 58
    49b8:	eb 96       	adiw	r28, 0x3b	; 59
    49ba:	6f af       	std	Y+63, r22	; 0x3f
    49bc:	eb 97       	sbiw	r28, 0x3b	; 59
    49be:	ec 96       	adiw	r28, 0x3c	; 60
    49c0:	7f af       	std	Y+63, r23	; 0x3f
    49c2:	ec 97       	sbiw	r28, 0x3c	; 60
    49c4:	ed 96       	adiw	r28, 0x3d	; 61
    49c6:	1f ad       	ldd	r17, Y+63	; 0x3f
    49c8:	ed 97       	sbiw	r28, 0x3d	; 61
    49ca:	e5 96       	adiw	r28, 0x35	; 53
    49cc:	2f ad       	ldd	r18, Y+63	; 0x3f
    49ce:	e5 97       	sbiw	r28, 0x35	; 53
    49d0:	12 0f       	add	r17, r18
    49d2:	cd 54       	subi	r28, 0x4D	; 77
    49d4:	df 4f       	sbci	r29, 0xFF	; 255
    49d6:	18 83       	st	Y, r17
    49d8:	c3 5b       	subi	r28, 0xB3	; 179
    49da:	d0 40       	sbci	r29, 0x00	; 0
    49dc:	31 e0       	ldi	r19, 0x01	; 1
    49de:	c5 54       	subi	r28, 0x45	; 69
    49e0:	df 4f       	sbci	r29, 0xFF	; 255
    49e2:	38 83       	st	Y, r19
    49e4:	cb 5b       	subi	r28, 0xBB	; 187
    49e6:	d0 40       	sbci	r29, 0x00	; 0
    49e8:	cd 54       	subi	r28, 0x4D	; 77
    49ea:	df 4f       	sbci	r29, 0xFF	; 255
    49ec:	48 81       	ld	r20, Y
    49ee:	c3 5b       	subi	r28, 0xB3	; 179
    49f0:	d0 40       	sbci	r29, 0x00	; 0
    49f2:	ed 96       	adiw	r28, 0x3d	; 61
    49f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    49f6:	ed 97       	sbiw	r28, 0x3d	; 61
    49f8:	45 17       	cp	r20, r21
    49fa:	28 f0       	brcs	.+10     	; 0x4a06 <Timer_PollingDelay+0xb16>
    49fc:	c5 54       	subi	r28, 0x45	; 69
    49fe:	df 4f       	sbci	r29, 0xFF	; 255
    4a00:	18 82       	st	Y, r1
    4a02:	cb 5b       	subi	r28, 0xBB	; 187
    4a04:	d0 40       	sbci	r29, 0x00	; 0
    4a06:	ee 96       	adiw	r28, 0x3e	; 62
    4a08:	6f ad       	ldd	r22, Y+63	; 0x3f
    4a0a:	ee 97       	sbiw	r28, 0x3e	; 62
    4a0c:	e6 96       	adiw	r28, 0x36	; 54
    4a0e:	7f ad       	ldd	r23, Y+63	; 0x3f
    4a10:	e6 97       	sbiw	r28, 0x36	; 54
    4a12:	67 0f       	add	r22, r23
    4a14:	cc 54       	subi	r28, 0x4C	; 76
    4a16:	df 4f       	sbci	r29, 0xFF	; 255
    4a18:	68 83       	st	Y, r22
    4a1a:	c4 5b       	subi	r28, 0xB4	; 180
    4a1c:	d0 40       	sbci	r29, 0x00	; 0
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	c4 54       	subi	r28, 0x44	; 68
    4a22:	df 4f       	sbci	r29, 0xFF	; 255
    4a24:	88 83       	st	Y, r24
    4a26:	cc 5b       	subi	r28, 0xBC	; 188
    4a28:	d0 40       	sbci	r29, 0x00	; 0
    4a2a:	cc 54       	subi	r28, 0x4C	; 76
    4a2c:	df 4f       	sbci	r29, 0xFF	; 255
    4a2e:	98 81       	ld	r25, Y
    4a30:	c4 5b       	subi	r28, 0xB4	; 180
    4a32:	d0 40       	sbci	r29, 0x00	; 0
    4a34:	ee 96       	adiw	r28, 0x3e	; 62
    4a36:	ef ad       	ldd	r30, Y+63	; 0x3f
    4a38:	ee 97       	sbiw	r28, 0x3e	; 62
    4a3a:	9e 17       	cp	r25, r30
    4a3c:	28 f0       	brcs	.+10     	; 0x4a48 <Timer_PollingDelay+0xb58>
    4a3e:	c4 54       	subi	r28, 0x44	; 68
    4a40:	df 4f       	sbci	r29, 0xFF	; 255
    4a42:	18 82       	st	Y, r1
    4a44:	cc 5b       	subi	r28, 0xBC	; 188
    4a46:	d0 40       	sbci	r29, 0x00	; 0
    4a48:	c5 54       	subi	r28, 0x45	; 69
    4a4a:	df 4f       	sbci	r29, 0xFF	; 255
    4a4c:	f8 81       	ld	r31, Y
    4a4e:	cb 5b       	subi	r28, 0xBB	; 187
    4a50:	d0 40       	sbci	r29, 0x00	; 0
    4a52:	cc 54       	subi	r28, 0x4C	; 76
    4a54:	df 4f       	sbci	r29, 0xFF	; 255
    4a56:	08 81       	ld	r16, Y
    4a58:	c4 5b       	subi	r28, 0xB4	; 180
    4a5a:	d0 40       	sbci	r29, 0x00	; 0
    4a5c:	f0 0f       	add	r31, r16
    4a5e:	c3 54       	subi	r28, 0x43	; 67
    4a60:	df 4f       	sbci	r29, 0xFF	; 255
    4a62:	f8 83       	st	Y, r31
    4a64:	cd 5b       	subi	r28, 0xBD	; 189
    4a66:	d0 40       	sbci	r29, 0x00	; 0
    4a68:	11 e0       	ldi	r17, 0x01	; 1
    4a6a:	c2 54       	subi	r28, 0x42	; 66
    4a6c:	df 4f       	sbci	r29, 0xFF	; 255
    4a6e:	18 83       	st	Y, r17
    4a70:	ce 5b       	subi	r28, 0xBE	; 190
    4a72:	d0 40       	sbci	r29, 0x00	; 0
    4a74:	c3 54       	subi	r28, 0x43	; 67
    4a76:	df 4f       	sbci	r29, 0xFF	; 255
    4a78:	28 81       	ld	r18, Y
    4a7a:	cd 5b       	subi	r28, 0xBD	; 189
    4a7c:	d0 40       	sbci	r29, 0x00	; 0
    4a7e:	cc 54       	subi	r28, 0x4C	; 76
    4a80:	df 4f       	sbci	r29, 0xFF	; 255
    4a82:	38 81       	ld	r19, Y
    4a84:	c4 5b       	subi	r28, 0xB4	; 180
    4a86:	d0 40       	sbci	r29, 0x00	; 0
    4a88:	23 17       	cp	r18, r19
    4a8a:	28 f0       	brcs	.+10     	; 0x4a96 <Timer_PollingDelay+0xba6>
    4a8c:	c2 54       	subi	r28, 0x42	; 66
    4a8e:	df 4f       	sbci	r29, 0xFF	; 255
    4a90:	18 82       	st	Y, r1
    4a92:	ce 5b       	subi	r28, 0xBE	; 190
    4a94:	d0 40       	sbci	r29, 0x00	; 0
    4a96:	c4 54       	subi	r28, 0x44	; 68
    4a98:	df 4f       	sbci	r29, 0xFF	; 255
    4a9a:	48 81       	ld	r20, Y
    4a9c:	cc 5b       	subi	r28, 0xBC	; 188
    4a9e:	d0 40       	sbci	r29, 0x00	; 0
    4aa0:	c2 54       	subi	r28, 0x42	; 66
    4aa2:	df 4f       	sbci	r29, 0xFF	; 255
    4aa4:	58 81       	ld	r21, Y
    4aa6:	ce 5b       	subi	r28, 0xBE	; 190
    4aa8:	d0 40       	sbci	r29, 0x00	; 0
    4aaa:	45 2b       	or	r20, r21
    4aac:	c4 54       	subi	r28, 0x44	; 68
    4aae:	df 4f       	sbci	r29, 0xFF	; 255
    4ab0:	48 83       	st	Y, r20
    4ab2:	cc 5b       	subi	r28, 0xBC	; 188
    4ab4:	d0 40       	sbci	r29, 0x00	; 0
    4ab6:	c3 54       	subi	r28, 0x43	; 67
    4ab8:	df 4f       	sbci	r29, 0xFF	; 255
    4aba:	68 81       	ld	r22, Y
    4abc:	cd 5b       	subi	r28, 0xBD	; 189
    4abe:	d0 40       	sbci	r29, 0x00	; 0
    4ac0:	cc 54       	subi	r28, 0x4C	; 76
    4ac2:	df 4f       	sbci	r29, 0xFF	; 255
    4ac4:	68 83       	st	Y, r22
    4ac6:	c4 5b       	subi	r28, 0xB4	; 180
    4ac8:	d0 40       	sbci	r29, 0x00	; 0
    4aca:	ef 96       	adiw	r28, 0x3f	; 63
    4acc:	7f ad       	ldd	r23, Y+63	; 0x3f
    4ace:	ef 97       	sbiw	r28, 0x3f	; 63
    4ad0:	e7 96       	adiw	r28, 0x37	; 55
    4ad2:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ad4:	e7 97       	sbiw	r28, 0x37	; 55
    4ad6:	78 0f       	add	r23, r24
    4ad8:	cb 54       	subi	r28, 0x4B	; 75
    4ada:	df 4f       	sbci	r29, 0xFF	; 255
    4adc:	78 83       	st	Y, r23
    4ade:	c5 5b       	subi	r28, 0xB5	; 181
    4ae0:	d0 40       	sbci	r29, 0x00	; 0
    4ae2:	91 e0       	ldi	r25, 0x01	; 1
    4ae4:	c1 54       	subi	r28, 0x41	; 65
    4ae6:	df 4f       	sbci	r29, 0xFF	; 255
    4ae8:	98 83       	st	Y, r25
    4aea:	cf 5b       	subi	r28, 0xBF	; 191
    4aec:	d0 40       	sbci	r29, 0x00	; 0
    4aee:	cb 54       	subi	r28, 0x4B	; 75
    4af0:	df 4f       	sbci	r29, 0xFF	; 255
    4af2:	e8 81       	ld	r30, Y
    4af4:	c5 5b       	subi	r28, 0xB5	; 181
    4af6:	d0 40       	sbci	r29, 0x00	; 0
    4af8:	ef 96       	adiw	r28, 0x3f	; 63
    4afa:	ff ad       	ldd	r31, Y+63	; 0x3f
    4afc:	ef 97       	sbiw	r28, 0x3f	; 63
    4afe:	ef 17       	cp	r30, r31
    4b00:	28 f0       	brcs	.+10     	; 0x4b0c <Timer_PollingDelay+0xc1c>
    4b02:	c1 54       	subi	r28, 0x41	; 65
    4b04:	df 4f       	sbci	r29, 0xFF	; 255
    4b06:	18 82       	st	Y, r1
    4b08:	cf 5b       	subi	r28, 0xBF	; 191
    4b0a:	d0 40       	sbci	r29, 0x00	; 0
    4b0c:	c4 54       	subi	r28, 0x44	; 68
    4b0e:	df 4f       	sbci	r29, 0xFF	; 255
    4b10:	08 81       	ld	r16, Y
    4b12:	cc 5b       	subi	r28, 0xBC	; 188
    4b14:	d0 40       	sbci	r29, 0x00	; 0
    4b16:	cb 54       	subi	r28, 0x4B	; 75
    4b18:	df 4f       	sbci	r29, 0xFF	; 255
    4b1a:	18 81       	ld	r17, Y
    4b1c:	c5 5b       	subi	r28, 0xB5	; 181
    4b1e:	d0 40       	sbci	r29, 0x00	; 0
    4b20:	01 0f       	add	r16, r17
    4b22:	c0 54       	subi	r28, 0x40	; 64
    4b24:	df 4f       	sbci	r29, 0xFF	; 255
    4b26:	08 83       	st	Y, r16
    4b28:	c0 5c       	subi	r28, 0xC0	; 192
    4b2a:	d0 40       	sbci	r29, 0x00	; 0
    4b2c:	21 e0       	ldi	r18, 0x01	; 1
    4b2e:	cf 53       	subi	r28, 0x3F	; 63
    4b30:	df 4f       	sbci	r29, 0xFF	; 255
    4b32:	28 83       	st	Y, r18
    4b34:	c1 5c       	subi	r28, 0xC1	; 193
    4b36:	d0 40       	sbci	r29, 0x00	; 0
    4b38:	c0 54       	subi	r28, 0x40	; 64
    4b3a:	df 4f       	sbci	r29, 0xFF	; 255
    4b3c:	38 81       	ld	r19, Y
    4b3e:	c0 5c       	subi	r28, 0xC0	; 192
    4b40:	d0 40       	sbci	r29, 0x00	; 0
    4b42:	cb 54       	subi	r28, 0x4B	; 75
    4b44:	df 4f       	sbci	r29, 0xFF	; 255
    4b46:	48 81       	ld	r20, Y
    4b48:	c5 5b       	subi	r28, 0xB5	; 181
    4b4a:	d0 40       	sbci	r29, 0x00	; 0
    4b4c:	34 17       	cp	r19, r20
    4b4e:	28 f0       	brcs	.+10     	; 0x4b5a <Timer_PollingDelay+0xc6a>
    4b50:	cf 53       	subi	r28, 0x3F	; 63
    4b52:	df 4f       	sbci	r29, 0xFF	; 255
    4b54:	18 82       	st	Y, r1
    4b56:	c1 5c       	subi	r28, 0xC1	; 193
    4b58:	d0 40       	sbci	r29, 0x00	; 0
    4b5a:	c1 54       	subi	r28, 0x41	; 65
    4b5c:	df 4f       	sbci	r29, 0xFF	; 255
    4b5e:	58 81       	ld	r21, Y
    4b60:	cf 5b       	subi	r28, 0xBF	; 191
    4b62:	d0 40       	sbci	r29, 0x00	; 0
    4b64:	cf 53       	subi	r28, 0x3F	; 63
    4b66:	df 4f       	sbci	r29, 0xFF	; 255
    4b68:	68 81       	ld	r22, Y
    4b6a:	c1 5c       	subi	r28, 0xC1	; 193
    4b6c:	d0 40       	sbci	r29, 0x00	; 0
    4b6e:	56 2b       	or	r21, r22
    4b70:	c1 54       	subi	r28, 0x41	; 65
    4b72:	df 4f       	sbci	r29, 0xFF	; 255
    4b74:	58 83       	st	Y, r21
    4b76:	cf 5b       	subi	r28, 0xBF	; 191
    4b78:	d0 40       	sbci	r29, 0x00	; 0
    4b7a:	c0 54       	subi	r28, 0x40	; 64
    4b7c:	df 4f       	sbci	r29, 0xFF	; 255
    4b7e:	78 81       	ld	r23, Y
    4b80:	c0 5c       	subi	r28, 0xC0	; 192
    4b82:	d0 40       	sbci	r29, 0x00	; 0
    4b84:	cb 54       	subi	r28, 0x4B	; 75
    4b86:	df 4f       	sbci	r29, 0xFF	; 255
    4b88:	78 83       	st	Y, r23
    4b8a:	c5 5b       	subi	r28, 0xB5	; 181
    4b8c:	d0 40       	sbci	r29, 0x00	; 0
    4b8e:	c1 58       	subi	r28, 0x81	; 129
    4b90:	df 4f       	sbci	r29, 0xFF	; 255
    4b92:	88 81       	ld	r24, Y
    4b94:	cf 57       	subi	r28, 0x7F	; 127
    4b96:	d0 40       	sbci	r29, 0x00	; 0
    4b98:	e8 96       	adiw	r28, 0x38	; 56
    4b9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b9c:	e8 97       	sbiw	r28, 0x38	; 56
    4b9e:	89 0f       	add	r24, r25
    4ba0:	ca 54       	subi	r28, 0x4A	; 74
    4ba2:	df 4f       	sbci	r29, 0xFF	; 255
    4ba4:	88 83       	st	Y, r24
    4ba6:	c6 5b       	subi	r28, 0xB6	; 182
    4ba8:	d0 40       	sbci	r29, 0x00	; 0
    4baa:	e1 e0       	ldi	r30, 0x01	; 1
    4bac:	ce 53       	subi	r28, 0x3E	; 62
    4bae:	df 4f       	sbci	r29, 0xFF	; 255
    4bb0:	e8 83       	st	Y, r30
    4bb2:	c2 5c       	subi	r28, 0xC2	; 194
    4bb4:	d0 40       	sbci	r29, 0x00	; 0
    4bb6:	ca 54       	subi	r28, 0x4A	; 74
    4bb8:	df 4f       	sbci	r29, 0xFF	; 255
    4bba:	f8 81       	ld	r31, Y
    4bbc:	c6 5b       	subi	r28, 0xB6	; 182
    4bbe:	d0 40       	sbci	r29, 0x00	; 0
    4bc0:	c1 58       	subi	r28, 0x81	; 129
    4bc2:	df 4f       	sbci	r29, 0xFF	; 255
    4bc4:	08 81       	ld	r16, Y
    4bc6:	cf 57       	subi	r28, 0x7F	; 127
    4bc8:	d0 40       	sbci	r29, 0x00	; 0
    4bca:	f0 17       	cp	r31, r16
    4bcc:	28 f0       	brcs	.+10     	; 0x4bd8 <Timer_PollingDelay+0xce8>
    4bce:	ce 53       	subi	r28, 0x3E	; 62
    4bd0:	df 4f       	sbci	r29, 0xFF	; 255
    4bd2:	18 82       	st	Y, r1
    4bd4:	c2 5c       	subi	r28, 0xC2	; 194
    4bd6:	d0 40       	sbci	r29, 0x00	; 0
    4bd8:	c1 54       	subi	r28, 0x41	; 65
    4bda:	df 4f       	sbci	r29, 0xFF	; 255
    4bdc:	18 81       	ld	r17, Y
    4bde:	cf 5b       	subi	r28, 0xBF	; 191
    4be0:	d0 40       	sbci	r29, 0x00	; 0
    4be2:	ca 54       	subi	r28, 0x4A	; 74
    4be4:	df 4f       	sbci	r29, 0xFF	; 255
    4be6:	28 81       	ld	r18, Y
    4be8:	c6 5b       	subi	r28, 0xB6	; 182
    4bea:	d0 40       	sbci	r29, 0x00	; 0
    4bec:	12 0f       	add	r17, r18
    4bee:	cd 53       	subi	r28, 0x3D	; 61
    4bf0:	df 4f       	sbci	r29, 0xFF	; 255
    4bf2:	18 83       	st	Y, r17
    4bf4:	c3 5c       	subi	r28, 0xC3	; 195
    4bf6:	d0 40       	sbci	r29, 0x00	; 0
    4bf8:	31 e0       	ldi	r19, 0x01	; 1
    4bfa:	cc 53       	subi	r28, 0x3C	; 60
    4bfc:	df 4f       	sbci	r29, 0xFF	; 255
    4bfe:	38 83       	st	Y, r19
    4c00:	c4 5c       	subi	r28, 0xC4	; 196
    4c02:	d0 40       	sbci	r29, 0x00	; 0
    4c04:	cd 53       	subi	r28, 0x3D	; 61
    4c06:	df 4f       	sbci	r29, 0xFF	; 255
    4c08:	48 81       	ld	r20, Y
    4c0a:	c3 5c       	subi	r28, 0xC3	; 195
    4c0c:	d0 40       	sbci	r29, 0x00	; 0
    4c0e:	ca 54       	subi	r28, 0x4A	; 74
    4c10:	df 4f       	sbci	r29, 0xFF	; 255
    4c12:	58 81       	ld	r21, Y
    4c14:	c6 5b       	subi	r28, 0xB6	; 182
    4c16:	d0 40       	sbci	r29, 0x00	; 0
    4c18:	45 17       	cp	r20, r21
    4c1a:	28 f0       	brcs	.+10     	; 0x4c26 <Timer_PollingDelay+0xd36>
    4c1c:	cc 53       	subi	r28, 0x3C	; 60
    4c1e:	df 4f       	sbci	r29, 0xFF	; 255
    4c20:	18 82       	st	Y, r1
    4c22:	c4 5c       	subi	r28, 0xC4	; 196
    4c24:	d0 40       	sbci	r29, 0x00	; 0
    4c26:	ce 53       	subi	r28, 0x3E	; 62
    4c28:	df 4f       	sbci	r29, 0xFF	; 255
    4c2a:	68 81       	ld	r22, Y
    4c2c:	c2 5c       	subi	r28, 0xC2	; 194
    4c2e:	d0 40       	sbci	r29, 0x00	; 0
    4c30:	cc 53       	subi	r28, 0x3C	; 60
    4c32:	df 4f       	sbci	r29, 0xFF	; 255
    4c34:	78 81       	ld	r23, Y
    4c36:	c4 5c       	subi	r28, 0xC4	; 196
    4c38:	d0 40       	sbci	r29, 0x00	; 0
    4c3a:	67 2b       	or	r22, r23
    4c3c:	ce 53       	subi	r28, 0x3E	; 62
    4c3e:	df 4f       	sbci	r29, 0xFF	; 255
    4c40:	68 83       	st	Y, r22
    4c42:	c2 5c       	subi	r28, 0xC2	; 194
    4c44:	d0 40       	sbci	r29, 0x00	; 0
    4c46:	cd 53       	subi	r28, 0x3D	; 61
    4c48:	df 4f       	sbci	r29, 0xFF	; 255
    4c4a:	88 81       	ld	r24, Y
    4c4c:	c3 5c       	subi	r28, 0xC3	; 195
    4c4e:	d0 40       	sbci	r29, 0x00	; 0
    4c50:	ca 54       	subi	r28, 0x4A	; 74
    4c52:	df 4f       	sbci	r29, 0xFF	; 255
    4c54:	88 83       	st	Y, r24
    4c56:	c6 5b       	subi	r28, 0xB6	; 182
    4c58:	d0 40       	sbci	r29, 0x00	; 0
    4c5a:	c0 58       	subi	r28, 0x80	; 128
    4c5c:	df 4f       	sbci	r29, 0xFF	; 255
    4c5e:	98 81       	ld	r25, Y
    4c60:	c0 58       	subi	r28, 0x80	; 128
    4c62:	d0 40       	sbci	r29, 0x00	; 0
    4c64:	e9 96       	adiw	r28, 0x39	; 57
    4c66:	ef ad       	ldd	r30, Y+63	; 0x3f
    4c68:	e9 97       	sbiw	r28, 0x39	; 57
    4c6a:	9e 0f       	add	r25, r30
    4c6c:	c9 54       	subi	r28, 0x49	; 73
    4c6e:	df 4f       	sbci	r29, 0xFF	; 255
    4c70:	98 83       	st	Y, r25
    4c72:	c7 5b       	subi	r28, 0xB7	; 183
    4c74:	d0 40       	sbci	r29, 0x00	; 0
    4c76:	f1 e0       	ldi	r31, 0x01	; 1
    4c78:	cb 53       	subi	r28, 0x3B	; 59
    4c7a:	df 4f       	sbci	r29, 0xFF	; 255
    4c7c:	f8 83       	st	Y, r31
    4c7e:	c5 5c       	subi	r28, 0xC5	; 197
    4c80:	d0 40       	sbci	r29, 0x00	; 0
    4c82:	c9 54       	subi	r28, 0x49	; 73
    4c84:	df 4f       	sbci	r29, 0xFF	; 255
    4c86:	08 81       	ld	r16, Y
    4c88:	c7 5b       	subi	r28, 0xB7	; 183
    4c8a:	d0 40       	sbci	r29, 0x00	; 0
    4c8c:	c0 58       	subi	r28, 0x80	; 128
    4c8e:	df 4f       	sbci	r29, 0xFF	; 255
    4c90:	18 81       	ld	r17, Y
    4c92:	c0 58       	subi	r28, 0x80	; 128
    4c94:	d0 40       	sbci	r29, 0x00	; 0
    4c96:	01 17       	cp	r16, r17
    4c98:	28 f0       	brcs	.+10     	; 0x4ca4 <Timer_PollingDelay+0xdb4>
    4c9a:	cb 53       	subi	r28, 0x3B	; 59
    4c9c:	df 4f       	sbci	r29, 0xFF	; 255
    4c9e:	18 82       	st	Y, r1
    4ca0:	c5 5c       	subi	r28, 0xC5	; 197
    4ca2:	d0 40       	sbci	r29, 0x00	; 0
    4ca4:	ce 53       	subi	r28, 0x3E	; 62
    4ca6:	df 4f       	sbci	r29, 0xFF	; 255
    4ca8:	28 81       	ld	r18, Y
    4caa:	c2 5c       	subi	r28, 0xC2	; 194
    4cac:	d0 40       	sbci	r29, 0x00	; 0
    4cae:	c9 54       	subi	r28, 0x49	; 73
    4cb0:	df 4f       	sbci	r29, 0xFF	; 255
    4cb2:	38 81       	ld	r19, Y
    4cb4:	c7 5b       	subi	r28, 0xB7	; 183
    4cb6:	d0 40       	sbci	r29, 0x00	; 0
    4cb8:	23 0f       	add	r18, r19
    4cba:	ca 53       	subi	r28, 0x3A	; 58
    4cbc:	df 4f       	sbci	r29, 0xFF	; 255
    4cbe:	28 83       	st	Y, r18
    4cc0:	c6 5c       	subi	r28, 0xC6	; 198
    4cc2:	d0 40       	sbci	r29, 0x00	; 0
    4cc4:	41 e0       	ldi	r20, 0x01	; 1
    4cc6:	c9 53       	subi	r28, 0x39	; 57
    4cc8:	df 4f       	sbci	r29, 0xFF	; 255
    4cca:	48 83       	st	Y, r20
    4ccc:	c7 5c       	subi	r28, 0xC7	; 199
    4cce:	d0 40       	sbci	r29, 0x00	; 0
    4cd0:	ca 53       	subi	r28, 0x3A	; 58
    4cd2:	df 4f       	sbci	r29, 0xFF	; 255
    4cd4:	58 81       	ld	r21, Y
    4cd6:	c6 5c       	subi	r28, 0xC6	; 198
    4cd8:	d0 40       	sbci	r29, 0x00	; 0
    4cda:	c9 54       	subi	r28, 0x49	; 73
    4cdc:	df 4f       	sbci	r29, 0xFF	; 255
    4cde:	68 81       	ld	r22, Y
    4ce0:	c7 5b       	subi	r28, 0xB7	; 183
    4ce2:	d0 40       	sbci	r29, 0x00	; 0
    4ce4:	56 17       	cp	r21, r22
    4ce6:	28 f0       	brcs	.+10     	; 0x4cf2 <Timer_PollingDelay+0xe02>
    4ce8:	c9 53       	subi	r28, 0x39	; 57
    4cea:	df 4f       	sbci	r29, 0xFF	; 255
    4cec:	18 82       	st	Y, r1
    4cee:	c7 5c       	subi	r28, 0xC7	; 199
    4cf0:	d0 40       	sbci	r29, 0x00	; 0
    4cf2:	cb 53       	subi	r28, 0x3B	; 59
    4cf4:	df 4f       	sbci	r29, 0xFF	; 255
    4cf6:	78 81       	ld	r23, Y
    4cf8:	c5 5c       	subi	r28, 0xC5	; 197
    4cfa:	d0 40       	sbci	r29, 0x00	; 0
    4cfc:	c9 53       	subi	r28, 0x39	; 57
    4cfe:	df 4f       	sbci	r29, 0xFF	; 255
    4d00:	88 81       	ld	r24, Y
    4d02:	c7 5c       	subi	r28, 0xC7	; 199
    4d04:	d0 40       	sbci	r29, 0x00	; 0
    4d06:	78 2b       	or	r23, r24
    4d08:	cb 53       	subi	r28, 0x3B	; 59
    4d0a:	df 4f       	sbci	r29, 0xFF	; 255
    4d0c:	78 83       	st	Y, r23
    4d0e:	c5 5c       	subi	r28, 0xC5	; 197
    4d10:	d0 40       	sbci	r29, 0x00	; 0
    4d12:	ca 53       	subi	r28, 0x3A	; 58
    4d14:	df 4f       	sbci	r29, 0xFF	; 255
    4d16:	98 81       	ld	r25, Y
    4d18:	c6 5c       	subi	r28, 0xC6	; 198
    4d1a:	d0 40       	sbci	r29, 0x00	; 0
    4d1c:	c9 54       	subi	r28, 0x49	; 73
    4d1e:	df 4f       	sbci	r29, 0xFF	; 255
    4d20:	98 83       	st	Y, r25
    4d22:	c7 5b       	subi	r28, 0xB7	; 183
    4d24:	d0 40       	sbci	r29, 0x00	; 0
    4d26:	cf 57       	subi	r28, 0x7F	; 127
    4d28:	df 4f       	sbci	r29, 0xFF	; 255
    4d2a:	e8 81       	ld	r30, Y
    4d2c:	c1 58       	subi	r28, 0x81	; 129
    4d2e:	d0 40       	sbci	r29, 0x00	; 0
    4d30:	ea 96       	adiw	r28, 0x3a	; 58
    4d32:	ff ad       	ldd	r31, Y+63	; 0x3f
    4d34:	ea 97       	sbiw	r28, 0x3a	; 58
    4d36:	ef 0f       	add	r30, r31
    4d38:	c8 54       	subi	r28, 0x48	; 72
    4d3a:	df 4f       	sbci	r29, 0xFF	; 255
    4d3c:	e8 83       	st	Y, r30
    4d3e:	c8 5b       	subi	r28, 0xB8	; 184
    4d40:	d0 40       	sbci	r29, 0x00	; 0
    4d42:	01 e0       	ldi	r16, 0x01	; 1
    4d44:	c8 53       	subi	r28, 0x38	; 56
    4d46:	df 4f       	sbci	r29, 0xFF	; 255
    4d48:	08 83       	st	Y, r16
    4d4a:	c8 5c       	subi	r28, 0xC8	; 200
    4d4c:	d0 40       	sbci	r29, 0x00	; 0
    4d4e:	c8 54       	subi	r28, 0x48	; 72
    4d50:	df 4f       	sbci	r29, 0xFF	; 255
    4d52:	18 81       	ld	r17, Y
    4d54:	c8 5b       	subi	r28, 0xB8	; 184
    4d56:	d0 40       	sbci	r29, 0x00	; 0
    4d58:	cf 57       	subi	r28, 0x7F	; 127
    4d5a:	df 4f       	sbci	r29, 0xFF	; 255
    4d5c:	28 81       	ld	r18, Y
    4d5e:	c1 58       	subi	r28, 0x81	; 129
    4d60:	d0 40       	sbci	r29, 0x00	; 0
    4d62:	12 17       	cp	r17, r18
    4d64:	28 f0       	brcs	.+10     	; 0x4d70 <Timer_PollingDelay+0xe80>
    4d66:	c8 53       	subi	r28, 0x38	; 56
    4d68:	df 4f       	sbci	r29, 0xFF	; 255
    4d6a:	18 82       	st	Y, r1
    4d6c:	c8 5c       	subi	r28, 0xC8	; 200
    4d6e:	d0 40       	sbci	r29, 0x00	; 0
    4d70:	cb 53       	subi	r28, 0x3B	; 59
    4d72:	df 4f       	sbci	r29, 0xFF	; 255
    4d74:	38 81       	ld	r19, Y
    4d76:	c5 5c       	subi	r28, 0xC5	; 197
    4d78:	d0 40       	sbci	r29, 0x00	; 0
    4d7a:	c8 54       	subi	r28, 0x48	; 72
    4d7c:	df 4f       	sbci	r29, 0xFF	; 255
    4d7e:	48 81       	ld	r20, Y
    4d80:	c8 5b       	subi	r28, 0xB8	; 184
    4d82:	d0 40       	sbci	r29, 0x00	; 0
    4d84:	34 0f       	add	r19, r20
    4d86:	c7 53       	subi	r28, 0x37	; 55
    4d88:	df 4f       	sbci	r29, 0xFF	; 255
    4d8a:	38 83       	st	Y, r19
    4d8c:	c9 5c       	subi	r28, 0xC9	; 201
    4d8e:	d0 40       	sbci	r29, 0x00	; 0
    4d90:	51 e0       	ldi	r21, 0x01	; 1
    4d92:	c6 53       	subi	r28, 0x36	; 54
    4d94:	df 4f       	sbci	r29, 0xFF	; 255
    4d96:	58 83       	st	Y, r21
    4d98:	ca 5c       	subi	r28, 0xCA	; 202
    4d9a:	d0 40       	sbci	r29, 0x00	; 0
    4d9c:	c7 53       	subi	r28, 0x37	; 55
    4d9e:	df 4f       	sbci	r29, 0xFF	; 255
    4da0:	68 81       	ld	r22, Y
    4da2:	c9 5c       	subi	r28, 0xC9	; 201
    4da4:	d0 40       	sbci	r29, 0x00	; 0
    4da6:	c8 54       	subi	r28, 0x48	; 72
    4da8:	df 4f       	sbci	r29, 0xFF	; 255
    4daa:	78 81       	ld	r23, Y
    4dac:	c8 5b       	subi	r28, 0xB8	; 184
    4dae:	d0 40       	sbci	r29, 0x00	; 0
    4db0:	67 17       	cp	r22, r23
    4db2:	28 f0       	brcs	.+10     	; 0x4dbe <Timer_PollingDelay+0xece>
    4db4:	c6 53       	subi	r28, 0x36	; 54
    4db6:	df 4f       	sbci	r29, 0xFF	; 255
    4db8:	18 82       	st	Y, r1
    4dba:	ca 5c       	subi	r28, 0xCA	; 202
    4dbc:	d0 40       	sbci	r29, 0x00	; 0
    4dbe:	c8 53       	subi	r28, 0x38	; 56
    4dc0:	df 4f       	sbci	r29, 0xFF	; 255
    4dc2:	88 81       	ld	r24, Y
    4dc4:	c8 5c       	subi	r28, 0xC8	; 200
    4dc6:	d0 40       	sbci	r29, 0x00	; 0
    4dc8:	c6 53       	subi	r28, 0x36	; 54
    4dca:	df 4f       	sbci	r29, 0xFF	; 255
    4dcc:	98 81       	ld	r25, Y
    4dce:	ca 5c       	subi	r28, 0xCA	; 202
    4dd0:	d0 40       	sbci	r29, 0x00	; 0
    4dd2:	89 2b       	or	r24, r25
    4dd4:	c8 53       	subi	r28, 0x38	; 56
    4dd6:	df 4f       	sbci	r29, 0xFF	; 255
    4dd8:	88 83       	st	Y, r24
    4dda:	c8 5c       	subi	r28, 0xC8	; 200
    4ddc:	d0 40       	sbci	r29, 0x00	; 0
    4dde:	c7 53       	subi	r28, 0x37	; 55
    4de0:	df 4f       	sbci	r29, 0xFF	; 255
    4de2:	e8 81       	ld	r30, Y
    4de4:	c9 5c       	subi	r28, 0xC9	; 201
    4de6:	d0 40       	sbci	r29, 0x00	; 0
    4de8:	c8 54       	subi	r28, 0x48	; 72
    4dea:	df 4f       	sbci	r29, 0xFF	; 255
    4dec:	e8 83       	st	Y, r30
    4dee:	c8 5b       	subi	r28, 0xB8	; 184
    4df0:	d0 40       	sbci	r29, 0x00	; 0
    4df2:	ce 57       	subi	r28, 0x7E	; 126
    4df4:	df 4f       	sbci	r29, 0xFF	; 255
    4df6:	f8 81       	ld	r31, Y
    4df8:	c2 58       	subi	r28, 0x82	; 130
    4dfa:	d0 40       	sbci	r29, 0x00	; 0
    4dfc:	eb 96       	adiw	r28, 0x3b	; 59
    4dfe:	0f ad       	ldd	r16, Y+63	; 0x3f
    4e00:	eb 97       	sbiw	r28, 0x3b	; 59
    4e02:	f0 0f       	add	r31, r16
    4e04:	c7 54       	subi	r28, 0x47	; 71
    4e06:	df 4f       	sbci	r29, 0xFF	; 255
    4e08:	f8 83       	st	Y, r31
    4e0a:	c9 5b       	subi	r28, 0xB9	; 185
    4e0c:	d0 40       	sbci	r29, 0x00	; 0
    4e0e:	11 e0       	ldi	r17, 0x01	; 1
    4e10:	c5 53       	subi	r28, 0x35	; 53
    4e12:	df 4f       	sbci	r29, 0xFF	; 255
    4e14:	18 83       	st	Y, r17
    4e16:	cb 5c       	subi	r28, 0xCB	; 203
    4e18:	d0 40       	sbci	r29, 0x00	; 0
    4e1a:	c7 54       	subi	r28, 0x47	; 71
    4e1c:	df 4f       	sbci	r29, 0xFF	; 255
    4e1e:	28 81       	ld	r18, Y
    4e20:	c9 5b       	subi	r28, 0xB9	; 185
    4e22:	d0 40       	sbci	r29, 0x00	; 0
    4e24:	ce 57       	subi	r28, 0x7E	; 126
    4e26:	df 4f       	sbci	r29, 0xFF	; 255
    4e28:	38 81       	ld	r19, Y
    4e2a:	c2 58       	subi	r28, 0x82	; 130
    4e2c:	d0 40       	sbci	r29, 0x00	; 0
    4e2e:	23 17       	cp	r18, r19
    4e30:	28 f0       	brcs	.+10     	; 0x4e3c <Timer_PollingDelay+0xf4c>
    4e32:	c5 53       	subi	r28, 0x35	; 53
    4e34:	df 4f       	sbci	r29, 0xFF	; 255
    4e36:	18 82       	st	Y, r1
    4e38:	cb 5c       	subi	r28, 0xCB	; 203
    4e3a:	d0 40       	sbci	r29, 0x00	; 0
    4e3c:	c8 53       	subi	r28, 0x38	; 56
    4e3e:	df 4f       	sbci	r29, 0xFF	; 255
    4e40:	48 81       	ld	r20, Y
    4e42:	c8 5c       	subi	r28, 0xC8	; 200
    4e44:	d0 40       	sbci	r29, 0x00	; 0
    4e46:	c7 54       	subi	r28, 0x47	; 71
    4e48:	df 4f       	sbci	r29, 0xFF	; 255
    4e4a:	58 81       	ld	r21, Y
    4e4c:	c9 5b       	subi	r28, 0xB9	; 185
    4e4e:	d0 40       	sbci	r29, 0x00	; 0
    4e50:	45 0f       	add	r20, r21
    4e52:	c4 53       	subi	r28, 0x34	; 52
    4e54:	df 4f       	sbci	r29, 0xFF	; 255
    4e56:	48 83       	st	Y, r20
    4e58:	cc 5c       	subi	r28, 0xCC	; 204
    4e5a:	d0 40       	sbci	r29, 0x00	; 0
    4e5c:	61 e0       	ldi	r22, 0x01	; 1
    4e5e:	c3 53       	subi	r28, 0x33	; 51
    4e60:	df 4f       	sbci	r29, 0xFF	; 255
    4e62:	68 83       	st	Y, r22
    4e64:	cd 5c       	subi	r28, 0xCD	; 205
    4e66:	d0 40       	sbci	r29, 0x00	; 0
    4e68:	c4 53       	subi	r28, 0x34	; 52
    4e6a:	df 4f       	sbci	r29, 0xFF	; 255
    4e6c:	78 81       	ld	r23, Y
    4e6e:	cc 5c       	subi	r28, 0xCC	; 204
    4e70:	d0 40       	sbci	r29, 0x00	; 0
    4e72:	c7 54       	subi	r28, 0x47	; 71
    4e74:	df 4f       	sbci	r29, 0xFF	; 255
    4e76:	88 81       	ld	r24, Y
    4e78:	c9 5b       	subi	r28, 0xB9	; 185
    4e7a:	d0 40       	sbci	r29, 0x00	; 0
    4e7c:	78 17       	cp	r23, r24
    4e7e:	28 f0       	brcs	.+10     	; 0x4e8a <Timer_PollingDelay+0xf9a>
    4e80:	c3 53       	subi	r28, 0x33	; 51
    4e82:	df 4f       	sbci	r29, 0xFF	; 255
    4e84:	18 82       	st	Y, r1
    4e86:	cd 5c       	subi	r28, 0xCD	; 205
    4e88:	d0 40       	sbci	r29, 0x00	; 0
    4e8a:	c5 53       	subi	r28, 0x35	; 53
    4e8c:	df 4f       	sbci	r29, 0xFF	; 255
    4e8e:	98 81       	ld	r25, Y
    4e90:	cb 5c       	subi	r28, 0xCB	; 203
    4e92:	d0 40       	sbci	r29, 0x00	; 0
    4e94:	c3 53       	subi	r28, 0x33	; 51
    4e96:	df 4f       	sbci	r29, 0xFF	; 255
    4e98:	e8 81       	ld	r30, Y
    4e9a:	cd 5c       	subi	r28, 0xCD	; 205
    4e9c:	d0 40       	sbci	r29, 0x00	; 0
    4e9e:	9e 2b       	or	r25, r30
    4ea0:	c5 53       	subi	r28, 0x35	; 53
    4ea2:	df 4f       	sbci	r29, 0xFF	; 255
    4ea4:	98 83       	st	Y, r25
    4ea6:	cb 5c       	subi	r28, 0xCB	; 203
    4ea8:	d0 40       	sbci	r29, 0x00	; 0
    4eaa:	c4 53       	subi	r28, 0x34	; 52
    4eac:	df 4f       	sbci	r29, 0xFF	; 255
    4eae:	f8 81       	ld	r31, Y
    4eb0:	cc 5c       	subi	r28, 0xCC	; 204
    4eb2:	d0 40       	sbci	r29, 0x00	; 0
    4eb4:	c7 54       	subi	r28, 0x47	; 71
    4eb6:	df 4f       	sbci	r29, 0xFF	; 255
    4eb8:	f8 83       	st	Y, r31
    4eba:	c9 5b       	subi	r28, 0xB9	; 185
    4ebc:	d0 40       	sbci	r29, 0x00	; 0
    4ebe:	cd 57       	subi	r28, 0x7D	; 125
    4ec0:	df 4f       	sbci	r29, 0xFF	; 255
    4ec2:	08 81       	ld	r16, Y
    4ec4:	c3 58       	subi	r28, 0x83	; 131
    4ec6:	d0 40       	sbci	r29, 0x00	; 0
    4ec8:	ec 96       	adiw	r28, 0x3c	; 60
    4eca:	1f ad       	ldd	r17, Y+63	; 0x3f
    4ecc:	ec 97       	sbiw	r28, 0x3c	; 60
    4ece:	01 0f       	add	r16, r17
    4ed0:	c6 54       	subi	r28, 0x46	; 70
    4ed2:	df 4f       	sbci	r29, 0xFF	; 255
    4ed4:	08 83       	st	Y, r16
    4ed6:	ca 5b       	subi	r28, 0xBA	; 186
    4ed8:	d0 40       	sbci	r29, 0x00	; 0
    4eda:	c5 53       	subi	r28, 0x35	; 53
    4edc:	df 4f       	sbci	r29, 0xFF	; 255
    4ede:	88 81       	ld	r24, Y
    4ee0:	cb 5c       	subi	r28, 0xCB	; 203
    4ee2:	d0 40       	sbci	r29, 0x00	; 0
    4ee4:	c6 54       	subi	r28, 0x46	; 70
    4ee6:	df 4f       	sbci	r29, 0xFF	; 255
    4ee8:	28 81       	ld	r18, Y
    4eea:	ca 5b       	subi	r28, 0xBA	; 186
    4eec:	d0 40       	sbci	r29, 0x00	; 0
    4eee:	82 0f       	add	r24, r18
    4ef0:	c6 54       	subi	r28, 0x46	; 70
    4ef2:	df 4f       	sbci	r29, 0xFF	; 255
    4ef4:	88 83       	st	Y, r24
    4ef6:	ca 5b       	subi	r28, 0xBA	; 186
    4ef8:	d0 40       	sbci	r29, 0x00	; 0
    4efa:	cd 54       	subi	r28, 0x4D	; 77
    4efc:	df 4f       	sbci	r29, 0xFF	; 255
    4efe:	a8 80       	ld	r10, Y
    4f00:	c3 5b       	subi	r28, 0xB3	; 179
    4f02:	d0 40       	sbci	r29, 0x00	; 0
    4f04:	cc 54       	subi	r28, 0x4C	; 76
    4f06:	df 4f       	sbci	r29, 0xFF	; 255
    4f08:	b8 80       	ld	r11, Y
    4f0a:	c4 5b       	subi	r28, 0xB4	; 180
    4f0c:	d0 40       	sbci	r29, 0x00	; 0
    4f0e:	cb 54       	subi	r28, 0x4B	; 75
    4f10:	df 4f       	sbci	r29, 0xFF	; 255
    4f12:	c8 80       	ld	r12, Y
    4f14:	c5 5b       	subi	r28, 0xB5	; 181
    4f16:	d0 40       	sbci	r29, 0x00	; 0
    4f18:	ca 54       	subi	r28, 0x4A	; 74
    4f1a:	df 4f       	sbci	r29, 0xFF	; 255
    4f1c:	d8 80       	ld	r13, Y
    4f1e:	c6 5b       	subi	r28, 0xB6	; 182
    4f20:	d0 40       	sbci	r29, 0x00	; 0
    4f22:	c9 54       	subi	r28, 0x49	; 73
    4f24:	df 4f       	sbci	r29, 0xFF	; 255
    4f26:	e8 80       	ld	r14, Y
    4f28:	c7 5b       	subi	r28, 0xB7	; 183
    4f2a:	d0 40       	sbci	r29, 0x00	; 0
    4f2c:	c8 54       	subi	r28, 0x48	; 72
    4f2e:	df 4f       	sbci	r29, 0xFF	; 255
    4f30:	f8 80       	ld	r15, Y
    4f32:	c8 5b       	subi	r28, 0xB8	; 184
    4f34:	d0 40       	sbci	r29, 0x00	; 0
    4f36:	c7 54       	subi	r28, 0x47	; 71
    4f38:	df 4f       	sbci	r29, 0xFF	; 255
    4f3a:	08 81       	ld	r16, Y
    4f3c:	c9 5b       	subi	r28, 0xB9	; 185
    4f3e:	d0 40       	sbci	r29, 0x00	; 0
    4f40:	c6 54       	subi	r28, 0x46	; 70
    4f42:	df 4f       	sbci	r29, 0xFF	; 255
    4f44:	18 81       	ld	r17, Y
    4f46:	ca 5b       	subi	r28, 0xBA	; 186
    4f48:	d0 40       	sbci	r29, 0x00	; 0
    4f4a:	80 91 30 02 	lds	r24, 0x0230
    4f4e:	88 2f       	mov	r24, r24
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	01 96       	adiw	r24, 0x01	; 1
    4f54:	1c 01       	movw	r2, r24
    4f56:	44 24       	eor	r4, r4
    4f58:	55 24       	eor	r5, r5
    4f5a:	66 24       	eor	r6, r6
    4f5c:	77 24       	eor	r7, r7
    4f5e:	43 01       	movw	r8, r6
    4f60:	2a 2d       	mov	r18, r10
    4f62:	3b 2d       	mov	r19, r11
    4f64:	4c 2d       	mov	r20, r12
    4f66:	5d 2d       	mov	r21, r13
    4f68:	6e 2d       	mov	r22, r14
    4f6a:	7f 2d       	mov	r23, r15
    4f6c:	80 2f       	mov	r24, r16
    4f6e:	91 2f       	mov	r25, r17
    4f70:	a2 2c       	mov	r10, r2
    4f72:	b3 2c       	mov	r11, r3
    4f74:	c4 2c       	mov	r12, r4
    4f76:	d5 2c       	mov	r13, r5
    4f78:	e6 2c       	mov	r14, r6
    4f7a:	f7 2c       	mov	r15, r7
    4f7c:	08 2d       	mov	r16, r8
    4f7e:	19 2d       	mov	r17, r9
    4f80:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    4f84:	a2 2e       	mov	r10, r18
    4f86:	b3 2e       	mov	r11, r19
    4f88:	c4 2e       	mov	r12, r20
    4f8a:	d5 2e       	mov	r13, r21
    4f8c:	e6 2e       	mov	r14, r22
    4f8e:	f7 2e       	mov	r15, r23
    4f90:	08 2f       	mov	r16, r24
    4f92:	19 2f       	mov	r17, r25
    4f94:	2a 2d       	mov	r18, r10
    4f96:	3b 2d       	mov	r19, r11
    4f98:	4c 2d       	mov	r20, r12
    4f9a:	5d 2d       	mov	r21, r13
    4f9c:	6e 2d       	mov	r22, r14
    4f9e:	7f 2d       	mov	r23, r15
    4fa0:	80 2f       	mov	r24, r16
    4fa2:	91 2f       	mov	r25, r17
    4fa4:	2a 83       	std	Y+2, r18	; 0x02
    4fa6:	3b 83       	std	Y+3, r19	; 0x03
    4fa8:	4c 83       	std	Y+4, r20	; 0x04
    4faa:	5d 83       	std	Y+5, r21	; 0x05
																				+ Global_u8OCR0_Value ) / (u16)( Global_u8OCR0_Value + 1 ) ;				/*	Total Overflows	*/
										TCNT0 = ( Global_u8OCR0_Value + 1 ) -
    4fac:	42 e5       	ldi	r20, 0x52	; 82
    4fae:	50 e0       	ldi	r21, 0x00	; 0
    4fb0:	e4 96       	adiw	r28, 0x34	; 52
    4fb2:	5f af       	std	Y+63, r21	; 0x3f
    4fb4:	4e af       	std	Y+62, r20	; 0x3e
    4fb6:	e4 97       	sbiw	r28, 0x34	; 52
    4fb8:	50 91 30 02 	lds	r21, 0x0230
    4fbc:	e2 96       	adiw	r28, 0x32	; 50
    4fbe:	5f af       	std	Y+63, r21	; 0x3f
    4fc0:	e2 97       	sbiw	r28, 0x32	; 50
    4fc2:	89 85       	ldd	r24, Y+9	; 0x09
    4fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc6:	5c 01       	movw	r10, r24
    4fc8:	cc 24       	eor	r12, r12
    4fca:	dd 24       	eor	r13, r13
    4fcc:	ee 24       	eor	r14, r14
    4fce:	ff 24       	eor	r15, r15
    4fd0:	87 01       	movw	r16, r14
    4fd2:	80 91 32 02 	lds	r24, 0x0232
    4fd6:	90 91 33 02 	lds	r25, 0x0233
    4fda:	a0 91 34 02 	lds	r26, 0x0234
    4fde:	b0 91 35 02 	lds	r27, 0x0235
    4fe2:	1c 01       	movw	r2, r24
    4fe4:	2d 01       	movw	r4, r26
    4fe6:	66 24       	eor	r6, r6
    4fe8:	77 24       	eor	r7, r7
    4fea:	43 01       	movw	r8, r6
    4fec:	2a 2d       	mov	r18, r10
    4fee:	3b 2d       	mov	r19, r11
    4ff0:	4c 2d       	mov	r20, r12
    4ff2:	5d 2d       	mov	r21, r13
    4ff4:	6e 2d       	mov	r22, r14
    4ff6:	7f 2d       	mov	r23, r15
    4ff8:	80 2f       	mov	r24, r16
    4ffa:	91 2f       	mov	r25, r17
    4ffc:	a2 2c       	mov	r10, r2
    4ffe:	b3 2c       	mov	r11, r3
    5000:	c4 2c       	mov	r12, r4
    5002:	d5 2c       	mov	r13, r5
    5004:	e6 2c       	mov	r14, r6
    5006:	f7 2c       	mov	r15, r7
    5008:	08 2d       	mov	r16, r8
    500a:	19 2d       	mov	r17, r9
    500c:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    5010:	22 2e       	mov	r2, r18
    5012:	33 2e       	mov	r3, r19
    5014:	44 2e       	mov	r4, r20
    5016:	55 2e       	mov	r5, r21
    5018:	66 2e       	mov	r6, r22
    501a:	77 2e       	mov	r7, r23
    501c:	88 2e       	mov	r8, r24
    501e:	99 2e       	mov	r9, r25
    5020:	a2 2c       	mov	r10, r2
    5022:	b3 2c       	mov	r11, r3
    5024:	c4 2c       	mov	r12, r4
    5026:	d5 2c       	mov	r13, r5
    5028:	e6 2c       	mov	r14, r6
    502a:	f7 2c       	mov	r15, r7
    502c:	08 2d       	mov	r16, r8
    502e:	19 2d       	mov	r17, r9
    5030:	2a 2d       	mov	r18, r10
    5032:	3b 2d       	mov	r19, r11
    5034:	4c 2d       	mov	r20, r12
    5036:	5d 2d       	mov	r21, r13
    5038:	6e 2d       	mov	r22, r14
    503a:	7f 2d       	mov	r23, r15
    503c:	80 2f       	mov	r24, r16
    503e:	91 2f       	mov	r25, r17
    5040:	0f 2e       	mov	r0, r31
    5042:	f0 ed       	ldi	r31, 0xD0	; 208
    5044:	af 2e       	mov	r10, r31
    5046:	f0 2d       	mov	r31, r0
    5048:	0f 2e       	mov	r0, r31
    504a:	f7 e0       	ldi	r31, 0x07	; 7
    504c:	bf 2e       	mov	r11, r31
    504e:	f0 2d       	mov	r31, r0
    5050:	cc 24       	eor	r12, r12
    5052:	dd 24       	eor	r13, r13
    5054:	ee 24       	eor	r14, r14
    5056:	ff 24       	eor	r15, r15
    5058:	00 e0       	ldi	r16, 0x00	; 0
    505a:	10 e0       	ldi	r17, 0x00	; 0
    505c:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    5060:	a2 2e       	mov	r10, r18
    5062:	b3 2e       	mov	r11, r19
    5064:	c4 2e       	mov	r12, r20
    5066:	d5 2e       	mov	r13, r21
    5068:	e6 2e       	mov	r14, r22
    506a:	f7 2e       	mov	r15, r23
    506c:	08 2f       	mov	r16, r24
    506e:	19 2f       	mov	r17, r25
    5070:	2a 2c       	mov	r2, r10
    5072:	3b 2c       	mov	r3, r11
    5074:	4c 2c       	mov	r4, r12
    5076:	5d 2c       	mov	r5, r13
    5078:	6e 2c       	mov	r6, r14
    507a:	7f 2c       	mov	r7, r15
    507c:	80 2e       	mov	r8, r16
    507e:	91 2e       	mov	r9, r17
    5080:	80 91 30 02 	lds	r24, 0x0230
    5084:	88 2f       	mov	r24, r24
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	01 96       	adiw	r24, 0x01	; 1
    508a:	8c 01       	movw	r16, r24
    508c:	20 e0       	ldi	r18, 0x00	; 0
    508e:	30 e0       	ldi	r19, 0x00	; 0
    5090:	40 e0       	ldi	r20, 0x00	; 0
    5092:	50 e0       	ldi	r21, 0x00	; 0
    5094:	60 e0       	ldi	r22, 0x00	; 0
    5096:	70 e0       	ldi	r23, 0x00	; 0
    5098:	aa 96       	adiw	r28, 0x2a	; 42
    509a:	0f af       	std	Y+63, r16	; 0x3f
    509c:	aa 97       	sbiw	r28, 0x2a	; 42
    509e:	ab 96       	adiw	r28, 0x2b	; 43
    50a0:	1f af       	std	Y+63, r17	; 0x3f
    50a2:	ab 97       	sbiw	r28, 0x2b	; 43
    50a4:	ac 96       	adiw	r28, 0x2c	; 44
    50a6:	2f af       	std	Y+63, r18	; 0x3f
    50a8:	ac 97       	sbiw	r28, 0x2c	; 44
    50aa:	ad 96       	adiw	r28, 0x2d	; 45
    50ac:	3f af       	std	Y+63, r19	; 0x3f
    50ae:	ad 97       	sbiw	r28, 0x2d	; 45
    50b0:	ae 96       	adiw	r28, 0x2e	; 46
    50b2:	4f af       	std	Y+63, r20	; 0x3f
    50b4:	ae 97       	sbiw	r28, 0x2e	; 46
    50b6:	af 96       	adiw	r28, 0x2f	; 47
    50b8:	5f af       	std	Y+63, r21	; 0x3f
    50ba:	af 97       	sbiw	r28, 0x2f	; 47
    50bc:	e0 96       	adiw	r28, 0x30	; 48
    50be:	6f af       	std	Y+63, r22	; 0x3f
    50c0:	e0 97       	sbiw	r28, 0x30	; 48
    50c2:	e1 96       	adiw	r28, 0x31	; 49
    50c4:	7f af       	std	Y+63, r23	; 0x3f
    50c6:	e1 97       	sbiw	r28, 0x31	; 49
    50c8:	22 2d       	mov	r18, r2
    50ca:	33 2d       	mov	r19, r3
    50cc:	44 2d       	mov	r20, r4
    50ce:	55 2d       	mov	r21, r5
    50d0:	66 2d       	mov	r22, r6
    50d2:	77 2d       	mov	r23, r7
    50d4:	88 2d       	mov	r24, r8
    50d6:	99 2d       	mov	r25, r9
    50d8:	aa 96       	adiw	r28, 0x2a	; 42
    50da:	af ac       	ldd	r10, Y+63	; 0x3f
    50dc:	aa 97       	sbiw	r28, 0x2a	; 42
    50de:	ab 96       	adiw	r28, 0x2b	; 43
    50e0:	bf ac       	ldd	r11, Y+63	; 0x3f
    50e2:	ab 97       	sbiw	r28, 0x2b	; 43
    50e4:	ac 96       	adiw	r28, 0x2c	; 44
    50e6:	cf ac       	ldd	r12, Y+63	; 0x3f
    50e8:	ac 97       	sbiw	r28, 0x2c	; 44
    50ea:	ad 96       	adiw	r28, 0x2d	; 45
    50ec:	df ac       	ldd	r13, Y+63	; 0x3f
    50ee:	ad 97       	sbiw	r28, 0x2d	; 45
    50f0:	ae 96       	adiw	r28, 0x2e	; 46
    50f2:	ef ac       	ldd	r14, Y+63	; 0x3f
    50f4:	ae 97       	sbiw	r28, 0x2e	; 46
    50f6:	af 96       	adiw	r28, 0x2f	; 47
    50f8:	ff ac       	ldd	r15, Y+63	; 0x3f
    50fa:	af 97       	sbiw	r28, 0x2f	; 47
    50fc:	e0 96       	adiw	r28, 0x30	; 48
    50fe:	0f ad       	ldd	r16, Y+63	; 0x3f
    5100:	e0 97       	sbiw	r28, 0x30	; 48
    5102:	e1 96       	adiw	r28, 0x31	; 49
    5104:	1f ad       	ldd	r17, Y+63	; 0x3f
    5106:	e1 97       	sbiw	r28, 0x31	; 49
    5108:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__umoddi3>
    510c:	a2 2e       	mov	r10, r18
    510e:	b3 2e       	mov	r11, r19
    5110:	c4 2e       	mov	r12, r20
    5112:	d5 2e       	mov	r13, r21
    5114:	e6 2e       	mov	r14, r22
    5116:	f7 2e       	mov	r15, r23
    5118:	08 2f       	mov	r16, r24
    511a:	19 2f       	mov	r17, r25
    511c:	2a 2d       	mov	r18, r10
    511e:	3b 2d       	mov	r19, r11
    5120:	4c 2d       	mov	r20, r12
    5122:	5d 2d       	mov	r21, r13
    5124:	6e 2d       	mov	r22, r14
    5126:	7f 2d       	mov	r23, r15
    5128:	80 2f       	mov	r24, r16
    512a:	91 2f       	mov	r25, r17
    512c:	82 2f       	mov	r24, r18
    512e:	e2 96       	adiw	r28, 0x32	; 50
    5130:	1f ad       	ldd	r17, Y+63	; 0x3f
    5132:	e2 97       	sbiw	r28, 0x32	; 50
    5134:	18 1b       	sub	r17, r24
    5136:	81 2f       	mov	r24, r17
    5138:	8f 5f       	subi	r24, 0xFF	; 255
    513a:	e4 96       	adiw	r28, 0x34	; 52
    513c:	ee ad       	ldd	r30, Y+62	; 0x3e
    513e:	ff ad       	ldd	r31, Y+63	; 0x3f
    5140:	e4 97       	sbiw	r28, 0x34	; 52
    5142:	80 83       	st	Z, r24
    5144:	1c c0       	rjmp	.+56     	; 0x517e <Timer_PollingDelay+0x128e>
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / ( 2* 1000UL ) ) % (u16)( Global_u8OCR0_Value + 1 ) );/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER0_BOTTOM )									/*	Delay LOOP								*/
										{
										while( !(( TIFR >> OCF0_BIT) & BIT0_MASK ) );										/*	Waiting for Timer0 Output Compare flag	*/
    5146:	e8 e5       	ldi	r30, 0x58	; 88
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	80 81       	ld	r24, Z
    514c:	86 95       	lsr	r24
    514e:	88 2f       	mov	r24, r24
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	81 70       	andi	r24, 0x01	; 1
    5154:	90 70       	andi	r25, 0x00	; 0
    5156:	00 97       	sbiw	r24, 0x00	; 0
    5158:	b1 f3       	breq	.-20     	; 0x5146 <Timer_PollingDelay+0x1256>
										Local_u32OverFlowCounts--;
    515a:	8a 81       	ldd	r24, Y+2	; 0x02
    515c:	9b 81       	ldd	r25, Y+3	; 0x03
    515e:	ac 81       	ldd	r26, Y+4	; 0x04
    5160:	bd 81       	ldd	r27, Y+5	; 0x05
    5162:	01 97       	sbiw	r24, 0x01	; 1
    5164:	a1 09       	sbc	r26, r1
    5166:	b1 09       	sbc	r27, r1
    5168:	8a 83       	std	Y+2, r24	; 0x02
    516a:	9b 83       	std	Y+3, r25	; 0x03
    516c:	ac 83       	std	Y+4, r26	; 0x04
    516e:	bd 83       	std	Y+5, r27	; 0x05
										TIFR |= (BIT0_MASK << OCF0_BIT);													/*	Clearing Timer0 Overflow flag			*/
    5170:	a8 e5       	ldi	r26, 0x58	; 88
    5172:	b0 e0       	ldi	r27, 0x00	; 0
    5174:	e8 e5       	ldi	r30, 0x58	; 88
    5176:	f0 e0       	ldi	r31, 0x00	; 0
    5178:	80 81       	ld	r24, Z
    517a:	82 60       	ori	r24, 0x02	; 2
    517c:	8c 93       	st	X, r24
			case  COMP_TOG_ON_MATCH	:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / (2 * 1000UL ) )
																				+ Global_u8OCR0_Value ) / (u16)( Global_u8OCR0_Value + 1 ) ;				/*	Total Overflows	*/
										TCNT0 = ( Global_u8OCR0_Value + 1 ) -
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / ( 2* 1000UL ) ) % (u16)( Global_u8OCR0_Value + 1 ) );/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER0_BOTTOM )									/*	Delay LOOP								*/
    517e:	8a 81       	ldd	r24, Y+2	; 0x02
    5180:	9b 81       	ldd	r25, Y+3	; 0x03
    5182:	ac 81       	ldd	r26, Y+4	; 0x04
    5184:	bd 81       	ldd	r27, Y+5	; 0x05
    5186:	00 97       	sbiw	r24, 0x00	; 0
    5188:	a1 05       	cpc	r26, r1
    518a:	b1 05       	cpc	r27, r1
    518c:	e1 f6       	brne	.-72     	; 0x5146 <Timer_PollingDelay+0x1256>
    518e:	0c 94 6f 39 	jmp	0x72de	; 0x72de <Timer_PollingDelay+0x33ee>
										TIFR |= (BIT0_MASK << OCF0_BIT);													/*	Clearing Timer0 Overflow flag			*/
										}
										break;

			case  COMP_NON_INVERTED	:	/*	Same as COMP_INVERTED case	*/
			case  COMP_INVERTED		:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / ( 1000UL ) )
    5192:	89 85       	ldd	r24, Y+9	; 0x09
    5194:	9a 85       	ldd	r25, Y+10	; 0x0a
    5196:	5c 01       	movw	r10, r24
    5198:	cc 24       	eor	r12, r12
    519a:	dd 24       	eor	r13, r13
    519c:	ee 24       	eor	r14, r14
    519e:	ff 24       	eor	r15, r15
    51a0:	87 01       	movw	r16, r14
    51a2:	80 91 32 02 	lds	r24, 0x0232
    51a6:	90 91 33 02 	lds	r25, 0x0233
    51aa:	a0 91 34 02 	lds	r26, 0x0234
    51ae:	b0 91 35 02 	lds	r27, 0x0235
    51b2:	1c 01       	movw	r2, r24
    51b4:	2d 01       	movw	r4, r26
    51b6:	66 24       	eor	r6, r6
    51b8:	77 24       	eor	r7, r7
    51ba:	43 01       	movw	r8, r6
    51bc:	2a 2d       	mov	r18, r10
    51be:	3b 2d       	mov	r19, r11
    51c0:	4c 2d       	mov	r20, r12
    51c2:	5d 2d       	mov	r21, r13
    51c4:	6e 2d       	mov	r22, r14
    51c6:	7f 2d       	mov	r23, r15
    51c8:	80 2f       	mov	r24, r16
    51ca:	91 2f       	mov	r25, r17
    51cc:	a2 2c       	mov	r10, r2
    51ce:	b3 2c       	mov	r11, r3
    51d0:	c4 2c       	mov	r12, r4
    51d2:	d5 2c       	mov	r13, r5
    51d4:	e6 2c       	mov	r14, r6
    51d6:	f7 2c       	mov	r15, r7
    51d8:	08 2d       	mov	r16, r8
    51da:	19 2d       	mov	r17, r9
    51dc:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    51e0:	22 2e       	mov	r2, r18
    51e2:	33 2e       	mov	r3, r19
    51e4:	44 2e       	mov	r4, r20
    51e6:	55 2e       	mov	r5, r21
    51e8:	66 2e       	mov	r6, r22
    51ea:	77 2e       	mov	r7, r23
    51ec:	88 2e       	mov	r8, r24
    51ee:	99 2e       	mov	r9, r25
    51f0:	a2 2c       	mov	r10, r2
    51f2:	b3 2c       	mov	r11, r3
    51f4:	c4 2c       	mov	r12, r4
    51f6:	d5 2c       	mov	r13, r5
    51f8:	e6 2c       	mov	r14, r6
    51fa:	f7 2c       	mov	r15, r7
    51fc:	08 2d       	mov	r16, r8
    51fe:	19 2d       	mov	r17, r9
    5200:	2a 2d       	mov	r18, r10
    5202:	3b 2d       	mov	r19, r11
    5204:	4c 2d       	mov	r20, r12
    5206:	5d 2d       	mov	r21, r13
    5208:	6e 2d       	mov	r22, r14
    520a:	7f 2d       	mov	r23, r15
    520c:	80 2f       	mov	r24, r16
    520e:	91 2f       	mov	r25, r17
    5210:	0f 2e       	mov	r0, r31
    5212:	f8 ee       	ldi	r31, 0xE8	; 232
    5214:	af 2e       	mov	r10, r31
    5216:	f0 2d       	mov	r31, r0
    5218:	0f 2e       	mov	r0, r31
    521a:	f3 e0       	ldi	r31, 0x03	; 3
    521c:	bf 2e       	mov	r11, r31
    521e:	f0 2d       	mov	r31, r0
    5220:	cc 24       	eor	r12, r12
    5222:	dd 24       	eor	r13, r13
    5224:	ee 24       	eor	r14, r14
    5226:	ff 24       	eor	r15, r15
    5228:	00 e0       	ldi	r16, 0x00	; 0
    522a:	10 e0       	ldi	r17, 0x00	; 0
    522c:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    5230:	a2 2e       	mov	r10, r18
    5232:	b3 2e       	mov	r11, r19
    5234:	c4 2e       	mov	r12, r20
    5236:	d5 2e       	mov	r13, r21
    5238:	e6 2e       	mov	r14, r22
    523a:	f7 2e       	mov	r15, r23
    523c:	08 2f       	mov	r16, r24
    523e:	19 2f       	mov	r17, r25
    5240:	a2 96       	adiw	r28, 0x22	; 34
    5242:	af ae       	std	Y+63, r10	; 0x3f
    5244:	a2 97       	sbiw	r28, 0x22	; 34
    5246:	a3 96       	adiw	r28, 0x23	; 35
    5248:	bf ae       	std	Y+63, r11	; 0x3f
    524a:	a3 97       	sbiw	r28, 0x23	; 35
    524c:	a4 96       	adiw	r28, 0x24	; 36
    524e:	cf ae       	std	Y+63, r12	; 0x3f
    5250:	a4 97       	sbiw	r28, 0x24	; 36
    5252:	a5 96       	adiw	r28, 0x25	; 37
    5254:	df ae       	std	Y+63, r13	; 0x3f
    5256:	a5 97       	sbiw	r28, 0x25	; 37
    5258:	a6 96       	adiw	r28, 0x26	; 38
    525a:	ef ae       	std	Y+63, r14	; 0x3f
    525c:	a6 97       	sbiw	r28, 0x26	; 38
    525e:	a7 96       	adiw	r28, 0x27	; 39
    5260:	ff ae       	std	Y+63, r15	; 0x3f
    5262:	a7 97       	sbiw	r28, 0x27	; 39
    5264:	a8 96       	adiw	r28, 0x28	; 40
    5266:	0f af       	std	Y+63, r16	; 0x3f
    5268:	a8 97       	sbiw	r28, 0x28	; 40
    526a:	a9 96       	adiw	r28, 0x29	; 41
    526c:	1f af       	std	Y+63, r17	; 0x3f
    526e:	a9 97       	sbiw	r28, 0x29	; 41
    5270:	80 91 30 02 	lds	r24, 0x0230
    5274:	08 2f       	mov	r16, r24
    5276:	10 e0       	ldi	r17, 0x00	; 0
    5278:	20 e0       	ldi	r18, 0x00	; 0
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	40 e0       	ldi	r20, 0x00	; 0
    527e:	50 e0       	ldi	r21, 0x00	; 0
    5280:	60 e0       	ldi	r22, 0x00	; 0
    5282:	70 e0       	ldi	r23, 0x00	; 0
    5284:	6a 96       	adiw	r28, 0x1a	; 26
    5286:	0f af       	std	Y+63, r16	; 0x3f
    5288:	6a 97       	sbiw	r28, 0x1a	; 26
    528a:	6b 96       	adiw	r28, 0x1b	; 27
    528c:	1f af       	std	Y+63, r17	; 0x3f
    528e:	6b 97       	sbiw	r28, 0x1b	; 27
    5290:	6c 96       	adiw	r28, 0x1c	; 28
    5292:	2f af       	std	Y+63, r18	; 0x3f
    5294:	6c 97       	sbiw	r28, 0x1c	; 28
    5296:	6d 96       	adiw	r28, 0x1d	; 29
    5298:	3f af       	std	Y+63, r19	; 0x3f
    529a:	6d 97       	sbiw	r28, 0x1d	; 29
    529c:	6e 96       	adiw	r28, 0x1e	; 30
    529e:	4f af       	std	Y+63, r20	; 0x3f
    52a0:	6e 97       	sbiw	r28, 0x1e	; 30
    52a2:	6f 96       	adiw	r28, 0x1f	; 31
    52a4:	5f af       	std	Y+63, r21	; 0x3f
    52a6:	6f 97       	sbiw	r28, 0x1f	; 31
    52a8:	a0 96       	adiw	r28, 0x20	; 32
    52aa:	6f af       	std	Y+63, r22	; 0x3f
    52ac:	a0 97       	sbiw	r28, 0x20	; 32
    52ae:	a1 96       	adiw	r28, 0x21	; 33
    52b0:	7f af       	std	Y+63, r23	; 0x3f
    52b2:	a1 97       	sbiw	r28, 0x21	; 33
    52b4:	a2 96       	adiw	r28, 0x22	; 34
    52b6:	1f ad       	ldd	r17, Y+63	; 0x3f
    52b8:	a2 97       	sbiw	r28, 0x22	; 34
    52ba:	6a 96       	adiw	r28, 0x1a	; 26
    52bc:	2f ad       	ldd	r18, Y+63	; 0x3f
    52be:	6a 97       	sbiw	r28, 0x1a	; 26
    52c0:	12 0f       	add	r17, r18
    52c2:	c2 53       	subi	r28, 0x32	; 50
    52c4:	df 4f       	sbci	r29, 0xFF	; 255
    52c6:	18 83       	st	Y, r17
    52c8:	ce 5c       	subi	r28, 0xCE	; 206
    52ca:	d0 40       	sbci	r29, 0x00	; 0
    52cc:	31 e0       	ldi	r19, 0x01	; 1
    52ce:	ca 52       	subi	r28, 0x2A	; 42
    52d0:	df 4f       	sbci	r29, 0xFF	; 255
    52d2:	38 83       	st	Y, r19
    52d4:	c6 5d       	subi	r28, 0xD6	; 214
    52d6:	d0 40       	sbci	r29, 0x00	; 0
    52d8:	c2 53       	subi	r28, 0x32	; 50
    52da:	df 4f       	sbci	r29, 0xFF	; 255
    52dc:	48 81       	ld	r20, Y
    52de:	ce 5c       	subi	r28, 0xCE	; 206
    52e0:	d0 40       	sbci	r29, 0x00	; 0
    52e2:	a2 96       	adiw	r28, 0x22	; 34
    52e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    52e6:	a2 97       	sbiw	r28, 0x22	; 34
    52e8:	45 17       	cp	r20, r21
    52ea:	28 f0       	brcs	.+10     	; 0x52f6 <Timer_PollingDelay+0x1406>
    52ec:	ca 52       	subi	r28, 0x2A	; 42
    52ee:	df 4f       	sbci	r29, 0xFF	; 255
    52f0:	18 82       	st	Y, r1
    52f2:	c6 5d       	subi	r28, 0xD6	; 214
    52f4:	d0 40       	sbci	r29, 0x00	; 0
    52f6:	a3 96       	adiw	r28, 0x23	; 35
    52f8:	6f ad       	ldd	r22, Y+63	; 0x3f
    52fa:	a3 97       	sbiw	r28, 0x23	; 35
    52fc:	6b 96       	adiw	r28, 0x1b	; 27
    52fe:	7f ad       	ldd	r23, Y+63	; 0x3f
    5300:	6b 97       	sbiw	r28, 0x1b	; 27
    5302:	67 0f       	add	r22, r23
    5304:	c1 53       	subi	r28, 0x31	; 49
    5306:	df 4f       	sbci	r29, 0xFF	; 255
    5308:	68 83       	st	Y, r22
    530a:	cf 5c       	subi	r28, 0xCF	; 207
    530c:	d0 40       	sbci	r29, 0x00	; 0
    530e:	81 e0       	ldi	r24, 0x01	; 1
    5310:	c9 52       	subi	r28, 0x29	; 41
    5312:	df 4f       	sbci	r29, 0xFF	; 255
    5314:	88 83       	st	Y, r24
    5316:	c7 5d       	subi	r28, 0xD7	; 215
    5318:	d0 40       	sbci	r29, 0x00	; 0
    531a:	c1 53       	subi	r28, 0x31	; 49
    531c:	df 4f       	sbci	r29, 0xFF	; 255
    531e:	98 81       	ld	r25, Y
    5320:	cf 5c       	subi	r28, 0xCF	; 207
    5322:	d0 40       	sbci	r29, 0x00	; 0
    5324:	a3 96       	adiw	r28, 0x23	; 35
    5326:	ef ad       	ldd	r30, Y+63	; 0x3f
    5328:	a3 97       	sbiw	r28, 0x23	; 35
    532a:	9e 17       	cp	r25, r30
    532c:	28 f0       	brcs	.+10     	; 0x5338 <Timer_PollingDelay+0x1448>
    532e:	c9 52       	subi	r28, 0x29	; 41
    5330:	df 4f       	sbci	r29, 0xFF	; 255
    5332:	18 82       	st	Y, r1
    5334:	c7 5d       	subi	r28, 0xD7	; 215
    5336:	d0 40       	sbci	r29, 0x00	; 0
    5338:	ca 52       	subi	r28, 0x2A	; 42
    533a:	df 4f       	sbci	r29, 0xFF	; 255
    533c:	f8 81       	ld	r31, Y
    533e:	c6 5d       	subi	r28, 0xD6	; 214
    5340:	d0 40       	sbci	r29, 0x00	; 0
    5342:	c1 53       	subi	r28, 0x31	; 49
    5344:	df 4f       	sbci	r29, 0xFF	; 255
    5346:	08 81       	ld	r16, Y
    5348:	cf 5c       	subi	r28, 0xCF	; 207
    534a:	d0 40       	sbci	r29, 0x00	; 0
    534c:	f0 0f       	add	r31, r16
    534e:	c8 52       	subi	r28, 0x28	; 40
    5350:	df 4f       	sbci	r29, 0xFF	; 255
    5352:	f8 83       	st	Y, r31
    5354:	c8 5d       	subi	r28, 0xD8	; 216
    5356:	d0 40       	sbci	r29, 0x00	; 0
    5358:	11 e0       	ldi	r17, 0x01	; 1
    535a:	c7 52       	subi	r28, 0x27	; 39
    535c:	df 4f       	sbci	r29, 0xFF	; 255
    535e:	18 83       	st	Y, r17
    5360:	c9 5d       	subi	r28, 0xD9	; 217
    5362:	d0 40       	sbci	r29, 0x00	; 0
    5364:	c8 52       	subi	r28, 0x28	; 40
    5366:	df 4f       	sbci	r29, 0xFF	; 255
    5368:	28 81       	ld	r18, Y
    536a:	c8 5d       	subi	r28, 0xD8	; 216
    536c:	d0 40       	sbci	r29, 0x00	; 0
    536e:	c1 53       	subi	r28, 0x31	; 49
    5370:	df 4f       	sbci	r29, 0xFF	; 255
    5372:	38 81       	ld	r19, Y
    5374:	cf 5c       	subi	r28, 0xCF	; 207
    5376:	d0 40       	sbci	r29, 0x00	; 0
    5378:	23 17       	cp	r18, r19
    537a:	28 f0       	brcs	.+10     	; 0x5386 <Timer_PollingDelay+0x1496>
    537c:	c7 52       	subi	r28, 0x27	; 39
    537e:	df 4f       	sbci	r29, 0xFF	; 255
    5380:	18 82       	st	Y, r1
    5382:	c9 5d       	subi	r28, 0xD9	; 217
    5384:	d0 40       	sbci	r29, 0x00	; 0
    5386:	c9 52       	subi	r28, 0x29	; 41
    5388:	df 4f       	sbci	r29, 0xFF	; 255
    538a:	48 81       	ld	r20, Y
    538c:	c7 5d       	subi	r28, 0xD7	; 215
    538e:	d0 40       	sbci	r29, 0x00	; 0
    5390:	c7 52       	subi	r28, 0x27	; 39
    5392:	df 4f       	sbci	r29, 0xFF	; 255
    5394:	58 81       	ld	r21, Y
    5396:	c9 5d       	subi	r28, 0xD9	; 217
    5398:	d0 40       	sbci	r29, 0x00	; 0
    539a:	45 2b       	or	r20, r21
    539c:	c9 52       	subi	r28, 0x29	; 41
    539e:	df 4f       	sbci	r29, 0xFF	; 255
    53a0:	48 83       	st	Y, r20
    53a2:	c7 5d       	subi	r28, 0xD7	; 215
    53a4:	d0 40       	sbci	r29, 0x00	; 0
    53a6:	c8 52       	subi	r28, 0x28	; 40
    53a8:	df 4f       	sbci	r29, 0xFF	; 255
    53aa:	68 81       	ld	r22, Y
    53ac:	c8 5d       	subi	r28, 0xD8	; 216
    53ae:	d0 40       	sbci	r29, 0x00	; 0
    53b0:	c1 53       	subi	r28, 0x31	; 49
    53b2:	df 4f       	sbci	r29, 0xFF	; 255
    53b4:	68 83       	st	Y, r22
    53b6:	cf 5c       	subi	r28, 0xCF	; 207
    53b8:	d0 40       	sbci	r29, 0x00	; 0
    53ba:	a4 96       	adiw	r28, 0x24	; 36
    53bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    53be:	a4 97       	sbiw	r28, 0x24	; 36
    53c0:	6c 96       	adiw	r28, 0x1c	; 28
    53c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    53c4:	6c 97       	sbiw	r28, 0x1c	; 28
    53c6:	78 0f       	add	r23, r24
    53c8:	c0 53       	subi	r28, 0x30	; 48
    53ca:	df 4f       	sbci	r29, 0xFF	; 255
    53cc:	78 83       	st	Y, r23
    53ce:	c0 5d       	subi	r28, 0xD0	; 208
    53d0:	d0 40       	sbci	r29, 0x00	; 0
    53d2:	91 e0       	ldi	r25, 0x01	; 1
    53d4:	c6 52       	subi	r28, 0x26	; 38
    53d6:	df 4f       	sbci	r29, 0xFF	; 255
    53d8:	98 83       	st	Y, r25
    53da:	ca 5d       	subi	r28, 0xDA	; 218
    53dc:	d0 40       	sbci	r29, 0x00	; 0
    53de:	c0 53       	subi	r28, 0x30	; 48
    53e0:	df 4f       	sbci	r29, 0xFF	; 255
    53e2:	e8 81       	ld	r30, Y
    53e4:	c0 5d       	subi	r28, 0xD0	; 208
    53e6:	d0 40       	sbci	r29, 0x00	; 0
    53e8:	a4 96       	adiw	r28, 0x24	; 36
    53ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    53ec:	a4 97       	sbiw	r28, 0x24	; 36
    53ee:	ef 17       	cp	r30, r31
    53f0:	28 f0       	brcs	.+10     	; 0x53fc <Timer_PollingDelay+0x150c>
    53f2:	c6 52       	subi	r28, 0x26	; 38
    53f4:	df 4f       	sbci	r29, 0xFF	; 255
    53f6:	18 82       	st	Y, r1
    53f8:	ca 5d       	subi	r28, 0xDA	; 218
    53fa:	d0 40       	sbci	r29, 0x00	; 0
    53fc:	c9 52       	subi	r28, 0x29	; 41
    53fe:	df 4f       	sbci	r29, 0xFF	; 255
    5400:	08 81       	ld	r16, Y
    5402:	c7 5d       	subi	r28, 0xD7	; 215
    5404:	d0 40       	sbci	r29, 0x00	; 0
    5406:	c0 53       	subi	r28, 0x30	; 48
    5408:	df 4f       	sbci	r29, 0xFF	; 255
    540a:	18 81       	ld	r17, Y
    540c:	c0 5d       	subi	r28, 0xD0	; 208
    540e:	d0 40       	sbci	r29, 0x00	; 0
    5410:	01 0f       	add	r16, r17
    5412:	c5 52       	subi	r28, 0x25	; 37
    5414:	df 4f       	sbci	r29, 0xFF	; 255
    5416:	08 83       	st	Y, r16
    5418:	cb 5d       	subi	r28, 0xDB	; 219
    541a:	d0 40       	sbci	r29, 0x00	; 0
    541c:	21 e0       	ldi	r18, 0x01	; 1
    541e:	c4 52       	subi	r28, 0x24	; 36
    5420:	df 4f       	sbci	r29, 0xFF	; 255
    5422:	28 83       	st	Y, r18
    5424:	cc 5d       	subi	r28, 0xDC	; 220
    5426:	d0 40       	sbci	r29, 0x00	; 0
    5428:	c5 52       	subi	r28, 0x25	; 37
    542a:	df 4f       	sbci	r29, 0xFF	; 255
    542c:	38 81       	ld	r19, Y
    542e:	cb 5d       	subi	r28, 0xDB	; 219
    5430:	d0 40       	sbci	r29, 0x00	; 0
    5432:	c0 53       	subi	r28, 0x30	; 48
    5434:	df 4f       	sbci	r29, 0xFF	; 255
    5436:	48 81       	ld	r20, Y
    5438:	c0 5d       	subi	r28, 0xD0	; 208
    543a:	d0 40       	sbci	r29, 0x00	; 0
    543c:	34 17       	cp	r19, r20
    543e:	28 f0       	brcs	.+10     	; 0x544a <Timer_PollingDelay+0x155a>
    5440:	c4 52       	subi	r28, 0x24	; 36
    5442:	df 4f       	sbci	r29, 0xFF	; 255
    5444:	18 82       	st	Y, r1
    5446:	cc 5d       	subi	r28, 0xDC	; 220
    5448:	d0 40       	sbci	r29, 0x00	; 0
    544a:	c6 52       	subi	r28, 0x26	; 38
    544c:	df 4f       	sbci	r29, 0xFF	; 255
    544e:	58 81       	ld	r21, Y
    5450:	ca 5d       	subi	r28, 0xDA	; 218
    5452:	d0 40       	sbci	r29, 0x00	; 0
    5454:	c4 52       	subi	r28, 0x24	; 36
    5456:	df 4f       	sbci	r29, 0xFF	; 255
    5458:	68 81       	ld	r22, Y
    545a:	cc 5d       	subi	r28, 0xDC	; 220
    545c:	d0 40       	sbci	r29, 0x00	; 0
    545e:	56 2b       	or	r21, r22
    5460:	c6 52       	subi	r28, 0x26	; 38
    5462:	df 4f       	sbci	r29, 0xFF	; 255
    5464:	58 83       	st	Y, r21
    5466:	ca 5d       	subi	r28, 0xDA	; 218
    5468:	d0 40       	sbci	r29, 0x00	; 0
    546a:	c5 52       	subi	r28, 0x25	; 37
    546c:	df 4f       	sbci	r29, 0xFF	; 255
    546e:	78 81       	ld	r23, Y
    5470:	cb 5d       	subi	r28, 0xDB	; 219
    5472:	d0 40       	sbci	r29, 0x00	; 0
    5474:	c0 53       	subi	r28, 0x30	; 48
    5476:	df 4f       	sbci	r29, 0xFF	; 255
    5478:	78 83       	st	Y, r23
    547a:	c0 5d       	subi	r28, 0xD0	; 208
    547c:	d0 40       	sbci	r29, 0x00	; 0
    547e:	a5 96       	adiw	r28, 0x25	; 37
    5480:	8f ad       	ldd	r24, Y+63	; 0x3f
    5482:	a5 97       	sbiw	r28, 0x25	; 37
    5484:	6d 96       	adiw	r28, 0x1d	; 29
    5486:	9f ad       	ldd	r25, Y+63	; 0x3f
    5488:	6d 97       	sbiw	r28, 0x1d	; 29
    548a:	89 0f       	add	r24, r25
    548c:	cf 52       	subi	r28, 0x2F	; 47
    548e:	df 4f       	sbci	r29, 0xFF	; 255
    5490:	88 83       	st	Y, r24
    5492:	c1 5d       	subi	r28, 0xD1	; 209
    5494:	d0 40       	sbci	r29, 0x00	; 0
    5496:	e1 e0       	ldi	r30, 0x01	; 1
    5498:	c3 52       	subi	r28, 0x23	; 35
    549a:	df 4f       	sbci	r29, 0xFF	; 255
    549c:	e8 83       	st	Y, r30
    549e:	cd 5d       	subi	r28, 0xDD	; 221
    54a0:	d0 40       	sbci	r29, 0x00	; 0
    54a2:	cf 52       	subi	r28, 0x2F	; 47
    54a4:	df 4f       	sbci	r29, 0xFF	; 255
    54a6:	f8 81       	ld	r31, Y
    54a8:	c1 5d       	subi	r28, 0xD1	; 209
    54aa:	d0 40       	sbci	r29, 0x00	; 0
    54ac:	a5 96       	adiw	r28, 0x25	; 37
    54ae:	0f ad       	ldd	r16, Y+63	; 0x3f
    54b0:	a5 97       	sbiw	r28, 0x25	; 37
    54b2:	f0 17       	cp	r31, r16
    54b4:	28 f0       	brcs	.+10     	; 0x54c0 <Timer_PollingDelay+0x15d0>
    54b6:	c3 52       	subi	r28, 0x23	; 35
    54b8:	df 4f       	sbci	r29, 0xFF	; 255
    54ba:	18 82       	st	Y, r1
    54bc:	cd 5d       	subi	r28, 0xDD	; 221
    54be:	d0 40       	sbci	r29, 0x00	; 0
    54c0:	c6 52       	subi	r28, 0x26	; 38
    54c2:	df 4f       	sbci	r29, 0xFF	; 255
    54c4:	18 81       	ld	r17, Y
    54c6:	ca 5d       	subi	r28, 0xDA	; 218
    54c8:	d0 40       	sbci	r29, 0x00	; 0
    54ca:	cf 52       	subi	r28, 0x2F	; 47
    54cc:	df 4f       	sbci	r29, 0xFF	; 255
    54ce:	28 81       	ld	r18, Y
    54d0:	c1 5d       	subi	r28, 0xD1	; 209
    54d2:	d0 40       	sbci	r29, 0x00	; 0
    54d4:	12 0f       	add	r17, r18
    54d6:	c2 52       	subi	r28, 0x22	; 34
    54d8:	df 4f       	sbci	r29, 0xFF	; 255
    54da:	18 83       	st	Y, r17
    54dc:	ce 5d       	subi	r28, 0xDE	; 222
    54de:	d0 40       	sbci	r29, 0x00	; 0
    54e0:	31 e0       	ldi	r19, 0x01	; 1
    54e2:	c1 52       	subi	r28, 0x21	; 33
    54e4:	df 4f       	sbci	r29, 0xFF	; 255
    54e6:	38 83       	st	Y, r19
    54e8:	cf 5d       	subi	r28, 0xDF	; 223
    54ea:	d0 40       	sbci	r29, 0x00	; 0
    54ec:	c2 52       	subi	r28, 0x22	; 34
    54ee:	df 4f       	sbci	r29, 0xFF	; 255
    54f0:	48 81       	ld	r20, Y
    54f2:	ce 5d       	subi	r28, 0xDE	; 222
    54f4:	d0 40       	sbci	r29, 0x00	; 0
    54f6:	cf 52       	subi	r28, 0x2F	; 47
    54f8:	df 4f       	sbci	r29, 0xFF	; 255
    54fa:	58 81       	ld	r21, Y
    54fc:	c1 5d       	subi	r28, 0xD1	; 209
    54fe:	d0 40       	sbci	r29, 0x00	; 0
    5500:	45 17       	cp	r20, r21
    5502:	28 f0       	brcs	.+10     	; 0x550e <Timer_PollingDelay+0x161e>
    5504:	c1 52       	subi	r28, 0x21	; 33
    5506:	df 4f       	sbci	r29, 0xFF	; 255
    5508:	18 82       	st	Y, r1
    550a:	cf 5d       	subi	r28, 0xDF	; 223
    550c:	d0 40       	sbci	r29, 0x00	; 0
    550e:	c3 52       	subi	r28, 0x23	; 35
    5510:	df 4f       	sbci	r29, 0xFF	; 255
    5512:	68 81       	ld	r22, Y
    5514:	cd 5d       	subi	r28, 0xDD	; 221
    5516:	d0 40       	sbci	r29, 0x00	; 0
    5518:	c1 52       	subi	r28, 0x21	; 33
    551a:	df 4f       	sbci	r29, 0xFF	; 255
    551c:	78 81       	ld	r23, Y
    551e:	cf 5d       	subi	r28, 0xDF	; 223
    5520:	d0 40       	sbci	r29, 0x00	; 0
    5522:	67 2b       	or	r22, r23
    5524:	c3 52       	subi	r28, 0x23	; 35
    5526:	df 4f       	sbci	r29, 0xFF	; 255
    5528:	68 83       	st	Y, r22
    552a:	cd 5d       	subi	r28, 0xDD	; 221
    552c:	d0 40       	sbci	r29, 0x00	; 0
    552e:	c2 52       	subi	r28, 0x22	; 34
    5530:	df 4f       	sbci	r29, 0xFF	; 255
    5532:	88 81       	ld	r24, Y
    5534:	ce 5d       	subi	r28, 0xDE	; 222
    5536:	d0 40       	sbci	r29, 0x00	; 0
    5538:	cf 52       	subi	r28, 0x2F	; 47
    553a:	df 4f       	sbci	r29, 0xFF	; 255
    553c:	88 83       	st	Y, r24
    553e:	c1 5d       	subi	r28, 0xD1	; 209
    5540:	d0 40       	sbci	r29, 0x00	; 0
    5542:	a6 96       	adiw	r28, 0x26	; 38
    5544:	9f ad       	ldd	r25, Y+63	; 0x3f
    5546:	a6 97       	sbiw	r28, 0x26	; 38
    5548:	6e 96       	adiw	r28, 0x1e	; 30
    554a:	ef ad       	ldd	r30, Y+63	; 0x3f
    554c:	6e 97       	sbiw	r28, 0x1e	; 30
    554e:	9e 0f       	add	r25, r30
    5550:	ce 52       	subi	r28, 0x2E	; 46
    5552:	df 4f       	sbci	r29, 0xFF	; 255
    5554:	98 83       	st	Y, r25
    5556:	c2 5d       	subi	r28, 0xD2	; 210
    5558:	d0 40       	sbci	r29, 0x00	; 0
    555a:	f1 e0       	ldi	r31, 0x01	; 1
    555c:	c0 52       	subi	r28, 0x20	; 32
    555e:	df 4f       	sbci	r29, 0xFF	; 255
    5560:	f8 83       	st	Y, r31
    5562:	c0 5e       	subi	r28, 0xE0	; 224
    5564:	d0 40       	sbci	r29, 0x00	; 0
    5566:	ce 52       	subi	r28, 0x2E	; 46
    5568:	df 4f       	sbci	r29, 0xFF	; 255
    556a:	08 81       	ld	r16, Y
    556c:	c2 5d       	subi	r28, 0xD2	; 210
    556e:	d0 40       	sbci	r29, 0x00	; 0
    5570:	a6 96       	adiw	r28, 0x26	; 38
    5572:	1f ad       	ldd	r17, Y+63	; 0x3f
    5574:	a6 97       	sbiw	r28, 0x26	; 38
    5576:	01 17       	cp	r16, r17
    5578:	28 f0       	brcs	.+10     	; 0x5584 <Timer_PollingDelay+0x1694>
    557a:	c0 52       	subi	r28, 0x20	; 32
    557c:	df 4f       	sbci	r29, 0xFF	; 255
    557e:	18 82       	st	Y, r1
    5580:	c0 5e       	subi	r28, 0xE0	; 224
    5582:	d0 40       	sbci	r29, 0x00	; 0
    5584:	c3 52       	subi	r28, 0x23	; 35
    5586:	df 4f       	sbci	r29, 0xFF	; 255
    5588:	28 81       	ld	r18, Y
    558a:	cd 5d       	subi	r28, 0xDD	; 221
    558c:	d0 40       	sbci	r29, 0x00	; 0
    558e:	ce 52       	subi	r28, 0x2E	; 46
    5590:	df 4f       	sbci	r29, 0xFF	; 255
    5592:	38 81       	ld	r19, Y
    5594:	c2 5d       	subi	r28, 0xD2	; 210
    5596:	d0 40       	sbci	r29, 0x00	; 0
    5598:	23 0f       	add	r18, r19
    559a:	cf 51       	subi	r28, 0x1F	; 31
    559c:	df 4f       	sbci	r29, 0xFF	; 255
    559e:	28 83       	st	Y, r18
    55a0:	c1 5e       	subi	r28, 0xE1	; 225
    55a2:	d0 40       	sbci	r29, 0x00	; 0
    55a4:	41 e0       	ldi	r20, 0x01	; 1
    55a6:	ce 51       	subi	r28, 0x1E	; 30
    55a8:	df 4f       	sbci	r29, 0xFF	; 255
    55aa:	48 83       	st	Y, r20
    55ac:	c2 5e       	subi	r28, 0xE2	; 226
    55ae:	d0 40       	sbci	r29, 0x00	; 0
    55b0:	cf 51       	subi	r28, 0x1F	; 31
    55b2:	df 4f       	sbci	r29, 0xFF	; 255
    55b4:	58 81       	ld	r21, Y
    55b6:	c1 5e       	subi	r28, 0xE1	; 225
    55b8:	d0 40       	sbci	r29, 0x00	; 0
    55ba:	ce 52       	subi	r28, 0x2E	; 46
    55bc:	df 4f       	sbci	r29, 0xFF	; 255
    55be:	68 81       	ld	r22, Y
    55c0:	c2 5d       	subi	r28, 0xD2	; 210
    55c2:	d0 40       	sbci	r29, 0x00	; 0
    55c4:	56 17       	cp	r21, r22
    55c6:	28 f0       	brcs	.+10     	; 0x55d2 <Timer_PollingDelay+0x16e2>
    55c8:	ce 51       	subi	r28, 0x1E	; 30
    55ca:	df 4f       	sbci	r29, 0xFF	; 255
    55cc:	18 82       	st	Y, r1
    55ce:	c2 5e       	subi	r28, 0xE2	; 226
    55d0:	d0 40       	sbci	r29, 0x00	; 0
    55d2:	c0 52       	subi	r28, 0x20	; 32
    55d4:	df 4f       	sbci	r29, 0xFF	; 255
    55d6:	78 81       	ld	r23, Y
    55d8:	c0 5e       	subi	r28, 0xE0	; 224
    55da:	d0 40       	sbci	r29, 0x00	; 0
    55dc:	ce 51       	subi	r28, 0x1E	; 30
    55de:	df 4f       	sbci	r29, 0xFF	; 255
    55e0:	88 81       	ld	r24, Y
    55e2:	c2 5e       	subi	r28, 0xE2	; 226
    55e4:	d0 40       	sbci	r29, 0x00	; 0
    55e6:	78 2b       	or	r23, r24
    55e8:	c0 52       	subi	r28, 0x20	; 32
    55ea:	df 4f       	sbci	r29, 0xFF	; 255
    55ec:	78 83       	st	Y, r23
    55ee:	c0 5e       	subi	r28, 0xE0	; 224
    55f0:	d0 40       	sbci	r29, 0x00	; 0
    55f2:	cf 51       	subi	r28, 0x1F	; 31
    55f4:	df 4f       	sbci	r29, 0xFF	; 255
    55f6:	98 81       	ld	r25, Y
    55f8:	c1 5e       	subi	r28, 0xE1	; 225
    55fa:	d0 40       	sbci	r29, 0x00	; 0
    55fc:	ce 52       	subi	r28, 0x2E	; 46
    55fe:	df 4f       	sbci	r29, 0xFF	; 255
    5600:	98 83       	st	Y, r25
    5602:	c2 5d       	subi	r28, 0xD2	; 210
    5604:	d0 40       	sbci	r29, 0x00	; 0
    5606:	a7 96       	adiw	r28, 0x27	; 39
    5608:	ef ad       	ldd	r30, Y+63	; 0x3f
    560a:	a7 97       	sbiw	r28, 0x27	; 39
    560c:	6f 96       	adiw	r28, 0x1f	; 31
    560e:	ff ad       	ldd	r31, Y+63	; 0x3f
    5610:	6f 97       	sbiw	r28, 0x1f	; 31
    5612:	ef 0f       	add	r30, r31
    5614:	cd 52       	subi	r28, 0x2D	; 45
    5616:	df 4f       	sbci	r29, 0xFF	; 255
    5618:	e8 83       	st	Y, r30
    561a:	c3 5d       	subi	r28, 0xD3	; 211
    561c:	d0 40       	sbci	r29, 0x00	; 0
    561e:	01 e0       	ldi	r16, 0x01	; 1
    5620:	cd 51       	subi	r28, 0x1D	; 29
    5622:	df 4f       	sbci	r29, 0xFF	; 255
    5624:	08 83       	st	Y, r16
    5626:	c3 5e       	subi	r28, 0xE3	; 227
    5628:	d0 40       	sbci	r29, 0x00	; 0
    562a:	cd 52       	subi	r28, 0x2D	; 45
    562c:	df 4f       	sbci	r29, 0xFF	; 255
    562e:	18 81       	ld	r17, Y
    5630:	c3 5d       	subi	r28, 0xD3	; 211
    5632:	d0 40       	sbci	r29, 0x00	; 0
    5634:	a7 96       	adiw	r28, 0x27	; 39
    5636:	2f ad       	ldd	r18, Y+63	; 0x3f
    5638:	a7 97       	sbiw	r28, 0x27	; 39
    563a:	12 17       	cp	r17, r18
    563c:	28 f0       	brcs	.+10     	; 0x5648 <Timer_PollingDelay+0x1758>
    563e:	cd 51       	subi	r28, 0x1D	; 29
    5640:	df 4f       	sbci	r29, 0xFF	; 255
    5642:	18 82       	st	Y, r1
    5644:	c3 5e       	subi	r28, 0xE3	; 227
    5646:	d0 40       	sbci	r29, 0x00	; 0
    5648:	c0 52       	subi	r28, 0x20	; 32
    564a:	df 4f       	sbci	r29, 0xFF	; 255
    564c:	38 81       	ld	r19, Y
    564e:	c0 5e       	subi	r28, 0xE0	; 224
    5650:	d0 40       	sbci	r29, 0x00	; 0
    5652:	cd 52       	subi	r28, 0x2D	; 45
    5654:	df 4f       	sbci	r29, 0xFF	; 255
    5656:	48 81       	ld	r20, Y
    5658:	c3 5d       	subi	r28, 0xD3	; 211
    565a:	d0 40       	sbci	r29, 0x00	; 0
    565c:	34 0f       	add	r19, r20
    565e:	cc 51       	subi	r28, 0x1C	; 28
    5660:	df 4f       	sbci	r29, 0xFF	; 255
    5662:	38 83       	st	Y, r19
    5664:	c4 5e       	subi	r28, 0xE4	; 228
    5666:	d0 40       	sbci	r29, 0x00	; 0
    5668:	51 e0       	ldi	r21, 0x01	; 1
    566a:	cb 51       	subi	r28, 0x1B	; 27
    566c:	df 4f       	sbci	r29, 0xFF	; 255
    566e:	58 83       	st	Y, r21
    5670:	c5 5e       	subi	r28, 0xE5	; 229
    5672:	d0 40       	sbci	r29, 0x00	; 0
    5674:	cc 51       	subi	r28, 0x1C	; 28
    5676:	df 4f       	sbci	r29, 0xFF	; 255
    5678:	68 81       	ld	r22, Y
    567a:	c4 5e       	subi	r28, 0xE4	; 228
    567c:	d0 40       	sbci	r29, 0x00	; 0
    567e:	cd 52       	subi	r28, 0x2D	; 45
    5680:	df 4f       	sbci	r29, 0xFF	; 255
    5682:	78 81       	ld	r23, Y
    5684:	c3 5d       	subi	r28, 0xD3	; 211
    5686:	d0 40       	sbci	r29, 0x00	; 0
    5688:	67 17       	cp	r22, r23
    568a:	28 f0       	brcs	.+10     	; 0x5696 <Timer_PollingDelay+0x17a6>
    568c:	cb 51       	subi	r28, 0x1B	; 27
    568e:	df 4f       	sbci	r29, 0xFF	; 255
    5690:	18 82       	st	Y, r1
    5692:	c5 5e       	subi	r28, 0xE5	; 229
    5694:	d0 40       	sbci	r29, 0x00	; 0
    5696:	cd 51       	subi	r28, 0x1D	; 29
    5698:	df 4f       	sbci	r29, 0xFF	; 255
    569a:	88 81       	ld	r24, Y
    569c:	c3 5e       	subi	r28, 0xE3	; 227
    569e:	d0 40       	sbci	r29, 0x00	; 0
    56a0:	cb 51       	subi	r28, 0x1B	; 27
    56a2:	df 4f       	sbci	r29, 0xFF	; 255
    56a4:	98 81       	ld	r25, Y
    56a6:	c5 5e       	subi	r28, 0xE5	; 229
    56a8:	d0 40       	sbci	r29, 0x00	; 0
    56aa:	89 2b       	or	r24, r25
    56ac:	cd 51       	subi	r28, 0x1D	; 29
    56ae:	df 4f       	sbci	r29, 0xFF	; 255
    56b0:	88 83       	st	Y, r24
    56b2:	c3 5e       	subi	r28, 0xE3	; 227
    56b4:	d0 40       	sbci	r29, 0x00	; 0
    56b6:	cc 51       	subi	r28, 0x1C	; 28
    56b8:	df 4f       	sbci	r29, 0xFF	; 255
    56ba:	e8 81       	ld	r30, Y
    56bc:	c4 5e       	subi	r28, 0xE4	; 228
    56be:	d0 40       	sbci	r29, 0x00	; 0
    56c0:	cd 52       	subi	r28, 0x2D	; 45
    56c2:	df 4f       	sbci	r29, 0xFF	; 255
    56c4:	e8 83       	st	Y, r30
    56c6:	c3 5d       	subi	r28, 0xD3	; 211
    56c8:	d0 40       	sbci	r29, 0x00	; 0
    56ca:	a8 96       	adiw	r28, 0x28	; 40
    56cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    56ce:	a8 97       	sbiw	r28, 0x28	; 40
    56d0:	a0 96       	adiw	r28, 0x20	; 32
    56d2:	0f ad       	ldd	r16, Y+63	; 0x3f
    56d4:	a0 97       	sbiw	r28, 0x20	; 32
    56d6:	f0 0f       	add	r31, r16
    56d8:	cc 52       	subi	r28, 0x2C	; 44
    56da:	df 4f       	sbci	r29, 0xFF	; 255
    56dc:	f8 83       	st	Y, r31
    56de:	c4 5d       	subi	r28, 0xD4	; 212
    56e0:	d0 40       	sbci	r29, 0x00	; 0
    56e2:	11 e0       	ldi	r17, 0x01	; 1
    56e4:	ca 51       	subi	r28, 0x1A	; 26
    56e6:	df 4f       	sbci	r29, 0xFF	; 255
    56e8:	18 83       	st	Y, r17
    56ea:	c6 5e       	subi	r28, 0xE6	; 230
    56ec:	d0 40       	sbci	r29, 0x00	; 0
    56ee:	cc 52       	subi	r28, 0x2C	; 44
    56f0:	df 4f       	sbci	r29, 0xFF	; 255
    56f2:	28 81       	ld	r18, Y
    56f4:	c4 5d       	subi	r28, 0xD4	; 212
    56f6:	d0 40       	sbci	r29, 0x00	; 0
    56f8:	a8 96       	adiw	r28, 0x28	; 40
    56fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    56fc:	a8 97       	sbiw	r28, 0x28	; 40
    56fe:	23 17       	cp	r18, r19
    5700:	28 f0       	brcs	.+10     	; 0x570c <Timer_PollingDelay+0x181c>
    5702:	ca 51       	subi	r28, 0x1A	; 26
    5704:	df 4f       	sbci	r29, 0xFF	; 255
    5706:	18 82       	st	Y, r1
    5708:	c6 5e       	subi	r28, 0xE6	; 230
    570a:	d0 40       	sbci	r29, 0x00	; 0
    570c:	cd 51       	subi	r28, 0x1D	; 29
    570e:	df 4f       	sbci	r29, 0xFF	; 255
    5710:	48 81       	ld	r20, Y
    5712:	c3 5e       	subi	r28, 0xE3	; 227
    5714:	d0 40       	sbci	r29, 0x00	; 0
    5716:	cc 52       	subi	r28, 0x2C	; 44
    5718:	df 4f       	sbci	r29, 0xFF	; 255
    571a:	58 81       	ld	r21, Y
    571c:	c4 5d       	subi	r28, 0xD4	; 212
    571e:	d0 40       	sbci	r29, 0x00	; 0
    5720:	45 0f       	add	r20, r21
    5722:	c9 51       	subi	r28, 0x19	; 25
    5724:	df 4f       	sbci	r29, 0xFF	; 255
    5726:	48 83       	st	Y, r20
    5728:	c7 5e       	subi	r28, 0xE7	; 231
    572a:	d0 40       	sbci	r29, 0x00	; 0
    572c:	61 e0       	ldi	r22, 0x01	; 1
    572e:	c8 51       	subi	r28, 0x18	; 24
    5730:	df 4f       	sbci	r29, 0xFF	; 255
    5732:	68 83       	st	Y, r22
    5734:	c8 5e       	subi	r28, 0xE8	; 232
    5736:	d0 40       	sbci	r29, 0x00	; 0
    5738:	c9 51       	subi	r28, 0x19	; 25
    573a:	df 4f       	sbci	r29, 0xFF	; 255
    573c:	78 81       	ld	r23, Y
    573e:	c7 5e       	subi	r28, 0xE7	; 231
    5740:	d0 40       	sbci	r29, 0x00	; 0
    5742:	cc 52       	subi	r28, 0x2C	; 44
    5744:	df 4f       	sbci	r29, 0xFF	; 255
    5746:	88 81       	ld	r24, Y
    5748:	c4 5d       	subi	r28, 0xD4	; 212
    574a:	d0 40       	sbci	r29, 0x00	; 0
    574c:	78 17       	cp	r23, r24
    574e:	28 f0       	brcs	.+10     	; 0x575a <Timer_PollingDelay+0x186a>
    5750:	c8 51       	subi	r28, 0x18	; 24
    5752:	df 4f       	sbci	r29, 0xFF	; 255
    5754:	18 82       	st	Y, r1
    5756:	c8 5e       	subi	r28, 0xE8	; 232
    5758:	d0 40       	sbci	r29, 0x00	; 0
    575a:	ca 51       	subi	r28, 0x1A	; 26
    575c:	df 4f       	sbci	r29, 0xFF	; 255
    575e:	98 81       	ld	r25, Y
    5760:	c6 5e       	subi	r28, 0xE6	; 230
    5762:	d0 40       	sbci	r29, 0x00	; 0
    5764:	c8 51       	subi	r28, 0x18	; 24
    5766:	df 4f       	sbci	r29, 0xFF	; 255
    5768:	e8 81       	ld	r30, Y
    576a:	c8 5e       	subi	r28, 0xE8	; 232
    576c:	d0 40       	sbci	r29, 0x00	; 0
    576e:	9e 2b       	or	r25, r30
    5770:	ca 51       	subi	r28, 0x1A	; 26
    5772:	df 4f       	sbci	r29, 0xFF	; 255
    5774:	98 83       	st	Y, r25
    5776:	c6 5e       	subi	r28, 0xE6	; 230
    5778:	d0 40       	sbci	r29, 0x00	; 0
    577a:	c9 51       	subi	r28, 0x19	; 25
    577c:	df 4f       	sbci	r29, 0xFF	; 255
    577e:	f8 81       	ld	r31, Y
    5780:	c7 5e       	subi	r28, 0xE7	; 231
    5782:	d0 40       	sbci	r29, 0x00	; 0
    5784:	cc 52       	subi	r28, 0x2C	; 44
    5786:	df 4f       	sbci	r29, 0xFF	; 255
    5788:	f8 83       	st	Y, r31
    578a:	c4 5d       	subi	r28, 0xD4	; 212
    578c:	d0 40       	sbci	r29, 0x00	; 0
    578e:	a9 96       	adiw	r28, 0x29	; 41
    5790:	0f ad       	ldd	r16, Y+63	; 0x3f
    5792:	a9 97       	sbiw	r28, 0x29	; 41
    5794:	a1 96       	adiw	r28, 0x21	; 33
    5796:	1f ad       	ldd	r17, Y+63	; 0x3f
    5798:	a1 97       	sbiw	r28, 0x21	; 33
    579a:	01 0f       	add	r16, r17
    579c:	cb 52       	subi	r28, 0x2B	; 43
    579e:	df 4f       	sbci	r29, 0xFF	; 255
    57a0:	08 83       	st	Y, r16
    57a2:	c5 5d       	subi	r28, 0xD5	; 213
    57a4:	d0 40       	sbci	r29, 0x00	; 0
    57a6:	ca 51       	subi	r28, 0x1A	; 26
    57a8:	df 4f       	sbci	r29, 0xFF	; 255
    57aa:	88 81       	ld	r24, Y
    57ac:	c6 5e       	subi	r28, 0xE6	; 230
    57ae:	d0 40       	sbci	r29, 0x00	; 0
    57b0:	cb 52       	subi	r28, 0x2B	; 43
    57b2:	df 4f       	sbci	r29, 0xFF	; 255
    57b4:	28 81       	ld	r18, Y
    57b6:	c5 5d       	subi	r28, 0xD5	; 213
    57b8:	d0 40       	sbci	r29, 0x00	; 0
    57ba:	82 0f       	add	r24, r18
    57bc:	cb 52       	subi	r28, 0x2B	; 43
    57be:	df 4f       	sbci	r29, 0xFF	; 255
    57c0:	88 83       	st	Y, r24
    57c2:	c5 5d       	subi	r28, 0xD5	; 213
    57c4:	d0 40       	sbci	r29, 0x00	; 0
    57c6:	c2 53       	subi	r28, 0x32	; 50
    57c8:	df 4f       	sbci	r29, 0xFF	; 255
    57ca:	a8 80       	ld	r10, Y
    57cc:	ce 5c       	subi	r28, 0xCE	; 206
    57ce:	d0 40       	sbci	r29, 0x00	; 0
    57d0:	c1 53       	subi	r28, 0x31	; 49
    57d2:	df 4f       	sbci	r29, 0xFF	; 255
    57d4:	b8 80       	ld	r11, Y
    57d6:	cf 5c       	subi	r28, 0xCF	; 207
    57d8:	d0 40       	sbci	r29, 0x00	; 0
    57da:	c0 53       	subi	r28, 0x30	; 48
    57dc:	df 4f       	sbci	r29, 0xFF	; 255
    57de:	c8 80       	ld	r12, Y
    57e0:	c0 5d       	subi	r28, 0xD0	; 208
    57e2:	d0 40       	sbci	r29, 0x00	; 0
    57e4:	cf 52       	subi	r28, 0x2F	; 47
    57e6:	df 4f       	sbci	r29, 0xFF	; 255
    57e8:	d8 80       	ld	r13, Y
    57ea:	c1 5d       	subi	r28, 0xD1	; 209
    57ec:	d0 40       	sbci	r29, 0x00	; 0
    57ee:	ce 52       	subi	r28, 0x2E	; 46
    57f0:	df 4f       	sbci	r29, 0xFF	; 255
    57f2:	e8 80       	ld	r14, Y
    57f4:	c2 5d       	subi	r28, 0xD2	; 210
    57f6:	d0 40       	sbci	r29, 0x00	; 0
    57f8:	cd 52       	subi	r28, 0x2D	; 45
    57fa:	df 4f       	sbci	r29, 0xFF	; 255
    57fc:	f8 80       	ld	r15, Y
    57fe:	c3 5d       	subi	r28, 0xD3	; 211
    5800:	d0 40       	sbci	r29, 0x00	; 0
    5802:	cc 52       	subi	r28, 0x2C	; 44
    5804:	df 4f       	sbci	r29, 0xFF	; 255
    5806:	08 81       	ld	r16, Y
    5808:	c4 5d       	subi	r28, 0xD4	; 212
    580a:	d0 40       	sbci	r29, 0x00	; 0
    580c:	cb 52       	subi	r28, 0x2B	; 43
    580e:	df 4f       	sbci	r29, 0xFF	; 255
    5810:	18 81       	ld	r17, Y
    5812:	c5 5d       	subi	r28, 0xD5	; 213
    5814:	d0 40       	sbci	r29, 0x00	; 0
    5816:	80 91 30 02 	lds	r24, 0x0230
    581a:	88 2f       	mov	r24, r24
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	9c 01       	movw	r18, r24
    5820:	2f 5f       	subi	r18, 0xFF	; 255
    5822:	3f 4f       	sbci	r19, 0xFF	; 255
    5824:	c9 01       	movw	r24, r18
    5826:	99 0f       	add	r25, r25
    5828:	88 0b       	sbc	r24, r24
    582a:	98 2f       	mov	r25, r24
    582c:	19 01       	movw	r2, r18
    582e:	48 2e       	mov	r4, r24
    5830:	58 2e       	mov	r5, r24
    5832:	68 2e       	mov	r6, r24
    5834:	78 2e       	mov	r7, r24
    5836:	88 2e       	mov	r8, r24
    5838:	98 2e       	mov	r9, r24
    583a:	2a 2d       	mov	r18, r10
    583c:	3b 2d       	mov	r19, r11
    583e:	4c 2d       	mov	r20, r12
    5840:	5d 2d       	mov	r21, r13
    5842:	6e 2d       	mov	r22, r14
    5844:	7f 2d       	mov	r23, r15
    5846:	80 2f       	mov	r24, r16
    5848:	91 2f       	mov	r25, r17
    584a:	a2 2c       	mov	r10, r2
    584c:	b3 2c       	mov	r11, r3
    584e:	c4 2c       	mov	r12, r4
    5850:	d5 2c       	mov	r13, r5
    5852:	e6 2c       	mov	r14, r6
    5854:	f7 2c       	mov	r15, r7
    5856:	08 2d       	mov	r16, r8
    5858:	19 2d       	mov	r17, r9
    585a:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    585e:	a2 2e       	mov	r10, r18
    5860:	b3 2e       	mov	r11, r19
    5862:	c4 2e       	mov	r12, r20
    5864:	d5 2e       	mov	r13, r21
    5866:	e6 2e       	mov	r14, r22
    5868:	f7 2e       	mov	r15, r23
    586a:	08 2f       	mov	r16, r24
    586c:	19 2f       	mov	r17, r25
    586e:	2a 2d       	mov	r18, r10
    5870:	3b 2d       	mov	r19, r11
    5872:	4c 2d       	mov	r20, r12
    5874:	5d 2d       	mov	r21, r13
    5876:	6e 2d       	mov	r22, r14
    5878:	7f 2d       	mov	r23, r15
    587a:	80 2f       	mov	r24, r16
    587c:	91 2f       	mov	r25, r17
    587e:	2a 83       	std	Y+2, r18	; 0x02
    5880:	3b 83       	std	Y+3, r19	; 0x03
    5882:	4c 83       	std	Y+4, r20	; 0x04
    5884:	5d 83       	std	Y+5, r21	; 0x05
																				+ Global_u8OCR0_Value ) / ( Global_u8OCR0_Value + 1 );						/*	Total Overflows	*/
										TCNT0 = ( Global_u8OCR0_Value + 1 ) -
    5886:	42 e5       	ldi	r20, 0x52	; 82
    5888:	50 e0       	ldi	r21, 0x00	; 0
    588a:	69 96       	adiw	r28, 0x19	; 25
    588c:	5f af       	std	Y+63, r21	; 0x3f
    588e:	4e af       	std	Y+62, r20	; 0x3e
    5890:	69 97       	sbiw	r28, 0x19	; 25
    5892:	50 91 30 02 	lds	r21, 0x0230
    5896:	67 96       	adiw	r28, 0x17	; 23
    5898:	5f af       	std	Y+63, r21	; 0x3f
    589a:	67 97       	sbiw	r28, 0x17	; 23
    589c:	89 85       	ldd	r24, Y+9	; 0x09
    589e:	9a 85       	ldd	r25, Y+10	; 0x0a
    58a0:	5c 01       	movw	r10, r24
    58a2:	cc 24       	eor	r12, r12
    58a4:	dd 24       	eor	r13, r13
    58a6:	ee 24       	eor	r14, r14
    58a8:	ff 24       	eor	r15, r15
    58aa:	87 01       	movw	r16, r14
    58ac:	80 91 32 02 	lds	r24, 0x0232
    58b0:	90 91 33 02 	lds	r25, 0x0233
    58b4:	a0 91 34 02 	lds	r26, 0x0234
    58b8:	b0 91 35 02 	lds	r27, 0x0235
    58bc:	1c 01       	movw	r2, r24
    58be:	2d 01       	movw	r4, r26
    58c0:	66 24       	eor	r6, r6
    58c2:	77 24       	eor	r7, r7
    58c4:	43 01       	movw	r8, r6
    58c6:	2a 2d       	mov	r18, r10
    58c8:	3b 2d       	mov	r19, r11
    58ca:	4c 2d       	mov	r20, r12
    58cc:	5d 2d       	mov	r21, r13
    58ce:	6e 2d       	mov	r22, r14
    58d0:	7f 2d       	mov	r23, r15
    58d2:	80 2f       	mov	r24, r16
    58d4:	91 2f       	mov	r25, r17
    58d6:	a2 2c       	mov	r10, r2
    58d8:	b3 2c       	mov	r11, r3
    58da:	c4 2c       	mov	r12, r4
    58dc:	d5 2c       	mov	r13, r5
    58de:	e6 2c       	mov	r14, r6
    58e0:	f7 2c       	mov	r15, r7
    58e2:	08 2d       	mov	r16, r8
    58e4:	19 2d       	mov	r17, r9
    58e6:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    58ea:	22 2e       	mov	r2, r18
    58ec:	33 2e       	mov	r3, r19
    58ee:	44 2e       	mov	r4, r20
    58f0:	55 2e       	mov	r5, r21
    58f2:	66 2e       	mov	r6, r22
    58f4:	77 2e       	mov	r7, r23
    58f6:	88 2e       	mov	r8, r24
    58f8:	99 2e       	mov	r9, r25
    58fa:	a2 2c       	mov	r10, r2
    58fc:	b3 2c       	mov	r11, r3
    58fe:	c4 2c       	mov	r12, r4
    5900:	d5 2c       	mov	r13, r5
    5902:	e6 2c       	mov	r14, r6
    5904:	f7 2c       	mov	r15, r7
    5906:	08 2d       	mov	r16, r8
    5908:	19 2d       	mov	r17, r9
    590a:	2a 2d       	mov	r18, r10
    590c:	3b 2d       	mov	r19, r11
    590e:	4c 2d       	mov	r20, r12
    5910:	5d 2d       	mov	r21, r13
    5912:	6e 2d       	mov	r22, r14
    5914:	7f 2d       	mov	r23, r15
    5916:	80 2f       	mov	r24, r16
    5918:	91 2f       	mov	r25, r17
    591a:	0f 2e       	mov	r0, r31
    591c:	f8 ee       	ldi	r31, 0xE8	; 232
    591e:	af 2e       	mov	r10, r31
    5920:	f0 2d       	mov	r31, r0
    5922:	0f 2e       	mov	r0, r31
    5924:	f3 e0       	ldi	r31, 0x03	; 3
    5926:	bf 2e       	mov	r11, r31
    5928:	f0 2d       	mov	r31, r0
    592a:	cc 24       	eor	r12, r12
    592c:	dd 24       	eor	r13, r13
    592e:	ee 24       	eor	r14, r14
    5930:	ff 24       	eor	r15, r15
    5932:	00 e0       	ldi	r16, 0x00	; 0
    5934:	10 e0       	ldi	r17, 0x00	; 0
    5936:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    593a:	a2 2e       	mov	r10, r18
    593c:	b3 2e       	mov	r11, r19
    593e:	c4 2e       	mov	r12, r20
    5940:	d5 2e       	mov	r13, r21
    5942:	e6 2e       	mov	r14, r22
    5944:	f7 2e       	mov	r15, r23
    5946:	08 2f       	mov	r16, r24
    5948:	19 2f       	mov	r17, r25
    594a:	2a 2c       	mov	r2, r10
    594c:	3b 2c       	mov	r3, r11
    594e:	4c 2c       	mov	r4, r12
    5950:	5d 2c       	mov	r5, r13
    5952:	6e 2c       	mov	r6, r14
    5954:	7f 2c       	mov	r7, r15
    5956:	80 2e       	mov	r8, r16
    5958:	91 2e       	mov	r9, r17
    595a:	80 91 30 02 	lds	r24, 0x0230
    595e:	88 2f       	mov	r24, r24
    5960:	90 e0       	ldi	r25, 0x00	; 0
    5962:	01 96       	adiw	r24, 0x01	; 1
    5964:	8c 01       	movw	r16, r24
    5966:	20 e0       	ldi	r18, 0x00	; 0
    5968:	30 e0       	ldi	r19, 0x00	; 0
    596a:	40 e0       	ldi	r20, 0x00	; 0
    596c:	50 e0       	ldi	r21, 0x00	; 0
    596e:	60 e0       	ldi	r22, 0x00	; 0
    5970:	70 e0       	ldi	r23, 0x00	; 0
    5972:	2f 96       	adiw	r28, 0x0f	; 15
    5974:	0f af       	std	Y+63, r16	; 0x3f
    5976:	2f 97       	sbiw	r28, 0x0f	; 15
    5978:	60 96       	adiw	r28, 0x10	; 16
    597a:	1f af       	std	Y+63, r17	; 0x3f
    597c:	60 97       	sbiw	r28, 0x10	; 16
    597e:	61 96       	adiw	r28, 0x11	; 17
    5980:	2f af       	std	Y+63, r18	; 0x3f
    5982:	61 97       	sbiw	r28, 0x11	; 17
    5984:	62 96       	adiw	r28, 0x12	; 18
    5986:	3f af       	std	Y+63, r19	; 0x3f
    5988:	62 97       	sbiw	r28, 0x12	; 18
    598a:	63 96       	adiw	r28, 0x13	; 19
    598c:	4f af       	std	Y+63, r20	; 0x3f
    598e:	63 97       	sbiw	r28, 0x13	; 19
    5990:	64 96       	adiw	r28, 0x14	; 20
    5992:	5f af       	std	Y+63, r21	; 0x3f
    5994:	64 97       	sbiw	r28, 0x14	; 20
    5996:	65 96       	adiw	r28, 0x15	; 21
    5998:	6f af       	std	Y+63, r22	; 0x3f
    599a:	65 97       	sbiw	r28, 0x15	; 21
    599c:	66 96       	adiw	r28, 0x16	; 22
    599e:	7f af       	std	Y+63, r23	; 0x3f
    59a0:	66 97       	sbiw	r28, 0x16	; 22
    59a2:	22 2d       	mov	r18, r2
    59a4:	33 2d       	mov	r19, r3
    59a6:	44 2d       	mov	r20, r4
    59a8:	55 2d       	mov	r21, r5
    59aa:	66 2d       	mov	r22, r6
    59ac:	77 2d       	mov	r23, r7
    59ae:	88 2d       	mov	r24, r8
    59b0:	99 2d       	mov	r25, r9
    59b2:	2f 96       	adiw	r28, 0x0f	; 15
    59b4:	af ac       	ldd	r10, Y+63	; 0x3f
    59b6:	2f 97       	sbiw	r28, 0x0f	; 15
    59b8:	60 96       	adiw	r28, 0x10	; 16
    59ba:	bf ac       	ldd	r11, Y+63	; 0x3f
    59bc:	60 97       	sbiw	r28, 0x10	; 16
    59be:	61 96       	adiw	r28, 0x11	; 17
    59c0:	cf ac       	ldd	r12, Y+63	; 0x3f
    59c2:	61 97       	sbiw	r28, 0x11	; 17
    59c4:	62 96       	adiw	r28, 0x12	; 18
    59c6:	df ac       	ldd	r13, Y+63	; 0x3f
    59c8:	62 97       	sbiw	r28, 0x12	; 18
    59ca:	63 96       	adiw	r28, 0x13	; 19
    59cc:	ef ac       	ldd	r14, Y+63	; 0x3f
    59ce:	63 97       	sbiw	r28, 0x13	; 19
    59d0:	64 96       	adiw	r28, 0x14	; 20
    59d2:	ff ac       	ldd	r15, Y+63	; 0x3f
    59d4:	64 97       	sbiw	r28, 0x14	; 20
    59d6:	65 96       	adiw	r28, 0x15	; 21
    59d8:	0f ad       	ldd	r16, Y+63	; 0x3f
    59da:	65 97       	sbiw	r28, 0x15	; 21
    59dc:	66 96       	adiw	r28, 0x16	; 22
    59de:	1f ad       	ldd	r17, Y+63	; 0x3f
    59e0:	66 97       	sbiw	r28, 0x16	; 22
    59e2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__umoddi3>
    59e6:	a2 2e       	mov	r10, r18
    59e8:	b3 2e       	mov	r11, r19
    59ea:	c4 2e       	mov	r12, r20
    59ec:	d5 2e       	mov	r13, r21
    59ee:	e6 2e       	mov	r14, r22
    59f0:	f7 2e       	mov	r15, r23
    59f2:	08 2f       	mov	r16, r24
    59f4:	19 2f       	mov	r17, r25
    59f6:	2a 2d       	mov	r18, r10
    59f8:	3b 2d       	mov	r19, r11
    59fa:	4c 2d       	mov	r20, r12
    59fc:	5d 2d       	mov	r21, r13
    59fe:	6e 2d       	mov	r22, r14
    5a00:	7f 2d       	mov	r23, r15
    5a02:	80 2f       	mov	r24, r16
    5a04:	91 2f       	mov	r25, r17
    5a06:	82 2f       	mov	r24, r18
    5a08:	67 96       	adiw	r28, 0x17	; 23
    5a0a:	1f ad       	ldd	r17, Y+63	; 0x3f
    5a0c:	67 97       	sbiw	r28, 0x17	; 23
    5a0e:	18 1b       	sub	r17, r24
    5a10:	81 2f       	mov	r24, r17
    5a12:	8f 5f       	subi	r24, 0xFF	; 255
    5a14:	69 96       	adiw	r28, 0x19	; 25
    5a16:	ee ad       	ldd	r30, Y+62	; 0x3e
    5a18:	ff ad       	ldd	r31, Y+63	; 0x3f
    5a1a:	69 97       	sbiw	r28, 0x19	; 25
    5a1c:	80 83       	st	Z, r24
    5a1e:	1c c0       	rjmp	.+56     	; 0x5a58 <Timer_PollingDelay+0x1b68>
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / ( 1000UL ) ) % (u16)( Global_u8OCR0_Value + 1 ) );	/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER0_BOTTOM )
										{
										while( !(( TIFR >> OCF0_BIT) & BIT0_MASK ) );	/*	Waiting for Timer0 Output Compare flag	*/
    5a20:	e8 e5       	ldi	r30, 0x58	; 88
    5a22:	f0 e0       	ldi	r31, 0x00	; 0
    5a24:	80 81       	ld	r24, Z
    5a26:	86 95       	lsr	r24
    5a28:	88 2f       	mov	r24, r24
    5a2a:	90 e0       	ldi	r25, 0x00	; 0
    5a2c:	81 70       	andi	r24, 0x01	; 1
    5a2e:	90 70       	andi	r25, 0x00	; 0
    5a30:	00 97       	sbiw	r24, 0x00	; 0
    5a32:	b1 f3       	breq	.-20     	; 0x5a20 <Timer_PollingDelay+0x1b30>
										Local_u32OverFlowCounts--;
    5a34:	8a 81       	ldd	r24, Y+2	; 0x02
    5a36:	9b 81       	ldd	r25, Y+3	; 0x03
    5a38:	ac 81       	ldd	r26, Y+4	; 0x04
    5a3a:	bd 81       	ldd	r27, Y+5	; 0x05
    5a3c:	01 97       	sbiw	r24, 0x01	; 1
    5a3e:	a1 09       	sbc	r26, r1
    5a40:	b1 09       	sbc	r27, r1
    5a42:	8a 83       	std	Y+2, r24	; 0x02
    5a44:	9b 83       	std	Y+3, r25	; 0x03
    5a46:	ac 83       	std	Y+4, r26	; 0x04
    5a48:	bd 83       	std	Y+5, r27	; 0x05
										TIFR |= (BIT0_MASK << OCF0_BIT);	/*	Clearing Timer0 Overflow flag	*/
    5a4a:	a8 e5       	ldi	r26, 0x58	; 88
    5a4c:	b0 e0       	ldi	r27, 0x00	; 0
    5a4e:	e8 e5       	ldi	r30, 0x58	; 88
    5a50:	f0 e0       	ldi	r31, 0x00	; 0
    5a52:	80 81       	ld	r24, Z
    5a54:	82 60       	ori	r24, 0x02	; 2
    5a56:	8c 93       	st	X, r24
			case  COMP_INVERTED		:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / ( 1000UL ) )
																				+ Global_u8OCR0_Value ) / ( Global_u8OCR0_Value + 1 );						/*	Total Overflows	*/
										TCNT0 = ( Global_u8OCR0_Value + 1 ) -
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer0_Clk ) / ( 1000UL ) ) % (u16)( Global_u8OCR0_Value + 1 ) );	/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER0_BOTTOM )
    5a58:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    5a5c:	ac 81       	ldd	r26, Y+4	; 0x04
    5a5e:	bd 81       	ldd	r27, Y+5	; 0x05
    5a60:	00 97       	sbiw	r24, 0x00	; 0
    5a62:	a1 05       	cpc	r26, r1
    5a64:	b1 05       	cpc	r27, r1
    5a66:	e1 f6       	brne	.-72     	; 0x5a20 <Timer_PollingDelay+0x1b30>
    5a68:	0c 94 6f 39 	jmp	0x72de	; 0x72de <Timer_PollingDelay+0x33ee>
										while( !(( TIFR >> OCF0_BIT) & BIT0_MASK ) );	/*	Waiting for Timer0 Output Compare flag	*/
										Local_u32OverFlowCounts--;
										TIFR |= (BIT0_MASK << OCF0_BIT);	/*	Clearing Timer0 Overflow flag	*/
										}
										break;
			default		: Local_enuErrorState = ES_OUT_RANGE;
    5a6c:	82 e0       	ldi	r24, 0x02	; 2
    5a6e:	8f 83       	std	Y+7, r24	; 0x07
    5a70:	0c 94 6f 39 	jmp	0x72de	; 0x72de <Timer_PollingDelay+0x33ee>
		}

	}
#endif

	else if( Copy_u8TimerNum == TIMER2 )
    5a74:	88 85       	ldd	r24, Y+8	; 0x08
    5a76:	8b 3c       	cpi	r24, 0xCB	; 203
    5a78:	11 f0       	breq	.+4      	; 0x5a7e <Timer_PollingDelay+0x1b8e>
    5a7a:	0c 94 6d 39 	jmp	0x72da	; 0x72da <Timer_PollingDelay+0x33ea>
	{
		if( Global_u32Timer2_Clk )
    5a7e:	80 91 36 02 	lds	r24, 0x0236
    5a82:	90 91 37 02 	lds	r25, 0x0237
    5a86:	a0 91 38 02 	lds	r26, 0x0238
    5a8a:	b0 91 39 02 	lds	r27, 0x0239
    5a8e:	00 97       	sbiw	r24, 0x00	; 0
    5a90:	a1 05       	cpc	r26, r1
    5a92:	b1 05       	cpc	r27, r1
    5a94:	11 f4       	brne	.+4      	; 0x5a9a <Timer_PollingDelay+0x1baa>
    5a96:	0c 94 6f 39 	jmp	0x72de	; 0x72de <Timer_PollingDelay+0x33ee>
		{
			switch( Local_u8COMmode )
    5a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    5a9c:	08 2f       	mov	r16, r24
    5a9e:	10 e0       	ldi	r17, 0x00	; 0
    5aa0:	2e 96       	adiw	r28, 0x0e	; 14
    5aa2:	1f af       	std	Y+63, r17	; 0x3f
    5aa4:	0e af       	std	Y+62, r16	; 0x3e
    5aa6:	2e 97       	sbiw	r28, 0x0e	; 14
    5aa8:	2e 96       	adiw	r28, 0x0e	; 14
    5aaa:	2e ad       	ldd	r18, Y+62	; 0x3e
    5aac:	3f ad       	ldd	r19, Y+63	; 0x3f
    5aae:	2e 97       	sbiw	r28, 0x0e	; 14
    5ab0:	25 31       	cpi	r18, 0x15	; 21
    5ab2:	31 05       	cpc	r19, r1
    5ab4:	09 f4       	brne	.+2      	; 0x5ab8 <Timer_PollingDelay+0x1bc8>
    5ab6:	29 c4       	rjmp	.+2130   	; 0x630a <Timer_PollingDelay+0x241a>
    5ab8:	2e 96       	adiw	r28, 0x0e	; 14
    5aba:	4e ad       	ldd	r20, Y+62	; 0x3e
    5abc:	5f ad       	ldd	r21, Y+63	; 0x3f
    5abe:	2e 97       	sbiw	r28, 0x0e	; 14
    5ac0:	46 31       	cpi	r20, 0x16	; 22
    5ac2:	51 05       	cpc	r21, r1
    5ac4:	4c f4       	brge	.+18     	; 0x5ad8 <Timer_PollingDelay+0x1be8>
    5ac6:	2e 96       	adiw	r28, 0x0e	; 14
    5ac8:	6e ad       	ldd	r22, Y+62	; 0x3e
    5aca:	7f ad       	ldd	r23, Y+63	; 0x3f
    5acc:	2e 97       	sbiw	r28, 0x0e	; 14
    5ace:	64 31       	cpi	r22, 0x14	; 20
    5ad0:	71 05       	cpc	r23, r1
    5ad2:	69 f0       	breq	.+26     	; 0x5aee <Timer_PollingDelay+0x1bfe>
    5ad4:	0c 94 6a 39 	jmp	0x72d4	; 0x72d4 <Timer_PollingDelay+0x33e4>
    5ad8:	2e 96       	adiw	r28, 0x0e	; 14
    5ada:	8e ad       	ldd	r24, Y+62	; 0x3e
    5adc:	9f ad       	ldd	r25, Y+63	; 0x3f
    5ade:	2e 97       	sbiw	r28, 0x0e	; 14
    5ae0:	88 31       	cpi	r24, 0x18	; 24
    5ae2:	91 05       	cpc	r25, r1
    5ae4:	14 f0       	brlt	.+4      	; 0x5aea <Timer_PollingDelay+0x1bfa>
    5ae6:	0c 94 6a 39 	jmp	0x72d4	; 0x72d4 <Timer_PollingDelay+0x33e4>
    5aea:	0c 94 79 35 	jmp	0x6af2	; 0x6af2 <Timer_PollingDelay+0x2c02>
			{
			case  COMP_NORMAL		:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / ( 1000UL ) )
    5aee:	89 85       	ldd	r24, Y+9	; 0x09
    5af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5af2:	5c 01       	movw	r10, r24
    5af4:	cc 24       	eor	r12, r12
    5af6:	dd 24       	eor	r13, r13
    5af8:	ee 24       	eor	r14, r14
    5afa:	ff 24       	eor	r15, r15
    5afc:	87 01       	movw	r16, r14
    5afe:	80 91 36 02 	lds	r24, 0x0236
    5b02:	90 91 37 02 	lds	r25, 0x0237
    5b06:	a0 91 38 02 	lds	r26, 0x0238
    5b0a:	b0 91 39 02 	lds	r27, 0x0239
    5b0e:	1c 01       	movw	r2, r24
    5b10:	2d 01       	movw	r4, r26
    5b12:	66 24       	eor	r6, r6
    5b14:	77 24       	eor	r7, r7
    5b16:	43 01       	movw	r8, r6
    5b18:	2a 2d       	mov	r18, r10
    5b1a:	3b 2d       	mov	r19, r11
    5b1c:	4c 2d       	mov	r20, r12
    5b1e:	5d 2d       	mov	r21, r13
    5b20:	6e 2d       	mov	r22, r14
    5b22:	7f 2d       	mov	r23, r15
    5b24:	80 2f       	mov	r24, r16
    5b26:	91 2f       	mov	r25, r17
    5b28:	a2 2c       	mov	r10, r2
    5b2a:	b3 2c       	mov	r11, r3
    5b2c:	c4 2c       	mov	r12, r4
    5b2e:	d5 2c       	mov	r13, r5
    5b30:	e6 2c       	mov	r14, r6
    5b32:	f7 2c       	mov	r15, r7
    5b34:	08 2d       	mov	r16, r8
    5b36:	19 2d       	mov	r17, r9
    5b38:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    5b3c:	22 2e       	mov	r2, r18
    5b3e:	33 2e       	mov	r3, r19
    5b40:	44 2e       	mov	r4, r20
    5b42:	55 2e       	mov	r5, r21
    5b44:	66 2e       	mov	r6, r22
    5b46:	77 2e       	mov	r7, r23
    5b48:	88 2e       	mov	r8, r24
    5b4a:	99 2e       	mov	r9, r25
    5b4c:	a2 2c       	mov	r10, r2
    5b4e:	b3 2c       	mov	r11, r3
    5b50:	c4 2c       	mov	r12, r4
    5b52:	d5 2c       	mov	r13, r5
    5b54:	e6 2c       	mov	r14, r6
    5b56:	f7 2c       	mov	r15, r7
    5b58:	08 2d       	mov	r16, r8
    5b5a:	19 2d       	mov	r17, r9
    5b5c:	2a 2d       	mov	r18, r10
    5b5e:	3b 2d       	mov	r19, r11
    5b60:	4c 2d       	mov	r20, r12
    5b62:	5d 2d       	mov	r21, r13
    5b64:	6e 2d       	mov	r22, r14
    5b66:	7f 2d       	mov	r23, r15
    5b68:	80 2f       	mov	r24, r16
    5b6a:	91 2f       	mov	r25, r17
    5b6c:	0f 2e       	mov	r0, r31
    5b6e:	f8 ee       	ldi	r31, 0xE8	; 232
    5b70:	af 2e       	mov	r10, r31
    5b72:	f0 2d       	mov	r31, r0
    5b74:	0f 2e       	mov	r0, r31
    5b76:	f3 e0       	ldi	r31, 0x03	; 3
    5b78:	bf 2e       	mov	r11, r31
    5b7a:	f0 2d       	mov	r31, r0
    5b7c:	cc 24       	eor	r12, r12
    5b7e:	dd 24       	eor	r13, r13
    5b80:	ee 24       	eor	r14, r14
    5b82:	ff 24       	eor	r15, r15
    5b84:	00 e0       	ldi	r16, 0x00	; 0
    5b86:	10 e0       	ldi	r17, 0x00	; 0
    5b88:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    5b8c:	a2 2e       	mov	r10, r18
    5b8e:	b3 2e       	mov	r11, r19
    5b90:	c4 2e       	mov	r12, r20
    5b92:	d5 2e       	mov	r13, r21
    5b94:	e6 2e       	mov	r14, r22
    5b96:	f7 2e       	mov	r15, r23
    5b98:	08 2f       	mov	r16, r24
    5b9a:	19 2f       	mov	r17, r25
    5b9c:	25 96       	adiw	r28, 0x05	; 5
    5b9e:	af ae       	std	Y+63, r10	; 0x3f
    5ba0:	25 97       	sbiw	r28, 0x05	; 5
    5ba2:	26 96       	adiw	r28, 0x06	; 6
    5ba4:	bf ae       	std	Y+63, r11	; 0x3f
    5ba6:	26 97       	sbiw	r28, 0x06	; 6
    5ba8:	27 96       	adiw	r28, 0x07	; 7
    5baa:	cf ae       	std	Y+63, r12	; 0x3f
    5bac:	27 97       	sbiw	r28, 0x07	; 7
    5bae:	28 96       	adiw	r28, 0x08	; 8
    5bb0:	df ae       	std	Y+63, r13	; 0x3f
    5bb2:	28 97       	sbiw	r28, 0x08	; 8
    5bb4:	29 96       	adiw	r28, 0x09	; 9
    5bb6:	ef ae       	std	Y+63, r14	; 0x3f
    5bb8:	29 97       	sbiw	r28, 0x09	; 9
    5bba:	2a 96       	adiw	r28, 0x0a	; 10
    5bbc:	ff ae       	std	Y+63, r15	; 0x3f
    5bbe:	2a 97       	sbiw	r28, 0x0a	; 10
    5bc0:	2b 96       	adiw	r28, 0x0b	; 11
    5bc2:	0f af       	std	Y+63, r16	; 0x3f
    5bc4:	2b 97       	sbiw	r28, 0x0b	; 11
    5bc6:	2c 96       	adiw	r28, 0x0c	; 12
    5bc8:	1f af       	std	Y+63, r17	; 0x3f
    5bca:	2c 97       	sbiw	r28, 0x0c	; 12
    5bcc:	9f ef       	ldi	r25, 0xFF	; 255
    5bce:	c7 51       	subi	r28, 0x17	; 23
    5bd0:	df 4f       	sbci	r29, 0xFF	; 255
    5bd2:	98 83       	st	Y, r25
    5bd4:	c9 5e       	subi	r28, 0xE9	; 233
    5bd6:	d0 40       	sbci	r29, 0x00	; 0
    5bd8:	c6 51       	subi	r28, 0x16	; 22
    5bda:	df 4f       	sbci	r29, 0xFF	; 255
    5bdc:	18 82       	st	Y, r1
    5bde:	ca 5e       	subi	r28, 0xEA	; 234
    5be0:	d0 40       	sbci	r29, 0x00	; 0
    5be2:	c5 51       	subi	r28, 0x15	; 21
    5be4:	df 4f       	sbci	r29, 0xFF	; 255
    5be6:	18 82       	st	Y, r1
    5be8:	cb 5e       	subi	r28, 0xEB	; 235
    5bea:	d0 40       	sbci	r29, 0x00	; 0
    5bec:	c4 51       	subi	r28, 0x14	; 20
    5bee:	df 4f       	sbci	r29, 0xFF	; 255
    5bf0:	18 82       	st	Y, r1
    5bf2:	cc 5e       	subi	r28, 0xEC	; 236
    5bf4:	d0 40       	sbci	r29, 0x00	; 0
    5bf6:	c3 51       	subi	r28, 0x13	; 19
    5bf8:	df 4f       	sbci	r29, 0xFF	; 255
    5bfa:	18 82       	st	Y, r1
    5bfc:	cd 5e       	subi	r28, 0xED	; 237
    5bfe:	d0 40       	sbci	r29, 0x00	; 0
    5c00:	c2 51       	subi	r28, 0x12	; 18
    5c02:	df 4f       	sbci	r29, 0xFF	; 255
    5c04:	18 82       	st	Y, r1
    5c06:	ce 5e       	subi	r28, 0xEE	; 238
    5c08:	d0 40       	sbci	r29, 0x00	; 0
    5c0a:	c1 51       	subi	r28, 0x11	; 17
    5c0c:	df 4f       	sbci	r29, 0xFF	; 255
    5c0e:	18 82       	st	Y, r1
    5c10:	cf 5e       	subi	r28, 0xEF	; 239
    5c12:	d0 40       	sbci	r29, 0x00	; 0
    5c14:	c0 51       	subi	r28, 0x10	; 16
    5c16:	df 4f       	sbci	r29, 0xFF	; 255
    5c18:	18 82       	st	Y, r1
    5c1a:	c0 5f       	subi	r28, 0xF0	; 240
    5c1c:	d0 40       	sbci	r29, 0x00	; 0
    5c1e:	25 96       	adiw	r28, 0x05	; 5
    5c20:	ef ad       	ldd	r30, Y+63	; 0x3f
    5c22:	25 97       	sbiw	r28, 0x05	; 5
    5c24:	c7 51       	subi	r28, 0x17	; 23
    5c26:	df 4f       	sbci	r29, 0xFF	; 255
    5c28:	f8 81       	ld	r31, Y
    5c2a:	c9 5e       	subi	r28, 0xE9	; 233
    5c2c:	d0 40       	sbci	r29, 0x00	; 0
    5c2e:	ef 0f       	add	r30, r31
    5c30:	cf 50       	subi	r28, 0x0F	; 15
    5c32:	df 4f       	sbci	r29, 0xFF	; 255
    5c34:	e8 83       	st	Y, r30
    5c36:	c1 5f       	subi	r28, 0xF1	; 241
    5c38:	d0 40       	sbci	r29, 0x00	; 0
    5c3a:	01 e0       	ldi	r16, 0x01	; 1
    5c3c:	c7 50       	subi	r28, 0x07	; 7
    5c3e:	df 4f       	sbci	r29, 0xFF	; 255
    5c40:	08 83       	st	Y, r16
    5c42:	c9 5f       	subi	r28, 0xF9	; 249
    5c44:	d0 40       	sbci	r29, 0x00	; 0
    5c46:	cf 50       	subi	r28, 0x0F	; 15
    5c48:	df 4f       	sbci	r29, 0xFF	; 255
    5c4a:	18 81       	ld	r17, Y
    5c4c:	c1 5f       	subi	r28, 0xF1	; 241
    5c4e:	d0 40       	sbci	r29, 0x00	; 0
    5c50:	25 96       	adiw	r28, 0x05	; 5
    5c52:	2f ad       	ldd	r18, Y+63	; 0x3f
    5c54:	25 97       	sbiw	r28, 0x05	; 5
    5c56:	12 17       	cp	r17, r18
    5c58:	28 f0       	brcs	.+10     	; 0x5c64 <Timer_PollingDelay+0x1d74>
    5c5a:	c7 50       	subi	r28, 0x07	; 7
    5c5c:	df 4f       	sbci	r29, 0xFF	; 255
    5c5e:	18 82       	st	Y, r1
    5c60:	c9 5f       	subi	r28, 0xF9	; 249
    5c62:	d0 40       	sbci	r29, 0x00	; 0
    5c64:	26 96       	adiw	r28, 0x06	; 6
    5c66:	3f ad       	ldd	r19, Y+63	; 0x3f
    5c68:	26 97       	sbiw	r28, 0x06	; 6
    5c6a:	c6 51       	subi	r28, 0x16	; 22
    5c6c:	df 4f       	sbci	r29, 0xFF	; 255
    5c6e:	48 81       	ld	r20, Y
    5c70:	ca 5e       	subi	r28, 0xEA	; 234
    5c72:	d0 40       	sbci	r29, 0x00	; 0
    5c74:	34 0f       	add	r19, r20
    5c76:	ce 50       	subi	r28, 0x0E	; 14
    5c78:	df 4f       	sbci	r29, 0xFF	; 255
    5c7a:	38 83       	st	Y, r19
    5c7c:	c2 5f       	subi	r28, 0xF2	; 242
    5c7e:	d0 40       	sbci	r29, 0x00	; 0
    5c80:	51 e0       	ldi	r21, 0x01	; 1
    5c82:	c6 50       	subi	r28, 0x06	; 6
    5c84:	df 4f       	sbci	r29, 0xFF	; 255
    5c86:	58 83       	st	Y, r21
    5c88:	ca 5f       	subi	r28, 0xFA	; 250
    5c8a:	d0 40       	sbci	r29, 0x00	; 0
    5c8c:	ce 50       	subi	r28, 0x0E	; 14
    5c8e:	df 4f       	sbci	r29, 0xFF	; 255
    5c90:	68 81       	ld	r22, Y
    5c92:	c2 5f       	subi	r28, 0xF2	; 242
    5c94:	d0 40       	sbci	r29, 0x00	; 0
    5c96:	26 96       	adiw	r28, 0x06	; 6
    5c98:	7f ad       	ldd	r23, Y+63	; 0x3f
    5c9a:	26 97       	sbiw	r28, 0x06	; 6
    5c9c:	67 17       	cp	r22, r23
    5c9e:	28 f0       	brcs	.+10     	; 0x5caa <Timer_PollingDelay+0x1dba>
    5ca0:	c6 50       	subi	r28, 0x06	; 6
    5ca2:	df 4f       	sbci	r29, 0xFF	; 255
    5ca4:	18 82       	st	Y, r1
    5ca6:	ca 5f       	subi	r28, 0xFA	; 250
    5ca8:	d0 40       	sbci	r29, 0x00	; 0
    5caa:	c7 50       	subi	r28, 0x07	; 7
    5cac:	df 4f       	sbci	r29, 0xFF	; 255
    5cae:	88 81       	ld	r24, Y
    5cb0:	c9 5f       	subi	r28, 0xF9	; 249
    5cb2:	d0 40       	sbci	r29, 0x00	; 0
    5cb4:	ce 50       	subi	r28, 0x0E	; 14
    5cb6:	df 4f       	sbci	r29, 0xFF	; 255
    5cb8:	98 81       	ld	r25, Y
    5cba:	c2 5f       	subi	r28, 0xF2	; 242
    5cbc:	d0 40       	sbci	r29, 0x00	; 0
    5cbe:	89 0f       	add	r24, r25
    5cc0:	c5 50       	subi	r28, 0x05	; 5
    5cc2:	df 4f       	sbci	r29, 0xFF	; 255
    5cc4:	88 83       	st	Y, r24
    5cc6:	cb 5f       	subi	r28, 0xFB	; 251
    5cc8:	d0 40       	sbci	r29, 0x00	; 0
    5cca:	e1 e0       	ldi	r30, 0x01	; 1
    5ccc:	c4 50       	subi	r28, 0x04	; 4
    5cce:	df 4f       	sbci	r29, 0xFF	; 255
    5cd0:	e8 83       	st	Y, r30
    5cd2:	cc 5f       	subi	r28, 0xFC	; 252
    5cd4:	d0 40       	sbci	r29, 0x00	; 0
    5cd6:	c5 50       	subi	r28, 0x05	; 5
    5cd8:	df 4f       	sbci	r29, 0xFF	; 255
    5cda:	f8 81       	ld	r31, Y
    5cdc:	cb 5f       	subi	r28, 0xFB	; 251
    5cde:	d0 40       	sbci	r29, 0x00	; 0
    5ce0:	ce 50       	subi	r28, 0x0E	; 14
    5ce2:	df 4f       	sbci	r29, 0xFF	; 255
    5ce4:	08 81       	ld	r16, Y
    5ce6:	c2 5f       	subi	r28, 0xF2	; 242
    5ce8:	d0 40       	sbci	r29, 0x00	; 0
    5cea:	f0 17       	cp	r31, r16
    5cec:	28 f0       	brcs	.+10     	; 0x5cf8 <Timer_PollingDelay+0x1e08>
    5cee:	c4 50       	subi	r28, 0x04	; 4
    5cf0:	df 4f       	sbci	r29, 0xFF	; 255
    5cf2:	18 82       	st	Y, r1
    5cf4:	cc 5f       	subi	r28, 0xFC	; 252
    5cf6:	d0 40       	sbci	r29, 0x00	; 0
    5cf8:	c6 50       	subi	r28, 0x06	; 6
    5cfa:	df 4f       	sbci	r29, 0xFF	; 255
    5cfc:	18 81       	ld	r17, Y
    5cfe:	ca 5f       	subi	r28, 0xFA	; 250
    5d00:	d0 40       	sbci	r29, 0x00	; 0
    5d02:	c4 50       	subi	r28, 0x04	; 4
    5d04:	df 4f       	sbci	r29, 0xFF	; 255
    5d06:	28 81       	ld	r18, Y
    5d08:	cc 5f       	subi	r28, 0xFC	; 252
    5d0a:	d0 40       	sbci	r29, 0x00	; 0
    5d0c:	12 2b       	or	r17, r18
    5d0e:	c6 50       	subi	r28, 0x06	; 6
    5d10:	df 4f       	sbci	r29, 0xFF	; 255
    5d12:	18 83       	st	Y, r17
    5d14:	ca 5f       	subi	r28, 0xFA	; 250
    5d16:	d0 40       	sbci	r29, 0x00	; 0
    5d18:	c5 50       	subi	r28, 0x05	; 5
    5d1a:	df 4f       	sbci	r29, 0xFF	; 255
    5d1c:	38 81       	ld	r19, Y
    5d1e:	cb 5f       	subi	r28, 0xFB	; 251
    5d20:	d0 40       	sbci	r29, 0x00	; 0
    5d22:	ce 50       	subi	r28, 0x0E	; 14
    5d24:	df 4f       	sbci	r29, 0xFF	; 255
    5d26:	38 83       	st	Y, r19
    5d28:	c2 5f       	subi	r28, 0xF2	; 242
    5d2a:	d0 40       	sbci	r29, 0x00	; 0
    5d2c:	27 96       	adiw	r28, 0x07	; 7
    5d2e:	4f ad       	ldd	r20, Y+63	; 0x3f
    5d30:	27 97       	sbiw	r28, 0x07	; 7
    5d32:	c5 51       	subi	r28, 0x15	; 21
    5d34:	df 4f       	sbci	r29, 0xFF	; 255
    5d36:	58 81       	ld	r21, Y
    5d38:	cb 5e       	subi	r28, 0xEB	; 235
    5d3a:	d0 40       	sbci	r29, 0x00	; 0
    5d3c:	45 0f       	add	r20, r21
    5d3e:	cd 50       	subi	r28, 0x0D	; 13
    5d40:	df 4f       	sbci	r29, 0xFF	; 255
    5d42:	48 83       	st	Y, r20
    5d44:	c3 5f       	subi	r28, 0xF3	; 243
    5d46:	d0 40       	sbci	r29, 0x00	; 0
    5d48:	61 e0       	ldi	r22, 0x01	; 1
    5d4a:	c3 50       	subi	r28, 0x03	; 3
    5d4c:	df 4f       	sbci	r29, 0xFF	; 255
    5d4e:	68 83       	st	Y, r22
    5d50:	cd 5f       	subi	r28, 0xFD	; 253
    5d52:	d0 40       	sbci	r29, 0x00	; 0
    5d54:	cd 50       	subi	r28, 0x0D	; 13
    5d56:	df 4f       	sbci	r29, 0xFF	; 255
    5d58:	78 81       	ld	r23, Y
    5d5a:	c3 5f       	subi	r28, 0xF3	; 243
    5d5c:	d0 40       	sbci	r29, 0x00	; 0
    5d5e:	27 96       	adiw	r28, 0x07	; 7
    5d60:	8f ad       	ldd	r24, Y+63	; 0x3f
    5d62:	27 97       	sbiw	r28, 0x07	; 7
    5d64:	78 17       	cp	r23, r24
    5d66:	28 f0       	brcs	.+10     	; 0x5d72 <Timer_PollingDelay+0x1e82>
    5d68:	c3 50       	subi	r28, 0x03	; 3
    5d6a:	df 4f       	sbci	r29, 0xFF	; 255
    5d6c:	18 82       	st	Y, r1
    5d6e:	cd 5f       	subi	r28, 0xFD	; 253
    5d70:	d0 40       	sbci	r29, 0x00	; 0
    5d72:	c6 50       	subi	r28, 0x06	; 6
    5d74:	df 4f       	sbci	r29, 0xFF	; 255
    5d76:	98 81       	ld	r25, Y
    5d78:	ca 5f       	subi	r28, 0xFA	; 250
    5d7a:	d0 40       	sbci	r29, 0x00	; 0
    5d7c:	cd 50       	subi	r28, 0x0D	; 13
    5d7e:	df 4f       	sbci	r29, 0xFF	; 255
    5d80:	e8 81       	ld	r30, Y
    5d82:	c3 5f       	subi	r28, 0xF3	; 243
    5d84:	d0 40       	sbci	r29, 0x00	; 0
    5d86:	9e 0f       	add	r25, r30
    5d88:	c2 50       	subi	r28, 0x02	; 2
    5d8a:	df 4f       	sbci	r29, 0xFF	; 255
    5d8c:	98 83       	st	Y, r25
    5d8e:	ce 5f       	subi	r28, 0xFE	; 254
    5d90:	d0 40       	sbci	r29, 0x00	; 0
    5d92:	f1 e0       	ldi	r31, 0x01	; 1
    5d94:	c1 50       	subi	r28, 0x01	; 1
    5d96:	df 4f       	sbci	r29, 0xFF	; 255
    5d98:	f8 83       	st	Y, r31
    5d9a:	cf 5f       	subi	r28, 0xFF	; 255
    5d9c:	d0 40       	sbci	r29, 0x00	; 0
    5d9e:	c2 50       	subi	r28, 0x02	; 2
    5da0:	df 4f       	sbci	r29, 0xFF	; 255
    5da2:	08 81       	ld	r16, Y
    5da4:	ce 5f       	subi	r28, 0xFE	; 254
    5da6:	d0 40       	sbci	r29, 0x00	; 0
    5da8:	cd 50       	subi	r28, 0x0D	; 13
    5daa:	df 4f       	sbci	r29, 0xFF	; 255
    5dac:	18 81       	ld	r17, Y
    5dae:	c3 5f       	subi	r28, 0xF3	; 243
    5db0:	d0 40       	sbci	r29, 0x00	; 0
    5db2:	01 17       	cp	r16, r17
    5db4:	28 f0       	brcs	.+10     	; 0x5dc0 <Timer_PollingDelay+0x1ed0>
    5db6:	c1 50       	subi	r28, 0x01	; 1
    5db8:	df 4f       	sbci	r29, 0xFF	; 255
    5dba:	18 82       	st	Y, r1
    5dbc:	cf 5f       	subi	r28, 0xFF	; 255
    5dbe:	d0 40       	sbci	r29, 0x00	; 0
    5dc0:	c3 50       	subi	r28, 0x03	; 3
    5dc2:	df 4f       	sbci	r29, 0xFF	; 255
    5dc4:	28 81       	ld	r18, Y
    5dc6:	cd 5f       	subi	r28, 0xFD	; 253
    5dc8:	d0 40       	sbci	r29, 0x00	; 0
    5dca:	c1 50       	subi	r28, 0x01	; 1
    5dcc:	df 4f       	sbci	r29, 0xFF	; 255
    5dce:	38 81       	ld	r19, Y
    5dd0:	cf 5f       	subi	r28, 0xFF	; 255
    5dd2:	d0 40       	sbci	r29, 0x00	; 0
    5dd4:	23 2b       	or	r18, r19
    5dd6:	c3 50       	subi	r28, 0x03	; 3
    5dd8:	df 4f       	sbci	r29, 0xFF	; 255
    5dda:	28 83       	st	Y, r18
    5ddc:	cd 5f       	subi	r28, 0xFD	; 253
    5dde:	d0 40       	sbci	r29, 0x00	; 0
    5de0:	c2 50       	subi	r28, 0x02	; 2
    5de2:	df 4f       	sbci	r29, 0xFF	; 255
    5de4:	48 81       	ld	r20, Y
    5de6:	ce 5f       	subi	r28, 0xFE	; 254
    5de8:	d0 40       	sbci	r29, 0x00	; 0
    5dea:	cd 50       	subi	r28, 0x0D	; 13
    5dec:	df 4f       	sbci	r29, 0xFF	; 255
    5dee:	48 83       	st	Y, r20
    5df0:	c3 5f       	subi	r28, 0xF3	; 243
    5df2:	d0 40       	sbci	r29, 0x00	; 0
    5df4:	28 96       	adiw	r28, 0x08	; 8
    5df6:	5f ad       	ldd	r21, Y+63	; 0x3f
    5df8:	28 97       	sbiw	r28, 0x08	; 8
    5dfa:	c4 51       	subi	r28, 0x14	; 20
    5dfc:	df 4f       	sbci	r29, 0xFF	; 255
    5dfe:	68 81       	ld	r22, Y
    5e00:	cc 5e       	subi	r28, 0xEC	; 236
    5e02:	d0 40       	sbci	r29, 0x00	; 0
    5e04:	56 0f       	add	r21, r22
    5e06:	cc 50       	subi	r28, 0x0C	; 12
    5e08:	df 4f       	sbci	r29, 0xFF	; 255
    5e0a:	58 83       	st	Y, r21
    5e0c:	c4 5f       	subi	r28, 0xF4	; 244
    5e0e:	d0 40       	sbci	r29, 0x00	; 0
    5e10:	71 e0       	ldi	r23, 0x01	; 1
    5e12:	c0 50       	subi	r28, 0x00	; 0
    5e14:	df 4f       	sbci	r29, 0xFF	; 255
    5e16:	78 83       	st	Y, r23
    5e18:	c0 50       	subi	r28, 0x00	; 0
    5e1a:	d1 40       	sbci	r29, 0x01	; 1
    5e1c:	cc 50       	subi	r28, 0x0C	; 12
    5e1e:	df 4f       	sbci	r29, 0xFF	; 255
    5e20:	88 81       	ld	r24, Y
    5e22:	c4 5f       	subi	r28, 0xF4	; 244
    5e24:	d0 40       	sbci	r29, 0x00	; 0
    5e26:	28 96       	adiw	r28, 0x08	; 8
    5e28:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e2a:	28 97       	sbiw	r28, 0x08	; 8
    5e2c:	89 17       	cp	r24, r25
    5e2e:	28 f0       	brcs	.+10     	; 0x5e3a <Timer_PollingDelay+0x1f4a>
    5e30:	c0 50       	subi	r28, 0x00	; 0
    5e32:	df 4f       	sbci	r29, 0xFF	; 255
    5e34:	18 82       	st	Y, r1
    5e36:	c0 50       	subi	r28, 0x00	; 0
    5e38:	d1 40       	sbci	r29, 0x01	; 1
    5e3a:	c3 50       	subi	r28, 0x03	; 3
    5e3c:	df 4f       	sbci	r29, 0xFF	; 255
    5e3e:	e8 81       	ld	r30, Y
    5e40:	cd 5f       	subi	r28, 0xFD	; 253
    5e42:	d0 40       	sbci	r29, 0x00	; 0
    5e44:	cc 50       	subi	r28, 0x0C	; 12
    5e46:	df 4f       	sbci	r29, 0xFF	; 255
    5e48:	f8 81       	ld	r31, Y
    5e4a:	c4 5f       	subi	r28, 0xF4	; 244
    5e4c:	d0 40       	sbci	r29, 0x00	; 0
    5e4e:	ef 0f       	add	r30, r31
    5e50:	cf 5f       	subi	r28, 0xFF	; 255
    5e52:	de 4f       	sbci	r29, 0xFE	; 254
    5e54:	e8 83       	st	Y, r30
    5e56:	c1 50       	subi	r28, 0x01	; 1
    5e58:	d1 40       	sbci	r29, 0x01	; 1
    5e5a:	01 e0       	ldi	r16, 0x01	; 1
    5e5c:	ce 5f       	subi	r28, 0xFE	; 254
    5e5e:	de 4f       	sbci	r29, 0xFE	; 254
    5e60:	08 83       	st	Y, r16
    5e62:	c2 50       	subi	r28, 0x02	; 2
    5e64:	d1 40       	sbci	r29, 0x01	; 1
    5e66:	cf 5f       	subi	r28, 0xFF	; 255
    5e68:	de 4f       	sbci	r29, 0xFE	; 254
    5e6a:	18 81       	ld	r17, Y
    5e6c:	c1 50       	subi	r28, 0x01	; 1
    5e6e:	d1 40       	sbci	r29, 0x01	; 1
    5e70:	cc 50       	subi	r28, 0x0C	; 12
    5e72:	df 4f       	sbci	r29, 0xFF	; 255
    5e74:	28 81       	ld	r18, Y
    5e76:	c4 5f       	subi	r28, 0xF4	; 244
    5e78:	d0 40       	sbci	r29, 0x00	; 0
    5e7a:	12 17       	cp	r17, r18
    5e7c:	28 f0       	brcs	.+10     	; 0x5e88 <Timer_PollingDelay+0x1f98>
    5e7e:	ce 5f       	subi	r28, 0xFE	; 254
    5e80:	de 4f       	sbci	r29, 0xFE	; 254
    5e82:	18 82       	st	Y, r1
    5e84:	c2 50       	subi	r28, 0x02	; 2
    5e86:	d1 40       	sbci	r29, 0x01	; 1
    5e88:	c0 50       	subi	r28, 0x00	; 0
    5e8a:	df 4f       	sbci	r29, 0xFF	; 255
    5e8c:	38 81       	ld	r19, Y
    5e8e:	c0 50       	subi	r28, 0x00	; 0
    5e90:	d1 40       	sbci	r29, 0x01	; 1
    5e92:	ce 5f       	subi	r28, 0xFE	; 254
    5e94:	de 4f       	sbci	r29, 0xFE	; 254
    5e96:	48 81       	ld	r20, Y
    5e98:	c2 50       	subi	r28, 0x02	; 2
    5e9a:	d1 40       	sbci	r29, 0x01	; 1
    5e9c:	34 2b       	or	r19, r20
    5e9e:	c0 50       	subi	r28, 0x00	; 0
    5ea0:	df 4f       	sbci	r29, 0xFF	; 255
    5ea2:	38 83       	st	Y, r19
    5ea4:	c0 50       	subi	r28, 0x00	; 0
    5ea6:	d1 40       	sbci	r29, 0x01	; 1
    5ea8:	cf 5f       	subi	r28, 0xFF	; 255
    5eaa:	de 4f       	sbci	r29, 0xFE	; 254
    5eac:	58 81       	ld	r21, Y
    5eae:	c1 50       	subi	r28, 0x01	; 1
    5eb0:	d1 40       	sbci	r29, 0x01	; 1
    5eb2:	cc 50       	subi	r28, 0x0C	; 12
    5eb4:	df 4f       	sbci	r29, 0xFF	; 255
    5eb6:	58 83       	st	Y, r21
    5eb8:	c4 5f       	subi	r28, 0xF4	; 244
    5eba:	d0 40       	sbci	r29, 0x00	; 0
    5ebc:	29 96       	adiw	r28, 0x09	; 9
    5ebe:	6f ad       	ldd	r22, Y+63	; 0x3f
    5ec0:	29 97       	sbiw	r28, 0x09	; 9
    5ec2:	c3 51       	subi	r28, 0x13	; 19
    5ec4:	df 4f       	sbci	r29, 0xFF	; 255
    5ec6:	78 81       	ld	r23, Y
    5ec8:	cd 5e       	subi	r28, 0xED	; 237
    5eca:	d0 40       	sbci	r29, 0x00	; 0
    5ecc:	67 0f       	add	r22, r23
    5ece:	cb 50       	subi	r28, 0x0B	; 11
    5ed0:	df 4f       	sbci	r29, 0xFF	; 255
    5ed2:	68 83       	st	Y, r22
    5ed4:	c5 5f       	subi	r28, 0xF5	; 245
    5ed6:	d0 40       	sbci	r29, 0x00	; 0
    5ed8:	81 e0       	ldi	r24, 0x01	; 1
    5eda:	cd 5f       	subi	r28, 0xFD	; 253
    5edc:	de 4f       	sbci	r29, 0xFE	; 254
    5ede:	88 83       	st	Y, r24
    5ee0:	c3 50       	subi	r28, 0x03	; 3
    5ee2:	d1 40       	sbci	r29, 0x01	; 1
    5ee4:	cb 50       	subi	r28, 0x0B	; 11
    5ee6:	df 4f       	sbci	r29, 0xFF	; 255
    5ee8:	98 81       	ld	r25, Y
    5eea:	c5 5f       	subi	r28, 0xF5	; 245
    5eec:	d0 40       	sbci	r29, 0x00	; 0
    5eee:	29 96       	adiw	r28, 0x09	; 9
    5ef0:	ef ad       	ldd	r30, Y+63	; 0x3f
    5ef2:	29 97       	sbiw	r28, 0x09	; 9
    5ef4:	9e 17       	cp	r25, r30
    5ef6:	28 f0       	brcs	.+10     	; 0x5f02 <Timer_PollingDelay+0x2012>
    5ef8:	cd 5f       	subi	r28, 0xFD	; 253
    5efa:	de 4f       	sbci	r29, 0xFE	; 254
    5efc:	18 82       	st	Y, r1
    5efe:	c3 50       	subi	r28, 0x03	; 3
    5f00:	d1 40       	sbci	r29, 0x01	; 1
    5f02:	c0 50       	subi	r28, 0x00	; 0
    5f04:	df 4f       	sbci	r29, 0xFF	; 255
    5f06:	f8 81       	ld	r31, Y
    5f08:	c0 50       	subi	r28, 0x00	; 0
    5f0a:	d1 40       	sbci	r29, 0x01	; 1
    5f0c:	cb 50       	subi	r28, 0x0B	; 11
    5f0e:	df 4f       	sbci	r29, 0xFF	; 255
    5f10:	08 81       	ld	r16, Y
    5f12:	c5 5f       	subi	r28, 0xF5	; 245
    5f14:	d0 40       	sbci	r29, 0x00	; 0
    5f16:	f0 0f       	add	r31, r16
    5f18:	cc 5f       	subi	r28, 0xFC	; 252
    5f1a:	de 4f       	sbci	r29, 0xFE	; 254
    5f1c:	f8 83       	st	Y, r31
    5f1e:	c4 50       	subi	r28, 0x04	; 4
    5f20:	d1 40       	sbci	r29, 0x01	; 1
    5f22:	11 e0       	ldi	r17, 0x01	; 1
    5f24:	cb 5f       	subi	r28, 0xFB	; 251
    5f26:	de 4f       	sbci	r29, 0xFE	; 254
    5f28:	18 83       	st	Y, r17
    5f2a:	c5 50       	subi	r28, 0x05	; 5
    5f2c:	d1 40       	sbci	r29, 0x01	; 1
    5f2e:	cc 5f       	subi	r28, 0xFC	; 252
    5f30:	de 4f       	sbci	r29, 0xFE	; 254
    5f32:	28 81       	ld	r18, Y
    5f34:	c4 50       	subi	r28, 0x04	; 4
    5f36:	d1 40       	sbci	r29, 0x01	; 1
    5f38:	cb 50       	subi	r28, 0x0B	; 11
    5f3a:	df 4f       	sbci	r29, 0xFF	; 255
    5f3c:	38 81       	ld	r19, Y
    5f3e:	c5 5f       	subi	r28, 0xF5	; 245
    5f40:	d0 40       	sbci	r29, 0x00	; 0
    5f42:	23 17       	cp	r18, r19
    5f44:	28 f0       	brcs	.+10     	; 0x5f50 <Timer_PollingDelay+0x2060>
    5f46:	cb 5f       	subi	r28, 0xFB	; 251
    5f48:	de 4f       	sbci	r29, 0xFE	; 254
    5f4a:	18 82       	st	Y, r1
    5f4c:	c5 50       	subi	r28, 0x05	; 5
    5f4e:	d1 40       	sbci	r29, 0x01	; 1
    5f50:	cd 5f       	subi	r28, 0xFD	; 253
    5f52:	de 4f       	sbci	r29, 0xFE	; 254
    5f54:	48 81       	ld	r20, Y
    5f56:	c3 50       	subi	r28, 0x03	; 3
    5f58:	d1 40       	sbci	r29, 0x01	; 1
    5f5a:	cb 5f       	subi	r28, 0xFB	; 251
    5f5c:	de 4f       	sbci	r29, 0xFE	; 254
    5f5e:	58 81       	ld	r21, Y
    5f60:	c5 50       	subi	r28, 0x05	; 5
    5f62:	d1 40       	sbci	r29, 0x01	; 1
    5f64:	45 2b       	or	r20, r21
    5f66:	cd 5f       	subi	r28, 0xFD	; 253
    5f68:	de 4f       	sbci	r29, 0xFE	; 254
    5f6a:	48 83       	st	Y, r20
    5f6c:	c3 50       	subi	r28, 0x03	; 3
    5f6e:	d1 40       	sbci	r29, 0x01	; 1
    5f70:	cc 5f       	subi	r28, 0xFC	; 252
    5f72:	de 4f       	sbci	r29, 0xFE	; 254
    5f74:	68 81       	ld	r22, Y
    5f76:	c4 50       	subi	r28, 0x04	; 4
    5f78:	d1 40       	sbci	r29, 0x01	; 1
    5f7a:	cb 50       	subi	r28, 0x0B	; 11
    5f7c:	df 4f       	sbci	r29, 0xFF	; 255
    5f7e:	68 83       	st	Y, r22
    5f80:	c5 5f       	subi	r28, 0xF5	; 245
    5f82:	d0 40       	sbci	r29, 0x00	; 0
    5f84:	2a 96       	adiw	r28, 0x0a	; 10
    5f86:	7f ad       	ldd	r23, Y+63	; 0x3f
    5f88:	2a 97       	sbiw	r28, 0x0a	; 10
    5f8a:	c2 51       	subi	r28, 0x12	; 18
    5f8c:	df 4f       	sbci	r29, 0xFF	; 255
    5f8e:	88 81       	ld	r24, Y
    5f90:	ce 5e       	subi	r28, 0xEE	; 238
    5f92:	d0 40       	sbci	r29, 0x00	; 0
    5f94:	78 0f       	add	r23, r24
    5f96:	ca 50       	subi	r28, 0x0A	; 10
    5f98:	df 4f       	sbci	r29, 0xFF	; 255
    5f9a:	78 83       	st	Y, r23
    5f9c:	c6 5f       	subi	r28, 0xF6	; 246
    5f9e:	d0 40       	sbci	r29, 0x00	; 0
    5fa0:	91 e0       	ldi	r25, 0x01	; 1
    5fa2:	ca 5f       	subi	r28, 0xFA	; 250
    5fa4:	de 4f       	sbci	r29, 0xFE	; 254
    5fa6:	98 83       	st	Y, r25
    5fa8:	c6 50       	subi	r28, 0x06	; 6
    5faa:	d1 40       	sbci	r29, 0x01	; 1
    5fac:	ca 50       	subi	r28, 0x0A	; 10
    5fae:	df 4f       	sbci	r29, 0xFF	; 255
    5fb0:	e8 81       	ld	r30, Y
    5fb2:	c6 5f       	subi	r28, 0xF6	; 246
    5fb4:	d0 40       	sbci	r29, 0x00	; 0
    5fb6:	2a 96       	adiw	r28, 0x0a	; 10
    5fb8:	ff ad       	ldd	r31, Y+63	; 0x3f
    5fba:	2a 97       	sbiw	r28, 0x0a	; 10
    5fbc:	ef 17       	cp	r30, r31
    5fbe:	28 f0       	brcs	.+10     	; 0x5fca <Timer_PollingDelay+0x20da>
    5fc0:	ca 5f       	subi	r28, 0xFA	; 250
    5fc2:	de 4f       	sbci	r29, 0xFE	; 254
    5fc4:	18 82       	st	Y, r1
    5fc6:	c6 50       	subi	r28, 0x06	; 6
    5fc8:	d1 40       	sbci	r29, 0x01	; 1
    5fca:	cd 5f       	subi	r28, 0xFD	; 253
    5fcc:	de 4f       	sbci	r29, 0xFE	; 254
    5fce:	08 81       	ld	r16, Y
    5fd0:	c3 50       	subi	r28, 0x03	; 3
    5fd2:	d1 40       	sbci	r29, 0x01	; 1
    5fd4:	ca 50       	subi	r28, 0x0A	; 10
    5fd6:	df 4f       	sbci	r29, 0xFF	; 255
    5fd8:	18 81       	ld	r17, Y
    5fda:	c6 5f       	subi	r28, 0xF6	; 246
    5fdc:	d0 40       	sbci	r29, 0x00	; 0
    5fde:	01 0f       	add	r16, r17
    5fe0:	c9 5f       	subi	r28, 0xF9	; 249
    5fe2:	de 4f       	sbci	r29, 0xFE	; 254
    5fe4:	08 83       	st	Y, r16
    5fe6:	c7 50       	subi	r28, 0x07	; 7
    5fe8:	d1 40       	sbci	r29, 0x01	; 1
    5fea:	21 e0       	ldi	r18, 0x01	; 1
    5fec:	c8 5f       	subi	r28, 0xF8	; 248
    5fee:	de 4f       	sbci	r29, 0xFE	; 254
    5ff0:	28 83       	st	Y, r18
    5ff2:	c8 50       	subi	r28, 0x08	; 8
    5ff4:	d1 40       	sbci	r29, 0x01	; 1
    5ff6:	c9 5f       	subi	r28, 0xF9	; 249
    5ff8:	de 4f       	sbci	r29, 0xFE	; 254
    5ffa:	38 81       	ld	r19, Y
    5ffc:	c7 50       	subi	r28, 0x07	; 7
    5ffe:	d1 40       	sbci	r29, 0x01	; 1
    6000:	ca 50       	subi	r28, 0x0A	; 10
    6002:	df 4f       	sbci	r29, 0xFF	; 255
    6004:	48 81       	ld	r20, Y
    6006:	c6 5f       	subi	r28, 0xF6	; 246
    6008:	d0 40       	sbci	r29, 0x00	; 0
    600a:	34 17       	cp	r19, r20
    600c:	28 f0       	brcs	.+10     	; 0x6018 <Timer_PollingDelay+0x2128>
    600e:	c8 5f       	subi	r28, 0xF8	; 248
    6010:	de 4f       	sbci	r29, 0xFE	; 254
    6012:	18 82       	st	Y, r1
    6014:	c8 50       	subi	r28, 0x08	; 8
    6016:	d1 40       	sbci	r29, 0x01	; 1
    6018:	ca 5f       	subi	r28, 0xFA	; 250
    601a:	de 4f       	sbci	r29, 0xFE	; 254
    601c:	58 81       	ld	r21, Y
    601e:	c6 50       	subi	r28, 0x06	; 6
    6020:	d1 40       	sbci	r29, 0x01	; 1
    6022:	c8 5f       	subi	r28, 0xF8	; 248
    6024:	de 4f       	sbci	r29, 0xFE	; 254
    6026:	68 81       	ld	r22, Y
    6028:	c8 50       	subi	r28, 0x08	; 8
    602a:	d1 40       	sbci	r29, 0x01	; 1
    602c:	56 2b       	or	r21, r22
    602e:	ca 5f       	subi	r28, 0xFA	; 250
    6030:	de 4f       	sbci	r29, 0xFE	; 254
    6032:	58 83       	st	Y, r21
    6034:	c6 50       	subi	r28, 0x06	; 6
    6036:	d1 40       	sbci	r29, 0x01	; 1
    6038:	c9 5f       	subi	r28, 0xF9	; 249
    603a:	de 4f       	sbci	r29, 0xFE	; 254
    603c:	78 81       	ld	r23, Y
    603e:	c7 50       	subi	r28, 0x07	; 7
    6040:	d1 40       	sbci	r29, 0x01	; 1
    6042:	ca 50       	subi	r28, 0x0A	; 10
    6044:	df 4f       	sbci	r29, 0xFF	; 255
    6046:	78 83       	st	Y, r23
    6048:	c6 5f       	subi	r28, 0xF6	; 246
    604a:	d0 40       	sbci	r29, 0x00	; 0
    604c:	2b 96       	adiw	r28, 0x0b	; 11
    604e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6050:	2b 97       	sbiw	r28, 0x0b	; 11
    6052:	c1 51       	subi	r28, 0x11	; 17
    6054:	df 4f       	sbci	r29, 0xFF	; 255
    6056:	98 81       	ld	r25, Y
    6058:	cf 5e       	subi	r28, 0xEF	; 239
    605a:	d0 40       	sbci	r29, 0x00	; 0
    605c:	89 0f       	add	r24, r25
    605e:	c9 50       	subi	r28, 0x09	; 9
    6060:	df 4f       	sbci	r29, 0xFF	; 255
    6062:	88 83       	st	Y, r24
    6064:	c7 5f       	subi	r28, 0xF7	; 247
    6066:	d0 40       	sbci	r29, 0x00	; 0
    6068:	e1 e0       	ldi	r30, 0x01	; 1
    606a:	c7 5f       	subi	r28, 0xF7	; 247
    606c:	de 4f       	sbci	r29, 0xFE	; 254
    606e:	e8 83       	st	Y, r30
    6070:	c9 50       	subi	r28, 0x09	; 9
    6072:	d1 40       	sbci	r29, 0x01	; 1
    6074:	c9 50       	subi	r28, 0x09	; 9
    6076:	df 4f       	sbci	r29, 0xFF	; 255
    6078:	f8 81       	ld	r31, Y
    607a:	c7 5f       	subi	r28, 0xF7	; 247
    607c:	d0 40       	sbci	r29, 0x00	; 0
    607e:	2b 96       	adiw	r28, 0x0b	; 11
    6080:	0f ad       	ldd	r16, Y+63	; 0x3f
    6082:	2b 97       	sbiw	r28, 0x0b	; 11
    6084:	f0 17       	cp	r31, r16
    6086:	28 f0       	brcs	.+10     	; 0x6092 <Timer_PollingDelay+0x21a2>
    6088:	c7 5f       	subi	r28, 0xF7	; 247
    608a:	de 4f       	sbci	r29, 0xFE	; 254
    608c:	18 82       	st	Y, r1
    608e:	c9 50       	subi	r28, 0x09	; 9
    6090:	d1 40       	sbci	r29, 0x01	; 1
    6092:	ca 5f       	subi	r28, 0xFA	; 250
    6094:	de 4f       	sbci	r29, 0xFE	; 254
    6096:	18 81       	ld	r17, Y
    6098:	c6 50       	subi	r28, 0x06	; 6
    609a:	d1 40       	sbci	r29, 0x01	; 1
    609c:	c9 50       	subi	r28, 0x09	; 9
    609e:	df 4f       	sbci	r29, 0xFF	; 255
    60a0:	28 81       	ld	r18, Y
    60a2:	c7 5f       	subi	r28, 0xF7	; 247
    60a4:	d0 40       	sbci	r29, 0x00	; 0
    60a6:	12 0f       	add	r17, r18
    60a8:	c6 5f       	subi	r28, 0xF6	; 246
    60aa:	de 4f       	sbci	r29, 0xFE	; 254
    60ac:	18 83       	st	Y, r17
    60ae:	ca 50       	subi	r28, 0x0A	; 10
    60b0:	d1 40       	sbci	r29, 0x01	; 1
    60b2:	31 e0       	ldi	r19, 0x01	; 1
    60b4:	c5 5f       	subi	r28, 0xF5	; 245
    60b6:	de 4f       	sbci	r29, 0xFE	; 254
    60b8:	38 83       	st	Y, r19
    60ba:	cb 50       	subi	r28, 0x0B	; 11
    60bc:	d1 40       	sbci	r29, 0x01	; 1
    60be:	c6 5f       	subi	r28, 0xF6	; 246
    60c0:	de 4f       	sbci	r29, 0xFE	; 254
    60c2:	48 81       	ld	r20, Y
    60c4:	ca 50       	subi	r28, 0x0A	; 10
    60c6:	d1 40       	sbci	r29, 0x01	; 1
    60c8:	c9 50       	subi	r28, 0x09	; 9
    60ca:	df 4f       	sbci	r29, 0xFF	; 255
    60cc:	58 81       	ld	r21, Y
    60ce:	c7 5f       	subi	r28, 0xF7	; 247
    60d0:	d0 40       	sbci	r29, 0x00	; 0
    60d2:	45 17       	cp	r20, r21
    60d4:	28 f0       	brcs	.+10     	; 0x60e0 <Timer_PollingDelay+0x21f0>
    60d6:	c5 5f       	subi	r28, 0xF5	; 245
    60d8:	de 4f       	sbci	r29, 0xFE	; 254
    60da:	18 82       	st	Y, r1
    60dc:	cb 50       	subi	r28, 0x0B	; 11
    60de:	d1 40       	sbci	r29, 0x01	; 1
    60e0:	c7 5f       	subi	r28, 0xF7	; 247
    60e2:	de 4f       	sbci	r29, 0xFE	; 254
    60e4:	68 81       	ld	r22, Y
    60e6:	c9 50       	subi	r28, 0x09	; 9
    60e8:	d1 40       	sbci	r29, 0x01	; 1
    60ea:	c5 5f       	subi	r28, 0xF5	; 245
    60ec:	de 4f       	sbci	r29, 0xFE	; 254
    60ee:	78 81       	ld	r23, Y
    60f0:	cb 50       	subi	r28, 0x0B	; 11
    60f2:	d1 40       	sbci	r29, 0x01	; 1
    60f4:	67 2b       	or	r22, r23
    60f6:	c7 5f       	subi	r28, 0xF7	; 247
    60f8:	de 4f       	sbci	r29, 0xFE	; 254
    60fa:	68 83       	st	Y, r22
    60fc:	c9 50       	subi	r28, 0x09	; 9
    60fe:	d1 40       	sbci	r29, 0x01	; 1
    6100:	c6 5f       	subi	r28, 0xF6	; 246
    6102:	de 4f       	sbci	r29, 0xFE	; 254
    6104:	88 81       	ld	r24, Y
    6106:	ca 50       	subi	r28, 0x0A	; 10
    6108:	d1 40       	sbci	r29, 0x01	; 1
    610a:	c9 50       	subi	r28, 0x09	; 9
    610c:	df 4f       	sbci	r29, 0xFF	; 255
    610e:	88 83       	st	Y, r24
    6110:	c7 5f       	subi	r28, 0xF7	; 247
    6112:	d0 40       	sbci	r29, 0x00	; 0
    6114:	2c 96       	adiw	r28, 0x0c	; 12
    6116:	9f ad       	ldd	r25, Y+63	; 0x3f
    6118:	2c 97       	sbiw	r28, 0x0c	; 12
    611a:	c0 51       	subi	r28, 0x10	; 16
    611c:	df 4f       	sbci	r29, 0xFF	; 255
    611e:	e8 81       	ld	r30, Y
    6120:	c0 5f       	subi	r28, 0xF0	; 240
    6122:	d0 40       	sbci	r29, 0x00	; 0
    6124:	9e 0f       	add	r25, r30
    6126:	c8 50       	subi	r28, 0x08	; 8
    6128:	df 4f       	sbci	r29, 0xFF	; 255
    612a:	98 83       	st	Y, r25
    612c:	c8 5f       	subi	r28, 0xF8	; 248
    612e:	d0 40       	sbci	r29, 0x00	; 0
    6130:	c7 5f       	subi	r28, 0xF7	; 247
    6132:	de 4f       	sbci	r29, 0xFE	; 254
    6134:	88 81       	ld	r24, Y
    6136:	c9 50       	subi	r28, 0x09	; 9
    6138:	d1 40       	sbci	r29, 0x01	; 1
    613a:	c8 50       	subi	r28, 0x08	; 8
    613c:	df 4f       	sbci	r29, 0xFF	; 255
    613e:	f8 81       	ld	r31, Y
    6140:	c8 5f       	subi	r28, 0xF8	; 248
    6142:	d0 40       	sbci	r29, 0x00	; 0
    6144:	8f 0f       	add	r24, r31
    6146:	c8 50       	subi	r28, 0x08	; 8
    6148:	df 4f       	sbci	r29, 0xFF	; 255
    614a:	88 83       	st	Y, r24
    614c:	c8 5f       	subi	r28, 0xF8	; 248
    614e:	d0 40       	sbci	r29, 0x00	; 0
    6150:	cf 50       	subi	r28, 0x0F	; 15
    6152:	df 4f       	sbci	r29, 0xFF	; 255
    6154:	a8 80       	ld	r10, Y
    6156:	c1 5f       	subi	r28, 0xF1	; 241
    6158:	d0 40       	sbci	r29, 0x00	; 0
    615a:	ce 50       	subi	r28, 0x0E	; 14
    615c:	df 4f       	sbci	r29, 0xFF	; 255
    615e:	b8 80       	ld	r11, Y
    6160:	c2 5f       	subi	r28, 0xF2	; 242
    6162:	d0 40       	sbci	r29, 0x00	; 0
    6164:	cd 50       	subi	r28, 0x0D	; 13
    6166:	df 4f       	sbci	r29, 0xFF	; 255
    6168:	c8 80       	ld	r12, Y
    616a:	c3 5f       	subi	r28, 0xF3	; 243
    616c:	d0 40       	sbci	r29, 0x00	; 0
    616e:	cc 50       	subi	r28, 0x0C	; 12
    6170:	df 4f       	sbci	r29, 0xFF	; 255
    6172:	d8 80       	ld	r13, Y
    6174:	c4 5f       	subi	r28, 0xF4	; 244
    6176:	d0 40       	sbci	r29, 0x00	; 0
    6178:	cb 50       	subi	r28, 0x0B	; 11
    617a:	df 4f       	sbci	r29, 0xFF	; 255
    617c:	e8 80       	ld	r14, Y
    617e:	c5 5f       	subi	r28, 0xF5	; 245
    6180:	d0 40       	sbci	r29, 0x00	; 0
    6182:	ca 50       	subi	r28, 0x0A	; 10
    6184:	df 4f       	sbci	r29, 0xFF	; 255
    6186:	f8 80       	ld	r15, Y
    6188:	c6 5f       	subi	r28, 0xF6	; 246
    618a:	d0 40       	sbci	r29, 0x00	; 0
    618c:	c9 50       	subi	r28, 0x09	; 9
    618e:	df 4f       	sbci	r29, 0xFF	; 255
    6190:	08 81       	ld	r16, Y
    6192:	c7 5f       	subi	r28, 0xF7	; 247
    6194:	d0 40       	sbci	r29, 0x00	; 0
    6196:	c8 50       	subi	r28, 0x08	; 8
    6198:	df 4f       	sbci	r29, 0xFF	; 255
    619a:	18 81       	ld	r17, Y
    619c:	c8 5f       	subi	r28, 0xF8	; 248
    619e:	d0 40       	sbci	r29, 0x00	; 0
    61a0:	2a 2d       	mov	r18, r10
    61a2:	3b 2d       	mov	r19, r11
    61a4:	4c 2d       	mov	r20, r12
    61a6:	5d 2d       	mov	r21, r13
    61a8:	6e 2d       	mov	r22, r14
    61aa:	7f 2d       	mov	r23, r15
    61ac:	80 2f       	mov	r24, r16
    61ae:	91 2f       	mov	r25, r17
    61b0:	08 e0       	ldi	r16, 0x08	; 8
    61b2:	0e 94 44 01 	call	0x288	; 0x288 <__lshrdi3>
    61b6:	a2 2e       	mov	r10, r18
    61b8:	b3 2e       	mov	r11, r19
    61ba:	c4 2e       	mov	r12, r20
    61bc:	d5 2e       	mov	r13, r21
    61be:	e6 2e       	mov	r14, r22
    61c0:	f7 2e       	mov	r15, r23
    61c2:	08 2f       	mov	r16, r24
    61c4:	19 2f       	mov	r17, r25
    61c6:	2a 2d       	mov	r18, r10
    61c8:	3b 2d       	mov	r19, r11
    61ca:	4c 2d       	mov	r20, r12
    61cc:	5d 2d       	mov	r21, r13
    61ce:	6e 2d       	mov	r22, r14
    61d0:	7f 2d       	mov	r23, r15
    61d2:	80 2f       	mov	r24, r16
    61d4:	91 2f       	mov	r25, r17
    61d6:	2a 83       	std	Y+2, r18	; 0x02
    61d8:	3b 83       	std	Y+3, r19	; 0x03
    61da:	4c 83       	std	Y+4, r20	; 0x04
    61dc:	5d 83       	std	Y+5, r21	; 0x05
																										+ TIMER2_MAX ) / ( TIMER2_MAX + 1 );	/*	Total Overflows	*/
										TCNT2 = ( TIMER2_MAX + 1 ) -
    61de:	04 e4       	ldi	r16, 0x44	; 68
    61e0:	10 e0       	ldi	r17, 0x00	; 0
    61e2:	24 96       	adiw	r28, 0x04	; 4
    61e4:	1f af       	std	Y+63, r17	; 0x3f
    61e6:	0e af       	std	Y+62, r16	; 0x3e
    61e8:	24 97       	sbiw	r28, 0x04	; 4
    61ea:	89 85       	ldd	r24, Y+9	; 0x09
    61ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    61ee:	5c 01       	movw	r10, r24
    61f0:	cc 24       	eor	r12, r12
    61f2:	dd 24       	eor	r13, r13
    61f4:	ee 24       	eor	r14, r14
    61f6:	ff 24       	eor	r15, r15
    61f8:	87 01       	movw	r16, r14
    61fa:	80 91 36 02 	lds	r24, 0x0236
    61fe:	90 91 37 02 	lds	r25, 0x0237
    6202:	a0 91 38 02 	lds	r26, 0x0238
    6206:	b0 91 39 02 	lds	r27, 0x0239
    620a:	1c 01       	movw	r2, r24
    620c:	2d 01       	movw	r4, r26
    620e:	66 24       	eor	r6, r6
    6210:	77 24       	eor	r7, r7
    6212:	43 01       	movw	r8, r6
    6214:	2a 2d       	mov	r18, r10
    6216:	3b 2d       	mov	r19, r11
    6218:	4c 2d       	mov	r20, r12
    621a:	5d 2d       	mov	r21, r13
    621c:	6e 2d       	mov	r22, r14
    621e:	7f 2d       	mov	r23, r15
    6220:	80 2f       	mov	r24, r16
    6222:	91 2f       	mov	r25, r17
    6224:	a2 2c       	mov	r10, r2
    6226:	b3 2c       	mov	r11, r3
    6228:	c4 2c       	mov	r12, r4
    622a:	d5 2c       	mov	r13, r5
    622c:	e6 2c       	mov	r14, r6
    622e:	f7 2c       	mov	r15, r7
    6230:	08 2d       	mov	r16, r8
    6232:	19 2d       	mov	r17, r9
    6234:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    6238:	22 2e       	mov	r2, r18
    623a:	33 2e       	mov	r3, r19
    623c:	44 2e       	mov	r4, r20
    623e:	55 2e       	mov	r5, r21
    6240:	66 2e       	mov	r6, r22
    6242:	77 2e       	mov	r7, r23
    6244:	88 2e       	mov	r8, r24
    6246:	99 2e       	mov	r9, r25
    6248:	a2 2c       	mov	r10, r2
    624a:	b3 2c       	mov	r11, r3
    624c:	c4 2c       	mov	r12, r4
    624e:	d5 2c       	mov	r13, r5
    6250:	e6 2c       	mov	r14, r6
    6252:	f7 2c       	mov	r15, r7
    6254:	08 2d       	mov	r16, r8
    6256:	19 2d       	mov	r17, r9
    6258:	2a 2d       	mov	r18, r10
    625a:	3b 2d       	mov	r19, r11
    625c:	4c 2d       	mov	r20, r12
    625e:	5d 2d       	mov	r21, r13
    6260:	6e 2d       	mov	r22, r14
    6262:	7f 2d       	mov	r23, r15
    6264:	80 2f       	mov	r24, r16
    6266:	91 2f       	mov	r25, r17
    6268:	0f 2e       	mov	r0, r31
    626a:	f8 ee       	ldi	r31, 0xE8	; 232
    626c:	af 2e       	mov	r10, r31
    626e:	f0 2d       	mov	r31, r0
    6270:	0f 2e       	mov	r0, r31
    6272:	f3 e0       	ldi	r31, 0x03	; 3
    6274:	bf 2e       	mov	r11, r31
    6276:	f0 2d       	mov	r31, r0
    6278:	cc 24       	eor	r12, r12
    627a:	dd 24       	eor	r13, r13
    627c:	ee 24       	eor	r14, r14
    627e:	ff 24       	eor	r15, r15
    6280:	00 e0       	ldi	r16, 0x00	; 0
    6282:	10 e0       	ldi	r17, 0x00	; 0
    6284:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    6288:	a2 2e       	mov	r10, r18
    628a:	b3 2e       	mov	r11, r19
    628c:	c4 2e       	mov	r12, r20
    628e:	d5 2e       	mov	r13, r21
    6290:	e6 2e       	mov	r14, r22
    6292:	f7 2e       	mov	r15, r23
    6294:	08 2f       	mov	r16, r24
    6296:	19 2f       	mov	r17, r25
    6298:	2a 2d       	mov	r18, r10
    629a:	3b 2d       	mov	r19, r11
    629c:	4c 2d       	mov	r20, r12
    629e:	5d 2d       	mov	r21, r13
    62a0:	6e 2d       	mov	r22, r14
    62a2:	7f 2d       	mov	r23, r15
    62a4:	80 2f       	mov	r24, r16
    62a6:	91 2f       	mov	r25, r17
    62a8:	82 2f       	mov	r24, r18
    62aa:	81 95       	neg	r24
    62ac:	24 96       	adiw	r28, 0x04	; 4
    62ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    62b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    62b2:	24 97       	sbiw	r28, 0x04	; 4
    62b4:	80 83       	st	Z, r24
    62b6:	1f c0       	rjmp	.+62     	; 0x62f6 <Timer_PollingDelay+0x2406>
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / ( 1000UL ) ) % (u16)( TIMER2_MAX + 1 ) );	/* PRE-LOAD value	*/									/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER2_BOTTOM )									/*	Delay LOOP							*/
										{
											while( !(( TIFR >> TOV2_BIT) & BIT0_MASK ) );									/*	Waiting for Timer2 Overflow flag	*/
    62b8:	e8 e5       	ldi	r30, 0x58	; 88
    62ba:	f0 e0       	ldi	r31, 0x00	; 0
    62bc:	80 81       	ld	r24, Z
    62be:	82 95       	swap	r24
    62c0:	86 95       	lsr	r24
    62c2:	86 95       	lsr	r24
    62c4:	83 70       	andi	r24, 0x03	; 3
    62c6:	88 2f       	mov	r24, r24
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	81 70       	andi	r24, 0x01	; 1
    62cc:	90 70       	andi	r25, 0x00	; 0
    62ce:	00 97       	sbiw	r24, 0x00	; 0
    62d0:	99 f3       	breq	.-26     	; 0x62b8 <Timer_PollingDelay+0x23c8>
											Local_u32OverFlowCounts--;
    62d2:	8a 81       	ldd	r24, Y+2	; 0x02
    62d4:	9b 81       	ldd	r25, Y+3	; 0x03
    62d6:	ac 81       	ldd	r26, Y+4	; 0x04
    62d8:	bd 81       	ldd	r27, Y+5	; 0x05
    62da:	01 97       	sbiw	r24, 0x01	; 1
    62dc:	a1 09       	sbc	r26, r1
    62de:	b1 09       	sbc	r27, r1
    62e0:	8a 83       	std	Y+2, r24	; 0x02
    62e2:	9b 83       	std	Y+3, r25	; 0x03
    62e4:	ac 83       	std	Y+4, r26	; 0x04
    62e6:	bd 83       	std	Y+5, r27	; 0x05
											TIFR |= (BIT0_MASK << TOV2_BIT);												/*	Clearing Timer2 Overflow flag		*/
    62e8:	a8 e5       	ldi	r26, 0x58	; 88
    62ea:	b0 e0       	ldi	r27, 0x00	; 0
    62ec:	e8 e5       	ldi	r30, 0x58	; 88
    62ee:	f0 e0       	ldi	r31, 0x00	; 0
    62f0:	80 81       	ld	r24, Z
    62f2:	80 64       	ori	r24, 0x40	; 64
    62f4:	8c 93       	st	X, r24
			case  COMP_NORMAL		:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / ( 1000UL ) )
																										+ TIMER2_MAX ) / ( TIMER2_MAX + 1 );	/*	Total Overflows	*/
										TCNT2 = ( TIMER2_MAX + 1 ) -
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / ( 1000UL ) ) % (u16)( TIMER2_MAX + 1 ) );	/* PRE-LOAD value	*/									/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER2_BOTTOM )									/*	Delay LOOP							*/
    62f6:	8a 81       	ldd	r24, Y+2	; 0x02
    62f8:	9b 81       	ldd	r25, Y+3	; 0x03
    62fa:	ac 81       	ldd	r26, Y+4	; 0x04
    62fc:	bd 81       	ldd	r27, Y+5	; 0x05
    62fe:	00 97       	sbiw	r24, 0x00	; 0
    6300:	a1 05       	cpc	r26, r1
    6302:	b1 05       	cpc	r27, r1
    6304:	c9 f6       	brne	.-78     	; 0x62b8 <Timer_PollingDelay+0x23c8>
    6306:	0c 94 6f 39 	jmp	0x72de	; 0x72de <Timer_PollingDelay+0x33ee>
											Local_u32OverFlowCounts--;
											TIFR |= (BIT0_MASK << TOV2_BIT);												/*	Clearing Timer2 Overflow flag		*/
										}
										break;

			case  COMP_TOG_ON_MATCH	:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / (2 * 1000UL ) )
    630a:	89 85       	ldd	r24, Y+9	; 0x09
    630c:	9a 85       	ldd	r25, Y+10	; 0x0a
    630e:	5c 01       	movw	r10, r24
    6310:	cc 24       	eor	r12, r12
    6312:	dd 24       	eor	r13, r13
    6314:	ee 24       	eor	r14, r14
    6316:	ff 24       	eor	r15, r15
    6318:	87 01       	movw	r16, r14
    631a:	80 91 36 02 	lds	r24, 0x0236
    631e:	90 91 37 02 	lds	r25, 0x0237
    6322:	a0 91 38 02 	lds	r26, 0x0238
    6326:	b0 91 39 02 	lds	r27, 0x0239
    632a:	1c 01       	movw	r2, r24
    632c:	2d 01       	movw	r4, r26
    632e:	66 24       	eor	r6, r6
    6330:	77 24       	eor	r7, r7
    6332:	43 01       	movw	r8, r6
    6334:	2a 2d       	mov	r18, r10
    6336:	3b 2d       	mov	r19, r11
    6338:	4c 2d       	mov	r20, r12
    633a:	5d 2d       	mov	r21, r13
    633c:	6e 2d       	mov	r22, r14
    633e:	7f 2d       	mov	r23, r15
    6340:	80 2f       	mov	r24, r16
    6342:	91 2f       	mov	r25, r17
    6344:	a2 2c       	mov	r10, r2
    6346:	b3 2c       	mov	r11, r3
    6348:	c4 2c       	mov	r12, r4
    634a:	d5 2c       	mov	r13, r5
    634c:	e6 2c       	mov	r14, r6
    634e:	f7 2c       	mov	r15, r7
    6350:	08 2d       	mov	r16, r8
    6352:	19 2d       	mov	r17, r9
    6354:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    6358:	22 2e       	mov	r2, r18
    635a:	33 2e       	mov	r3, r19
    635c:	44 2e       	mov	r4, r20
    635e:	55 2e       	mov	r5, r21
    6360:	66 2e       	mov	r6, r22
    6362:	77 2e       	mov	r7, r23
    6364:	88 2e       	mov	r8, r24
    6366:	99 2e       	mov	r9, r25
    6368:	a2 2c       	mov	r10, r2
    636a:	b3 2c       	mov	r11, r3
    636c:	c4 2c       	mov	r12, r4
    636e:	d5 2c       	mov	r13, r5
    6370:	e6 2c       	mov	r14, r6
    6372:	f7 2c       	mov	r15, r7
    6374:	08 2d       	mov	r16, r8
    6376:	19 2d       	mov	r17, r9
    6378:	2a 2d       	mov	r18, r10
    637a:	3b 2d       	mov	r19, r11
    637c:	4c 2d       	mov	r20, r12
    637e:	5d 2d       	mov	r21, r13
    6380:	6e 2d       	mov	r22, r14
    6382:	7f 2d       	mov	r23, r15
    6384:	80 2f       	mov	r24, r16
    6386:	91 2f       	mov	r25, r17
    6388:	0f 2e       	mov	r0, r31
    638a:	f0 ed       	ldi	r31, 0xD0	; 208
    638c:	af 2e       	mov	r10, r31
    638e:	f0 2d       	mov	r31, r0
    6390:	0f 2e       	mov	r0, r31
    6392:	f7 e0       	ldi	r31, 0x07	; 7
    6394:	bf 2e       	mov	r11, r31
    6396:	f0 2d       	mov	r31, r0
    6398:	cc 24       	eor	r12, r12
    639a:	dd 24       	eor	r13, r13
    639c:	ee 24       	eor	r14, r14
    639e:	ff 24       	eor	r15, r15
    63a0:	00 e0       	ldi	r16, 0x00	; 0
    63a2:	10 e0       	ldi	r17, 0x00	; 0
    63a4:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    63a8:	a2 2e       	mov	r10, r18
    63aa:	b3 2e       	mov	r11, r19
    63ac:	c4 2e       	mov	r12, r20
    63ae:	d5 2e       	mov	r13, r21
    63b0:	e6 2e       	mov	r14, r22
    63b2:	f7 2e       	mov	r15, r23
    63b4:	08 2f       	mov	r16, r24
    63b6:	19 2f       	mov	r17, r25
    63b8:	aa ae       	std	Y+58, r10	; 0x3a
    63ba:	bb ae       	std	Y+59, r11	; 0x3b
    63bc:	cc ae       	std	Y+60, r12	; 0x3c
    63be:	dd ae       	std	Y+61, r13	; 0x3d
    63c0:	ee ae       	std	Y+62, r14	; 0x3e
    63c2:	ff ae       	std	Y+63, r15	; 0x3f
    63c4:	21 96       	adiw	r28, 0x01	; 1
    63c6:	0f af       	std	Y+63, r16	; 0x3f
    63c8:	21 97       	sbiw	r28, 0x01	; 1
    63ca:	22 96       	adiw	r28, 0x02	; 2
    63cc:	1f af       	std	Y+63, r17	; 0x3f
    63ce:	22 97       	sbiw	r28, 0x02	; 2
    63d0:	80 91 31 02 	lds	r24, 0x0231
    63d4:	08 2f       	mov	r16, r24
    63d6:	10 e0       	ldi	r17, 0x00	; 0
    63d8:	20 e0       	ldi	r18, 0x00	; 0
    63da:	30 e0       	ldi	r19, 0x00	; 0
    63dc:	40 e0       	ldi	r20, 0x00	; 0
    63de:	50 e0       	ldi	r21, 0x00	; 0
    63e0:	60 e0       	ldi	r22, 0x00	; 0
    63e2:	70 e0       	ldi	r23, 0x00	; 0
    63e4:	0a ab       	std	Y+50, r16	; 0x32
    63e6:	1b ab       	std	Y+51, r17	; 0x33
    63e8:	2c ab       	std	Y+52, r18	; 0x34
    63ea:	3d ab       	std	Y+53, r19	; 0x35
    63ec:	4e ab       	std	Y+54, r20	; 0x36
    63ee:	5f ab       	std	Y+55, r21	; 0x37
    63f0:	68 af       	std	Y+56, r22	; 0x38
    63f2:	79 af       	std	Y+57, r23	; 0x39
    63f4:	1a ad       	ldd	r17, Y+58	; 0x3a
    63f6:	2a a9       	ldd	r18, Y+50	; 0x32
    63f8:	12 0f       	add	r17, r18
    63fa:	c4 5f       	subi	r28, 0xF4	; 244
    63fc:	de 4f       	sbci	r29, 0xFE	; 254
    63fe:	18 83       	st	Y, r17
    6400:	cc 50       	subi	r28, 0x0C	; 12
    6402:	d1 40       	sbci	r29, 0x01	; 1
    6404:	31 e0       	ldi	r19, 0x01	; 1
    6406:	cc 5e       	subi	r28, 0xEC	; 236
    6408:	de 4f       	sbci	r29, 0xFE	; 254
    640a:	38 83       	st	Y, r19
    640c:	c4 51       	subi	r28, 0x14	; 20
    640e:	d1 40       	sbci	r29, 0x01	; 1
    6410:	c4 5f       	subi	r28, 0xF4	; 244
    6412:	de 4f       	sbci	r29, 0xFE	; 254
    6414:	48 81       	ld	r20, Y
    6416:	cc 50       	subi	r28, 0x0C	; 12
    6418:	d1 40       	sbci	r29, 0x01	; 1
    641a:	5a ad       	ldd	r21, Y+58	; 0x3a
    641c:	45 17       	cp	r20, r21
    641e:	28 f0       	brcs	.+10     	; 0x642a <Timer_PollingDelay+0x253a>
    6420:	cc 5e       	subi	r28, 0xEC	; 236
    6422:	de 4f       	sbci	r29, 0xFE	; 254
    6424:	18 82       	st	Y, r1
    6426:	c4 51       	subi	r28, 0x14	; 20
    6428:	d1 40       	sbci	r29, 0x01	; 1
    642a:	6b ad       	ldd	r22, Y+59	; 0x3b
    642c:	7b a9       	ldd	r23, Y+51	; 0x33
    642e:	67 0f       	add	r22, r23
    6430:	c3 5f       	subi	r28, 0xF3	; 243
    6432:	de 4f       	sbci	r29, 0xFE	; 254
    6434:	68 83       	st	Y, r22
    6436:	cd 50       	subi	r28, 0x0D	; 13
    6438:	d1 40       	sbci	r29, 0x01	; 1
    643a:	81 e0       	ldi	r24, 0x01	; 1
    643c:	cb 5e       	subi	r28, 0xEB	; 235
    643e:	de 4f       	sbci	r29, 0xFE	; 254
    6440:	88 83       	st	Y, r24
    6442:	c5 51       	subi	r28, 0x15	; 21
    6444:	d1 40       	sbci	r29, 0x01	; 1
    6446:	c3 5f       	subi	r28, 0xF3	; 243
    6448:	de 4f       	sbci	r29, 0xFE	; 254
    644a:	98 81       	ld	r25, Y
    644c:	cd 50       	subi	r28, 0x0D	; 13
    644e:	d1 40       	sbci	r29, 0x01	; 1
    6450:	eb ad       	ldd	r30, Y+59	; 0x3b
    6452:	9e 17       	cp	r25, r30
    6454:	28 f0       	brcs	.+10     	; 0x6460 <Timer_PollingDelay+0x2570>
    6456:	cb 5e       	subi	r28, 0xEB	; 235
    6458:	de 4f       	sbci	r29, 0xFE	; 254
    645a:	18 82       	st	Y, r1
    645c:	c5 51       	subi	r28, 0x15	; 21
    645e:	d1 40       	sbci	r29, 0x01	; 1
    6460:	cc 5e       	subi	r28, 0xEC	; 236
    6462:	de 4f       	sbci	r29, 0xFE	; 254
    6464:	f8 81       	ld	r31, Y
    6466:	c4 51       	subi	r28, 0x14	; 20
    6468:	d1 40       	sbci	r29, 0x01	; 1
    646a:	c3 5f       	subi	r28, 0xF3	; 243
    646c:	de 4f       	sbci	r29, 0xFE	; 254
    646e:	08 81       	ld	r16, Y
    6470:	cd 50       	subi	r28, 0x0D	; 13
    6472:	d1 40       	sbci	r29, 0x01	; 1
    6474:	f0 0f       	add	r31, r16
    6476:	ca 5e       	subi	r28, 0xEA	; 234
    6478:	de 4f       	sbci	r29, 0xFE	; 254
    647a:	f8 83       	st	Y, r31
    647c:	c6 51       	subi	r28, 0x16	; 22
    647e:	d1 40       	sbci	r29, 0x01	; 1
    6480:	11 e0       	ldi	r17, 0x01	; 1
    6482:	c9 5e       	subi	r28, 0xE9	; 233
    6484:	de 4f       	sbci	r29, 0xFE	; 254
    6486:	18 83       	st	Y, r17
    6488:	c7 51       	subi	r28, 0x17	; 23
    648a:	d1 40       	sbci	r29, 0x01	; 1
    648c:	ca 5e       	subi	r28, 0xEA	; 234
    648e:	de 4f       	sbci	r29, 0xFE	; 254
    6490:	28 81       	ld	r18, Y
    6492:	c6 51       	subi	r28, 0x16	; 22
    6494:	d1 40       	sbci	r29, 0x01	; 1
    6496:	c3 5f       	subi	r28, 0xF3	; 243
    6498:	de 4f       	sbci	r29, 0xFE	; 254
    649a:	38 81       	ld	r19, Y
    649c:	cd 50       	subi	r28, 0x0D	; 13
    649e:	d1 40       	sbci	r29, 0x01	; 1
    64a0:	23 17       	cp	r18, r19
    64a2:	28 f0       	brcs	.+10     	; 0x64ae <Timer_PollingDelay+0x25be>
    64a4:	c9 5e       	subi	r28, 0xE9	; 233
    64a6:	de 4f       	sbci	r29, 0xFE	; 254
    64a8:	18 82       	st	Y, r1
    64aa:	c7 51       	subi	r28, 0x17	; 23
    64ac:	d1 40       	sbci	r29, 0x01	; 1
    64ae:	cb 5e       	subi	r28, 0xEB	; 235
    64b0:	de 4f       	sbci	r29, 0xFE	; 254
    64b2:	48 81       	ld	r20, Y
    64b4:	c5 51       	subi	r28, 0x15	; 21
    64b6:	d1 40       	sbci	r29, 0x01	; 1
    64b8:	c9 5e       	subi	r28, 0xE9	; 233
    64ba:	de 4f       	sbci	r29, 0xFE	; 254
    64bc:	58 81       	ld	r21, Y
    64be:	c7 51       	subi	r28, 0x17	; 23
    64c0:	d1 40       	sbci	r29, 0x01	; 1
    64c2:	45 2b       	or	r20, r21
    64c4:	cb 5e       	subi	r28, 0xEB	; 235
    64c6:	de 4f       	sbci	r29, 0xFE	; 254
    64c8:	48 83       	st	Y, r20
    64ca:	c5 51       	subi	r28, 0x15	; 21
    64cc:	d1 40       	sbci	r29, 0x01	; 1
    64ce:	ca 5e       	subi	r28, 0xEA	; 234
    64d0:	de 4f       	sbci	r29, 0xFE	; 254
    64d2:	68 81       	ld	r22, Y
    64d4:	c6 51       	subi	r28, 0x16	; 22
    64d6:	d1 40       	sbci	r29, 0x01	; 1
    64d8:	c3 5f       	subi	r28, 0xF3	; 243
    64da:	de 4f       	sbci	r29, 0xFE	; 254
    64dc:	68 83       	st	Y, r22
    64de:	cd 50       	subi	r28, 0x0D	; 13
    64e0:	d1 40       	sbci	r29, 0x01	; 1
    64e2:	7c ad       	ldd	r23, Y+60	; 0x3c
    64e4:	8c a9       	ldd	r24, Y+52	; 0x34
    64e6:	78 0f       	add	r23, r24
    64e8:	c2 5f       	subi	r28, 0xF2	; 242
    64ea:	de 4f       	sbci	r29, 0xFE	; 254
    64ec:	78 83       	st	Y, r23
    64ee:	ce 50       	subi	r28, 0x0E	; 14
    64f0:	d1 40       	sbci	r29, 0x01	; 1
    64f2:	91 e0       	ldi	r25, 0x01	; 1
    64f4:	c8 5e       	subi	r28, 0xE8	; 232
    64f6:	de 4f       	sbci	r29, 0xFE	; 254
    64f8:	98 83       	st	Y, r25
    64fa:	c8 51       	subi	r28, 0x18	; 24
    64fc:	d1 40       	sbci	r29, 0x01	; 1
    64fe:	c2 5f       	subi	r28, 0xF2	; 242
    6500:	de 4f       	sbci	r29, 0xFE	; 254
    6502:	e8 81       	ld	r30, Y
    6504:	ce 50       	subi	r28, 0x0E	; 14
    6506:	d1 40       	sbci	r29, 0x01	; 1
    6508:	fc ad       	ldd	r31, Y+60	; 0x3c
    650a:	ef 17       	cp	r30, r31
    650c:	28 f0       	brcs	.+10     	; 0x6518 <Timer_PollingDelay+0x2628>
    650e:	c8 5e       	subi	r28, 0xE8	; 232
    6510:	de 4f       	sbci	r29, 0xFE	; 254
    6512:	18 82       	st	Y, r1
    6514:	c8 51       	subi	r28, 0x18	; 24
    6516:	d1 40       	sbci	r29, 0x01	; 1
    6518:	cb 5e       	subi	r28, 0xEB	; 235
    651a:	de 4f       	sbci	r29, 0xFE	; 254
    651c:	08 81       	ld	r16, Y
    651e:	c5 51       	subi	r28, 0x15	; 21
    6520:	d1 40       	sbci	r29, 0x01	; 1
    6522:	c2 5f       	subi	r28, 0xF2	; 242
    6524:	de 4f       	sbci	r29, 0xFE	; 254
    6526:	18 81       	ld	r17, Y
    6528:	ce 50       	subi	r28, 0x0E	; 14
    652a:	d1 40       	sbci	r29, 0x01	; 1
    652c:	01 0f       	add	r16, r17
    652e:	c7 5e       	subi	r28, 0xE7	; 231
    6530:	de 4f       	sbci	r29, 0xFE	; 254
    6532:	08 83       	st	Y, r16
    6534:	c9 51       	subi	r28, 0x19	; 25
    6536:	d1 40       	sbci	r29, 0x01	; 1
    6538:	21 e0       	ldi	r18, 0x01	; 1
    653a:	c6 5e       	subi	r28, 0xE6	; 230
    653c:	de 4f       	sbci	r29, 0xFE	; 254
    653e:	28 83       	st	Y, r18
    6540:	ca 51       	subi	r28, 0x1A	; 26
    6542:	d1 40       	sbci	r29, 0x01	; 1
    6544:	c7 5e       	subi	r28, 0xE7	; 231
    6546:	de 4f       	sbci	r29, 0xFE	; 254
    6548:	38 81       	ld	r19, Y
    654a:	c9 51       	subi	r28, 0x19	; 25
    654c:	d1 40       	sbci	r29, 0x01	; 1
    654e:	c2 5f       	subi	r28, 0xF2	; 242
    6550:	de 4f       	sbci	r29, 0xFE	; 254
    6552:	48 81       	ld	r20, Y
    6554:	ce 50       	subi	r28, 0x0E	; 14
    6556:	d1 40       	sbci	r29, 0x01	; 1
    6558:	34 17       	cp	r19, r20
    655a:	28 f0       	brcs	.+10     	; 0x6566 <Timer_PollingDelay+0x2676>
    655c:	c6 5e       	subi	r28, 0xE6	; 230
    655e:	de 4f       	sbci	r29, 0xFE	; 254
    6560:	18 82       	st	Y, r1
    6562:	ca 51       	subi	r28, 0x1A	; 26
    6564:	d1 40       	sbci	r29, 0x01	; 1
    6566:	c8 5e       	subi	r28, 0xE8	; 232
    6568:	de 4f       	sbci	r29, 0xFE	; 254
    656a:	58 81       	ld	r21, Y
    656c:	c8 51       	subi	r28, 0x18	; 24
    656e:	d1 40       	sbci	r29, 0x01	; 1
    6570:	c6 5e       	subi	r28, 0xE6	; 230
    6572:	de 4f       	sbci	r29, 0xFE	; 254
    6574:	68 81       	ld	r22, Y
    6576:	ca 51       	subi	r28, 0x1A	; 26
    6578:	d1 40       	sbci	r29, 0x01	; 1
    657a:	56 2b       	or	r21, r22
    657c:	c8 5e       	subi	r28, 0xE8	; 232
    657e:	de 4f       	sbci	r29, 0xFE	; 254
    6580:	58 83       	st	Y, r21
    6582:	c8 51       	subi	r28, 0x18	; 24
    6584:	d1 40       	sbci	r29, 0x01	; 1
    6586:	c7 5e       	subi	r28, 0xE7	; 231
    6588:	de 4f       	sbci	r29, 0xFE	; 254
    658a:	78 81       	ld	r23, Y
    658c:	c9 51       	subi	r28, 0x19	; 25
    658e:	d1 40       	sbci	r29, 0x01	; 1
    6590:	c2 5f       	subi	r28, 0xF2	; 242
    6592:	de 4f       	sbci	r29, 0xFE	; 254
    6594:	78 83       	st	Y, r23
    6596:	ce 50       	subi	r28, 0x0E	; 14
    6598:	d1 40       	sbci	r29, 0x01	; 1
    659a:	8d ad       	ldd	r24, Y+61	; 0x3d
    659c:	9d a9       	ldd	r25, Y+53	; 0x35
    659e:	89 0f       	add	r24, r25
    65a0:	c1 5f       	subi	r28, 0xF1	; 241
    65a2:	de 4f       	sbci	r29, 0xFE	; 254
    65a4:	88 83       	st	Y, r24
    65a6:	cf 50       	subi	r28, 0x0F	; 15
    65a8:	d1 40       	sbci	r29, 0x01	; 1
    65aa:	e1 e0       	ldi	r30, 0x01	; 1
    65ac:	c5 5e       	subi	r28, 0xE5	; 229
    65ae:	de 4f       	sbci	r29, 0xFE	; 254
    65b0:	e8 83       	st	Y, r30
    65b2:	cb 51       	subi	r28, 0x1B	; 27
    65b4:	d1 40       	sbci	r29, 0x01	; 1
    65b6:	c1 5f       	subi	r28, 0xF1	; 241
    65b8:	de 4f       	sbci	r29, 0xFE	; 254
    65ba:	f8 81       	ld	r31, Y
    65bc:	cf 50       	subi	r28, 0x0F	; 15
    65be:	d1 40       	sbci	r29, 0x01	; 1
    65c0:	0d ad       	ldd	r16, Y+61	; 0x3d
    65c2:	f0 17       	cp	r31, r16
    65c4:	28 f0       	brcs	.+10     	; 0x65d0 <Timer_PollingDelay+0x26e0>
    65c6:	c5 5e       	subi	r28, 0xE5	; 229
    65c8:	de 4f       	sbci	r29, 0xFE	; 254
    65ca:	18 82       	st	Y, r1
    65cc:	cb 51       	subi	r28, 0x1B	; 27
    65ce:	d1 40       	sbci	r29, 0x01	; 1
    65d0:	c8 5e       	subi	r28, 0xE8	; 232
    65d2:	de 4f       	sbci	r29, 0xFE	; 254
    65d4:	18 81       	ld	r17, Y
    65d6:	c8 51       	subi	r28, 0x18	; 24
    65d8:	d1 40       	sbci	r29, 0x01	; 1
    65da:	c1 5f       	subi	r28, 0xF1	; 241
    65dc:	de 4f       	sbci	r29, 0xFE	; 254
    65de:	28 81       	ld	r18, Y
    65e0:	cf 50       	subi	r28, 0x0F	; 15
    65e2:	d1 40       	sbci	r29, 0x01	; 1
    65e4:	12 0f       	add	r17, r18
    65e6:	c4 5e       	subi	r28, 0xE4	; 228
    65e8:	de 4f       	sbci	r29, 0xFE	; 254
    65ea:	18 83       	st	Y, r17
    65ec:	cc 51       	subi	r28, 0x1C	; 28
    65ee:	d1 40       	sbci	r29, 0x01	; 1
    65f0:	31 e0       	ldi	r19, 0x01	; 1
    65f2:	c3 5e       	subi	r28, 0xE3	; 227
    65f4:	de 4f       	sbci	r29, 0xFE	; 254
    65f6:	38 83       	st	Y, r19
    65f8:	cd 51       	subi	r28, 0x1D	; 29
    65fa:	d1 40       	sbci	r29, 0x01	; 1
    65fc:	c4 5e       	subi	r28, 0xE4	; 228
    65fe:	de 4f       	sbci	r29, 0xFE	; 254
    6600:	48 81       	ld	r20, Y
    6602:	cc 51       	subi	r28, 0x1C	; 28
    6604:	d1 40       	sbci	r29, 0x01	; 1
    6606:	c1 5f       	subi	r28, 0xF1	; 241
    6608:	de 4f       	sbci	r29, 0xFE	; 254
    660a:	58 81       	ld	r21, Y
    660c:	cf 50       	subi	r28, 0x0F	; 15
    660e:	d1 40       	sbci	r29, 0x01	; 1
    6610:	45 17       	cp	r20, r21
    6612:	28 f0       	brcs	.+10     	; 0x661e <Timer_PollingDelay+0x272e>
    6614:	c3 5e       	subi	r28, 0xE3	; 227
    6616:	de 4f       	sbci	r29, 0xFE	; 254
    6618:	18 82       	st	Y, r1
    661a:	cd 51       	subi	r28, 0x1D	; 29
    661c:	d1 40       	sbci	r29, 0x01	; 1
    661e:	c5 5e       	subi	r28, 0xE5	; 229
    6620:	de 4f       	sbci	r29, 0xFE	; 254
    6622:	68 81       	ld	r22, Y
    6624:	cb 51       	subi	r28, 0x1B	; 27
    6626:	d1 40       	sbci	r29, 0x01	; 1
    6628:	c3 5e       	subi	r28, 0xE3	; 227
    662a:	de 4f       	sbci	r29, 0xFE	; 254
    662c:	78 81       	ld	r23, Y
    662e:	cd 51       	subi	r28, 0x1D	; 29
    6630:	d1 40       	sbci	r29, 0x01	; 1
    6632:	67 2b       	or	r22, r23
    6634:	c5 5e       	subi	r28, 0xE5	; 229
    6636:	de 4f       	sbci	r29, 0xFE	; 254
    6638:	68 83       	st	Y, r22
    663a:	cb 51       	subi	r28, 0x1B	; 27
    663c:	d1 40       	sbci	r29, 0x01	; 1
    663e:	c4 5e       	subi	r28, 0xE4	; 228
    6640:	de 4f       	sbci	r29, 0xFE	; 254
    6642:	88 81       	ld	r24, Y
    6644:	cc 51       	subi	r28, 0x1C	; 28
    6646:	d1 40       	sbci	r29, 0x01	; 1
    6648:	c1 5f       	subi	r28, 0xF1	; 241
    664a:	de 4f       	sbci	r29, 0xFE	; 254
    664c:	88 83       	st	Y, r24
    664e:	cf 50       	subi	r28, 0x0F	; 15
    6650:	d1 40       	sbci	r29, 0x01	; 1
    6652:	9e ad       	ldd	r25, Y+62	; 0x3e
    6654:	ee a9       	ldd	r30, Y+54	; 0x36
    6656:	9e 0f       	add	r25, r30
    6658:	c0 5f       	subi	r28, 0xF0	; 240
    665a:	de 4f       	sbci	r29, 0xFE	; 254
    665c:	98 83       	st	Y, r25
    665e:	c0 51       	subi	r28, 0x10	; 16
    6660:	d1 40       	sbci	r29, 0x01	; 1
    6662:	f1 e0       	ldi	r31, 0x01	; 1
    6664:	c2 5e       	subi	r28, 0xE2	; 226
    6666:	de 4f       	sbci	r29, 0xFE	; 254
    6668:	f8 83       	st	Y, r31
    666a:	ce 51       	subi	r28, 0x1E	; 30
    666c:	d1 40       	sbci	r29, 0x01	; 1
    666e:	c0 5f       	subi	r28, 0xF0	; 240
    6670:	de 4f       	sbci	r29, 0xFE	; 254
    6672:	08 81       	ld	r16, Y
    6674:	c0 51       	subi	r28, 0x10	; 16
    6676:	d1 40       	sbci	r29, 0x01	; 1
    6678:	1e ad       	ldd	r17, Y+62	; 0x3e
    667a:	01 17       	cp	r16, r17
    667c:	28 f0       	brcs	.+10     	; 0x6688 <Timer_PollingDelay+0x2798>
    667e:	c2 5e       	subi	r28, 0xE2	; 226
    6680:	de 4f       	sbci	r29, 0xFE	; 254
    6682:	18 82       	st	Y, r1
    6684:	ce 51       	subi	r28, 0x1E	; 30
    6686:	d1 40       	sbci	r29, 0x01	; 1
    6688:	c5 5e       	subi	r28, 0xE5	; 229
    668a:	de 4f       	sbci	r29, 0xFE	; 254
    668c:	28 81       	ld	r18, Y
    668e:	cb 51       	subi	r28, 0x1B	; 27
    6690:	d1 40       	sbci	r29, 0x01	; 1
    6692:	c0 5f       	subi	r28, 0xF0	; 240
    6694:	de 4f       	sbci	r29, 0xFE	; 254
    6696:	38 81       	ld	r19, Y
    6698:	c0 51       	subi	r28, 0x10	; 16
    669a:	d1 40       	sbci	r29, 0x01	; 1
    669c:	23 0f       	add	r18, r19
    669e:	c1 5e       	subi	r28, 0xE1	; 225
    66a0:	de 4f       	sbci	r29, 0xFE	; 254
    66a2:	28 83       	st	Y, r18
    66a4:	cf 51       	subi	r28, 0x1F	; 31
    66a6:	d1 40       	sbci	r29, 0x01	; 1
    66a8:	41 e0       	ldi	r20, 0x01	; 1
    66aa:	c0 5e       	subi	r28, 0xE0	; 224
    66ac:	de 4f       	sbci	r29, 0xFE	; 254
    66ae:	48 83       	st	Y, r20
    66b0:	c0 52       	subi	r28, 0x20	; 32
    66b2:	d1 40       	sbci	r29, 0x01	; 1
    66b4:	c1 5e       	subi	r28, 0xE1	; 225
    66b6:	de 4f       	sbci	r29, 0xFE	; 254
    66b8:	58 81       	ld	r21, Y
    66ba:	cf 51       	subi	r28, 0x1F	; 31
    66bc:	d1 40       	sbci	r29, 0x01	; 1
    66be:	c0 5f       	subi	r28, 0xF0	; 240
    66c0:	de 4f       	sbci	r29, 0xFE	; 254
    66c2:	68 81       	ld	r22, Y
    66c4:	c0 51       	subi	r28, 0x10	; 16
    66c6:	d1 40       	sbci	r29, 0x01	; 1
    66c8:	56 17       	cp	r21, r22
    66ca:	28 f0       	brcs	.+10     	; 0x66d6 <Timer_PollingDelay+0x27e6>
    66cc:	c0 5e       	subi	r28, 0xE0	; 224
    66ce:	de 4f       	sbci	r29, 0xFE	; 254
    66d0:	18 82       	st	Y, r1
    66d2:	c0 52       	subi	r28, 0x20	; 32
    66d4:	d1 40       	sbci	r29, 0x01	; 1
    66d6:	c2 5e       	subi	r28, 0xE2	; 226
    66d8:	de 4f       	sbci	r29, 0xFE	; 254
    66da:	78 81       	ld	r23, Y
    66dc:	ce 51       	subi	r28, 0x1E	; 30
    66de:	d1 40       	sbci	r29, 0x01	; 1
    66e0:	c0 5e       	subi	r28, 0xE0	; 224
    66e2:	de 4f       	sbci	r29, 0xFE	; 254
    66e4:	88 81       	ld	r24, Y
    66e6:	c0 52       	subi	r28, 0x20	; 32
    66e8:	d1 40       	sbci	r29, 0x01	; 1
    66ea:	78 2b       	or	r23, r24
    66ec:	c2 5e       	subi	r28, 0xE2	; 226
    66ee:	de 4f       	sbci	r29, 0xFE	; 254
    66f0:	78 83       	st	Y, r23
    66f2:	ce 51       	subi	r28, 0x1E	; 30
    66f4:	d1 40       	sbci	r29, 0x01	; 1
    66f6:	c1 5e       	subi	r28, 0xE1	; 225
    66f8:	de 4f       	sbci	r29, 0xFE	; 254
    66fa:	98 81       	ld	r25, Y
    66fc:	cf 51       	subi	r28, 0x1F	; 31
    66fe:	d1 40       	sbci	r29, 0x01	; 1
    6700:	c0 5f       	subi	r28, 0xF0	; 240
    6702:	de 4f       	sbci	r29, 0xFE	; 254
    6704:	98 83       	st	Y, r25
    6706:	c0 51       	subi	r28, 0x10	; 16
    6708:	d1 40       	sbci	r29, 0x01	; 1
    670a:	ef ad       	ldd	r30, Y+63	; 0x3f
    670c:	ff a9       	ldd	r31, Y+55	; 0x37
    670e:	ef 0f       	add	r30, r31
    6710:	cf 5e       	subi	r28, 0xEF	; 239
    6712:	de 4f       	sbci	r29, 0xFE	; 254
    6714:	e8 83       	st	Y, r30
    6716:	c1 51       	subi	r28, 0x11	; 17
    6718:	d1 40       	sbci	r29, 0x01	; 1
    671a:	01 e0       	ldi	r16, 0x01	; 1
    671c:	cf 5d       	subi	r28, 0xDF	; 223
    671e:	de 4f       	sbci	r29, 0xFE	; 254
    6720:	08 83       	st	Y, r16
    6722:	c1 52       	subi	r28, 0x21	; 33
    6724:	d1 40       	sbci	r29, 0x01	; 1
    6726:	cf 5e       	subi	r28, 0xEF	; 239
    6728:	de 4f       	sbci	r29, 0xFE	; 254
    672a:	18 81       	ld	r17, Y
    672c:	c1 51       	subi	r28, 0x11	; 17
    672e:	d1 40       	sbci	r29, 0x01	; 1
    6730:	2f ad       	ldd	r18, Y+63	; 0x3f
    6732:	12 17       	cp	r17, r18
    6734:	28 f0       	brcs	.+10     	; 0x6740 <Timer_PollingDelay+0x2850>
    6736:	cf 5d       	subi	r28, 0xDF	; 223
    6738:	de 4f       	sbci	r29, 0xFE	; 254
    673a:	18 82       	st	Y, r1
    673c:	c1 52       	subi	r28, 0x21	; 33
    673e:	d1 40       	sbci	r29, 0x01	; 1
    6740:	c2 5e       	subi	r28, 0xE2	; 226
    6742:	de 4f       	sbci	r29, 0xFE	; 254
    6744:	38 81       	ld	r19, Y
    6746:	ce 51       	subi	r28, 0x1E	; 30
    6748:	d1 40       	sbci	r29, 0x01	; 1
    674a:	cf 5e       	subi	r28, 0xEF	; 239
    674c:	de 4f       	sbci	r29, 0xFE	; 254
    674e:	48 81       	ld	r20, Y
    6750:	c1 51       	subi	r28, 0x11	; 17
    6752:	d1 40       	sbci	r29, 0x01	; 1
    6754:	34 0f       	add	r19, r20
    6756:	ce 5d       	subi	r28, 0xDE	; 222
    6758:	de 4f       	sbci	r29, 0xFE	; 254
    675a:	38 83       	st	Y, r19
    675c:	c2 52       	subi	r28, 0x22	; 34
    675e:	d1 40       	sbci	r29, 0x01	; 1
    6760:	51 e0       	ldi	r21, 0x01	; 1
    6762:	cd 5d       	subi	r28, 0xDD	; 221
    6764:	de 4f       	sbci	r29, 0xFE	; 254
    6766:	58 83       	st	Y, r21
    6768:	c3 52       	subi	r28, 0x23	; 35
    676a:	d1 40       	sbci	r29, 0x01	; 1
    676c:	ce 5d       	subi	r28, 0xDE	; 222
    676e:	de 4f       	sbci	r29, 0xFE	; 254
    6770:	68 81       	ld	r22, Y
    6772:	c2 52       	subi	r28, 0x22	; 34
    6774:	d1 40       	sbci	r29, 0x01	; 1
    6776:	cf 5e       	subi	r28, 0xEF	; 239
    6778:	de 4f       	sbci	r29, 0xFE	; 254
    677a:	78 81       	ld	r23, Y
    677c:	c1 51       	subi	r28, 0x11	; 17
    677e:	d1 40       	sbci	r29, 0x01	; 1
    6780:	67 17       	cp	r22, r23
    6782:	28 f0       	brcs	.+10     	; 0x678e <Timer_PollingDelay+0x289e>
    6784:	cd 5d       	subi	r28, 0xDD	; 221
    6786:	de 4f       	sbci	r29, 0xFE	; 254
    6788:	18 82       	st	Y, r1
    678a:	c3 52       	subi	r28, 0x23	; 35
    678c:	d1 40       	sbci	r29, 0x01	; 1
    678e:	cf 5d       	subi	r28, 0xDF	; 223
    6790:	de 4f       	sbci	r29, 0xFE	; 254
    6792:	88 81       	ld	r24, Y
    6794:	c1 52       	subi	r28, 0x21	; 33
    6796:	d1 40       	sbci	r29, 0x01	; 1
    6798:	cd 5d       	subi	r28, 0xDD	; 221
    679a:	de 4f       	sbci	r29, 0xFE	; 254
    679c:	98 81       	ld	r25, Y
    679e:	c3 52       	subi	r28, 0x23	; 35
    67a0:	d1 40       	sbci	r29, 0x01	; 1
    67a2:	89 2b       	or	r24, r25
    67a4:	cf 5d       	subi	r28, 0xDF	; 223
    67a6:	de 4f       	sbci	r29, 0xFE	; 254
    67a8:	88 83       	st	Y, r24
    67aa:	c1 52       	subi	r28, 0x21	; 33
    67ac:	d1 40       	sbci	r29, 0x01	; 1
    67ae:	ce 5d       	subi	r28, 0xDE	; 222
    67b0:	de 4f       	sbci	r29, 0xFE	; 254
    67b2:	e8 81       	ld	r30, Y
    67b4:	c2 52       	subi	r28, 0x22	; 34
    67b6:	d1 40       	sbci	r29, 0x01	; 1
    67b8:	cf 5e       	subi	r28, 0xEF	; 239
    67ba:	de 4f       	sbci	r29, 0xFE	; 254
    67bc:	e8 83       	st	Y, r30
    67be:	c1 51       	subi	r28, 0x11	; 17
    67c0:	d1 40       	sbci	r29, 0x01	; 1
    67c2:	21 96       	adiw	r28, 0x01	; 1
    67c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    67c6:	21 97       	sbiw	r28, 0x01	; 1
    67c8:	08 ad       	ldd	r16, Y+56	; 0x38
    67ca:	f0 0f       	add	r31, r16
    67cc:	ce 5e       	subi	r28, 0xEE	; 238
    67ce:	de 4f       	sbci	r29, 0xFE	; 254
    67d0:	f8 83       	st	Y, r31
    67d2:	c2 51       	subi	r28, 0x12	; 18
    67d4:	d1 40       	sbci	r29, 0x01	; 1
    67d6:	11 e0       	ldi	r17, 0x01	; 1
    67d8:	cc 5d       	subi	r28, 0xDC	; 220
    67da:	de 4f       	sbci	r29, 0xFE	; 254
    67dc:	18 83       	st	Y, r17
    67de:	c4 52       	subi	r28, 0x24	; 36
    67e0:	d1 40       	sbci	r29, 0x01	; 1
    67e2:	ce 5e       	subi	r28, 0xEE	; 238
    67e4:	de 4f       	sbci	r29, 0xFE	; 254
    67e6:	28 81       	ld	r18, Y
    67e8:	c2 51       	subi	r28, 0x12	; 18
    67ea:	d1 40       	sbci	r29, 0x01	; 1
    67ec:	21 96       	adiw	r28, 0x01	; 1
    67ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    67f0:	21 97       	sbiw	r28, 0x01	; 1
    67f2:	23 17       	cp	r18, r19
    67f4:	28 f0       	brcs	.+10     	; 0x6800 <Timer_PollingDelay+0x2910>
    67f6:	cc 5d       	subi	r28, 0xDC	; 220
    67f8:	de 4f       	sbci	r29, 0xFE	; 254
    67fa:	18 82       	st	Y, r1
    67fc:	c4 52       	subi	r28, 0x24	; 36
    67fe:	d1 40       	sbci	r29, 0x01	; 1
    6800:	cf 5d       	subi	r28, 0xDF	; 223
    6802:	de 4f       	sbci	r29, 0xFE	; 254
    6804:	48 81       	ld	r20, Y
    6806:	c1 52       	subi	r28, 0x21	; 33
    6808:	d1 40       	sbci	r29, 0x01	; 1
    680a:	ce 5e       	subi	r28, 0xEE	; 238
    680c:	de 4f       	sbci	r29, 0xFE	; 254
    680e:	58 81       	ld	r21, Y
    6810:	c2 51       	subi	r28, 0x12	; 18
    6812:	d1 40       	sbci	r29, 0x01	; 1
    6814:	45 0f       	add	r20, r21
    6816:	cb 5d       	subi	r28, 0xDB	; 219
    6818:	de 4f       	sbci	r29, 0xFE	; 254
    681a:	48 83       	st	Y, r20
    681c:	c5 52       	subi	r28, 0x25	; 37
    681e:	d1 40       	sbci	r29, 0x01	; 1
    6820:	61 e0       	ldi	r22, 0x01	; 1
    6822:	ca 5d       	subi	r28, 0xDA	; 218
    6824:	de 4f       	sbci	r29, 0xFE	; 254
    6826:	68 83       	st	Y, r22
    6828:	c6 52       	subi	r28, 0x26	; 38
    682a:	d1 40       	sbci	r29, 0x01	; 1
    682c:	cb 5d       	subi	r28, 0xDB	; 219
    682e:	de 4f       	sbci	r29, 0xFE	; 254
    6830:	78 81       	ld	r23, Y
    6832:	c5 52       	subi	r28, 0x25	; 37
    6834:	d1 40       	sbci	r29, 0x01	; 1
    6836:	ce 5e       	subi	r28, 0xEE	; 238
    6838:	de 4f       	sbci	r29, 0xFE	; 254
    683a:	88 81       	ld	r24, Y
    683c:	c2 51       	subi	r28, 0x12	; 18
    683e:	d1 40       	sbci	r29, 0x01	; 1
    6840:	78 17       	cp	r23, r24
    6842:	28 f0       	brcs	.+10     	; 0x684e <Timer_PollingDelay+0x295e>
    6844:	ca 5d       	subi	r28, 0xDA	; 218
    6846:	de 4f       	sbci	r29, 0xFE	; 254
    6848:	18 82       	st	Y, r1
    684a:	c6 52       	subi	r28, 0x26	; 38
    684c:	d1 40       	sbci	r29, 0x01	; 1
    684e:	cc 5d       	subi	r28, 0xDC	; 220
    6850:	de 4f       	sbci	r29, 0xFE	; 254
    6852:	98 81       	ld	r25, Y
    6854:	c4 52       	subi	r28, 0x24	; 36
    6856:	d1 40       	sbci	r29, 0x01	; 1
    6858:	ca 5d       	subi	r28, 0xDA	; 218
    685a:	de 4f       	sbci	r29, 0xFE	; 254
    685c:	e8 81       	ld	r30, Y
    685e:	c6 52       	subi	r28, 0x26	; 38
    6860:	d1 40       	sbci	r29, 0x01	; 1
    6862:	9e 2b       	or	r25, r30
    6864:	cc 5d       	subi	r28, 0xDC	; 220
    6866:	de 4f       	sbci	r29, 0xFE	; 254
    6868:	98 83       	st	Y, r25
    686a:	c4 52       	subi	r28, 0x24	; 36
    686c:	d1 40       	sbci	r29, 0x01	; 1
    686e:	cb 5d       	subi	r28, 0xDB	; 219
    6870:	de 4f       	sbci	r29, 0xFE	; 254
    6872:	f8 81       	ld	r31, Y
    6874:	c5 52       	subi	r28, 0x25	; 37
    6876:	d1 40       	sbci	r29, 0x01	; 1
    6878:	ce 5e       	subi	r28, 0xEE	; 238
    687a:	de 4f       	sbci	r29, 0xFE	; 254
    687c:	f8 83       	st	Y, r31
    687e:	c2 51       	subi	r28, 0x12	; 18
    6880:	d1 40       	sbci	r29, 0x01	; 1
    6882:	22 96       	adiw	r28, 0x02	; 2
    6884:	0f ad       	ldd	r16, Y+63	; 0x3f
    6886:	22 97       	sbiw	r28, 0x02	; 2
    6888:	19 ad       	ldd	r17, Y+57	; 0x39
    688a:	01 0f       	add	r16, r17
    688c:	cd 5e       	subi	r28, 0xED	; 237
    688e:	de 4f       	sbci	r29, 0xFE	; 254
    6890:	08 83       	st	Y, r16
    6892:	c3 51       	subi	r28, 0x13	; 19
    6894:	d1 40       	sbci	r29, 0x01	; 1
    6896:	cc 5d       	subi	r28, 0xDC	; 220
    6898:	de 4f       	sbci	r29, 0xFE	; 254
    689a:	88 81       	ld	r24, Y
    689c:	c4 52       	subi	r28, 0x24	; 36
    689e:	d1 40       	sbci	r29, 0x01	; 1
    68a0:	cd 5e       	subi	r28, 0xED	; 237
    68a2:	de 4f       	sbci	r29, 0xFE	; 254
    68a4:	28 81       	ld	r18, Y
    68a6:	c3 51       	subi	r28, 0x13	; 19
    68a8:	d1 40       	sbci	r29, 0x01	; 1
    68aa:	82 0f       	add	r24, r18
    68ac:	cd 5e       	subi	r28, 0xED	; 237
    68ae:	de 4f       	sbci	r29, 0xFE	; 254
    68b0:	88 83       	st	Y, r24
    68b2:	c3 51       	subi	r28, 0x13	; 19
    68b4:	d1 40       	sbci	r29, 0x01	; 1
    68b6:	c4 5f       	subi	r28, 0xF4	; 244
    68b8:	de 4f       	sbci	r29, 0xFE	; 254
    68ba:	a8 80       	ld	r10, Y
    68bc:	cc 50       	subi	r28, 0x0C	; 12
    68be:	d1 40       	sbci	r29, 0x01	; 1
    68c0:	c3 5f       	subi	r28, 0xF3	; 243
    68c2:	de 4f       	sbci	r29, 0xFE	; 254
    68c4:	b8 80       	ld	r11, Y
    68c6:	cd 50       	subi	r28, 0x0D	; 13
    68c8:	d1 40       	sbci	r29, 0x01	; 1
    68ca:	c2 5f       	subi	r28, 0xF2	; 242
    68cc:	de 4f       	sbci	r29, 0xFE	; 254
    68ce:	c8 80       	ld	r12, Y
    68d0:	ce 50       	subi	r28, 0x0E	; 14
    68d2:	d1 40       	sbci	r29, 0x01	; 1
    68d4:	c1 5f       	subi	r28, 0xF1	; 241
    68d6:	de 4f       	sbci	r29, 0xFE	; 254
    68d8:	d8 80       	ld	r13, Y
    68da:	cf 50       	subi	r28, 0x0F	; 15
    68dc:	d1 40       	sbci	r29, 0x01	; 1
    68de:	c0 5f       	subi	r28, 0xF0	; 240
    68e0:	de 4f       	sbci	r29, 0xFE	; 254
    68e2:	e8 80       	ld	r14, Y
    68e4:	c0 51       	subi	r28, 0x10	; 16
    68e6:	d1 40       	sbci	r29, 0x01	; 1
    68e8:	cf 5e       	subi	r28, 0xEF	; 239
    68ea:	de 4f       	sbci	r29, 0xFE	; 254
    68ec:	f8 80       	ld	r15, Y
    68ee:	c1 51       	subi	r28, 0x11	; 17
    68f0:	d1 40       	sbci	r29, 0x01	; 1
    68f2:	ce 5e       	subi	r28, 0xEE	; 238
    68f4:	de 4f       	sbci	r29, 0xFE	; 254
    68f6:	08 81       	ld	r16, Y
    68f8:	c2 51       	subi	r28, 0x12	; 18
    68fa:	d1 40       	sbci	r29, 0x01	; 1
    68fc:	cd 5e       	subi	r28, 0xED	; 237
    68fe:	de 4f       	sbci	r29, 0xFE	; 254
    6900:	18 81       	ld	r17, Y
    6902:	c3 51       	subi	r28, 0x13	; 19
    6904:	d1 40       	sbci	r29, 0x01	; 1
    6906:	80 91 31 02 	lds	r24, 0x0231
    690a:	88 2f       	mov	r24, r24
    690c:	90 e0       	ldi	r25, 0x00	; 0
    690e:	01 96       	adiw	r24, 0x01	; 1
    6910:	1c 01       	movw	r2, r24
    6912:	44 24       	eor	r4, r4
    6914:	55 24       	eor	r5, r5
    6916:	66 24       	eor	r6, r6
    6918:	77 24       	eor	r7, r7
    691a:	43 01       	movw	r8, r6
    691c:	2a 2d       	mov	r18, r10
    691e:	3b 2d       	mov	r19, r11
    6920:	4c 2d       	mov	r20, r12
    6922:	5d 2d       	mov	r21, r13
    6924:	6e 2d       	mov	r22, r14
    6926:	7f 2d       	mov	r23, r15
    6928:	80 2f       	mov	r24, r16
    692a:	91 2f       	mov	r25, r17
    692c:	a2 2c       	mov	r10, r2
    692e:	b3 2c       	mov	r11, r3
    6930:	c4 2c       	mov	r12, r4
    6932:	d5 2c       	mov	r13, r5
    6934:	e6 2c       	mov	r14, r6
    6936:	f7 2c       	mov	r15, r7
    6938:	08 2d       	mov	r16, r8
    693a:	19 2d       	mov	r17, r9
    693c:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    6940:	a2 2e       	mov	r10, r18
    6942:	b3 2e       	mov	r11, r19
    6944:	c4 2e       	mov	r12, r20
    6946:	d5 2e       	mov	r13, r21
    6948:	e6 2e       	mov	r14, r22
    694a:	f7 2e       	mov	r15, r23
    694c:	08 2f       	mov	r16, r24
    694e:	19 2f       	mov	r17, r25
    6950:	2a 2d       	mov	r18, r10
    6952:	3b 2d       	mov	r19, r11
    6954:	4c 2d       	mov	r20, r12
    6956:	5d 2d       	mov	r21, r13
    6958:	6e 2d       	mov	r22, r14
    695a:	7f 2d       	mov	r23, r15
    695c:	80 2f       	mov	r24, r16
    695e:	91 2f       	mov	r25, r17
    6960:	2a 83       	std	Y+2, r18	; 0x02
    6962:	3b 83       	std	Y+3, r19	; 0x03
    6964:	4c 83       	std	Y+4, r20	; 0x04
    6966:	5d 83       	std	Y+5, r21	; 0x05
																				+ Global_u8OCR2_Value ) / (u16)( Global_u8OCR2_Value + 1 ) ;				/*	Total Overflows	*/
										TCNT2 = ( Global_u8OCR2_Value + 1 ) -
    6968:	44 e4       	ldi	r20, 0x44	; 68
    696a:	50 e0       	ldi	r21, 0x00	; 0
    696c:	59 ab       	std	Y+49, r21	; 0x31
    696e:	48 ab       	std	Y+48, r20	; 0x30
    6970:	50 91 31 02 	lds	r21, 0x0231
    6974:	5f a7       	std	Y+47, r21	; 0x2f
    6976:	89 85       	ldd	r24, Y+9	; 0x09
    6978:	9a 85       	ldd	r25, Y+10	; 0x0a
    697a:	5c 01       	movw	r10, r24
    697c:	cc 24       	eor	r12, r12
    697e:	dd 24       	eor	r13, r13
    6980:	ee 24       	eor	r14, r14
    6982:	ff 24       	eor	r15, r15
    6984:	87 01       	movw	r16, r14
    6986:	80 91 36 02 	lds	r24, 0x0236
    698a:	90 91 37 02 	lds	r25, 0x0237
    698e:	a0 91 38 02 	lds	r26, 0x0238
    6992:	b0 91 39 02 	lds	r27, 0x0239
    6996:	1c 01       	movw	r2, r24
    6998:	2d 01       	movw	r4, r26
    699a:	66 24       	eor	r6, r6
    699c:	77 24       	eor	r7, r7
    699e:	43 01       	movw	r8, r6
    69a0:	2a 2d       	mov	r18, r10
    69a2:	3b 2d       	mov	r19, r11
    69a4:	4c 2d       	mov	r20, r12
    69a6:	5d 2d       	mov	r21, r13
    69a8:	6e 2d       	mov	r22, r14
    69aa:	7f 2d       	mov	r23, r15
    69ac:	80 2f       	mov	r24, r16
    69ae:	91 2f       	mov	r25, r17
    69b0:	a2 2c       	mov	r10, r2
    69b2:	b3 2c       	mov	r11, r3
    69b4:	c4 2c       	mov	r12, r4
    69b6:	d5 2c       	mov	r13, r5
    69b8:	e6 2c       	mov	r14, r6
    69ba:	f7 2c       	mov	r15, r7
    69bc:	08 2d       	mov	r16, r8
    69be:	19 2d       	mov	r17, r9
    69c0:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    69c4:	22 2e       	mov	r2, r18
    69c6:	33 2e       	mov	r3, r19
    69c8:	44 2e       	mov	r4, r20
    69ca:	55 2e       	mov	r5, r21
    69cc:	66 2e       	mov	r6, r22
    69ce:	77 2e       	mov	r7, r23
    69d0:	88 2e       	mov	r8, r24
    69d2:	99 2e       	mov	r9, r25
    69d4:	a2 2c       	mov	r10, r2
    69d6:	b3 2c       	mov	r11, r3
    69d8:	c4 2c       	mov	r12, r4
    69da:	d5 2c       	mov	r13, r5
    69dc:	e6 2c       	mov	r14, r6
    69de:	f7 2c       	mov	r15, r7
    69e0:	08 2d       	mov	r16, r8
    69e2:	19 2d       	mov	r17, r9
    69e4:	2a 2d       	mov	r18, r10
    69e6:	3b 2d       	mov	r19, r11
    69e8:	4c 2d       	mov	r20, r12
    69ea:	5d 2d       	mov	r21, r13
    69ec:	6e 2d       	mov	r22, r14
    69ee:	7f 2d       	mov	r23, r15
    69f0:	80 2f       	mov	r24, r16
    69f2:	91 2f       	mov	r25, r17
    69f4:	0f 2e       	mov	r0, r31
    69f6:	f0 ed       	ldi	r31, 0xD0	; 208
    69f8:	af 2e       	mov	r10, r31
    69fa:	f0 2d       	mov	r31, r0
    69fc:	0f 2e       	mov	r0, r31
    69fe:	f7 e0       	ldi	r31, 0x07	; 7
    6a00:	bf 2e       	mov	r11, r31
    6a02:	f0 2d       	mov	r31, r0
    6a04:	cc 24       	eor	r12, r12
    6a06:	dd 24       	eor	r13, r13
    6a08:	ee 24       	eor	r14, r14
    6a0a:	ff 24       	eor	r15, r15
    6a0c:	00 e0       	ldi	r16, 0x00	; 0
    6a0e:	10 e0       	ldi	r17, 0x00	; 0
    6a10:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    6a14:	a2 2e       	mov	r10, r18
    6a16:	b3 2e       	mov	r11, r19
    6a18:	c4 2e       	mov	r12, r20
    6a1a:	d5 2e       	mov	r13, r21
    6a1c:	e6 2e       	mov	r14, r22
    6a1e:	f7 2e       	mov	r15, r23
    6a20:	08 2f       	mov	r16, r24
    6a22:	19 2f       	mov	r17, r25
    6a24:	2a 2c       	mov	r2, r10
    6a26:	3b 2c       	mov	r3, r11
    6a28:	4c 2c       	mov	r4, r12
    6a2a:	5d 2c       	mov	r5, r13
    6a2c:	6e 2c       	mov	r6, r14
    6a2e:	7f 2c       	mov	r7, r15
    6a30:	80 2e       	mov	r8, r16
    6a32:	91 2e       	mov	r9, r17
    6a34:	80 91 31 02 	lds	r24, 0x0231
    6a38:	88 2f       	mov	r24, r24
    6a3a:	90 e0       	ldi	r25, 0x00	; 0
    6a3c:	01 96       	adiw	r24, 0x01	; 1
    6a3e:	8c 01       	movw	r16, r24
    6a40:	20 e0       	ldi	r18, 0x00	; 0
    6a42:	30 e0       	ldi	r19, 0x00	; 0
    6a44:	40 e0       	ldi	r20, 0x00	; 0
    6a46:	50 e0       	ldi	r21, 0x00	; 0
    6a48:	60 e0       	ldi	r22, 0x00	; 0
    6a4a:	70 e0       	ldi	r23, 0x00	; 0
    6a4c:	0f a3       	std	Y+39, r16	; 0x27
    6a4e:	18 a7       	std	Y+40, r17	; 0x28
    6a50:	29 a7       	std	Y+41, r18	; 0x29
    6a52:	3a a7       	std	Y+42, r19	; 0x2a
    6a54:	4b a7       	std	Y+43, r20	; 0x2b
    6a56:	5c a7       	std	Y+44, r21	; 0x2c
    6a58:	6d a7       	std	Y+45, r22	; 0x2d
    6a5a:	7e a7       	std	Y+46, r23	; 0x2e
    6a5c:	22 2d       	mov	r18, r2
    6a5e:	33 2d       	mov	r19, r3
    6a60:	44 2d       	mov	r20, r4
    6a62:	55 2d       	mov	r21, r5
    6a64:	66 2d       	mov	r22, r6
    6a66:	77 2d       	mov	r23, r7
    6a68:	88 2d       	mov	r24, r8
    6a6a:	99 2d       	mov	r25, r9
    6a6c:	af a0       	ldd	r10, Y+39	; 0x27
    6a6e:	b8 a4       	ldd	r11, Y+40	; 0x28
    6a70:	c9 a4       	ldd	r12, Y+41	; 0x29
    6a72:	da a4       	ldd	r13, Y+42	; 0x2a
    6a74:	eb a4       	ldd	r14, Y+43	; 0x2b
    6a76:	fc a4       	ldd	r15, Y+44	; 0x2c
    6a78:	0d a5       	ldd	r16, Y+45	; 0x2d
    6a7a:	1e a5       	ldd	r17, Y+46	; 0x2e
    6a7c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__umoddi3>
    6a80:	a2 2e       	mov	r10, r18
    6a82:	b3 2e       	mov	r11, r19
    6a84:	c4 2e       	mov	r12, r20
    6a86:	d5 2e       	mov	r13, r21
    6a88:	e6 2e       	mov	r14, r22
    6a8a:	f7 2e       	mov	r15, r23
    6a8c:	08 2f       	mov	r16, r24
    6a8e:	19 2f       	mov	r17, r25
    6a90:	2a 2d       	mov	r18, r10
    6a92:	3b 2d       	mov	r19, r11
    6a94:	4c 2d       	mov	r20, r12
    6a96:	5d 2d       	mov	r21, r13
    6a98:	6e 2d       	mov	r22, r14
    6a9a:	7f 2d       	mov	r23, r15
    6a9c:	80 2f       	mov	r24, r16
    6a9e:	91 2f       	mov	r25, r17
    6aa0:	82 2f       	mov	r24, r18
    6aa2:	1f a5       	ldd	r17, Y+47	; 0x2f
    6aa4:	18 1b       	sub	r17, r24
    6aa6:	81 2f       	mov	r24, r17
    6aa8:	8f 5f       	subi	r24, 0xFF	; 255
    6aaa:	e8 a9       	ldd	r30, Y+48	; 0x30
    6aac:	f9 a9       	ldd	r31, Y+49	; 0x31
    6aae:	80 83       	st	Z, r24
    6ab0:	17 c0       	rjmp	.+46     	; 0x6ae0 <Timer_PollingDelay+0x2bf0>
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / ( 2* 1000UL ) ) % (u16)( Global_u8OCR2_Value + 1 ) );/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER2_BOTTOM )									/*	Delay LOOP								*/
										{
										while( !(( TIFR >> OCF2_BIT) & BIT0_MASK ) );										/*	Waiting for Timer2 Output Compare flag	*/
    6ab2:	e8 e5       	ldi	r30, 0x58	; 88
    6ab4:	f0 e0       	ldi	r31, 0x00	; 0
    6ab6:	80 81       	ld	r24, Z
    6ab8:	88 23       	and	r24, r24
    6aba:	dc f7       	brge	.-10     	; 0x6ab2 <Timer_PollingDelay+0x2bc2>
										Local_u32OverFlowCounts--;
    6abc:	8a 81       	ldd	r24, Y+2	; 0x02
    6abe:	9b 81       	ldd	r25, Y+3	; 0x03
    6ac0:	ac 81       	ldd	r26, Y+4	; 0x04
    6ac2:	bd 81       	ldd	r27, Y+5	; 0x05
    6ac4:	01 97       	sbiw	r24, 0x01	; 1
    6ac6:	a1 09       	sbc	r26, r1
    6ac8:	b1 09       	sbc	r27, r1
    6aca:	8a 83       	std	Y+2, r24	; 0x02
    6acc:	9b 83       	std	Y+3, r25	; 0x03
    6ace:	ac 83       	std	Y+4, r26	; 0x04
    6ad0:	bd 83       	std	Y+5, r27	; 0x05
										TIFR |= (BIT0_MASK << OCF2_BIT);													/*	Clearing Timer2 Overflow flag			*/
    6ad2:	a8 e5       	ldi	r26, 0x58	; 88
    6ad4:	b0 e0       	ldi	r27, 0x00	; 0
    6ad6:	e8 e5       	ldi	r30, 0x58	; 88
    6ad8:	f0 e0       	ldi	r31, 0x00	; 0
    6ada:	80 81       	ld	r24, Z
    6adc:	80 68       	ori	r24, 0x80	; 128
    6ade:	8c 93       	st	X, r24
			case  COMP_TOG_ON_MATCH	:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / (2 * 1000UL ) )
																				+ Global_u8OCR2_Value ) / (u16)( Global_u8OCR2_Value + 1 ) ;				/*	Total Overflows	*/
										TCNT2 = ( Global_u8OCR2_Value + 1 ) -
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / ( 2* 1000UL ) ) % (u16)( Global_u8OCR2_Value + 1 ) );/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER2_BOTTOM )									/*	Delay LOOP								*/
    6ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    6ae4:	ac 81       	ldd	r26, Y+4	; 0x04
    6ae6:	bd 81       	ldd	r27, Y+5	; 0x05
    6ae8:	00 97       	sbiw	r24, 0x00	; 0
    6aea:	a1 05       	cpc	r26, r1
    6aec:	b1 05       	cpc	r27, r1
    6aee:	09 f7       	brne	.-62     	; 0x6ab2 <Timer_PollingDelay+0x2bc2>
    6af0:	f6 c3       	rjmp	.+2028   	; 0x72de <Timer_PollingDelay+0x33ee>
										TIFR |= (BIT0_MASK << OCF2_BIT);													/*	Clearing Timer2 Overflow flag			*/
										}
										break;

			case  COMP_NON_INVERTED	:	/*	Same as COMP_INVERTED case	*/
			case  COMP_INVERTED		:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / ( 1000UL ) )
    6af2:	89 85       	ldd	r24, Y+9	; 0x09
    6af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6af6:	5c 01       	movw	r10, r24
    6af8:	cc 24       	eor	r12, r12
    6afa:	dd 24       	eor	r13, r13
    6afc:	ee 24       	eor	r14, r14
    6afe:	ff 24       	eor	r15, r15
    6b00:	87 01       	movw	r16, r14
    6b02:	80 91 36 02 	lds	r24, 0x0236
    6b06:	90 91 37 02 	lds	r25, 0x0237
    6b0a:	a0 91 38 02 	lds	r26, 0x0238
    6b0e:	b0 91 39 02 	lds	r27, 0x0239
    6b12:	1c 01       	movw	r2, r24
    6b14:	2d 01       	movw	r4, r26
    6b16:	66 24       	eor	r6, r6
    6b18:	77 24       	eor	r7, r7
    6b1a:	43 01       	movw	r8, r6
    6b1c:	2a 2d       	mov	r18, r10
    6b1e:	3b 2d       	mov	r19, r11
    6b20:	4c 2d       	mov	r20, r12
    6b22:	5d 2d       	mov	r21, r13
    6b24:	6e 2d       	mov	r22, r14
    6b26:	7f 2d       	mov	r23, r15
    6b28:	80 2f       	mov	r24, r16
    6b2a:	91 2f       	mov	r25, r17
    6b2c:	a2 2c       	mov	r10, r2
    6b2e:	b3 2c       	mov	r11, r3
    6b30:	c4 2c       	mov	r12, r4
    6b32:	d5 2c       	mov	r13, r5
    6b34:	e6 2c       	mov	r14, r6
    6b36:	f7 2c       	mov	r15, r7
    6b38:	08 2d       	mov	r16, r8
    6b3a:	19 2d       	mov	r17, r9
    6b3c:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    6b40:	22 2e       	mov	r2, r18
    6b42:	33 2e       	mov	r3, r19
    6b44:	44 2e       	mov	r4, r20
    6b46:	55 2e       	mov	r5, r21
    6b48:	66 2e       	mov	r6, r22
    6b4a:	77 2e       	mov	r7, r23
    6b4c:	88 2e       	mov	r8, r24
    6b4e:	99 2e       	mov	r9, r25
    6b50:	a2 2c       	mov	r10, r2
    6b52:	b3 2c       	mov	r11, r3
    6b54:	c4 2c       	mov	r12, r4
    6b56:	d5 2c       	mov	r13, r5
    6b58:	e6 2c       	mov	r14, r6
    6b5a:	f7 2c       	mov	r15, r7
    6b5c:	08 2d       	mov	r16, r8
    6b5e:	19 2d       	mov	r17, r9
    6b60:	2a 2d       	mov	r18, r10
    6b62:	3b 2d       	mov	r19, r11
    6b64:	4c 2d       	mov	r20, r12
    6b66:	5d 2d       	mov	r21, r13
    6b68:	6e 2d       	mov	r22, r14
    6b6a:	7f 2d       	mov	r23, r15
    6b6c:	80 2f       	mov	r24, r16
    6b6e:	91 2f       	mov	r25, r17
    6b70:	0f 2e       	mov	r0, r31
    6b72:	f8 ee       	ldi	r31, 0xE8	; 232
    6b74:	af 2e       	mov	r10, r31
    6b76:	f0 2d       	mov	r31, r0
    6b78:	0f 2e       	mov	r0, r31
    6b7a:	f3 e0       	ldi	r31, 0x03	; 3
    6b7c:	bf 2e       	mov	r11, r31
    6b7e:	f0 2d       	mov	r31, r0
    6b80:	cc 24       	eor	r12, r12
    6b82:	dd 24       	eor	r13, r13
    6b84:	ee 24       	eor	r14, r14
    6b86:	ff 24       	eor	r15, r15
    6b88:	00 e0       	ldi	r16, 0x00	; 0
    6b8a:	10 e0       	ldi	r17, 0x00	; 0
    6b8c:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    6b90:	a2 2e       	mov	r10, r18
    6b92:	b3 2e       	mov	r11, r19
    6b94:	c4 2e       	mov	r12, r20
    6b96:	d5 2e       	mov	r13, r21
    6b98:	e6 2e       	mov	r14, r22
    6b9a:	f7 2e       	mov	r15, r23
    6b9c:	08 2f       	mov	r16, r24
    6b9e:	19 2f       	mov	r17, r25
    6ba0:	af 8e       	std	Y+31, r10	; 0x1f
    6ba2:	b8 a2       	std	Y+32, r11	; 0x20
    6ba4:	c9 a2       	std	Y+33, r12	; 0x21
    6ba6:	da a2       	std	Y+34, r13	; 0x22
    6ba8:	eb a2       	std	Y+35, r14	; 0x23
    6baa:	fc a2       	std	Y+36, r15	; 0x24
    6bac:	0d a3       	std	Y+37, r16	; 0x25
    6bae:	1e a3       	std	Y+38, r17	; 0x26
    6bb0:	80 91 31 02 	lds	r24, 0x0231
    6bb4:	08 2f       	mov	r16, r24
    6bb6:	10 e0       	ldi	r17, 0x00	; 0
    6bb8:	20 e0       	ldi	r18, 0x00	; 0
    6bba:	30 e0       	ldi	r19, 0x00	; 0
    6bbc:	40 e0       	ldi	r20, 0x00	; 0
    6bbe:	50 e0       	ldi	r21, 0x00	; 0
    6bc0:	60 e0       	ldi	r22, 0x00	; 0
    6bc2:	70 e0       	ldi	r23, 0x00	; 0
    6bc4:	0f 8b       	std	Y+23, r16	; 0x17
    6bc6:	18 8f       	std	Y+24, r17	; 0x18
    6bc8:	29 8f       	std	Y+25, r18	; 0x19
    6bca:	3a 8f       	std	Y+26, r19	; 0x1a
    6bcc:	4b 8f       	std	Y+27, r20	; 0x1b
    6bce:	5c 8f       	std	Y+28, r21	; 0x1c
    6bd0:	6d 8f       	std	Y+29, r22	; 0x1d
    6bd2:	7e 8f       	std	Y+30, r23	; 0x1e
    6bd4:	1f 8d       	ldd	r17, Y+31	; 0x1f
    6bd6:	2f 89       	ldd	r18, Y+23	; 0x17
    6bd8:	12 0f       	add	r17, r18
    6bda:	c9 5d       	subi	r28, 0xD9	; 217
    6bdc:	de 4f       	sbci	r29, 0xFE	; 254
    6bde:	18 83       	st	Y, r17
    6be0:	c7 52       	subi	r28, 0x27	; 39
    6be2:	d1 40       	sbci	r29, 0x01	; 1
    6be4:	31 e0       	ldi	r19, 0x01	; 1
    6be6:	c1 5d       	subi	r28, 0xD1	; 209
    6be8:	de 4f       	sbci	r29, 0xFE	; 254
    6bea:	38 83       	st	Y, r19
    6bec:	cf 52       	subi	r28, 0x2F	; 47
    6bee:	d1 40       	sbci	r29, 0x01	; 1
    6bf0:	c9 5d       	subi	r28, 0xD9	; 217
    6bf2:	de 4f       	sbci	r29, 0xFE	; 254
    6bf4:	48 81       	ld	r20, Y
    6bf6:	c7 52       	subi	r28, 0x27	; 39
    6bf8:	d1 40       	sbci	r29, 0x01	; 1
    6bfa:	5f 8d       	ldd	r21, Y+31	; 0x1f
    6bfc:	45 17       	cp	r20, r21
    6bfe:	28 f0       	brcs	.+10     	; 0x6c0a <Timer_PollingDelay+0x2d1a>
    6c00:	c1 5d       	subi	r28, 0xD1	; 209
    6c02:	de 4f       	sbci	r29, 0xFE	; 254
    6c04:	18 82       	st	Y, r1
    6c06:	cf 52       	subi	r28, 0x2F	; 47
    6c08:	d1 40       	sbci	r29, 0x01	; 1
    6c0a:	68 a1       	ldd	r22, Y+32	; 0x20
    6c0c:	78 8d       	ldd	r23, Y+24	; 0x18
    6c0e:	67 0f       	add	r22, r23
    6c10:	c8 5d       	subi	r28, 0xD8	; 216
    6c12:	de 4f       	sbci	r29, 0xFE	; 254
    6c14:	68 83       	st	Y, r22
    6c16:	c8 52       	subi	r28, 0x28	; 40
    6c18:	d1 40       	sbci	r29, 0x01	; 1
    6c1a:	81 e0       	ldi	r24, 0x01	; 1
    6c1c:	c0 5d       	subi	r28, 0xD0	; 208
    6c1e:	de 4f       	sbci	r29, 0xFE	; 254
    6c20:	88 83       	st	Y, r24
    6c22:	c0 53       	subi	r28, 0x30	; 48
    6c24:	d1 40       	sbci	r29, 0x01	; 1
    6c26:	c8 5d       	subi	r28, 0xD8	; 216
    6c28:	de 4f       	sbci	r29, 0xFE	; 254
    6c2a:	98 81       	ld	r25, Y
    6c2c:	c8 52       	subi	r28, 0x28	; 40
    6c2e:	d1 40       	sbci	r29, 0x01	; 1
    6c30:	e8 a1       	ldd	r30, Y+32	; 0x20
    6c32:	9e 17       	cp	r25, r30
    6c34:	28 f0       	brcs	.+10     	; 0x6c40 <Timer_PollingDelay+0x2d50>
    6c36:	c0 5d       	subi	r28, 0xD0	; 208
    6c38:	de 4f       	sbci	r29, 0xFE	; 254
    6c3a:	18 82       	st	Y, r1
    6c3c:	c0 53       	subi	r28, 0x30	; 48
    6c3e:	d1 40       	sbci	r29, 0x01	; 1
    6c40:	c1 5d       	subi	r28, 0xD1	; 209
    6c42:	de 4f       	sbci	r29, 0xFE	; 254
    6c44:	f8 81       	ld	r31, Y
    6c46:	cf 52       	subi	r28, 0x2F	; 47
    6c48:	d1 40       	sbci	r29, 0x01	; 1
    6c4a:	c8 5d       	subi	r28, 0xD8	; 216
    6c4c:	de 4f       	sbci	r29, 0xFE	; 254
    6c4e:	08 81       	ld	r16, Y
    6c50:	c8 52       	subi	r28, 0x28	; 40
    6c52:	d1 40       	sbci	r29, 0x01	; 1
    6c54:	f0 0f       	add	r31, r16
    6c56:	cf 5c       	subi	r28, 0xCF	; 207
    6c58:	de 4f       	sbci	r29, 0xFE	; 254
    6c5a:	f8 83       	st	Y, r31
    6c5c:	c1 53       	subi	r28, 0x31	; 49
    6c5e:	d1 40       	sbci	r29, 0x01	; 1
    6c60:	11 e0       	ldi	r17, 0x01	; 1
    6c62:	ce 5c       	subi	r28, 0xCE	; 206
    6c64:	de 4f       	sbci	r29, 0xFE	; 254
    6c66:	18 83       	st	Y, r17
    6c68:	c2 53       	subi	r28, 0x32	; 50
    6c6a:	d1 40       	sbci	r29, 0x01	; 1
    6c6c:	cf 5c       	subi	r28, 0xCF	; 207
    6c6e:	de 4f       	sbci	r29, 0xFE	; 254
    6c70:	28 81       	ld	r18, Y
    6c72:	c1 53       	subi	r28, 0x31	; 49
    6c74:	d1 40       	sbci	r29, 0x01	; 1
    6c76:	c8 5d       	subi	r28, 0xD8	; 216
    6c78:	de 4f       	sbci	r29, 0xFE	; 254
    6c7a:	38 81       	ld	r19, Y
    6c7c:	c8 52       	subi	r28, 0x28	; 40
    6c7e:	d1 40       	sbci	r29, 0x01	; 1
    6c80:	23 17       	cp	r18, r19
    6c82:	28 f0       	brcs	.+10     	; 0x6c8e <Timer_PollingDelay+0x2d9e>
    6c84:	ce 5c       	subi	r28, 0xCE	; 206
    6c86:	de 4f       	sbci	r29, 0xFE	; 254
    6c88:	18 82       	st	Y, r1
    6c8a:	c2 53       	subi	r28, 0x32	; 50
    6c8c:	d1 40       	sbci	r29, 0x01	; 1
    6c8e:	c0 5d       	subi	r28, 0xD0	; 208
    6c90:	de 4f       	sbci	r29, 0xFE	; 254
    6c92:	48 81       	ld	r20, Y
    6c94:	c0 53       	subi	r28, 0x30	; 48
    6c96:	d1 40       	sbci	r29, 0x01	; 1
    6c98:	ce 5c       	subi	r28, 0xCE	; 206
    6c9a:	de 4f       	sbci	r29, 0xFE	; 254
    6c9c:	58 81       	ld	r21, Y
    6c9e:	c2 53       	subi	r28, 0x32	; 50
    6ca0:	d1 40       	sbci	r29, 0x01	; 1
    6ca2:	45 2b       	or	r20, r21
    6ca4:	c0 5d       	subi	r28, 0xD0	; 208
    6ca6:	de 4f       	sbci	r29, 0xFE	; 254
    6ca8:	48 83       	st	Y, r20
    6caa:	c0 53       	subi	r28, 0x30	; 48
    6cac:	d1 40       	sbci	r29, 0x01	; 1
    6cae:	cf 5c       	subi	r28, 0xCF	; 207
    6cb0:	de 4f       	sbci	r29, 0xFE	; 254
    6cb2:	68 81       	ld	r22, Y
    6cb4:	c1 53       	subi	r28, 0x31	; 49
    6cb6:	d1 40       	sbci	r29, 0x01	; 1
    6cb8:	c8 5d       	subi	r28, 0xD8	; 216
    6cba:	de 4f       	sbci	r29, 0xFE	; 254
    6cbc:	68 83       	st	Y, r22
    6cbe:	c8 52       	subi	r28, 0x28	; 40
    6cc0:	d1 40       	sbci	r29, 0x01	; 1
    6cc2:	79 a1       	ldd	r23, Y+33	; 0x21
    6cc4:	89 8d       	ldd	r24, Y+25	; 0x19
    6cc6:	78 0f       	add	r23, r24
    6cc8:	c7 5d       	subi	r28, 0xD7	; 215
    6cca:	de 4f       	sbci	r29, 0xFE	; 254
    6ccc:	78 83       	st	Y, r23
    6cce:	c9 52       	subi	r28, 0x29	; 41
    6cd0:	d1 40       	sbci	r29, 0x01	; 1
    6cd2:	91 e0       	ldi	r25, 0x01	; 1
    6cd4:	cd 5c       	subi	r28, 0xCD	; 205
    6cd6:	de 4f       	sbci	r29, 0xFE	; 254
    6cd8:	98 83       	st	Y, r25
    6cda:	c3 53       	subi	r28, 0x33	; 51
    6cdc:	d1 40       	sbci	r29, 0x01	; 1
    6cde:	c7 5d       	subi	r28, 0xD7	; 215
    6ce0:	de 4f       	sbci	r29, 0xFE	; 254
    6ce2:	e8 81       	ld	r30, Y
    6ce4:	c9 52       	subi	r28, 0x29	; 41
    6ce6:	d1 40       	sbci	r29, 0x01	; 1
    6ce8:	f9 a1       	ldd	r31, Y+33	; 0x21
    6cea:	ef 17       	cp	r30, r31
    6cec:	28 f0       	brcs	.+10     	; 0x6cf8 <Timer_PollingDelay+0x2e08>
    6cee:	cd 5c       	subi	r28, 0xCD	; 205
    6cf0:	de 4f       	sbci	r29, 0xFE	; 254
    6cf2:	18 82       	st	Y, r1
    6cf4:	c3 53       	subi	r28, 0x33	; 51
    6cf6:	d1 40       	sbci	r29, 0x01	; 1
    6cf8:	c0 5d       	subi	r28, 0xD0	; 208
    6cfa:	de 4f       	sbci	r29, 0xFE	; 254
    6cfc:	08 81       	ld	r16, Y
    6cfe:	c0 53       	subi	r28, 0x30	; 48
    6d00:	d1 40       	sbci	r29, 0x01	; 1
    6d02:	c7 5d       	subi	r28, 0xD7	; 215
    6d04:	de 4f       	sbci	r29, 0xFE	; 254
    6d06:	18 81       	ld	r17, Y
    6d08:	c9 52       	subi	r28, 0x29	; 41
    6d0a:	d1 40       	sbci	r29, 0x01	; 1
    6d0c:	01 0f       	add	r16, r17
    6d0e:	cc 5c       	subi	r28, 0xCC	; 204
    6d10:	de 4f       	sbci	r29, 0xFE	; 254
    6d12:	08 83       	st	Y, r16
    6d14:	c4 53       	subi	r28, 0x34	; 52
    6d16:	d1 40       	sbci	r29, 0x01	; 1
    6d18:	21 e0       	ldi	r18, 0x01	; 1
    6d1a:	cb 5c       	subi	r28, 0xCB	; 203
    6d1c:	de 4f       	sbci	r29, 0xFE	; 254
    6d1e:	28 83       	st	Y, r18
    6d20:	c5 53       	subi	r28, 0x35	; 53
    6d22:	d1 40       	sbci	r29, 0x01	; 1
    6d24:	cc 5c       	subi	r28, 0xCC	; 204
    6d26:	de 4f       	sbci	r29, 0xFE	; 254
    6d28:	38 81       	ld	r19, Y
    6d2a:	c4 53       	subi	r28, 0x34	; 52
    6d2c:	d1 40       	sbci	r29, 0x01	; 1
    6d2e:	c7 5d       	subi	r28, 0xD7	; 215
    6d30:	de 4f       	sbci	r29, 0xFE	; 254
    6d32:	48 81       	ld	r20, Y
    6d34:	c9 52       	subi	r28, 0x29	; 41
    6d36:	d1 40       	sbci	r29, 0x01	; 1
    6d38:	34 17       	cp	r19, r20
    6d3a:	28 f0       	brcs	.+10     	; 0x6d46 <Timer_PollingDelay+0x2e56>
    6d3c:	cb 5c       	subi	r28, 0xCB	; 203
    6d3e:	de 4f       	sbci	r29, 0xFE	; 254
    6d40:	18 82       	st	Y, r1
    6d42:	c5 53       	subi	r28, 0x35	; 53
    6d44:	d1 40       	sbci	r29, 0x01	; 1
    6d46:	cd 5c       	subi	r28, 0xCD	; 205
    6d48:	de 4f       	sbci	r29, 0xFE	; 254
    6d4a:	58 81       	ld	r21, Y
    6d4c:	c3 53       	subi	r28, 0x33	; 51
    6d4e:	d1 40       	sbci	r29, 0x01	; 1
    6d50:	cb 5c       	subi	r28, 0xCB	; 203
    6d52:	de 4f       	sbci	r29, 0xFE	; 254
    6d54:	68 81       	ld	r22, Y
    6d56:	c5 53       	subi	r28, 0x35	; 53
    6d58:	d1 40       	sbci	r29, 0x01	; 1
    6d5a:	56 2b       	or	r21, r22
    6d5c:	cd 5c       	subi	r28, 0xCD	; 205
    6d5e:	de 4f       	sbci	r29, 0xFE	; 254
    6d60:	58 83       	st	Y, r21
    6d62:	c3 53       	subi	r28, 0x33	; 51
    6d64:	d1 40       	sbci	r29, 0x01	; 1
    6d66:	cc 5c       	subi	r28, 0xCC	; 204
    6d68:	de 4f       	sbci	r29, 0xFE	; 254
    6d6a:	78 81       	ld	r23, Y
    6d6c:	c4 53       	subi	r28, 0x34	; 52
    6d6e:	d1 40       	sbci	r29, 0x01	; 1
    6d70:	c7 5d       	subi	r28, 0xD7	; 215
    6d72:	de 4f       	sbci	r29, 0xFE	; 254
    6d74:	78 83       	st	Y, r23
    6d76:	c9 52       	subi	r28, 0x29	; 41
    6d78:	d1 40       	sbci	r29, 0x01	; 1
    6d7a:	8a a1       	ldd	r24, Y+34	; 0x22
    6d7c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d7e:	89 0f       	add	r24, r25
    6d80:	c6 5d       	subi	r28, 0xD6	; 214
    6d82:	de 4f       	sbci	r29, 0xFE	; 254
    6d84:	88 83       	st	Y, r24
    6d86:	ca 52       	subi	r28, 0x2A	; 42
    6d88:	d1 40       	sbci	r29, 0x01	; 1
    6d8a:	e1 e0       	ldi	r30, 0x01	; 1
    6d8c:	ca 5c       	subi	r28, 0xCA	; 202
    6d8e:	de 4f       	sbci	r29, 0xFE	; 254
    6d90:	e8 83       	st	Y, r30
    6d92:	c6 53       	subi	r28, 0x36	; 54
    6d94:	d1 40       	sbci	r29, 0x01	; 1
    6d96:	c6 5d       	subi	r28, 0xD6	; 214
    6d98:	de 4f       	sbci	r29, 0xFE	; 254
    6d9a:	f8 81       	ld	r31, Y
    6d9c:	ca 52       	subi	r28, 0x2A	; 42
    6d9e:	d1 40       	sbci	r29, 0x01	; 1
    6da0:	0a a1       	ldd	r16, Y+34	; 0x22
    6da2:	f0 17       	cp	r31, r16
    6da4:	28 f0       	brcs	.+10     	; 0x6db0 <Timer_PollingDelay+0x2ec0>
    6da6:	ca 5c       	subi	r28, 0xCA	; 202
    6da8:	de 4f       	sbci	r29, 0xFE	; 254
    6daa:	18 82       	st	Y, r1
    6dac:	c6 53       	subi	r28, 0x36	; 54
    6dae:	d1 40       	sbci	r29, 0x01	; 1
    6db0:	cd 5c       	subi	r28, 0xCD	; 205
    6db2:	de 4f       	sbci	r29, 0xFE	; 254
    6db4:	18 81       	ld	r17, Y
    6db6:	c3 53       	subi	r28, 0x33	; 51
    6db8:	d1 40       	sbci	r29, 0x01	; 1
    6dba:	c6 5d       	subi	r28, 0xD6	; 214
    6dbc:	de 4f       	sbci	r29, 0xFE	; 254
    6dbe:	28 81       	ld	r18, Y
    6dc0:	ca 52       	subi	r28, 0x2A	; 42
    6dc2:	d1 40       	sbci	r29, 0x01	; 1
    6dc4:	12 0f       	add	r17, r18
    6dc6:	c9 5c       	subi	r28, 0xC9	; 201
    6dc8:	de 4f       	sbci	r29, 0xFE	; 254
    6dca:	18 83       	st	Y, r17
    6dcc:	c7 53       	subi	r28, 0x37	; 55
    6dce:	d1 40       	sbci	r29, 0x01	; 1
    6dd0:	31 e0       	ldi	r19, 0x01	; 1
    6dd2:	c8 5c       	subi	r28, 0xC8	; 200
    6dd4:	de 4f       	sbci	r29, 0xFE	; 254
    6dd6:	38 83       	st	Y, r19
    6dd8:	c8 53       	subi	r28, 0x38	; 56
    6dda:	d1 40       	sbci	r29, 0x01	; 1
    6ddc:	c9 5c       	subi	r28, 0xC9	; 201
    6dde:	de 4f       	sbci	r29, 0xFE	; 254
    6de0:	48 81       	ld	r20, Y
    6de2:	c7 53       	subi	r28, 0x37	; 55
    6de4:	d1 40       	sbci	r29, 0x01	; 1
    6de6:	c6 5d       	subi	r28, 0xD6	; 214
    6de8:	de 4f       	sbci	r29, 0xFE	; 254
    6dea:	58 81       	ld	r21, Y
    6dec:	ca 52       	subi	r28, 0x2A	; 42
    6dee:	d1 40       	sbci	r29, 0x01	; 1
    6df0:	45 17       	cp	r20, r21
    6df2:	28 f0       	brcs	.+10     	; 0x6dfe <Timer_PollingDelay+0x2f0e>
    6df4:	c8 5c       	subi	r28, 0xC8	; 200
    6df6:	de 4f       	sbci	r29, 0xFE	; 254
    6df8:	18 82       	st	Y, r1
    6dfa:	c8 53       	subi	r28, 0x38	; 56
    6dfc:	d1 40       	sbci	r29, 0x01	; 1
    6dfe:	ca 5c       	subi	r28, 0xCA	; 202
    6e00:	de 4f       	sbci	r29, 0xFE	; 254
    6e02:	68 81       	ld	r22, Y
    6e04:	c6 53       	subi	r28, 0x36	; 54
    6e06:	d1 40       	sbci	r29, 0x01	; 1
    6e08:	c8 5c       	subi	r28, 0xC8	; 200
    6e0a:	de 4f       	sbci	r29, 0xFE	; 254
    6e0c:	78 81       	ld	r23, Y
    6e0e:	c8 53       	subi	r28, 0x38	; 56
    6e10:	d1 40       	sbci	r29, 0x01	; 1
    6e12:	67 2b       	or	r22, r23
    6e14:	ca 5c       	subi	r28, 0xCA	; 202
    6e16:	de 4f       	sbci	r29, 0xFE	; 254
    6e18:	68 83       	st	Y, r22
    6e1a:	c6 53       	subi	r28, 0x36	; 54
    6e1c:	d1 40       	sbci	r29, 0x01	; 1
    6e1e:	c9 5c       	subi	r28, 0xC9	; 201
    6e20:	de 4f       	sbci	r29, 0xFE	; 254
    6e22:	88 81       	ld	r24, Y
    6e24:	c7 53       	subi	r28, 0x37	; 55
    6e26:	d1 40       	sbci	r29, 0x01	; 1
    6e28:	c6 5d       	subi	r28, 0xD6	; 214
    6e2a:	de 4f       	sbci	r29, 0xFE	; 254
    6e2c:	88 83       	st	Y, r24
    6e2e:	ca 52       	subi	r28, 0x2A	; 42
    6e30:	d1 40       	sbci	r29, 0x01	; 1
    6e32:	9b a1       	ldd	r25, Y+35	; 0x23
    6e34:	eb 8d       	ldd	r30, Y+27	; 0x1b
    6e36:	9e 0f       	add	r25, r30
    6e38:	c5 5d       	subi	r28, 0xD5	; 213
    6e3a:	de 4f       	sbci	r29, 0xFE	; 254
    6e3c:	98 83       	st	Y, r25
    6e3e:	cb 52       	subi	r28, 0x2B	; 43
    6e40:	d1 40       	sbci	r29, 0x01	; 1
    6e42:	f1 e0       	ldi	r31, 0x01	; 1
    6e44:	c7 5c       	subi	r28, 0xC7	; 199
    6e46:	de 4f       	sbci	r29, 0xFE	; 254
    6e48:	f8 83       	st	Y, r31
    6e4a:	c9 53       	subi	r28, 0x39	; 57
    6e4c:	d1 40       	sbci	r29, 0x01	; 1
    6e4e:	c5 5d       	subi	r28, 0xD5	; 213
    6e50:	de 4f       	sbci	r29, 0xFE	; 254
    6e52:	08 81       	ld	r16, Y
    6e54:	cb 52       	subi	r28, 0x2B	; 43
    6e56:	d1 40       	sbci	r29, 0x01	; 1
    6e58:	1b a1       	ldd	r17, Y+35	; 0x23
    6e5a:	01 17       	cp	r16, r17
    6e5c:	28 f0       	brcs	.+10     	; 0x6e68 <Timer_PollingDelay+0x2f78>
    6e5e:	c7 5c       	subi	r28, 0xC7	; 199
    6e60:	de 4f       	sbci	r29, 0xFE	; 254
    6e62:	18 82       	st	Y, r1
    6e64:	c9 53       	subi	r28, 0x39	; 57
    6e66:	d1 40       	sbci	r29, 0x01	; 1
    6e68:	ca 5c       	subi	r28, 0xCA	; 202
    6e6a:	de 4f       	sbci	r29, 0xFE	; 254
    6e6c:	28 81       	ld	r18, Y
    6e6e:	c6 53       	subi	r28, 0x36	; 54
    6e70:	d1 40       	sbci	r29, 0x01	; 1
    6e72:	c5 5d       	subi	r28, 0xD5	; 213
    6e74:	de 4f       	sbci	r29, 0xFE	; 254
    6e76:	38 81       	ld	r19, Y
    6e78:	cb 52       	subi	r28, 0x2B	; 43
    6e7a:	d1 40       	sbci	r29, 0x01	; 1
    6e7c:	23 0f       	add	r18, r19
    6e7e:	c6 5c       	subi	r28, 0xC6	; 198
    6e80:	de 4f       	sbci	r29, 0xFE	; 254
    6e82:	28 83       	st	Y, r18
    6e84:	ca 53       	subi	r28, 0x3A	; 58
    6e86:	d1 40       	sbci	r29, 0x01	; 1
    6e88:	41 e0       	ldi	r20, 0x01	; 1
    6e8a:	c5 5c       	subi	r28, 0xC5	; 197
    6e8c:	de 4f       	sbci	r29, 0xFE	; 254
    6e8e:	48 83       	st	Y, r20
    6e90:	cb 53       	subi	r28, 0x3B	; 59
    6e92:	d1 40       	sbci	r29, 0x01	; 1
    6e94:	c6 5c       	subi	r28, 0xC6	; 198
    6e96:	de 4f       	sbci	r29, 0xFE	; 254
    6e98:	58 81       	ld	r21, Y
    6e9a:	ca 53       	subi	r28, 0x3A	; 58
    6e9c:	d1 40       	sbci	r29, 0x01	; 1
    6e9e:	c5 5d       	subi	r28, 0xD5	; 213
    6ea0:	de 4f       	sbci	r29, 0xFE	; 254
    6ea2:	68 81       	ld	r22, Y
    6ea4:	cb 52       	subi	r28, 0x2B	; 43
    6ea6:	d1 40       	sbci	r29, 0x01	; 1
    6ea8:	56 17       	cp	r21, r22
    6eaa:	28 f0       	brcs	.+10     	; 0x6eb6 <Timer_PollingDelay+0x2fc6>
    6eac:	c5 5c       	subi	r28, 0xC5	; 197
    6eae:	de 4f       	sbci	r29, 0xFE	; 254
    6eb0:	18 82       	st	Y, r1
    6eb2:	cb 53       	subi	r28, 0x3B	; 59
    6eb4:	d1 40       	sbci	r29, 0x01	; 1
    6eb6:	c7 5c       	subi	r28, 0xC7	; 199
    6eb8:	de 4f       	sbci	r29, 0xFE	; 254
    6eba:	78 81       	ld	r23, Y
    6ebc:	c9 53       	subi	r28, 0x39	; 57
    6ebe:	d1 40       	sbci	r29, 0x01	; 1
    6ec0:	c5 5c       	subi	r28, 0xC5	; 197
    6ec2:	de 4f       	sbci	r29, 0xFE	; 254
    6ec4:	88 81       	ld	r24, Y
    6ec6:	cb 53       	subi	r28, 0x3B	; 59
    6ec8:	d1 40       	sbci	r29, 0x01	; 1
    6eca:	78 2b       	or	r23, r24
    6ecc:	c7 5c       	subi	r28, 0xC7	; 199
    6ece:	de 4f       	sbci	r29, 0xFE	; 254
    6ed0:	78 83       	st	Y, r23
    6ed2:	c9 53       	subi	r28, 0x39	; 57
    6ed4:	d1 40       	sbci	r29, 0x01	; 1
    6ed6:	c6 5c       	subi	r28, 0xC6	; 198
    6ed8:	de 4f       	sbci	r29, 0xFE	; 254
    6eda:	98 81       	ld	r25, Y
    6edc:	ca 53       	subi	r28, 0x3A	; 58
    6ede:	d1 40       	sbci	r29, 0x01	; 1
    6ee0:	c5 5d       	subi	r28, 0xD5	; 213
    6ee2:	de 4f       	sbci	r29, 0xFE	; 254
    6ee4:	98 83       	st	Y, r25
    6ee6:	cb 52       	subi	r28, 0x2B	; 43
    6ee8:	d1 40       	sbci	r29, 0x01	; 1
    6eea:	ec a1       	ldd	r30, Y+36	; 0x24
    6eec:	fc 8d       	ldd	r31, Y+28	; 0x1c
    6eee:	ef 0f       	add	r30, r31
    6ef0:	c4 5d       	subi	r28, 0xD4	; 212
    6ef2:	de 4f       	sbci	r29, 0xFE	; 254
    6ef4:	e8 83       	st	Y, r30
    6ef6:	cc 52       	subi	r28, 0x2C	; 44
    6ef8:	d1 40       	sbci	r29, 0x01	; 1
    6efa:	01 e0       	ldi	r16, 0x01	; 1
    6efc:	c4 5c       	subi	r28, 0xC4	; 196
    6efe:	de 4f       	sbci	r29, 0xFE	; 254
    6f00:	08 83       	st	Y, r16
    6f02:	cc 53       	subi	r28, 0x3C	; 60
    6f04:	d1 40       	sbci	r29, 0x01	; 1
    6f06:	c4 5d       	subi	r28, 0xD4	; 212
    6f08:	de 4f       	sbci	r29, 0xFE	; 254
    6f0a:	18 81       	ld	r17, Y
    6f0c:	cc 52       	subi	r28, 0x2C	; 44
    6f0e:	d1 40       	sbci	r29, 0x01	; 1
    6f10:	2c a1       	ldd	r18, Y+36	; 0x24
    6f12:	12 17       	cp	r17, r18
    6f14:	28 f0       	brcs	.+10     	; 0x6f20 <Timer_PollingDelay+0x3030>
    6f16:	c4 5c       	subi	r28, 0xC4	; 196
    6f18:	de 4f       	sbci	r29, 0xFE	; 254
    6f1a:	18 82       	st	Y, r1
    6f1c:	cc 53       	subi	r28, 0x3C	; 60
    6f1e:	d1 40       	sbci	r29, 0x01	; 1
    6f20:	c7 5c       	subi	r28, 0xC7	; 199
    6f22:	de 4f       	sbci	r29, 0xFE	; 254
    6f24:	38 81       	ld	r19, Y
    6f26:	c9 53       	subi	r28, 0x39	; 57
    6f28:	d1 40       	sbci	r29, 0x01	; 1
    6f2a:	c4 5d       	subi	r28, 0xD4	; 212
    6f2c:	de 4f       	sbci	r29, 0xFE	; 254
    6f2e:	48 81       	ld	r20, Y
    6f30:	cc 52       	subi	r28, 0x2C	; 44
    6f32:	d1 40       	sbci	r29, 0x01	; 1
    6f34:	34 0f       	add	r19, r20
    6f36:	c3 5c       	subi	r28, 0xC3	; 195
    6f38:	de 4f       	sbci	r29, 0xFE	; 254
    6f3a:	38 83       	st	Y, r19
    6f3c:	cd 53       	subi	r28, 0x3D	; 61
    6f3e:	d1 40       	sbci	r29, 0x01	; 1
    6f40:	51 e0       	ldi	r21, 0x01	; 1
    6f42:	c2 5c       	subi	r28, 0xC2	; 194
    6f44:	de 4f       	sbci	r29, 0xFE	; 254
    6f46:	58 83       	st	Y, r21
    6f48:	ce 53       	subi	r28, 0x3E	; 62
    6f4a:	d1 40       	sbci	r29, 0x01	; 1
    6f4c:	c3 5c       	subi	r28, 0xC3	; 195
    6f4e:	de 4f       	sbci	r29, 0xFE	; 254
    6f50:	68 81       	ld	r22, Y
    6f52:	cd 53       	subi	r28, 0x3D	; 61
    6f54:	d1 40       	sbci	r29, 0x01	; 1
    6f56:	c4 5d       	subi	r28, 0xD4	; 212
    6f58:	de 4f       	sbci	r29, 0xFE	; 254
    6f5a:	78 81       	ld	r23, Y
    6f5c:	cc 52       	subi	r28, 0x2C	; 44
    6f5e:	d1 40       	sbci	r29, 0x01	; 1
    6f60:	67 17       	cp	r22, r23
    6f62:	28 f0       	brcs	.+10     	; 0x6f6e <Timer_PollingDelay+0x307e>
    6f64:	c2 5c       	subi	r28, 0xC2	; 194
    6f66:	de 4f       	sbci	r29, 0xFE	; 254
    6f68:	18 82       	st	Y, r1
    6f6a:	ce 53       	subi	r28, 0x3E	; 62
    6f6c:	d1 40       	sbci	r29, 0x01	; 1
    6f6e:	c4 5c       	subi	r28, 0xC4	; 196
    6f70:	de 4f       	sbci	r29, 0xFE	; 254
    6f72:	88 81       	ld	r24, Y
    6f74:	cc 53       	subi	r28, 0x3C	; 60
    6f76:	d1 40       	sbci	r29, 0x01	; 1
    6f78:	c2 5c       	subi	r28, 0xC2	; 194
    6f7a:	de 4f       	sbci	r29, 0xFE	; 254
    6f7c:	98 81       	ld	r25, Y
    6f7e:	ce 53       	subi	r28, 0x3E	; 62
    6f80:	d1 40       	sbci	r29, 0x01	; 1
    6f82:	89 2b       	or	r24, r25
    6f84:	c4 5c       	subi	r28, 0xC4	; 196
    6f86:	de 4f       	sbci	r29, 0xFE	; 254
    6f88:	88 83       	st	Y, r24
    6f8a:	cc 53       	subi	r28, 0x3C	; 60
    6f8c:	d1 40       	sbci	r29, 0x01	; 1
    6f8e:	c3 5c       	subi	r28, 0xC3	; 195
    6f90:	de 4f       	sbci	r29, 0xFE	; 254
    6f92:	e8 81       	ld	r30, Y
    6f94:	cd 53       	subi	r28, 0x3D	; 61
    6f96:	d1 40       	sbci	r29, 0x01	; 1
    6f98:	c4 5d       	subi	r28, 0xD4	; 212
    6f9a:	de 4f       	sbci	r29, 0xFE	; 254
    6f9c:	e8 83       	st	Y, r30
    6f9e:	cc 52       	subi	r28, 0x2C	; 44
    6fa0:	d1 40       	sbci	r29, 0x01	; 1
    6fa2:	fd a1       	ldd	r31, Y+37	; 0x25
    6fa4:	0d 8d       	ldd	r16, Y+29	; 0x1d
    6fa6:	f0 0f       	add	r31, r16
    6fa8:	c3 5d       	subi	r28, 0xD3	; 211
    6faa:	de 4f       	sbci	r29, 0xFE	; 254
    6fac:	f8 83       	st	Y, r31
    6fae:	cd 52       	subi	r28, 0x2D	; 45
    6fb0:	d1 40       	sbci	r29, 0x01	; 1
    6fb2:	11 e0       	ldi	r17, 0x01	; 1
    6fb4:	c1 5c       	subi	r28, 0xC1	; 193
    6fb6:	de 4f       	sbci	r29, 0xFE	; 254
    6fb8:	18 83       	st	Y, r17
    6fba:	cf 53       	subi	r28, 0x3F	; 63
    6fbc:	d1 40       	sbci	r29, 0x01	; 1
    6fbe:	c3 5d       	subi	r28, 0xD3	; 211
    6fc0:	de 4f       	sbci	r29, 0xFE	; 254
    6fc2:	28 81       	ld	r18, Y
    6fc4:	cd 52       	subi	r28, 0x2D	; 45
    6fc6:	d1 40       	sbci	r29, 0x01	; 1
    6fc8:	3d a1       	ldd	r19, Y+37	; 0x25
    6fca:	23 17       	cp	r18, r19
    6fcc:	28 f0       	brcs	.+10     	; 0x6fd8 <Timer_PollingDelay+0x30e8>
    6fce:	c1 5c       	subi	r28, 0xC1	; 193
    6fd0:	de 4f       	sbci	r29, 0xFE	; 254
    6fd2:	18 82       	st	Y, r1
    6fd4:	cf 53       	subi	r28, 0x3F	; 63
    6fd6:	d1 40       	sbci	r29, 0x01	; 1
    6fd8:	c4 5c       	subi	r28, 0xC4	; 196
    6fda:	de 4f       	sbci	r29, 0xFE	; 254
    6fdc:	48 81       	ld	r20, Y
    6fde:	cc 53       	subi	r28, 0x3C	; 60
    6fe0:	d1 40       	sbci	r29, 0x01	; 1
    6fe2:	c3 5d       	subi	r28, 0xD3	; 211
    6fe4:	de 4f       	sbci	r29, 0xFE	; 254
    6fe6:	58 81       	ld	r21, Y
    6fe8:	cd 52       	subi	r28, 0x2D	; 45
    6fea:	d1 40       	sbci	r29, 0x01	; 1
    6fec:	45 0f       	add	r20, r21
    6fee:	c0 5c       	subi	r28, 0xC0	; 192
    6ff0:	de 4f       	sbci	r29, 0xFE	; 254
    6ff2:	48 83       	st	Y, r20
    6ff4:	c0 54       	subi	r28, 0x40	; 64
    6ff6:	d1 40       	sbci	r29, 0x01	; 1
    6ff8:	61 e0       	ldi	r22, 0x01	; 1
    6ffa:	cf 5b       	subi	r28, 0xBF	; 191
    6ffc:	de 4f       	sbci	r29, 0xFE	; 254
    6ffe:	68 83       	st	Y, r22
    7000:	c1 54       	subi	r28, 0x41	; 65
    7002:	d1 40       	sbci	r29, 0x01	; 1
    7004:	c0 5c       	subi	r28, 0xC0	; 192
    7006:	de 4f       	sbci	r29, 0xFE	; 254
    7008:	78 81       	ld	r23, Y
    700a:	c0 54       	subi	r28, 0x40	; 64
    700c:	d1 40       	sbci	r29, 0x01	; 1
    700e:	c3 5d       	subi	r28, 0xD3	; 211
    7010:	de 4f       	sbci	r29, 0xFE	; 254
    7012:	88 81       	ld	r24, Y
    7014:	cd 52       	subi	r28, 0x2D	; 45
    7016:	d1 40       	sbci	r29, 0x01	; 1
    7018:	78 17       	cp	r23, r24
    701a:	28 f0       	brcs	.+10     	; 0x7026 <Timer_PollingDelay+0x3136>
    701c:	cf 5b       	subi	r28, 0xBF	; 191
    701e:	de 4f       	sbci	r29, 0xFE	; 254
    7020:	18 82       	st	Y, r1
    7022:	c1 54       	subi	r28, 0x41	; 65
    7024:	d1 40       	sbci	r29, 0x01	; 1
    7026:	c1 5c       	subi	r28, 0xC1	; 193
    7028:	de 4f       	sbci	r29, 0xFE	; 254
    702a:	98 81       	ld	r25, Y
    702c:	cf 53       	subi	r28, 0x3F	; 63
    702e:	d1 40       	sbci	r29, 0x01	; 1
    7030:	cf 5b       	subi	r28, 0xBF	; 191
    7032:	de 4f       	sbci	r29, 0xFE	; 254
    7034:	e8 81       	ld	r30, Y
    7036:	c1 54       	subi	r28, 0x41	; 65
    7038:	d1 40       	sbci	r29, 0x01	; 1
    703a:	9e 2b       	or	r25, r30
    703c:	c1 5c       	subi	r28, 0xC1	; 193
    703e:	de 4f       	sbci	r29, 0xFE	; 254
    7040:	98 83       	st	Y, r25
    7042:	cf 53       	subi	r28, 0x3F	; 63
    7044:	d1 40       	sbci	r29, 0x01	; 1
    7046:	c0 5c       	subi	r28, 0xC0	; 192
    7048:	de 4f       	sbci	r29, 0xFE	; 254
    704a:	f8 81       	ld	r31, Y
    704c:	c0 54       	subi	r28, 0x40	; 64
    704e:	d1 40       	sbci	r29, 0x01	; 1
    7050:	c3 5d       	subi	r28, 0xD3	; 211
    7052:	de 4f       	sbci	r29, 0xFE	; 254
    7054:	f8 83       	st	Y, r31
    7056:	cd 52       	subi	r28, 0x2D	; 45
    7058:	d1 40       	sbci	r29, 0x01	; 1
    705a:	0e a1       	ldd	r16, Y+38	; 0x26
    705c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    705e:	01 0f       	add	r16, r17
    7060:	c2 5d       	subi	r28, 0xD2	; 210
    7062:	de 4f       	sbci	r29, 0xFE	; 254
    7064:	08 83       	st	Y, r16
    7066:	ce 52       	subi	r28, 0x2E	; 46
    7068:	d1 40       	sbci	r29, 0x01	; 1
    706a:	c1 5c       	subi	r28, 0xC1	; 193
    706c:	de 4f       	sbci	r29, 0xFE	; 254
    706e:	88 81       	ld	r24, Y
    7070:	cf 53       	subi	r28, 0x3F	; 63
    7072:	d1 40       	sbci	r29, 0x01	; 1
    7074:	c2 5d       	subi	r28, 0xD2	; 210
    7076:	de 4f       	sbci	r29, 0xFE	; 254
    7078:	28 81       	ld	r18, Y
    707a:	ce 52       	subi	r28, 0x2E	; 46
    707c:	d1 40       	sbci	r29, 0x01	; 1
    707e:	82 0f       	add	r24, r18
    7080:	c2 5d       	subi	r28, 0xD2	; 210
    7082:	de 4f       	sbci	r29, 0xFE	; 254
    7084:	88 83       	st	Y, r24
    7086:	ce 52       	subi	r28, 0x2E	; 46
    7088:	d1 40       	sbci	r29, 0x01	; 1
    708a:	c9 5d       	subi	r28, 0xD9	; 217
    708c:	de 4f       	sbci	r29, 0xFE	; 254
    708e:	a8 80       	ld	r10, Y
    7090:	c7 52       	subi	r28, 0x27	; 39
    7092:	d1 40       	sbci	r29, 0x01	; 1
    7094:	c8 5d       	subi	r28, 0xD8	; 216
    7096:	de 4f       	sbci	r29, 0xFE	; 254
    7098:	b8 80       	ld	r11, Y
    709a:	c8 52       	subi	r28, 0x28	; 40
    709c:	d1 40       	sbci	r29, 0x01	; 1
    709e:	c7 5d       	subi	r28, 0xD7	; 215
    70a0:	de 4f       	sbci	r29, 0xFE	; 254
    70a2:	c8 80       	ld	r12, Y
    70a4:	c9 52       	subi	r28, 0x29	; 41
    70a6:	d1 40       	sbci	r29, 0x01	; 1
    70a8:	c6 5d       	subi	r28, 0xD6	; 214
    70aa:	de 4f       	sbci	r29, 0xFE	; 254
    70ac:	d8 80       	ld	r13, Y
    70ae:	ca 52       	subi	r28, 0x2A	; 42
    70b0:	d1 40       	sbci	r29, 0x01	; 1
    70b2:	c5 5d       	subi	r28, 0xD5	; 213
    70b4:	de 4f       	sbci	r29, 0xFE	; 254
    70b6:	e8 80       	ld	r14, Y
    70b8:	cb 52       	subi	r28, 0x2B	; 43
    70ba:	d1 40       	sbci	r29, 0x01	; 1
    70bc:	c4 5d       	subi	r28, 0xD4	; 212
    70be:	de 4f       	sbci	r29, 0xFE	; 254
    70c0:	f8 80       	ld	r15, Y
    70c2:	cc 52       	subi	r28, 0x2C	; 44
    70c4:	d1 40       	sbci	r29, 0x01	; 1
    70c6:	c3 5d       	subi	r28, 0xD3	; 211
    70c8:	de 4f       	sbci	r29, 0xFE	; 254
    70ca:	08 81       	ld	r16, Y
    70cc:	cd 52       	subi	r28, 0x2D	; 45
    70ce:	d1 40       	sbci	r29, 0x01	; 1
    70d0:	c2 5d       	subi	r28, 0xD2	; 210
    70d2:	de 4f       	sbci	r29, 0xFE	; 254
    70d4:	18 81       	ld	r17, Y
    70d6:	ce 52       	subi	r28, 0x2E	; 46
    70d8:	d1 40       	sbci	r29, 0x01	; 1
    70da:	80 91 31 02 	lds	r24, 0x0231
    70de:	88 2f       	mov	r24, r24
    70e0:	90 e0       	ldi	r25, 0x00	; 0
    70e2:	9c 01       	movw	r18, r24
    70e4:	2f 5f       	subi	r18, 0xFF	; 255
    70e6:	3f 4f       	sbci	r19, 0xFF	; 255
    70e8:	c9 01       	movw	r24, r18
    70ea:	99 0f       	add	r25, r25
    70ec:	88 0b       	sbc	r24, r24
    70ee:	98 2f       	mov	r25, r24
    70f0:	19 01       	movw	r2, r18
    70f2:	48 2e       	mov	r4, r24
    70f4:	58 2e       	mov	r5, r24
    70f6:	68 2e       	mov	r6, r24
    70f8:	78 2e       	mov	r7, r24
    70fa:	88 2e       	mov	r8, r24
    70fc:	98 2e       	mov	r9, r24
    70fe:	2a 2d       	mov	r18, r10
    7100:	3b 2d       	mov	r19, r11
    7102:	4c 2d       	mov	r20, r12
    7104:	5d 2d       	mov	r21, r13
    7106:	6e 2d       	mov	r22, r14
    7108:	7f 2d       	mov	r23, r15
    710a:	80 2f       	mov	r24, r16
    710c:	91 2f       	mov	r25, r17
    710e:	a2 2c       	mov	r10, r2
    7110:	b3 2c       	mov	r11, r3
    7112:	c4 2c       	mov	r12, r4
    7114:	d5 2c       	mov	r13, r5
    7116:	e6 2c       	mov	r14, r6
    7118:	f7 2c       	mov	r15, r7
    711a:	08 2d       	mov	r16, r8
    711c:	19 2d       	mov	r17, r9
    711e:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    7122:	a2 2e       	mov	r10, r18
    7124:	b3 2e       	mov	r11, r19
    7126:	c4 2e       	mov	r12, r20
    7128:	d5 2e       	mov	r13, r21
    712a:	e6 2e       	mov	r14, r22
    712c:	f7 2e       	mov	r15, r23
    712e:	08 2f       	mov	r16, r24
    7130:	19 2f       	mov	r17, r25
    7132:	2a 2d       	mov	r18, r10
    7134:	3b 2d       	mov	r19, r11
    7136:	4c 2d       	mov	r20, r12
    7138:	5d 2d       	mov	r21, r13
    713a:	6e 2d       	mov	r22, r14
    713c:	7f 2d       	mov	r23, r15
    713e:	80 2f       	mov	r24, r16
    7140:	91 2f       	mov	r25, r17
    7142:	2a 83       	std	Y+2, r18	; 0x02
    7144:	3b 83       	std	Y+3, r19	; 0x03
    7146:	4c 83       	std	Y+4, r20	; 0x04
    7148:	5d 83       	std	Y+5, r21	; 0x05
																				+ Global_u8OCR2_Value ) / ( Global_u8OCR2_Value + 1 );						/*	Total Overflows	*/
										TCNT2 = ( Global_u8OCR2_Value + 1 ) -
    714a:	44 e4       	ldi	r20, 0x44	; 68
    714c:	50 e0       	ldi	r21, 0x00	; 0
    714e:	5e 8b       	std	Y+22, r21	; 0x16
    7150:	4d 8b       	std	Y+21, r20	; 0x15
    7152:	50 91 31 02 	lds	r21, 0x0231
    7156:	5c 8b       	std	Y+20, r21	; 0x14
    7158:	89 85       	ldd	r24, Y+9	; 0x09
    715a:	9a 85       	ldd	r25, Y+10	; 0x0a
    715c:	5c 01       	movw	r10, r24
    715e:	cc 24       	eor	r12, r12
    7160:	dd 24       	eor	r13, r13
    7162:	ee 24       	eor	r14, r14
    7164:	ff 24       	eor	r15, r15
    7166:	87 01       	movw	r16, r14
    7168:	80 91 36 02 	lds	r24, 0x0236
    716c:	90 91 37 02 	lds	r25, 0x0237
    7170:	a0 91 38 02 	lds	r26, 0x0238
    7174:	b0 91 39 02 	lds	r27, 0x0239
    7178:	1c 01       	movw	r2, r24
    717a:	2d 01       	movw	r4, r26
    717c:	66 24       	eor	r6, r6
    717e:	77 24       	eor	r7, r7
    7180:	43 01       	movw	r8, r6
    7182:	2a 2d       	mov	r18, r10
    7184:	3b 2d       	mov	r19, r11
    7186:	4c 2d       	mov	r20, r12
    7188:	5d 2d       	mov	r21, r13
    718a:	6e 2d       	mov	r22, r14
    718c:	7f 2d       	mov	r23, r15
    718e:	80 2f       	mov	r24, r16
    7190:	91 2f       	mov	r25, r17
    7192:	a2 2c       	mov	r10, r2
    7194:	b3 2c       	mov	r11, r3
    7196:	c4 2c       	mov	r12, r4
    7198:	d5 2c       	mov	r13, r5
    719a:	e6 2c       	mov	r14, r6
    719c:	f7 2c       	mov	r15, r7
    719e:	08 2d       	mov	r16, r8
    71a0:	19 2d       	mov	r17, r9
    71a2:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    71a6:	22 2e       	mov	r2, r18
    71a8:	33 2e       	mov	r3, r19
    71aa:	44 2e       	mov	r4, r20
    71ac:	55 2e       	mov	r5, r21
    71ae:	66 2e       	mov	r6, r22
    71b0:	77 2e       	mov	r7, r23
    71b2:	88 2e       	mov	r8, r24
    71b4:	99 2e       	mov	r9, r25
    71b6:	a2 2c       	mov	r10, r2
    71b8:	b3 2c       	mov	r11, r3
    71ba:	c4 2c       	mov	r12, r4
    71bc:	d5 2c       	mov	r13, r5
    71be:	e6 2c       	mov	r14, r6
    71c0:	f7 2c       	mov	r15, r7
    71c2:	08 2d       	mov	r16, r8
    71c4:	19 2d       	mov	r17, r9
    71c6:	2a 2d       	mov	r18, r10
    71c8:	3b 2d       	mov	r19, r11
    71ca:	4c 2d       	mov	r20, r12
    71cc:	5d 2d       	mov	r21, r13
    71ce:	6e 2d       	mov	r22, r14
    71d0:	7f 2d       	mov	r23, r15
    71d2:	80 2f       	mov	r24, r16
    71d4:	91 2f       	mov	r25, r17
    71d6:	0f 2e       	mov	r0, r31
    71d8:	f8 ee       	ldi	r31, 0xE8	; 232
    71da:	af 2e       	mov	r10, r31
    71dc:	f0 2d       	mov	r31, r0
    71de:	0f 2e       	mov	r0, r31
    71e0:	f3 e0       	ldi	r31, 0x03	; 3
    71e2:	bf 2e       	mov	r11, r31
    71e4:	f0 2d       	mov	r31, r0
    71e6:	cc 24       	eor	r12, r12
    71e8:	dd 24       	eor	r13, r13
    71ea:	ee 24       	eor	r14, r14
    71ec:	ff 24       	eor	r15, r15
    71ee:	00 e0       	ldi	r16, 0x00	; 0
    71f0:	10 e0       	ldi	r17, 0x00	; 0
    71f2:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    71f6:	a2 2e       	mov	r10, r18
    71f8:	b3 2e       	mov	r11, r19
    71fa:	c4 2e       	mov	r12, r20
    71fc:	d5 2e       	mov	r13, r21
    71fe:	e6 2e       	mov	r14, r22
    7200:	f7 2e       	mov	r15, r23
    7202:	08 2f       	mov	r16, r24
    7204:	19 2f       	mov	r17, r25
    7206:	2a 2c       	mov	r2, r10
    7208:	3b 2c       	mov	r3, r11
    720a:	4c 2c       	mov	r4, r12
    720c:	5d 2c       	mov	r5, r13
    720e:	6e 2c       	mov	r6, r14
    7210:	7f 2c       	mov	r7, r15
    7212:	80 2e       	mov	r8, r16
    7214:	91 2e       	mov	r9, r17
    7216:	80 91 31 02 	lds	r24, 0x0231
    721a:	88 2f       	mov	r24, r24
    721c:	90 e0       	ldi	r25, 0x00	; 0
    721e:	01 96       	adiw	r24, 0x01	; 1
    7220:	8c 01       	movw	r16, r24
    7222:	20 e0       	ldi	r18, 0x00	; 0
    7224:	30 e0       	ldi	r19, 0x00	; 0
    7226:	40 e0       	ldi	r20, 0x00	; 0
    7228:	50 e0       	ldi	r21, 0x00	; 0
    722a:	60 e0       	ldi	r22, 0x00	; 0
    722c:	70 e0       	ldi	r23, 0x00	; 0
    722e:	0c 87       	std	Y+12, r16	; 0x0c
    7230:	1d 87       	std	Y+13, r17	; 0x0d
    7232:	2e 87       	std	Y+14, r18	; 0x0e
    7234:	3f 87       	std	Y+15, r19	; 0x0f
    7236:	48 8b       	std	Y+16, r20	; 0x10
    7238:	59 8b       	std	Y+17, r21	; 0x11
    723a:	6a 8b       	std	Y+18, r22	; 0x12
    723c:	7b 8b       	std	Y+19, r23	; 0x13
    723e:	22 2d       	mov	r18, r2
    7240:	33 2d       	mov	r19, r3
    7242:	44 2d       	mov	r20, r4
    7244:	55 2d       	mov	r21, r5
    7246:	66 2d       	mov	r22, r6
    7248:	77 2d       	mov	r23, r7
    724a:	88 2d       	mov	r24, r8
    724c:	99 2d       	mov	r25, r9
    724e:	ac 84       	ldd	r10, Y+12	; 0x0c
    7250:	bd 84       	ldd	r11, Y+13	; 0x0d
    7252:	ce 84       	ldd	r12, Y+14	; 0x0e
    7254:	df 84       	ldd	r13, Y+15	; 0x0f
    7256:	e8 88       	ldd	r14, Y+16	; 0x10
    7258:	f9 88       	ldd	r15, Y+17	; 0x11
    725a:	0a 89       	ldd	r16, Y+18	; 0x12
    725c:	1b 89       	ldd	r17, Y+19	; 0x13
    725e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__umoddi3>
    7262:	a2 2e       	mov	r10, r18
    7264:	b3 2e       	mov	r11, r19
    7266:	c4 2e       	mov	r12, r20
    7268:	d5 2e       	mov	r13, r21
    726a:	e6 2e       	mov	r14, r22
    726c:	f7 2e       	mov	r15, r23
    726e:	08 2f       	mov	r16, r24
    7270:	19 2f       	mov	r17, r25
    7272:	2a 2d       	mov	r18, r10
    7274:	3b 2d       	mov	r19, r11
    7276:	4c 2d       	mov	r20, r12
    7278:	5d 2d       	mov	r21, r13
    727a:	6e 2d       	mov	r22, r14
    727c:	7f 2d       	mov	r23, r15
    727e:	80 2f       	mov	r24, r16
    7280:	91 2f       	mov	r25, r17
    7282:	82 2f       	mov	r24, r18
    7284:	1c 89       	ldd	r17, Y+20	; 0x14
    7286:	18 1b       	sub	r17, r24
    7288:	81 2f       	mov	r24, r17
    728a:	8f 5f       	subi	r24, 0xFF	; 255
    728c:	ed 89       	ldd	r30, Y+21	; 0x15
    728e:	fe 89       	ldd	r31, Y+22	; 0x16
    7290:	80 83       	st	Z, r24
    7292:	17 c0       	rjmp	.+46     	; 0x72c2 <Timer_PollingDelay+0x33d2>
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / ( 1000UL ) ) % (u16)( Global_u8OCR2_Value + 1 ) );	/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER2_BOTTOM )
										{
										while( !(( TIFR >> OCF2_BIT) & BIT0_MASK ) );										/*	Waiting for Timer2 Output Compare flag	*/
    7294:	e8 e5       	ldi	r30, 0x58	; 88
    7296:	f0 e0       	ldi	r31, 0x00	; 0
    7298:	80 81       	ld	r24, Z
    729a:	88 23       	and	r24, r24
    729c:	dc f7       	brge	.-10     	; 0x7294 <Timer_PollingDelay+0x33a4>
										Local_u32OverFlowCounts--;
    729e:	8a 81       	ldd	r24, Y+2	; 0x02
    72a0:	9b 81       	ldd	r25, Y+3	; 0x03
    72a2:	ac 81       	ldd	r26, Y+4	; 0x04
    72a4:	bd 81       	ldd	r27, Y+5	; 0x05
    72a6:	01 97       	sbiw	r24, 0x01	; 1
    72a8:	a1 09       	sbc	r26, r1
    72aa:	b1 09       	sbc	r27, r1
    72ac:	8a 83       	std	Y+2, r24	; 0x02
    72ae:	9b 83       	std	Y+3, r25	; 0x03
    72b0:	ac 83       	std	Y+4, r26	; 0x04
    72b2:	bd 83       	std	Y+5, r27	; 0x05
										TIFR |= (BIT0_MASK << OCF2_BIT);													/*	Clearing Timer2 Overflow flag	*/
    72b4:	a8 e5       	ldi	r26, 0x58	; 88
    72b6:	b0 e0       	ldi	r27, 0x00	; 0
    72b8:	e8 e5       	ldi	r30, 0x58	; 88
    72ba:	f0 e0       	ldi	r31, 0x00	; 0
    72bc:	80 81       	ld	r24, Z
    72be:	80 68       	ori	r24, 0x80	; 128
    72c0:	8c 93       	st	X, r24
			case  COMP_INVERTED		:	Local_u32OverFlowCounts = ( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / ( 1000UL ) )
																				+ Global_u8OCR2_Value ) / ( Global_u8OCR2_Value + 1 );						/*	Total Overflows	*/
										TCNT2 = ( Global_u8OCR2_Value + 1 ) -
												( ( ( Copy_u16Delay_ms * (u64)Global_u32Timer2_Clk ) / ( 1000UL ) ) % (u16)( Global_u8OCR2_Value + 1 ) );	/*	PreLoad Value	*/

										while( Local_u32OverFlowCounts > TIMER2_BOTTOM )
    72c2:	8a 81       	ldd	r24, Y+2	; 0x02
    72c4:	9b 81       	ldd	r25, Y+3	; 0x03
    72c6:	ac 81       	ldd	r26, Y+4	; 0x04
    72c8:	bd 81       	ldd	r27, Y+5	; 0x05
    72ca:	00 97       	sbiw	r24, 0x00	; 0
    72cc:	a1 05       	cpc	r26, r1
    72ce:	b1 05       	cpc	r27, r1
    72d0:	09 f7       	brne	.-62     	; 0x7294 <Timer_PollingDelay+0x33a4>
    72d2:	05 c0       	rjmp	.+10     	; 0x72de <Timer_PollingDelay+0x33ee>
										while( !(( TIFR >> OCF2_BIT) & BIT0_MASK ) );										/*	Waiting for Timer2 Output Compare flag	*/
										Local_u32OverFlowCounts--;
										TIFR |= (BIT0_MASK << OCF2_BIT);													/*	Clearing Timer2 Overflow flag	*/
										}
										break;
			default		: Local_enuErrorState = ES_OUT_RANGE;
    72d4:	82 e0       	ldi	r24, 0x02	; 2
    72d6:	8f 83       	std	Y+7, r24	; 0x07
    72d8:	02 c0       	rjmp	.+4      	; 0x72de <Timer_PollingDelay+0x33ee>
										break;
			}
		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    72da:	82 e0       	ldi	r24, 0x02	; 2
    72dc:	8f 83       	std	Y+7, r24	; 0x07

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    72de:	8f 81       	ldd	r24, Y+7	; 0x07
    72e0:	81 30       	cpi	r24, 0x01	; 1
    72e2:	19 f0       	breq	.+6      	; 0x72ea <Timer_PollingDelay+0x33fa>
    72e4:	ff 81       	ldd	r31, Y+7	; 0x07
    72e6:	fb 87       	std	Y+11, r31	; 0x0b
    72e8:	01 c0       	rjmp	.+2      	; 0x72ec <Timer_PollingDelay+0x33fc>
    72ea:	1b 86       	std	Y+11, r1	; 0x0b
    72ec:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    72ee:	cf 5b       	subi	r28, 0xBF	; 191
    72f0:	de 4f       	sbci	r29, 0xFE	; 254
    72f2:	0f b6       	in	r0, 0x3f	; 63
    72f4:	f8 94       	cli
    72f6:	de bf       	out	0x3e, r29	; 62
    72f8:	0f be       	out	0x3f, r0	; 63
    72fa:	cd bf       	out	0x3d, r28	; 61
    72fc:	cf 91       	pop	r28
    72fe:	df 91       	pop	r29
    7300:	1f 91       	pop	r17
    7302:	0f 91       	pop	r16
    7304:	ff 90       	pop	r15
    7306:	ef 90       	pop	r14
    7308:	df 90       	pop	r13
    730a:	cf 90       	pop	r12
    730c:	bf 90       	pop	r11
    730e:	af 90       	pop	r10
    7310:	9f 90       	pop	r9
    7312:	8f 90       	pop	r8
    7314:	7f 90       	pop	r7
    7316:	6f 90       	pop	r6
    7318:	5f 90       	pop	r5
    731a:	4f 90       	pop	r4
    731c:	3f 90       	pop	r3
    731e:	2f 90       	pop	r2
    7320:	08 95       	ret

00007322 <Timer_ISR_Delay>:


ES_t Timer_ISR_Delay(u8 Copy_u8TimerNum , u16 Copy_u16Delay_ms , void (*Copy_pFun)(void *) , void *Copy_pAppVar ) // ISR Delay
{
    7322:	df 93       	push	r29
    7324:	cf 93       	push	r28
    7326:	cd b7       	in	r28, 0x3d	; 61
    7328:	de b7       	in	r29, 0x3e	; 62
    732a:	28 97       	sbiw	r28, 0x08	; 8
    732c:	0f b6       	in	r0, 0x3f	; 63
    732e:	f8 94       	cli
    7330:	de bf       	out	0x3e, r29	; 62
    7332:	0f be       	out	0x3f, r0	; 63
    7334:	cd bf       	out	0x3d, r28	; 61
    7336:	8a 83       	std	Y+2, r24	; 0x02
    7338:	7c 83       	std	Y+4, r23	; 0x04
    733a:	6b 83       	std	Y+3, r22	; 0x03
    733c:	5e 83       	std	Y+6, r21	; 0x06
    733e:	4d 83       	std	Y+5, r20	; 0x05
    7340:	38 87       	std	Y+8, r19	; 0x08
    7342:	2f 83       	std	Y+7, r18	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    7344:	81 e0       	ldi	r24, 0x01	; 1
    7346:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pFun != NULL)
    7348:	8d 81       	ldd	r24, Y+5	; 0x05
    734a:	9e 81       	ldd	r25, Y+6	; 0x06
    734c:	00 97       	sbiw	r24, 0x00	; 0
    734e:	11 f4       	brne	.+4      	; 0x7354 <Timer_ISR_Delay+0x32>
	{



	}
	else Local_enuErrorState = ES_NULL_POINTER;
    7350:	83 e0       	ldi	r24, 0x03	; 3
    7352:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState ;
    7354:	89 81       	ldd	r24, Y+1	; 0x01
}
    7356:	28 96       	adiw	r28, 0x08	; 8
    7358:	0f b6       	in	r0, 0x3f	; 63
    735a:	f8 94       	cli
    735c:	de bf       	out	0x3e, r29	; 62
    735e:	0f be       	out	0x3f, r0	; 63
    7360:	cd bf       	out	0x3d, r28	; 61
    7362:	cf 91       	pop	r28
    7364:	df 91       	pop	r29
    7366:	08 95       	ret

00007368 <Timer_enuInterruptEnable>:

*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ES_t Timer_enuInterruptEnable( u8 Copy_u8TimerIntName)
{
    7368:	df 93       	push	r29
    736a:	cf 93       	push	r28
    736c:	00 d0       	rcall	.+0      	; 0x736e <Timer_enuInterruptEnable+0x6>
    736e:	00 d0       	rcall	.+0      	; 0x7370 <Timer_enuInterruptEnable+0x8>
    7370:	0f 92       	push	r0
    7372:	cd b7       	in	r28, 0x3d	; 61
    7374:	de b7       	in	r29, 0x3e	; 62
    7376:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    7378:	81 e0       	ldi	r24, 0x01	; 1
    737a:	89 83       	std	Y+1, r24	; 0x01

	asm(" CLI ") ;														// Disable ALL Interrupts
    737c:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    737e:	8a 81       	ldd	r24, Y+2	; 0x02
    7380:	28 2f       	mov	r18, r24
    7382:	30 e0       	ldi	r19, 0x00	; 0
    7384:	3d 83       	std	Y+5, r19	; 0x05
    7386:	2c 83       	std	Y+4, r18	; 0x04
    7388:	8c 81       	ldd	r24, Y+4	; 0x04
    738a:	9d 81       	ldd	r25, Y+5	; 0x05
    738c:	82 34       	cpi	r24, 0x42	; 66
    738e:	91 05       	cpc	r25, r1
    7390:	31 f1       	breq	.+76     	; 0x73de <Timer_enuInterruptEnable+0x76>
    7392:	2c 81       	ldd	r18, Y+4	; 0x04
    7394:	3d 81       	ldd	r19, Y+5	; 0x05
    7396:	23 34       	cpi	r18, 0x43	; 67
    7398:	31 05       	cpc	r19, r1
    739a:	5c f4       	brge	.+22     	; 0x73b2 <Timer_enuInterruptEnable+0x4a>
    739c:	8c 81       	ldd	r24, Y+4	; 0x04
    739e:	9d 81       	ldd	r25, Y+5	; 0x05
    73a0:	8c 33       	cpi	r24, 0x3C	; 60
    73a2:	91 05       	cpc	r25, r1
    73a4:	61 f0       	breq	.+24     	; 0x73be <Timer_enuInterruptEnable+0x56>
    73a6:	2c 81       	ldd	r18, Y+4	; 0x04
    73a8:	3d 81       	ldd	r19, Y+5	; 0x05
    73aa:	2d 33       	cpi	r18, 0x3D	; 61
    73ac:	31 05       	cpc	r19, r1
    73ae:	79 f0       	breq	.+30     	; 0x73ce <Timer_enuInterruptEnable+0x66>
    73b0:	26 c0       	rjmp	.+76     	; 0x73fe <Timer_enuInterruptEnable+0x96>
    73b2:	8c 81       	ldd	r24, Y+4	; 0x04
    73b4:	9d 81       	ldd	r25, Y+5	; 0x05
    73b6:	83 34       	cpi	r24, 0x43	; 67
    73b8:	91 05       	cpc	r25, r1
    73ba:	c9 f0       	breq	.+50     	; 0x73ee <Timer_enuInterruptEnable+0x86>
    73bc:	20 c0       	rjmp	.+64     	; 0x73fe <Timer_enuInterruptEnable+0x96>
	{
		case TOIE0	:	TIMSK |= (BIT0_MASK << TOIE0_BIT);
    73be:	a9 e5       	ldi	r26, 0x59	; 89
    73c0:	b0 e0       	ldi	r27, 0x00	; 0
    73c2:	e9 e5       	ldi	r30, 0x59	; 89
    73c4:	f0 e0       	ldi	r31, 0x00	; 0
    73c6:	80 81       	ld	r24, Z
    73c8:	81 60       	ori	r24, 0x01	; 1
    73ca:	8c 93       	st	X, r24
    73cc:	1a c0       	rjmp	.+52     	; 0x7402 <Timer_enuInterruptEnable+0x9a>
						break;
		case OCIE0	:	TIMSK |= (BIT0_MASK << OCIE0_BIT);
    73ce:	a9 e5       	ldi	r26, 0x59	; 89
    73d0:	b0 e0       	ldi	r27, 0x00	; 0
    73d2:	e9 e5       	ldi	r30, 0x59	; 89
    73d4:	f0 e0       	ldi	r31, 0x00	; 0
    73d6:	80 81       	ld	r24, Z
    73d8:	82 60       	ori	r24, 0x02	; 2
    73da:	8c 93       	st	X, r24
    73dc:	12 c0       	rjmp	.+36     	; 0x7402 <Timer_enuInterruptEnable+0x9a>
		case OCIE1A	:	TIMSK |= (BIT0_MASK << OCIE1A_BIT);
						break;
		case TICIE1	:	TIMSK |= (BIT0_MASK << TICIE1_BIT);
						break;
#endif
		case TOIE2	:	TIMSK |= (BIT0_MASK << TOIE2_BIT);
    73de:	a9 e5       	ldi	r26, 0x59	; 89
    73e0:	b0 e0       	ldi	r27, 0x00	; 0
    73e2:	e9 e5       	ldi	r30, 0x59	; 89
    73e4:	f0 e0       	ldi	r31, 0x00	; 0
    73e6:	80 81       	ld	r24, Z
    73e8:	80 64       	ori	r24, 0x40	; 64
    73ea:	8c 93       	st	X, r24
    73ec:	0a c0       	rjmp	.+20     	; 0x7402 <Timer_enuInterruptEnable+0x9a>
						break;
		case OCIE2	:	TIMSK |= (BIT0_MASK << OCIE2_BIT);
    73ee:	a9 e5       	ldi	r26, 0x59	; 89
    73f0:	b0 e0       	ldi	r27, 0x00	; 0
    73f2:	e9 e5       	ldi	r30, 0x59	; 89
    73f4:	f0 e0       	ldi	r31, 0x00	; 0
    73f6:	80 81       	ld	r24, Z
    73f8:	80 68       	ori	r24, 0x80	; 128
    73fa:	8c 93       	st	X, r24
    73fc:	02 c0       	rjmp	.+4      	; 0x7402 <Timer_enuInterruptEnable+0x9a>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    73fe:	82 e0       	ldi	r24, 0x02	; 2
    7400:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}
	asm(" SEI ") ;														// Enable ALL Interrupts
    7402:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    7404:	89 81       	ldd	r24, Y+1	; 0x01
    7406:	81 30       	cpi	r24, 0x01	; 1
    7408:	19 f0       	breq	.+6      	; 0x7410 <Timer_enuInterruptEnable+0xa8>
    740a:	99 81       	ldd	r25, Y+1	; 0x01
    740c:	9b 83       	std	Y+3, r25	; 0x03
    740e:	01 c0       	rjmp	.+2      	; 0x7412 <Timer_enuInterruptEnable+0xaa>
    7410:	1b 82       	std	Y+3, r1	; 0x03
    7412:	8b 81       	ldd	r24, Y+3	; 0x03
}
    7414:	0f 90       	pop	r0
    7416:	0f 90       	pop	r0
    7418:	0f 90       	pop	r0
    741a:	0f 90       	pop	r0
    741c:	0f 90       	pop	r0
    741e:	cf 91       	pop	r28
    7420:	df 91       	pop	r29
    7422:	08 95       	ret

00007424 <Timer_enuInterruptDisable>:

ES_t Timer_enuInterruptDisable( u8 Copy_u8TimerIntName)
{
    7424:	df 93       	push	r29
    7426:	cf 93       	push	r28
    7428:	00 d0       	rcall	.+0      	; 0x742a <Timer_enuInterruptDisable+0x6>
    742a:	00 d0       	rcall	.+0      	; 0x742c <Timer_enuInterruptDisable+0x8>
    742c:	0f 92       	push	r0
    742e:	cd b7       	in	r28, 0x3d	; 61
    7430:	de b7       	in	r29, 0x3e	; 62
    7432:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    7434:	81 e0       	ldi	r24, 0x01	; 1
    7436:	89 83       	std	Y+1, r24	; 0x01

	asm(" CLI ") ;														// Disable ALL Interrupts
    7438:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    743a:	8a 81       	ldd	r24, Y+2	; 0x02
    743c:	28 2f       	mov	r18, r24
    743e:	30 e0       	ldi	r19, 0x00	; 0
    7440:	3d 83       	std	Y+5, r19	; 0x05
    7442:	2c 83       	std	Y+4, r18	; 0x04
    7444:	8c 81       	ldd	r24, Y+4	; 0x04
    7446:	9d 81       	ldd	r25, Y+5	; 0x05
    7448:	82 34       	cpi	r24, 0x42	; 66
    744a:	91 05       	cpc	r25, r1
    744c:	31 f1       	breq	.+76     	; 0x749a <Timer_enuInterruptDisable+0x76>
    744e:	2c 81       	ldd	r18, Y+4	; 0x04
    7450:	3d 81       	ldd	r19, Y+5	; 0x05
    7452:	23 34       	cpi	r18, 0x43	; 67
    7454:	31 05       	cpc	r19, r1
    7456:	5c f4       	brge	.+22     	; 0x746e <Timer_enuInterruptDisable+0x4a>
    7458:	8c 81       	ldd	r24, Y+4	; 0x04
    745a:	9d 81       	ldd	r25, Y+5	; 0x05
    745c:	8c 33       	cpi	r24, 0x3C	; 60
    745e:	91 05       	cpc	r25, r1
    7460:	61 f0       	breq	.+24     	; 0x747a <Timer_enuInterruptDisable+0x56>
    7462:	2c 81       	ldd	r18, Y+4	; 0x04
    7464:	3d 81       	ldd	r19, Y+5	; 0x05
    7466:	2d 33       	cpi	r18, 0x3D	; 61
    7468:	31 05       	cpc	r19, r1
    746a:	79 f0       	breq	.+30     	; 0x748a <Timer_enuInterruptDisable+0x66>
    746c:	26 c0       	rjmp	.+76     	; 0x74ba <Timer_enuInterruptDisable+0x96>
    746e:	8c 81       	ldd	r24, Y+4	; 0x04
    7470:	9d 81       	ldd	r25, Y+5	; 0x05
    7472:	83 34       	cpi	r24, 0x43	; 67
    7474:	91 05       	cpc	r25, r1
    7476:	c9 f0       	breq	.+50     	; 0x74aa <Timer_enuInterruptDisable+0x86>
    7478:	20 c0       	rjmp	.+64     	; 0x74ba <Timer_enuInterruptDisable+0x96>
	{
		case TOIE0	:	TIMSK &= ~(BIT0_MASK << TOIE0_BIT);
    747a:	a9 e5       	ldi	r26, 0x59	; 89
    747c:	b0 e0       	ldi	r27, 0x00	; 0
    747e:	e9 e5       	ldi	r30, 0x59	; 89
    7480:	f0 e0       	ldi	r31, 0x00	; 0
    7482:	80 81       	ld	r24, Z
    7484:	8e 7f       	andi	r24, 0xFE	; 254
    7486:	8c 93       	st	X, r24
    7488:	1a c0       	rjmp	.+52     	; 0x74be <Timer_enuInterruptDisable+0x9a>
						break;
		case OCIE0	:	TIMSK &= ~(BIT0_MASK << OCIE0_BIT);
    748a:	a9 e5       	ldi	r26, 0x59	; 89
    748c:	b0 e0       	ldi	r27, 0x00	; 0
    748e:	e9 e5       	ldi	r30, 0x59	; 89
    7490:	f0 e0       	ldi	r31, 0x00	; 0
    7492:	80 81       	ld	r24, Z
    7494:	8d 7f       	andi	r24, 0xFD	; 253
    7496:	8c 93       	st	X, r24
    7498:	12 c0       	rjmp	.+36     	; 0x74be <Timer_enuInterruptDisable+0x9a>
		case OCIE1A	:	TIMSK &= ~(BIT0_MASK << OCIE1A_BIT);
						break;
		case TICIE1	:	TIMSK &= ~(BIT0_MASK << TICIE1_BIT);
						break;
#endif
		case TOIE2	:	TIMSK &= ~(BIT0_MASK << TOIE2_BIT);
    749a:	a9 e5       	ldi	r26, 0x59	; 89
    749c:	b0 e0       	ldi	r27, 0x00	; 0
    749e:	e9 e5       	ldi	r30, 0x59	; 89
    74a0:	f0 e0       	ldi	r31, 0x00	; 0
    74a2:	80 81       	ld	r24, Z
    74a4:	8f 7b       	andi	r24, 0xBF	; 191
    74a6:	8c 93       	st	X, r24
    74a8:	0a c0       	rjmp	.+20     	; 0x74be <Timer_enuInterruptDisable+0x9a>
						break;
		case OCIE2	:	TIMSK &= ~(BIT0_MASK << OCIE2_BIT);
    74aa:	a9 e5       	ldi	r26, 0x59	; 89
    74ac:	b0 e0       	ldi	r27, 0x00	; 0
    74ae:	e9 e5       	ldi	r30, 0x59	; 89
    74b0:	f0 e0       	ldi	r31, 0x00	; 0
    74b2:	80 81       	ld	r24, Z
    74b4:	8f 77       	andi	r24, 0x7F	; 127
    74b6:	8c 93       	st	X, r24
    74b8:	02 c0       	rjmp	.+4      	; 0x74be <Timer_enuInterruptDisable+0x9a>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    74ba:	82 e0       	ldi	r24, 0x02	; 2
    74bc:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}

	asm(" SEI ") ;														// Re-Enable ALL Interrupts
    74be:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    74c0:	89 81       	ldd	r24, Y+1	; 0x01
    74c2:	81 30       	cpi	r24, 0x01	; 1
    74c4:	19 f0       	breq	.+6      	; 0x74cc <Timer_enuInterruptDisable+0xa8>
    74c6:	99 81       	ldd	r25, Y+1	; 0x01
    74c8:	9b 83       	std	Y+3, r25	; 0x03
    74ca:	01 c0       	rjmp	.+2      	; 0x74ce <Timer_enuInterruptDisable+0xaa>
    74cc:	1b 82       	std	Y+3, r1	; 0x03
    74ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    74d0:	0f 90       	pop	r0
    74d2:	0f 90       	pop	r0
    74d4:	0f 90       	pop	r0
    74d6:	0f 90       	pop	r0
    74d8:	0f 90       	pop	r0
    74da:	cf 91       	pop	r28
    74dc:	df 91       	pop	r29
    74de:	08 95       	ret

000074e0 <Timer_IsInterruptEnabled>:

bool Timer_IsInterruptEnabled( u8 Copy_u8TimerIntName )
{
    74e0:	df 93       	push	r29
    74e2:	cf 93       	push	r28
    74e4:	00 d0       	rcall	.+0      	; 0x74e6 <Timer_IsInterruptEnabled+0x6>
    74e6:	00 d0       	rcall	.+0      	; 0x74e8 <Timer_IsInterruptEnabled+0x8>
    74e8:	0f 92       	push	r0
    74ea:	cd b7       	in	r28, 0x3d	; 61
    74ec:	de b7       	in	r29, 0x3e	; 62
    74ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status = 0 ;
    74f0:	19 82       	std	Y+1, r1	; 0x01

	switch ( Copy_u8TimerIntName )
    74f2:	8a 81       	ldd	r24, Y+2	; 0x02
    74f4:	28 2f       	mov	r18, r24
    74f6:	30 e0       	ldi	r19, 0x00	; 0
    74f8:	3d 83       	std	Y+5, r19	; 0x05
    74fa:	2c 83       	std	Y+4, r18	; 0x04
    74fc:	8c 81       	ldd	r24, Y+4	; 0x04
    74fe:	9d 81       	ldd	r25, Y+5	; 0x05
    7500:	82 34       	cpi	r24, 0x42	; 66
    7502:	91 05       	cpc	r25, r1
    7504:	49 f1       	breq	.+82     	; 0x7558 <Timer_IsInterruptEnabled+0x78>
    7506:	2c 81       	ldd	r18, Y+4	; 0x04
    7508:	3d 81       	ldd	r19, Y+5	; 0x05
    750a:	23 34       	cpi	r18, 0x43	; 67
    750c:	31 05       	cpc	r19, r1
    750e:	5c f4       	brge	.+22     	; 0x7526 <Timer_IsInterruptEnabled+0x46>
    7510:	8c 81       	ldd	r24, Y+4	; 0x04
    7512:	9d 81       	ldd	r25, Y+5	; 0x05
    7514:	8c 33       	cpi	r24, 0x3C	; 60
    7516:	91 05       	cpc	r25, r1
    7518:	61 f0       	breq	.+24     	; 0x7532 <Timer_IsInterruptEnabled+0x52>
    751a:	2c 81       	ldd	r18, Y+4	; 0x04
    751c:	3d 81       	ldd	r19, Y+5	; 0x05
    751e:	2d 33       	cpi	r18, 0x3D	; 61
    7520:	31 05       	cpc	r19, r1
    7522:	81 f0       	breq	.+32     	; 0x7544 <Timer_IsInterruptEnabled+0x64>
    7524:	30 c0       	rjmp	.+96     	; 0x7586 <Timer_IsInterruptEnabled+0xa6>
    7526:	8c 81       	ldd	r24, Y+4	; 0x04
    7528:	9d 81       	ldd	r25, Y+5	; 0x05
    752a:	83 34       	cpi	r24, 0x43	; 67
    752c:	91 05       	cpc	r25, r1
    752e:	09 f1       	breq	.+66     	; 0x7572 <Timer_IsInterruptEnabled+0x92>
    7530:	2a c0       	rjmp	.+84     	; 0x7586 <Timer_IsInterruptEnabled+0xa6>
	{
		case TOIE0	:	Local_u8Status |= ( (TIMSK >> TOIE0_BIT) & BIT0_MASK );
    7532:	e9 e5       	ldi	r30, 0x59	; 89
    7534:	f0 e0       	ldi	r31, 0x00	; 0
    7536:	80 81       	ld	r24, Z
    7538:	98 2f       	mov	r25, r24
    753a:	91 70       	andi	r25, 0x01	; 1
    753c:	89 81       	ldd	r24, Y+1	; 0x01
    753e:	89 2b       	or	r24, r25
    7540:	89 83       	std	Y+1, r24	; 0x01
    7542:	21 c0       	rjmp	.+66     	; 0x7586 <Timer_IsInterruptEnabled+0xa6>
						break;
		case OCIE0	:	Local_u8Status |= ( (TIMSK >> OCIE0_BIT) & BIT0_MASK );
    7544:	e9 e5       	ldi	r30, 0x59	; 89
    7546:	f0 e0       	ldi	r31, 0x00	; 0
    7548:	80 81       	ld	r24, Z
    754a:	86 95       	lsr	r24
    754c:	98 2f       	mov	r25, r24
    754e:	91 70       	andi	r25, 0x01	; 1
    7550:	89 81       	ldd	r24, Y+1	; 0x01
    7552:	89 2b       	or	r24, r25
    7554:	89 83       	std	Y+1, r24	; 0x01
    7556:	17 c0       	rjmp	.+46     	; 0x7586 <Timer_IsInterruptEnabled+0xa6>
		case OCIE1A	:	Local_u8Status |= ( (TIMSK >> OCIE1A_BIT) & BIT0_MASK );
						break;
		case TICIE1	:	Local_u8Status |= ( (TIMSK >> TICIE1_BIT) & BIT0_MASK );
						break;
#endif
		case TOIE2	:	Local_u8Status |= ( (TIMSK >> TOIE2_BIT) & BIT0_MASK );
    7558:	e9 e5       	ldi	r30, 0x59	; 89
    755a:	f0 e0       	ldi	r31, 0x00	; 0
    755c:	80 81       	ld	r24, Z
    755e:	82 95       	swap	r24
    7560:	86 95       	lsr	r24
    7562:	86 95       	lsr	r24
    7564:	83 70       	andi	r24, 0x03	; 3
    7566:	98 2f       	mov	r25, r24
    7568:	91 70       	andi	r25, 0x01	; 1
    756a:	89 81       	ldd	r24, Y+1	; 0x01
    756c:	89 2b       	or	r24, r25
    756e:	89 83       	std	Y+1, r24	; 0x01
    7570:	0a c0       	rjmp	.+20     	; 0x7586 <Timer_IsInterruptEnabled+0xa6>
						break;
		case OCIE2	:	Local_u8Status |= ( (TIMSK >> OCIE2_BIT) & BIT0_MASK );
    7572:	e9 e5       	ldi	r30, 0x59	; 89
    7574:	f0 e0       	ldi	r31, 0x00	; 0
    7576:	80 81       	ld	r24, Z
    7578:	98 2f       	mov	r25, r24
    757a:	99 1f       	adc	r25, r25
    757c:	99 27       	eor	r25, r25
    757e:	99 1f       	adc	r25, r25
    7580:	89 81       	ldd	r24, Y+1	; 0x01
    7582:	89 2b       	or	r24, r25
    7584:	89 83       	std	Y+1, r24	; 0x01
						break;
	}
	return ( ( Local_u8Status)? TRUE : FALSE ) ;
    7586:	1b 82       	std	Y+3, r1	; 0x03
    7588:	89 81       	ldd	r24, Y+1	; 0x01
    758a:	88 23       	and	r24, r24
    758c:	11 f4       	brne	.+4      	; 0x7592 <Timer_IsInterruptEnabled+0xb2>
    758e:	91 e0       	ldi	r25, 0x01	; 1
    7590:	9b 83       	std	Y+3, r25	; 0x03
    7592:	8b 81       	ldd	r24, Y+3	; 0x03
}
    7594:	0f 90       	pop	r0
    7596:	0f 90       	pop	r0
    7598:	0f 90       	pop	r0
    759a:	0f 90       	pop	r0
    759c:	0f 90       	pop	r0
    759e:	cf 91       	pop	r28
    75a0:	df 91       	pop	r29
    75a2:	08 95       	ret

000075a4 <Timer_enuCallBack>:


ES_t Timer_enuCallBack( u8 Copy_u8TimerIntName , void (*Copy_pAppFun)(void*) , void *Copy_pAppVar)
{
    75a4:	df 93       	push	r29
    75a6:	cf 93       	push	r28
    75a8:	cd b7       	in	r28, 0x3d	; 61
    75aa:	de b7       	in	r29, 0x3e	; 62
    75ac:	28 97       	sbiw	r28, 0x08	; 8
    75ae:	0f b6       	in	r0, 0x3f	; 63
    75b0:	f8 94       	cli
    75b2:	de bf       	out	0x3e, r29	; 62
    75b4:	0f be       	out	0x3f, r0	; 63
    75b6:	cd bf       	out	0x3d, r28	; 61
    75b8:	8c 83       	std	Y+4, r24	; 0x04
    75ba:	7e 83       	std	Y+6, r23	; 0x06
    75bc:	6d 83       	std	Y+5, r22	; 0x05
    75be:	58 87       	std	Y+8, r21	; 0x08
    75c0:	4f 83       	std	Y+7, r20	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    75c2:	81 e0       	ldi	r24, 0x01	; 1
    75c4:	8b 83       	std	Y+3, r24	; 0x03

	u8 found = 0 ;
    75c6:	1a 82       	std	Y+2, r1	; 0x02

	if( Copy_pAppFun != NULL )
    75c8:	8d 81       	ldd	r24, Y+5	; 0x05
    75ca:	9e 81       	ldd	r25, Y+6	; 0x06
    75cc:	00 97       	sbiw	r24, 0x00	; 0
    75ce:	09 f4       	brne	.+2      	; 0x75d2 <Timer_enuCallBack+0x2e>
    75d0:	44 c0       	rjmp	.+136    	; 0x765a <Timer_enuCallBack+0xb6>
    75d2:	3a c0       	rjmp	.+116    	; 0x7648 <Timer_enuCallBack+0xa4>
	{
		for( u8 Local_u8Iter; Local_u8Iter < TIMERS_INTERRUPTS ; Local_u8Iter++ )
		{
			if( Global_AstrTimerPointers[Local_u8Iter].InterruptName == Copy_u8TimerIntName )
    75d4:	89 81       	ldd	r24, Y+1	; 0x01
    75d6:	28 2f       	mov	r18, r24
    75d8:	30 e0       	ldi	r19, 0x00	; 0
    75da:	c9 01       	movw	r24, r18
    75dc:	88 0f       	add	r24, r24
    75de:	99 1f       	adc	r25, r25
    75e0:	88 0f       	add	r24, r24
    75e2:	99 1f       	adc	r25, r25
    75e4:	82 0f       	add	r24, r18
    75e6:	93 1f       	adc	r25, r19
    75e8:	fc 01       	movw	r30, r24
    75ea:	ec 57       	subi	r30, 0x7C	; 124
    75ec:	fe 4f       	sbci	r31, 0xFE	; 254
    75ee:	90 81       	ld	r25, Z
    75f0:	8c 81       	ldd	r24, Y+4	; 0x04
    75f2:	98 17       	cp	r25, r24
    75f4:	31 f5       	brne	.+76     	; 0x7642 <Timer_enuCallBack+0x9e>
			{
				Global_AstrTimerPointers[Local_u8Iter].ptrFun = Copy_pAppFun;
    75f6:	89 81       	ldd	r24, Y+1	; 0x01
    75f8:	28 2f       	mov	r18, r24
    75fa:	30 e0       	ldi	r19, 0x00	; 0
    75fc:	c9 01       	movw	r24, r18
    75fe:	88 0f       	add	r24, r24
    7600:	99 1f       	adc	r25, r25
    7602:	88 0f       	add	r24, r24
    7604:	99 1f       	adc	r25, r25
    7606:	82 0f       	add	r24, r18
    7608:	93 1f       	adc	r25, r19
    760a:	fc 01       	movw	r30, r24
    760c:	e9 57       	subi	r30, 0x79	; 121
    760e:	fe 4f       	sbci	r31, 0xFE	; 254
    7610:	8d 81       	ldd	r24, Y+5	; 0x05
    7612:	9e 81       	ldd	r25, Y+6	; 0x06
    7614:	91 83       	std	Z+1, r25	; 0x01
    7616:	80 83       	st	Z, r24
				Global_AstrTimerPointers[Local_u8Iter].ptrVar = Copy_pAppVar;
    7618:	89 81       	ldd	r24, Y+1	; 0x01
    761a:	28 2f       	mov	r18, r24
    761c:	30 e0       	ldi	r19, 0x00	; 0
    761e:	c9 01       	movw	r24, r18
    7620:	88 0f       	add	r24, r24
    7622:	99 1f       	adc	r25, r25
    7624:	88 0f       	add	r24, r24
    7626:	99 1f       	adc	r25, r25
    7628:	82 0f       	add	r24, r18
    762a:	93 1f       	adc	r25, r19
    762c:	fc 01       	movw	r30, r24
    762e:	eb 57       	subi	r30, 0x7B	; 123
    7630:	fe 4f       	sbci	r31, 0xFE	; 254
    7632:	8f 81       	ldd	r24, Y+7	; 0x07
    7634:	98 85       	ldd	r25, Y+8	; 0x08
    7636:	91 83       	std	Z+1, r25	; 0x01
    7638:	80 83       	st	Z, r24
				Local_enuErrorState = ES_OK ;
    763a:	1b 82       	std	Y+3, r1	; 0x03
				found = 1;
    763c:	81 e0       	ldi	r24, 0x01	; 1
    763e:	8a 83       	std	Y+2, r24	; 0x02
    7640:	06 c0       	rjmp	.+12     	; 0x764e <Timer_enuCallBack+0xaa>

	u8 found = 0 ;

	if( Copy_pAppFun != NULL )
	{
		for( u8 Local_u8Iter; Local_u8Iter < TIMERS_INTERRUPTS ; Local_u8Iter++ )
    7642:	89 81       	ldd	r24, Y+1	; 0x01
    7644:	8f 5f       	subi	r24, 0xFF	; 255
    7646:	89 83       	std	Y+1, r24	; 0x01
    7648:	89 81       	ldd	r24, Y+1	; 0x01
    764a:	84 30       	cpi	r24, 0x04	; 4
    764c:	18 f2       	brcs	.-122    	; 0x75d4 <Timer_enuCallBack+0x30>
				Local_enuErrorState = ES_OK ;
				found = 1;
				break;
			}
		}
		if(!found) Local_enuErrorState = ES_OUT_RANGE ;
    764e:	8a 81       	ldd	r24, Y+2	; 0x02
    7650:	88 23       	and	r24, r24
    7652:	29 f4       	brne	.+10     	; 0x765e <Timer_enuCallBack+0xba>
    7654:	82 e0       	ldi	r24, 0x02	; 2
    7656:	8b 83       	std	Y+3, r24	; 0x03
    7658:	02 c0       	rjmp	.+4      	; 0x765e <Timer_enuCallBack+0xba>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    765a:	83 e0       	ldi	r24, 0x03	; 3
    765c:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;
    765e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    7660:	28 96       	adiw	r28, 0x08	; 8
    7662:	0f b6       	in	r0, 0x3f	; 63
    7664:	f8 94       	cli
    7666:	de bf       	out	0x3e, r29	; 62
    7668:	0f be       	out	0x3f, r0	; 63
    766a:	cd bf       	out	0x3d, r28	; 61
    766c:	cf 91       	pop	r28
    766e:	df 91       	pop	r29
    7670:	08 95       	ret

00007672 <__vector_4>:
#endif
void __vector_10( void )__attribute__((signal));	/*	Timer0	Compare Match Interrupt	ISR		*/
void __vector_11( void )__attribute__((signal));	/*	Timer0	Overflow Interrupt	ISR			*/

void __vector_4( void )/*	OCIE2	*/
{
    7672:	1f 92       	push	r1
    7674:	0f 92       	push	r0
    7676:	0f b6       	in	r0, 0x3f	; 63
    7678:	0f 92       	push	r0
    767a:	11 24       	eor	r1, r1
    767c:	2f 93       	push	r18
    767e:	3f 93       	push	r19
    7680:	4f 93       	push	r20
    7682:	5f 93       	push	r21
    7684:	6f 93       	push	r22
    7686:	7f 93       	push	r23
    7688:	8f 93       	push	r24
    768a:	9f 93       	push	r25
    768c:	af 93       	push	r26
    768e:	bf 93       	push	r27
    7690:	ef 93       	push	r30
    7692:	ff 93       	push	r31
    7694:	df 93       	push	r29
    7696:	cf 93       	push	r28
    7698:	cd b7       	in	r28, 0x3d	; 61
    769a:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[3].ptrFun != NULL )
    769c:	80 91 96 01 	lds	r24, 0x0196
    76a0:	90 91 97 01 	lds	r25, 0x0197
    76a4:	00 97       	sbiw	r24, 0x00	; 0
    76a6:	49 f0       	breq	.+18     	; 0x76ba <__vector_4+0x48>
	{
		(*Global_AstrTimerPointers[3].ptrFun)( Global_AstrTimerPointers[3].ptrVar );
    76a8:	e0 91 96 01 	lds	r30, 0x0196
    76ac:	f0 91 97 01 	lds	r31, 0x0197
    76b0:	80 91 94 01 	lds	r24, 0x0194
    76b4:	90 91 95 01 	lds	r25, 0x0195
    76b8:	09 95       	icall
	}
}
    76ba:	cf 91       	pop	r28
    76bc:	df 91       	pop	r29
    76be:	ff 91       	pop	r31
    76c0:	ef 91       	pop	r30
    76c2:	bf 91       	pop	r27
    76c4:	af 91       	pop	r26
    76c6:	9f 91       	pop	r25
    76c8:	8f 91       	pop	r24
    76ca:	7f 91       	pop	r23
    76cc:	6f 91       	pop	r22
    76ce:	5f 91       	pop	r21
    76d0:	4f 91       	pop	r20
    76d2:	3f 91       	pop	r19
    76d4:	2f 91       	pop	r18
    76d6:	0f 90       	pop	r0
    76d8:	0f be       	out	0x3f, r0	; 63
    76da:	0f 90       	pop	r0
    76dc:	1f 90       	pop	r1
    76de:	18 95       	reti

000076e0 <__vector_5>:

void __vector_5( void )/*	TOIE2	*/
{
    76e0:	1f 92       	push	r1
    76e2:	0f 92       	push	r0
    76e4:	0f b6       	in	r0, 0x3f	; 63
    76e6:	0f 92       	push	r0
    76e8:	11 24       	eor	r1, r1
    76ea:	2f 93       	push	r18
    76ec:	3f 93       	push	r19
    76ee:	4f 93       	push	r20
    76f0:	5f 93       	push	r21
    76f2:	6f 93       	push	r22
    76f4:	7f 93       	push	r23
    76f6:	8f 93       	push	r24
    76f8:	9f 93       	push	r25
    76fa:	af 93       	push	r26
    76fc:	bf 93       	push	r27
    76fe:	ef 93       	push	r30
    7700:	ff 93       	push	r31
    7702:	df 93       	push	r29
    7704:	cf 93       	push	r28
    7706:	cd b7       	in	r28, 0x3d	; 61
    7708:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[2].ptrFun != NULL )
    770a:	80 91 91 01 	lds	r24, 0x0191
    770e:	90 91 92 01 	lds	r25, 0x0192
    7712:	00 97       	sbiw	r24, 0x00	; 0
    7714:	49 f0       	breq	.+18     	; 0x7728 <__vector_5+0x48>
	{
		(*Global_AstrTimerPointers[2].ptrFun)( Global_AstrTimerPointers[2].ptrVar );
    7716:	e0 91 91 01 	lds	r30, 0x0191
    771a:	f0 91 92 01 	lds	r31, 0x0192
    771e:	80 91 8f 01 	lds	r24, 0x018F
    7722:	90 91 90 01 	lds	r25, 0x0190
    7726:	09 95       	icall
	}
}
    7728:	cf 91       	pop	r28
    772a:	df 91       	pop	r29
    772c:	ff 91       	pop	r31
    772e:	ef 91       	pop	r30
    7730:	bf 91       	pop	r27
    7732:	af 91       	pop	r26
    7734:	9f 91       	pop	r25
    7736:	8f 91       	pop	r24
    7738:	7f 91       	pop	r23
    773a:	6f 91       	pop	r22
    773c:	5f 91       	pop	r21
    773e:	4f 91       	pop	r20
    7740:	3f 91       	pop	r19
    7742:	2f 91       	pop	r18
    7744:	0f 90       	pop	r0
    7746:	0f be       	out	0x3f, r0	; 63
    7748:	0f 90       	pop	r0
    774a:	1f 90       	pop	r1
    774c:	18 95       	reti

0000774e <__vector_10>:
}

#endif

void __vector_10( void )/*	OCIE0	*/
{
    774e:	1f 92       	push	r1
    7750:	0f 92       	push	r0
    7752:	0f b6       	in	r0, 0x3f	; 63
    7754:	0f 92       	push	r0
    7756:	11 24       	eor	r1, r1
    7758:	2f 93       	push	r18
    775a:	3f 93       	push	r19
    775c:	4f 93       	push	r20
    775e:	5f 93       	push	r21
    7760:	6f 93       	push	r22
    7762:	7f 93       	push	r23
    7764:	8f 93       	push	r24
    7766:	9f 93       	push	r25
    7768:	af 93       	push	r26
    776a:	bf 93       	push	r27
    776c:	ef 93       	push	r30
    776e:	ff 93       	push	r31
    7770:	df 93       	push	r29
    7772:	cf 93       	push	r28
    7774:	cd b7       	in	r28, 0x3d	; 61
    7776:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[1].ptrFun != NULL )
    7778:	80 91 8c 01 	lds	r24, 0x018C
    777c:	90 91 8d 01 	lds	r25, 0x018D
    7780:	00 97       	sbiw	r24, 0x00	; 0
    7782:	49 f0       	breq	.+18     	; 0x7796 <__vector_10+0x48>
	{
		(*Global_AstrTimerPointers[1].ptrFun)( Global_AstrTimerPointers[1].ptrVar );
    7784:	e0 91 8c 01 	lds	r30, 0x018C
    7788:	f0 91 8d 01 	lds	r31, 0x018D
    778c:	80 91 8a 01 	lds	r24, 0x018A
    7790:	90 91 8b 01 	lds	r25, 0x018B
    7794:	09 95       	icall
	}
}
    7796:	cf 91       	pop	r28
    7798:	df 91       	pop	r29
    779a:	ff 91       	pop	r31
    779c:	ef 91       	pop	r30
    779e:	bf 91       	pop	r27
    77a0:	af 91       	pop	r26
    77a2:	9f 91       	pop	r25
    77a4:	8f 91       	pop	r24
    77a6:	7f 91       	pop	r23
    77a8:	6f 91       	pop	r22
    77aa:	5f 91       	pop	r21
    77ac:	4f 91       	pop	r20
    77ae:	3f 91       	pop	r19
    77b0:	2f 91       	pop	r18
    77b2:	0f 90       	pop	r0
    77b4:	0f be       	out	0x3f, r0	; 63
    77b6:	0f 90       	pop	r0
    77b8:	1f 90       	pop	r1
    77ba:	18 95       	reti

000077bc <__vector_11>:

void __vector_11( void )/*	TOIE0	*/
{
    77bc:	1f 92       	push	r1
    77be:	0f 92       	push	r0
    77c0:	0f b6       	in	r0, 0x3f	; 63
    77c2:	0f 92       	push	r0
    77c4:	11 24       	eor	r1, r1
    77c6:	2f 93       	push	r18
    77c8:	3f 93       	push	r19
    77ca:	4f 93       	push	r20
    77cc:	5f 93       	push	r21
    77ce:	6f 93       	push	r22
    77d0:	7f 93       	push	r23
    77d2:	8f 93       	push	r24
    77d4:	9f 93       	push	r25
    77d6:	af 93       	push	r26
    77d8:	bf 93       	push	r27
    77da:	ef 93       	push	r30
    77dc:	ff 93       	push	r31
    77de:	df 93       	push	r29
    77e0:	cf 93       	push	r28
    77e2:	cd b7       	in	r28, 0x3d	; 61
    77e4:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[0].ptrFun != NULL )
    77e6:	80 91 87 01 	lds	r24, 0x0187
    77ea:	90 91 88 01 	lds	r25, 0x0188
    77ee:	00 97       	sbiw	r24, 0x00	; 0
    77f0:	49 f0       	breq	.+18     	; 0x7804 <__vector_11+0x48>
	{
		(*Global_AstrTimerPointers[0].ptrFun)( Global_AstrTimerPointers[0].ptrVar );
    77f2:	e0 91 87 01 	lds	r30, 0x0187
    77f6:	f0 91 88 01 	lds	r31, 0x0188
    77fa:	80 91 85 01 	lds	r24, 0x0185
    77fe:	90 91 86 01 	lds	r25, 0x0186
    7802:	09 95       	icall
	}
}
    7804:	cf 91       	pop	r28
    7806:	df 91       	pop	r29
    7808:	ff 91       	pop	r31
    780a:	ef 91       	pop	r30
    780c:	bf 91       	pop	r27
    780e:	af 91       	pop	r26
    7810:	9f 91       	pop	r25
    7812:	8f 91       	pop	r24
    7814:	7f 91       	pop	r23
    7816:	6f 91       	pop	r22
    7818:	5f 91       	pop	r21
    781a:	4f 91       	pop	r20
    781c:	3f 91       	pop	r19
    781e:	2f 91       	pop	r18
    7820:	0f 90       	pop	r0
    7822:	0f be       	out	0x3f, r0	; 63
    7824:	0f 90       	pop	r0
    7826:	1f 90       	pop	r1
    7828:	18 95       	reti

0000782a <PWM_enuInit>:
#endif
														};


ES_t PWM_enuInit( void )
{
    782a:	df 93       	push	r29
    782c:	cf 93       	push	r28
    782e:	cd b7       	in	r28, 0x3d	; 61
    7830:	de b7       	in	r29, 0x3e	; 62
    7832:	29 97       	sbiw	r28, 0x09	; 9
    7834:	0f b6       	in	r0, 0x3f	; 63
    7836:	f8 94       	cli
    7838:	de bf       	out	0x3e, r29	; 62
    783a:	0f be       	out	0x3f, r0	; 63
    783c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK ;
    783e:	81 e0       	ldi	r24, 0x01	; 1
    7840:	8d 83       	std	Y+5, r24	; 0x05

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;
    7842:	1c 82       	std	Y+4, r1	; 0x04

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    7844:	1b 82       	std	Y+3, r1	; 0x03
    7846:	bb c1       	rjmp	.+886    	; 0x7bbe <PWM_enuInit+0x394>
		}


		else
#endif
		if( PWMs[Local_u8Iter].TimerNum == TIMER1A || PWMs[Local_u8Iter].TimerNum == TIMER1B )
    7848:	8b 81       	ldd	r24, Y+3	; 0x03
    784a:	28 2f       	mov	r18, r24
    784c:	30 e0       	ldi	r19, 0x00	; 0
    784e:	c9 01       	movw	r24, r18
    7850:	88 0f       	add	r24, r24
    7852:	99 1f       	adc	r25, r25
    7854:	88 0f       	add	r24, r24
    7856:	99 1f       	adc	r25, r25
    7858:	82 0f       	add	r24, r18
    785a:	93 1f       	adc	r25, r19
    785c:	fc 01       	movw	r30, r24
    785e:	e5 56       	subi	r30, 0x65	; 101
    7860:	fe 4f       	sbci	r31, 0xFE	; 254
    7862:	80 81       	ld	r24, Z
    7864:	89 3c       	cpi	r24, 0xC9	; 201
    7866:	89 f0       	breq	.+34     	; 0x788a <PWM_enuInit+0x60>
    7868:	8b 81       	ldd	r24, Y+3	; 0x03
    786a:	28 2f       	mov	r18, r24
    786c:	30 e0       	ldi	r19, 0x00	; 0
    786e:	c9 01       	movw	r24, r18
    7870:	88 0f       	add	r24, r24
    7872:	99 1f       	adc	r25, r25
    7874:	88 0f       	add	r24, r24
    7876:	99 1f       	adc	r25, r25
    7878:	82 0f       	add	r24, r18
    787a:	93 1f       	adc	r25, r19
    787c:	fc 01       	movw	r30, r24
    787e:	e5 56       	subi	r30, 0x65	; 101
    7880:	fe 4f       	sbci	r31, 0xFE	; 254
    7882:	80 81       	ld	r24, Z
    7884:	8a 3c       	cpi	r24, 0xCA	; 202
    7886:	09 f0       	breq	.+2      	; 0x788a <PWM_enuInit+0x60>
    7888:	97 c1       	rjmp	.+814    	; 0x7bb8 <PWM_enuInit+0x38e>
		{
			if( ! Local_u8Flag )
    788a:	8c 81       	ldd	r24, Y+4	; 0x04
    788c:	88 23       	and	r24, r24
    788e:	09 f0       	breq	.+2      	; 0x7892 <PWM_enuInit+0x68>
    7890:	d2 c0       	rjmp	.+420    	; 0x7a36 <PWM_enuInit+0x20c>
			{
				Local_u8Flag = 1 ;
    7892:	81 e0       	ldi	r24, 0x01	; 1
    7894:	8c 83       	std	Y+4, r24	; 0x04
				TIMSK &= ~( TC1_INT_EN_MASK ) ;				// Disable All Interrupts before setting all conditions
    7896:	a9 e5       	ldi	r26, 0x59	; 89
    7898:	b0 e0       	ldi	r27, 0x00	; 0
    789a:	e9 e5       	ldi	r30, 0x59	; 89
    789c:	f0 e0       	ldi	r31, 0x00	; 0
    789e:	80 81       	ld	r24, Z
    78a0:	83 7c       	andi	r24, 0xC3	; 195
    78a2:	8c 93       	st	X, r24
				TCCR1A = 0x00 ;								// Masks all bits in TCCR1A
    78a4:	ef e4       	ldi	r30, 0x4F	; 79
    78a6:	f0 e0       	ldi	r31, 0x00	; 0
    78a8:	10 82       	st	Z, r1
				TCCR1B = 0x00 ;								// Masks all bits in TCCR1B
    78aa:	ee e4       	ldi	r30, 0x4E	; 78
    78ac:	f0 e0       	ldi	r31, 0x00	; 0
    78ae:	10 82       	st	Z, r1
				u8 Local_u8CopySREG = SREG ;
    78b0:	ef e5       	ldi	r30, 0x5F	; 95
    78b2:	f0 e0       	ldi	r31, 0x00	; 0
    78b4:	80 81       	ld	r24, Z
    78b6:	8a 83       	std	Y+2, r24	; 0x02
				asm( "CLI" );
    78b8:	f8 94       	cli
				OCR1AH = 0x00 ;								// Clears 1A HIGH-byte Output Compare Register
    78ba:	eb e4       	ldi	r30, 0x4B	; 75
    78bc:	f0 e0       	ldi	r31, 0x00	; 0
    78be:	10 82       	st	Z, r1
				OCR1AL = 0x00 ;								// Clears 1A LOW-byte Output Compare Register
    78c0:	ea e4       	ldi	r30, 0x4A	; 74
    78c2:	f0 e0       	ldi	r31, 0x00	; 0
    78c4:	10 82       	st	Z, r1
				OCR1BH = 0x00 ;								// Clears 1B HIGH-byte Output Compare Register
    78c6:	e9 e4       	ldi	r30, 0x49	; 73
    78c8:	f0 e0       	ldi	r31, 0x00	; 0
    78ca:	10 82       	st	Z, r1
				OCR1BL = 0x00 ;								// Clears 1B LOW-byte Output Compare Register
    78cc:	e8 e4       	ldi	r30, 0x48	; 72
    78ce:	f0 e0       	ldi	r31, 0x00	; 0
    78d0:	10 82       	st	Z, r1
				SREG = Local_u8CopySREG ;
    78d2:	ef e5       	ldi	r30, 0x5F	; 95
    78d4:	f0 e0       	ldi	r31, 0x00	; 0
    78d6:	8a 81       	ldd	r24, Y+2	; 0x02
    78d8:	80 83       	st	Z, r24

				/****************************************/
				/*			Set Clock Selection			*/
				/****************************************/
				Global_u32Timer1_Clk = PWM_u32TimerClock( TIMER1A , PWMs[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
    78da:	8b 81       	ldd	r24, Y+3	; 0x03
    78dc:	28 2f       	mov	r18, r24
    78de:	30 e0       	ldi	r19, 0x00	; 0
    78e0:	c9 01       	movw	r24, r18
    78e2:	88 0f       	add	r24, r24
    78e4:	99 1f       	adc	r25, r25
    78e6:	88 0f       	add	r24, r24
    78e8:	99 1f       	adc	r25, r25
    78ea:	82 0f       	add	r24, r18
    78ec:	93 1f       	adc	r25, r19
    78ee:	fc 01       	movw	r30, r24
    78f0:	e4 56       	subi	r30, 0x64	; 100
    78f2:	fe 4f       	sbci	r31, 0xFE	; 254
    78f4:	90 81       	ld	r25, Z
    78f6:	9e 01       	movw	r18, r28
    78f8:	2a 5f       	subi	r18, 0xFA	; 250
    78fa:	3f 4f       	sbci	r19, 0xFF	; 255
    78fc:	89 ec       	ldi	r24, 0xC9	; 201
    78fe:	69 2f       	mov	r22, r25
    7900:	a9 01       	movw	r20, r18
    7902:	0e 94 f6 3d 	call	0x7bec	; 0x7bec <PWM_u32TimerClock>
    7906:	dc 01       	movw	r26, r24
    7908:	cb 01       	movw	r24, r22
    790a:	80 93 40 02 	sts	0x0240, r24
    790e:	90 93 41 02 	sts	0x0241, r25
    7912:	a0 93 42 02 	sts	0x0242, r26
    7916:	b0 93 43 02 	sts	0x0243, r27
				TCCR1B |= ( Local_u8ClkSelect << CLK1_SEL_BITS );
    791a:	ae e4       	ldi	r26, 0x4E	; 78
    791c:	b0 e0       	ldi	r27, 0x00	; 0
    791e:	ee e4       	ldi	r30, 0x4E	; 78
    7920:	f0 e0       	ldi	r31, 0x00	; 0
    7922:	90 81       	ld	r25, Z
    7924:	8e 81       	ldd	r24, Y+6	; 0x06
    7926:	89 2b       	or	r24, r25
    7928:	8c 93       	st	X, r24

				/****************************************/
				/*		Set Waveform Generation Mode	*/
				/****************************************/
				if( PWMs[Local_u8Iter].WaveGenMode > WGM_MODE_00	&& PWMs[Local_u8Iter].WaveGenMode <= WGM_FAST_OCR1A	&&
    792a:	8b 81       	ldd	r24, Y+3	; 0x03
    792c:	28 2f       	mov	r18, r24
    792e:	30 e0       	ldi	r19, 0x00	; 0
    7930:	c9 01       	movw	r24, r18
    7932:	88 0f       	add	r24, r24
    7934:	99 1f       	adc	r25, r25
    7936:	88 0f       	add	r24, r24
    7938:	99 1f       	adc	r25, r25
    793a:	82 0f       	add	r24, r18
    793c:	93 1f       	adc	r25, r19
    793e:	fc 01       	movw	r30, r24
    7940:	e2 56       	subi	r30, 0x62	; 98
    7942:	fe 4f       	sbci	r31, 0xFE	; 254
    7944:	80 81       	ld	r24, Z
    7946:	85 36       	cpi	r24, 0x65	; 101
    7948:	08 f4       	brcc	.+2      	; 0x794c <PWM_enuInit+0x122>
    794a:	73 c0       	rjmp	.+230    	; 0x7a32 <PWM_enuInit+0x208>
    794c:	8b 81       	ldd	r24, Y+3	; 0x03
    794e:	28 2f       	mov	r18, r24
    7950:	30 e0       	ldi	r19, 0x00	; 0
    7952:	c9 01       	movw	r24, r18
    7954:	88 0f       	add	r24, r24
    7956:	99 1f       	adc	r25, r25
    7958:	88 0f       	add	r24, r24
    795a:	99 1f       	adc	r25, r25
    795c:	82 0f       	add	r24, r18
    795e:	93 1f       	adc	r25, r19
    7960:	fc 01       	movw	r30, r24
    7962:	e2 56       	subi	r30, 0x62	; 98
    7964:	fe 4f       	sbci	r31, 0xFE	; 254
    7966:	80 81       	ld	r24, Z
    7968:	84 37       	cpi	r24, 0x74	; 116
    796a:	08 f0       	brcs	.+2      	; 0x796e <PWM_enuInit+0x144>
    796c:	62 c0       	rjmp	.+196    	; 0x7a32 <PWM_enuInit+0x208>
    796e:	8b 81       	ldd	r24, Y+3	; 0x03
    7970:	28 2f       	mov	r18, r24
    7972:	30 e0       	ldi	r19, 0x00	; 0
    7974:	c9 01       	movw	r24, r18
    7976:	88 0f       	add	r24, r24
    7978:	99 1f       	adc	r25, r25
    797a:	88 0f       	add	r24, r24
    797c:	99 1f       	adc	r25, r25
    797e:	82 0f       	add	r24, r18
    7980:	93 1f       	adc	r25, r19
    7982:	fc 01       	movw	r30, r24
    7984:	e2 56       	subi	r30, 0x62	; 98
    7986:	fe 4f       	sbci	r31, 0xFE	; 254
    7988:	80 81       	ld	r24, Z
    798a:	88 36       	cpi	r24, 0x68	; 104
    798c:	09 f4       	brne	.+2      	; 0x7990 <PWM_enuInit+0x166>
    798e:	51 c0       	rjmp	.+162    	; 0x7a32 <PWM_enuInit+0x208>
    7990:	8b 81       	ldd	r24, Y+3	; 0x03
    7992:	28 2f       	mov	r18, r24
    7994:	30 e0       	ldi	r19, 0x00	; 0
    7996:	c9 01       	movw	r24, r18
    7998:	88 0f       	add	r24, r24
    799a:	99 1f       	adc	r25, r25
    799c:	88 0f       	add	r24, r24
    799e:	99 1f       	adc	r25, r25
    79a0:	82 0f       	add	r24, r18
    79a2:	93 1f       	adc	r25, r19
    79a4:	fc 01       	movw	r30, r24
    79a6:	e2 56       	subi	r30, 0x62	; 98
    79a8:	fe 4f       	sbci	r31, 0xFE	; 254
    79aa:	80 81       	ld	r24, Z
    79ac:	80 37       	cpi	r24, 0x70	; 112
    79ae:	09 f4       	brne	.+2      	; 0x79b2 <PWM_enuInit+0x188>
    79b0:	40 c0       	rjmp	.+128    	; 0x7a32 <PWM_enuInit+0x208>
    79b2:	8b 81       	ldd	r24, Y+3	; 0x03
    79b4:	28 2f       	mov	r18, r24
    79b6:	30 e0       	ldi	r19, 0x00	; 0
    79b8:	c9 01       	movw	r24, r18
    79ba:	88 0f       	add	r24, r24
    79bc:	99 1f       	adc	r25, r25
    79be:	88 0f       	add	r24, r24
    79c0:	99 1f       	adc	r25, r25
    79c2:	82 0f       	add	r24, r18
    79c4:	93 1f       	adc	r25, r19
    79c6:	fc 01       	movw	r30, r24
    79c8:	e2 56       	subi	r30, 0x62	; 98
    79ca:	fe 4f       	sbci	r31, 0xFE	; 254
    79cc:	80 81       	ld	r24, Z
    79ce:	81 37       	cpi	r24, 0x71	; 113
    79d0:	81 f1       	breq	.+96     	; 0x7a32 <PWM_enuInit+0x208>
					PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_04	&& PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_12	&&
					PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_13	)
				{
					u8 Local_u8WGM = PWMs[Local_u8Iter].WaveGenMode - WGM_MODE_00 ;
    79d2:	8b 81       	ldd	r24, Y+3	; 0x03
    79d4:	28 2f       	mov	r18, r24
    79d6:	30 e0       	ldi	r19, 0x00	; 0
    79d8:	c9 01       	movw	r24, r18
    79da:	88 0f       	add	r24, r24
    79dc:	99 1f       	adc	r25, r25
    79de:	88 0f       	add	r24, r24
    79e0:	99 1f       	adc	r25, r25
    79e2:	82 0f       	add	r24, r18
    79e4:	93 1f       	adc	r25, r19
    79e6:	fc 01       	movw	r30, r24
    79e8:	e2 56       	subi	r30, 0x62	; 98
    79ea:	fe 4f       	sbci	r31, 0xFE	; 254
    79ec:	80 81       	ld	r24, Z
    79ee:	84 56       	subi	r24, 0x64	; 100
    79f0:	89 83       	std	Y+1, r24	; 0x01
					TCCR1A |= ( ( Local_u8WGM & TWO_BITS_MASK ) << WGM1A_SEL_BITS );
    79f2:	af e4       	ldi	r26, 0x4F	; 79
    79f4:	b0 e0       	ldi	r27, 0x00	; 0
    79f6:	ef e4       	ldi	r30, 0x4F	; 79
    79f8:	f0 e0       	ldi	r31, 0x00	; 0
    79fa:	80 81       	ld	r24, Z
    79fc:	98 2f       	mov	r25, r24
    79fe:	89 81       	ldd	r24, Y+1	; 0x01
    7a00:	83 70       	andi	r24, 0x03	; 3
    7a02:	89 2b       	or	r24, r25
    7a04:	8c 93       	st	X, r24
					TCCR1B |= ( ( ( Local_u8WGM >> BIT1_MASK) & TWO_BITS_MASK ) << WGM1B_SEL_BITS );
    7a06:	ae e4       	ldi	r26, 0x4E	; 78
    7a08:	b0 e0       	ldi	r27, 0x00	; 0
    7a0a:	ee e4       	ldi	r30, 0x4E	; 78
    7a0c:	f0 e0       	ldi	r31, 0x00	; 0
    7a0e:	80 81       	ld	r24, Z
    7a10:	28 2f       	mov	r18, r24
    7a12:	89 81       	ldd	r24, Y+1	; 0x01
    7a14:	86 95       	lsr	r24
    7a16:	86 95       	lsr	r24
    7a18:	88 2f       	mov	r24, r24
    7a1a:	90 e0       	ldi	r25, 0x00	; 0
    7a1c:	83 70       	andi	r24, 0x03	; 3
    7a1e:	90 70       	andi	r25, 0x00	; 0
    7a20:	88 0f       	add	r24, r24
    7a22:	99 1f       	adc	r25, r25
    7a24:	88 0f       	add	r24, r24
    7a26:	99 1f       	adc	r25, r25
    7a28:	88 0f       	add	r24, r24
    7a2a:	99 1f       	adc	r25, r25
    7a2c:	82 2b       	or	r24, r18
    7a2e:	8c 93       	st	X, r24
    7a30:	02 c0       	rjmp	.+4      	; 0x7a36 <PWM_enuInit+0x20c>
				}
				else
				{
					Local_enuErrorState = ES_OUT_RANGE ;
    7a32:	82 e0       	ldi	r24, 0x02	; 2
    7a34:	8d 83       	std	Y+5, r24	; 0x05
				}
			}
			/****************************************/
			/*		Set Compare Output Mode			*/
			/****************************************/
			if( PWMs[Local_u8Iter].CompOutMode == COMP_NON_INVERTED ||
    7a36:	8b 81       	ldd	r24, Y+3	; 0x03
    7a38:	28 2f       	mov	r18, r24
    7a3a:	30 e0       	ldi	r19, 0x00	; 0
    7a3c:	c9 01       	movw	r24, r18
    7a3e:	88 0f       	add	r24, r24
    7a40:	99 1f       	adc	r25, r25
    7a42:	88 0f       	add	r24, r24
    7a44:	99 1f       	adc	r25, r25
    7a46:	82 0f       	add	r24, r18
    7a48:	93 1f       	adc	r25, r19
    7a4a:	fc 01       	movw	r30, r24
    7a4c:	e3 56       	subi	r30, 0x63	; 99
    7a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    7a50:	80 81       	ld	r24, Z
    7a52:	86 31       	cpi	r24, 0x16	; 22
    7a54:	89 f0       	breq	.+34     	; 0x7a78 <PWM_enuInit+0x24e>
    7a56:	8b 81       	ldd	r24, Y+3	; 0x03
    7a58:	28 2f       	mov	r18, r24
    7a5a:	30 e0       	ldi	r19, 0x00	; 0
    7a5c:	c9 01       	movw	r24, r18
    7a5e:	88 0f       	add	r24, r24
    7a60:	99 1f       	adc	r25, r25
    7a62:	88 0f       	add	r24, r24
    7a64:	99 1f       	adc	r25, r25
    7a66:	82 0f       	add	r24, r18
    7a68:	93 1f       	adc	r25, r19
    7a6a:	fc 01       	movw	r30, r24
    7a6c:	e3 56       	subi	r30, 0x63	; 99
    7a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    7a70:	80 81       	ld	r24, Z
    7a72:	87 31       	cpi	r24, 0x17	; 23
    7a74:	09 f0       	breq	.+2      	; 0x7a78 <PWM_enuInit+0x24e>
    7a76:	53 c0       	rjmp	.+166    	; 0x7b1e <PWM_enuInit+0x2f4>
				PWMs[Local_u8Iter].CompOutMode == COMP_INVERTED		)
			{
				if( PWMs[Local_u8Iter].TimerNum == TIMER1A )
    7a78:	8b 81       	ldd	r24, Y+3	; 0x03
    7a7a:	28 2f       	mov	r18, r24
    7a7c:	30 e0       	ldi	r19, 0x00	; 0
    7a7e:	c9 01       	movw	r24, r18
    7a80:	88 0f       	add	r24, r24
    7a82:	99 1f       	adc	r25, r25
    7a84:	88 0f       	add	r24, r24
    7a86:	99 1f       	adc	r25, r25
    7a88:	82 0f       	add	r24, r18
    7a8a:	93 1f       	adc	r25, r19
    7a8c:	fc 01       	movw	r30, r24
    7a8e:	e5 56       	subi	r30, 0x65	; 101
    7a90:	fe 4f       	sbci	r31, 0xFE	; 254
    7a92:	80 81       	ld	r24, Z
    7a94:	89 3c       	cpi	r24, 0xC9	; 201
    7a96:	19 f5       	brne	.+70     	; 0x7ade <PWM_enuInit+0x2b4>
				{
					/****************************************/
					/*		Set 1A Compare Output Mode		*/
					/****************************************/
					TCCR1A |= ( ( PWMs[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COM1A_SEL_BITS );
    7a98:	af e4       	ldi	r26, 0x4F	; 79
    7a9a:	b0 e0       	ldi	r27, 0x00	; 0
    7a9c:	ef e4       	ldi	r30, 0x4F	; 79
    7a9e:	f0 e0       	ldi	r31, 0x00	; 0
    7aa0:	80 81       	ld	r24, Z
    7aa2:	48 2f       	mov	r20, r24
    7aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    7aa6:	28 2f       	mov	r18, r24
    7aa8:	30 e0       	ldi	r19, 0x00	; 0
    7aaa:	c9 01       	movw	r24, r18
    7aac:	88 0f       	add	r24, r24
    7aae:	99 1f       	adc	r25, r25
    7ab0:	88 0f       	add	r24, r24
    7ab2:	99 1f       	adc	r25, r25
    7ab4:	82 0f       	add	r24, r18
    7ab6:	93 1f       	adc	r25, r19
    7ab8:	fc 01       	movw	r30, r24
    7aba:	e3 56       	subi	r30, 0x63	; 99
    7abc:	fe 4f       	sbci	r31, 0xFE	; 254
    7abe:	80 81       	ld	r24, Z
    7ac0:	88 2f       	mov	r24, r24
    7ac2:	90 e0       	ldi	r25, 0x00	; 0
    7ac4:	44 97       	sbiw	r24, 0x14	; 20
    7ac6:	00 24       	eor	r0, r0
    7ac8:	96 95       	lsr	r25
    7aca:	87 95       	ror	r24
    7acc:	07 94       	ror	r0
    7ace:	96 95       	lsr	r25
    7ad0:	87 95       	ror	r24
    7ad2:	07 94       	ror	r0
    7ad4:	98 2f       	mov	r25, r24
    7ad6:	80 2d       	mov	r24, r0
    7ad8:	84 2b       	or	r24, r20
    7ada:	8c 93       	st	X, r24
    7adc:	22 c0       	rjmp	.+68     	; 0x7b22 <PWM_enuInit+0x2f8>
				else
				{
					/****************************************/
					/*		Set 1B Compare Output Mode		*/
					/****************************************/
					TCCR1A |= ( ( PWMs[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COM1B_SEL_BITS );
    7ade:	af e4       	ldi	r26, 0x4F	; 79
    7ae0:	b0 e0       	ldi	r27, 0x00	; 0
    7ae2:	ef e4       	ldi	r30, 0x4F	; 79
    7ae4:	f0 e0       	ldi	r31, 0x00	; 0
    7ae6:	80 81       	ld	r24, Z
    7ae8:	48 2f       	mov	r20, r24
    7aea:	8b 81       	ldd	r24, Y+3	; 0x03
    7aec:	28 2f       	mov	r18, r24
    7aee:	30 e0       	ldi	r19, 0x00	; 0
    7af0:	c9 01       	movw	r24, r18
    7af2:	88 0f       	add	r24, r24
    7af4:	99 1f       	adc	r25, r25
    7af6:	88 0f       	add	r24, r24
    7af8:	99 1f       	adc	r25, r25
    7afa:	82 0f       	add	r24, r18
    7afc:	93 1f       	adc	r25, r19
    7afe:	fc 01       	movw	r30, r24
    7b00:	e3 56       	subi	r30, 0x63	; 99
    7b02:	fe 4f       	sbci	r31, 0xFE	; 254
    7b04:	80 81       	ld	r24, Z
    7b06:	88 2f       	mov	r24, r24
    7b08:	90 e0       	ldi	r25, 0x00	; 0
    7b0a:	44 97       	sbiw	r24, 0x14	; 20
    7b0c:	82 95       	swap	r24
    7b0e:	92 95       	swap	r25
    7b10:	90 7f       	andi	r25, 0xF0	; 240
    7b12:	98 27       	eor	r25, r24
    7b14:	80 7f       	andi	r24, 0xF0	; 240
    7b16:	98 27       	eor	r25, r24
    7b18:	84 2b       	or	r24, r20
    7b1a:	8c 93       	st	X, r24
    7b1c:	02 c0       	rjmp	.+4      	; 0x7b22 <PWM_enuInit+0x2f8>
				}
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    7b1e:	82 e0       	ldi	r24, 0x02	; 2
    7b20:	8d 83       	std	Y+5, r24	; 0x05
			}

			/****************************************/
			/*			Set Interrupt Mode			*/
			/****************************************/
			switch( PWMs[Local_u8Iter].InterruptMode )
    7b22:	8b 81       	ldd	r24, Y+3	; 0x03
    7b24:	28 2f       	mov	r18, r24
    7b26:	30 e0       	ldi	r19, 0x00	; 0
    7b28:	c9 01       	movw	r24, r18
    7b2a:	88 0f       	add	r24, r24
    7b2c:	99 1f       	adc	r25, r25
    7b2e:	88 0f       	add	r24, r24
    7b30:	99 1f       	adc	r25, r25
    7b32:	82 0f       	add	r24, r18
    7b34:	93 1f       	adc	r25, r19
    7b36:	fc 01       	movw	r30, r24
    7b38:	e1 56       	subi	r30, 0x61	; 97
    7b3a:	fe 4f       	sbci	r31, 0xFE	; 254
    7b3c:	80 81       	ld	r24, Z
    7b3e:	28 2f       	mov	r18, r24
    7b40:	30 e0       	ldi	r19, 0x00	; 0
    7b42:	39 87       	std	Y+9, r19	; 0x09
    7b44:	28 87       	std	Y+8, r18	; 0x08
    7b46:	88 85       	ldd	r24, Y+8	; 0x08
    7b48:	99 85       	ldd	r25, Y+9	; 0x09
    7b4a:	83 33       	cpi	r24, 0x33	; 51
    7b4c:	91 05       	cpc	r25, r1
    7b4e:	31 f0       	breq	.+12     	; 0x7b5c <PWM_enuInit+0x332>
    7b50:	28 85       	ldd	r18, Y+8	; 0x08
    7b52:	39 85       	ldd	r19, Y+9	; 0x09
    7b54:	24 33       	cpi	r18, 0x34	; 52
    7b56:	31 05       	cpc	r19, r1
    7b58:	49 f0       	breq	.+18     	; 0x7b6c <PWM_enuInit+0x342>
    7b5a:	28 c0       	rjmp	.+80     	; 0x7bac <PWM_enuInit+0x382>
			{
				case PWM_OVERFLOW_INT	:	TIMSK |= ( BIT0_MASK << TOIE1_BIT );	/*	Enable TOIE1 Interrupt */
    7b5c:	a9 e5       	ldi	r26, 0x59	; 89
    7b5e:	b0 e0       	ldi	r27, 0x00	; 0
    7b60:	e9 e5       	ldi	r30, 0x59	; 89
    7b62:	f0 e0       	ldi	r31, 0x00	; 0
    7b64:	80 81       	ld	r24, Z
    7b66:	84 60       	ori	r24, 0x04	; 4
    7b68:	8c 93       	st	X, r24
    7b6a:	22 c0       	rjmp	.+68     	; 0x7bb0 <PWM_enuInit+0x386>
											break;
#if PWM==0
				case TC1_INPUT_CAPT_INT	:	TIMSK |= ( BIT0_MASK << TICIE1_BIT );	/*	Enable TICIE1 Interrupt */
											break;
#endif
				case PWM_OUT_COMP_INT	:	if( PWMs[Local_u8Iter].TimerNum == TIMER1B )
    7b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    7b6e:	28 2f       	mov	r18, r24
    7b70:	30 e0       	ldi	r19, 0x00	; 0
    7b72:	c9 01       	movw	r24, r18
    7b74:	88 0f       	add	r24, r24
    7b76:	99 1f       	adc	r25, r25
    7b78:	88 0f       	add	r24, r24
    7b7a:	99 1f       	adc	r25, r25
    7b7c:	82 0f       	add	r24, r18
    7b7e:	93 1f       	adc	r25, r19
    7b80:	fc 01       	movw	r30, r24
    7b82:	e5 56       	subi	r30, 0x65	; 101
    7b84:	fe 4f       	sbci	r31, 0xFE	; 254
    7b86:	80 81       	ld	r24, Z
    7b88:	8a 3c       	cpi	r24, 0xCA	; 202
    7b8a:	41 f4       	brne	.+16     	; 0x7b9c <PWM_enuInit+0x372>
											{
												TIMSK |= ( BIT0_MASK << OCIE1B_BIT );	/*	Enable OCIE1B Interrupt */
    7b8c:	a9 e5       	ldi	r26, 0x59	; 89
    7b8e:	b0 e0       	ldi	r27, 0x00	; 0
    7b90:	e9 e5       	ldi	r30, 0x59	; 89
    7b92:	f0 e0       	ldi	r31, 0x00	; 0
    7b94:	80 81       	ld	r24, Z
    7b96:	88 60       	ori	r24, 0x08	; 8
    7b98:	8c 93       	st	X, r24
    7b9a:	0a c0       	rjmp	.+20     	; 0x7bb0 <PWM_enuInit+0x386>
											}
											else
											{
												TIMSK |= ( BIT0_MASK << OCIE1A_BIT );	/*	Enable OCIE1A Interrupt */
    7b9c:	a9 e5       	ldi	r26, 0x59	; 89
    7b9e:	b0 e0       	ldi	r27, 0x00	; 0
    7ba0:	e9 e5       	ldi	r30, 0x59	; 89
    7ba2:	f0 e0       	ldi	r31, 0x00	; 0
    7ba4:	80 81       	ld	r24, Z
    7ba6:	80 61       	ori	r24, 0x10	; 16
    7ba8:	8c 93       	st	X, r24
    7baa:	02 c0       	rjmp	.+4      	; 0x7bb0 <PWM_enuInit+0x386>
											}
											break;
				default :	Local_enuErrorState = ES_OUT_RANGE ;
    7bac:	82 e0       	ldi	r24, 0x02	; 2
    7bae:	8d 83       	std	Y+5, r24	; 0x05
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    7bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    7bb2:	8f 5f       	subi	r24, 0xFF	; 255
    7bb4:	8b 83       	std	Y+3, r24	; 0x03
    7bb6:	03 c0       	rjmp	.+6      	; 0x7bbe <PWM_enuInit+0x394>
			}
		}
#endif
		else
		{
			Local_enuErrorState = ES_OUT_RANGE ;
    7bb8:	82 e0       	ldi	r24, 0x02	; 2
    7bba:	8d 83       	std	Y+5, r24	; 0x05
    7bbc:	06 c0       	rjmp	.+12     	; 0x7bca <PWM_enuInit+0x3a0>
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    7bbe:	90 91 98 01 	lds	r25, 0x0198
    7bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    7bc4:	89 17       	cp	r24, r25
    7bc6:	08 f4       	brcc	.+2      	; 0x7bca <PWM_enuInit+0x3a0>
    7bc8:	3f ce       	rjmp	.-898    	; 0x7848 <PWM_enuInit+0x1e>
			#warning " PWM_Init(): Non Supported Timer Number , Initialization is terminated."
			break;
		}
	}

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    7bca:	8d 81       	ldd	r24, Y+5	; 0x05
    7bcc:	81 30       	cpi	r24, 0x01	; 1
    7bce:	19 f0       	breq	.+6      	; 0x7bd6 <PWM_enuInit+0x3ac>
    7bd0:	3d 81       	ldd	r19, Y+5	; 0x05
    7bd2:	3f 83       	std	Y+7, r19	; 0x07
    7bd4:	01 c0       	rjmp	.+2      	; 0x7bd8 <PWM_enuInit+0x3ae>
    7bd6:	1f 82       	std	Y+7, r1	; 0x07
    7bd8:	8f 81       	ldd	r24, Y+7	; 0x07
}
    7bda:	29 96       	adiw	r28, 0x09	; 9
    7bdc:	0f b6       	in	r0, 0x3f	; 63
    7bde:	f8 94       	cli
    7be0:	de bf       	out	0x3e, r29	; 62
    7be2:	0f be       	out	0x3f, r0	; 63
    7be4:	cd bf       	out	0x3d, r28	; 61
    7be6:	cf 91       	pop	r28
    7be8:	df 91       	pop	r29
    7bea:	08 95       	ret

00007bec <PWM_u32TimerClock>:

static u32 PWM_u32TimerClock( u8 Copy_u8TimerNum ,u8 Copy_u8ClkSelectNum ,u8 *Copy_pu8ClkSelectPrescalar )
{
    7bec:	df 93       	push	r29
    7bee:	cf 93       	push	r28
    7bf0:	cd b7       	in	r28, 0x3d	; 61
    7bf2:	de b7       	in	r29, 0x3e	; 62
    7bf4:	2a 97       	sbiw	r28, 0x0a	; 10
    7bf6:	0f b6       	in	r0, 0x3f	; 63
    7bf8:	f8 94       	cli
    7bfa:	de bf       	out	0x3e, r29	; 62
    7bfc:	0f be       	out	0x3f, r0	; 63
    7bfe:	cd bf       	out	0x3d, r28	; 61
    7c00:	8d 83       	std	Y+5, r24	; 0x05
    7c02:	6e 83       	std	Y+6, r22	; 0x06
    7c04:	58 87       	std	Y+8, r21	; 0x08
    7c06:	4f 83       	std	Y+7, r20	; 0x07
	u32 Copy_u32TimerClk = CPU_CLOCK;
    7c08:	80 e0       	ldi	r24, 0x00	; 0
    7c0a:	94 e2       	ldi	r25, 0x24	; 36
    7c0c:	a4 ef       	ldi	r26, 0xF4	; 244
    7c0e:	b0 e0       	ldi	r27, 0x00	; 0
    7c10:	89 83       	std	Y+1, r24	; 0x01
    7c12:	9a 83       	std	Y+2, r25	; 0x02
    7c14:	ab 83       	std	Y+3, r26	; 0x03
    7c16:	bc 83       	std	Y+4, r27	; 0x04


	switch( Copy_u8ClkSelectNum )
    7c18:	8e 81       	ldd	r24, Y+6	; 0x06
    7c1a:	28 2f       	mov	r18, r24
    7c1c:	30 e0       	ldi	r19, 0x00	; 0
    7c1e:	3a 87       	std	Y+10, r19	; 0x0a
    7c20:	29 87       	std	Y+9, r18	; 0x09
    7c22:	89 85       	ldd	r24, Y+9	; 0x09
    7c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    7c26:	8e 30       	cpi	r24, 0x0E	; 14
    7c28:	91 05       	cpc	r25, r1
    7c2a:	09 f4       	brne	.+2      	; 0x7c2e <PWM_u32TimerClock+0x42>
    7c2c:	56 c0       	rjmp	.+172    	; 0x7cda <PWM_u32TimerClock+0xee>
    7c2e:	29 85       	ldd	r18, Y+9	; 0x09
    7c30:	3a 85       	ldd	r19, Y+10	; 0x0a
    7c32:	2f 30       	cpi	r18, 0x0F	; 15
    7c34:	31 05       	cpc	r19, r1
    7c36:	84 f4       	brge	.+32     	; 0x7c58 <PWM_u32TimerClock+0x6c>
    7c38:	89 85       	ldd	r24, Y+9	; 0x09
    7c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    7c3c:	8b 30       	cpi	r24, 0x0B	; 11
    7c3e:	91 05       	cpc	r25, r1
    7c40:	91 f1       	breq	.+100    	; 0x7ca6 <PWM_u32TimerClock+0xba>
    7c42:	29 85       	ldd	r18, Y+9	; 0x09
    7c44:	3a 85       	ldd	r19, Y+10	; 0x0a
    7c46:	2c 30       	cpi	r18, 0x0C	; 12
    7c48:	31 05       	cpc	r19, r1
    7c4a:	91 f1       	breq	.+100    	; 0x7cb0 <PWM_u32TimerClock+0xc4>
    7c4c:	89 85       	ldd	r24, Y+9	; 0x09
    7c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7c50:	8a 30       	cpi	r24, 0x0A	; 10
    7c52:	91 05       	cpc	r25, r1
    7c54:	01 f1       	breq	.+64     	; 0x7c96 <PWM_u32TimerClock+0xaa>
    7c56:	97 c0       	rjmp	.+302    	; 0x7d86 <PWM_u32TimerClock+0x19a>
    7c58:	29 85       	ldd	r18, Y+9	; 0x09
    7c5a:	3a 85       	ldd	r19, Y+10	; 0x0a
    7c5c:	21 31       	cpi	r18, 0x11	; 17
    7c5e:	31 05       	cpc	r19, r1
    7c60:	09 f4       	brne	.+2      	; 0x7c64 <PWM_u32TimerClock+0x78>
    7c62:	61 c0       	rjmp	.+194    	; 0x7d26 <PWM_u32TimerClock+0x13a>
    7c64:	89 85       	ldd	r24, Y+9	; 0x09
    7c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    7c68:	82 31       	cpi	r24, 0x12	; 18
    7c6a:	91 05       	cpc	r25, r1
    7c6c:	3c f4       	brge	.+14     	; 0x7c7c <PWM_u32TimerClock+0x90>
    7c6e:	29 85       	ldd	r18, Y+9	; 0x09
    7c70:	3a 85       	ldd	r19, Y+10	; 0x0a
    7c72:	20 31       	cpi	r18, 0x10	; 16
    7c74:	31 05       	cpc	r19, r1
    7c76:	09 f4       	brne	.+2      	; 0x7c7a <PWM_u32TimerClock+0x8e>
    7c78:	45 c0       	rjmp	.+138    	; 0x7d04 <PWM_u32TimerClock+0x118>
    7c7a:	85 c0       	rjmp	.+266    	; 0x7d86 <PWM_u32TimerClock+0x19a>
    7c7c:	89 85       	ldd	r24, Y+9	; 0x09
    7c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7c80:	82 31       	cpi	r24, 0x12	; 18
    7c82:	91 05       	cpc	r25, r1
    7c84:	09 f4       	brne	.+2      	; 0x7c88 <PWM_u32TimerClock+0x9c>
    7c86:	65 c0       	rjmp	.+202    	; 0x7d52 <PWM_u32TimerClock+0x166>
    7c88:	29 85       	ldd	r18, Y+9	; 0x09
    7c8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    7c8c:	23 31       	cpi	r18, 0x13	; 19
    7c8e:	31 05       	cpc	r19, r1
    7c90:	09 f4       	brne	.+2      	; 0x7c94 <PWM_u32TimerClock+0xa8>
    7c92:	6c c0       	rjmp	.+216    	; 0x7d6c <PWM_u32TimerClock+0x180>
    7c94:	78 c0       	rjmp	.+240    	; 0x7d86 <PWM_u32TimerClock+0x19a>
	{
		case NO_CLK		:	*Copy_pu8ClkSelectPrescalar = 0;
    7c96:	ef 81       	ldd	r30, Y+7	; 0x07
    7c98:	f8 85       	ldd	r31, Y+8	; 0x08
    7c9a:	10 82       	st	Z, r1
							Copy_u32TimerClk = 0 ;
    7c9c:	19 82       	std	Y+1, r1	; 0x01
    7c9e:	1a 82       	std	Y+2, r1	; 0x02
    7ca0:	1b 82       	std	Y+3, r1	; 0x03
    7ca2:	1c 82       	std	Y+4, r1	; 0x04
    7ca4:	74 c0       	rjmp	.+232    	; 0x7d8e <PWM_u32TimerClock+0x1a2>
							break;
		case PRES_1		:	*Copy_pu8ClkSelectPrescalar = 1;
    7ca6:	ef 81       	ldd	r30, Y+7	; 0x07
    7ca8:	f8 85       	ldd	r31, Y+8	; 0x08
    7caa:	81 e0       	ldi	r24, 0x01	; 1
    7cac:	80 83       	st	Z, r24
    7cae:	6f c0       	rjmp	.+222    	; 0x7d8e <PWM_u32TimerClock+0x1a2>
						break;
		case PRES_8 	:	*Copy_pu8ClkSelectPrescalar = 2;
    7cb0:	ef 81       	ldd	r30, Y+7	; 0x07
    7cb2:	f8 85       	ldd	r31, Y+8	; 0x08
    7cb4:	82 e0       	ldi	r24, 0x02	; 2
    7cb6:	80 83       	st	Z, r24
							Copy_u32TimerClk >>= 3 ;
    7cb8:	89 81       	ldd	r24, Y+1	; 0x01
    7cba:	9a 81       	ldd	r25, Y+2	; 0x02
    7cbc:	ab 81       	ldd	r26, Y+3	; 0x03
    7cbe:	bc 81       	ldd	r27, Y+4	; 0x04
    7cc0:	68 94       	set
    7cc2:	12 f8       	bld	r1, 2
    7cc4:	b6 95       	lsr	r27
    7cc6:	a7 95       	ror	r26
    7cc8:	97 95       	ror	r25
    7cca:	87 95       	ror	r24
    7ccc:	16 94       	lsr	r1
    7cce:	d1 f7       	brne	.-12     	; 0x7cc4 <PWM_u32TimerClock+0xd8>
    7cd0:	89 83       	std	Y+1, r24	; 0x01
    7cd2:	9a 83       	std	Y+2, r25	; 0x02
    7cd4:	ab 83       	std	Y+3, r26	; 0x03
    7cd6:	bc 83       	std	Y+4, r27	; 0x04
    7cd8:	5a c0       	rjmp	.+180    	; 0x7d8e <PWM_u32TimerClock+0x1a2>
								break;
							}
							#warning "Clock Select Number selected is not supported in Timer0/Timer1 , shifted to PRES_64"
							/*	NO BREAK IN CASE OF NOT TIMER2	*/
#endif
		case PRES_64 	:	Copy_u32TimerClk >>= 6 ;
    7cda:	89 81       	ldd	r24, Y+1	; 0x01
    7cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    7cde:	ab 81       	ldd	r26, Y+3	; 0x03
    7ce0:	bc 81       	ldd	r27, Y+4	; 0x04
    7ce2:	68 94       	set
    7ce4:	15 f8       	bld	r1, 5
    7ce6:	b6 95       	lsr	r27
    7ce8:	a7 95       	ror	r26
    7cea:	97 95       	ror	r25
    7cec:	87 95       	ror	r24
    7cee:	16 94       	lsr	r1
    7cf0:	d1 f7       	brne	.-12     	; 0x7ce6 <PWM_u32TimerClock+0xfa>
    7cf2:	89 83       	std	Y+1, r24	; 0x01
    7cf4:	9a 83       	std	Y+2, r25	; 0x02
    7cf6:	ab 83       	std	Y+3, r26	; 0x03
    7cf8:	bc 83       	std	Y+4, r27	; 0x04
							//if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 4;
							//else
							*Copy_pu8ClkSelectPrescalar = 3;
    7cfa:	ef 81       	ldd	r30, Y+7	; 0x07
    7cfc:	f8 85       	ldd	r31, Y+8	; 0x08
    7cfe:	83 e0       	ldi	r24, 0x03	; 3
    7d00:	80 83       	st	Z, r24
    7d02:	45 c0       	rjmp	.+138    	; 0x7d8e <PWM_u32TimerClock+0x1a2>
								break;
							}
							#warning "Clock Select Number selected is not supported in Timer0/Timer1 , shifted to PRES_256"
							/*	NO BREAK IN CASE OF NOT TIMER2	*/
#endif
		case PRES_256	 :	Copy_u32TimerClk >>= 8 ;
    7d04:	89 81       	ldd	r24, Y+1	; 0x01
    7d06:	9a 81       	ldd	r25, Y+2	; 0x02
    7d08:	ab 81       	ldd	r26, Y+3	; 0x03
    7d0a:	bc 81       	ldd	r27, Y+4	; 0x04
    7d0c:	89 2f       	mov	r24, r25
    7d0e:	9a 2f       	mov	r25, r26
    7d10:	ab 2f       	mov	r26, r27
    7d12:	bb 27       	eor	r27, r27
    7d14:	89 83       	std	Y+1, r24	; 0x01
    7d16:	9a 83       	std	Y+2, r25	; 0x02
    7d18:	ab 83       	std	Y+3, r26	; 0x03
    7d1a:	bc 83       	std	Y+4, r27	; 0x04
							//if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 6;
							//else
							*Copy_pu8ClkSelectPrescalar = 4;
    7d1c:	ef 81       	ldd	r30, Y+7	; 0x07
    7d1e:	f8 85       	ldd	r31, Y+8	; 0x08
    7d20:	84 e0       	ldi	r24, 0x04	; 4
    7d22:	80 83       	st	Z, r24
    7d24:	34 c0       	rjmp	.+104    	; 0x7d8e <PWM_u32TimerClock+0x1a2>
						break;
		case PRES_1024 :	Copy_u32TimerClk >>= 10 ;
    7d26:	89 81       	ldd	r24, Y+1	; 0x01
    7d28:	9a 81       	ldd	r25, Y+2	; 0x02
    7d2a:	ab 81       	ldd	r26, Y+3	; 0x03
    7d2c:	bc 81       	ldd	r27, Y+4	; 0x04
    7d2e:	07 2e       	mov	r0, r23
    7d30:	7a e0       	ldi	r23, 0x0A	; 10
    7d32:	b6 95       	lsr	r27
    7d34:	a7 95       	ror	r26
    7d36:	97 95       	ror	r25
    7d38:	87 95       	ror	r24
    7d3a:	7a 95       	dec	r23
    7d3c:	d1 f7       	brne	.-12     	; 0x7d32 <PWM_u32TimerClock+0x146>
    7d3e:	70 2d       	mov	r23, r0
    7d40:	89 83       	std	Y+1, r24	; 0x01
    7d42:	9a 83       	std	Y+2, r25	; 0x02
    7d44:	ab 83       	std	Y+3, r26	; 0x03
    7d46:	bc 83       	std	Y+4, r27	; 0x04
							//if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 7;
							//else
							*Copy_pu8ClkSelectPrescalar = 5;
    7d48:	ef 81       	ldd	r30, Y+7	; 0x07
    7d4a:	f8 85       	ldd	r31, Y+8	; 0x08
    7d4c:	85 e0       	ldi	r24, 0x05	; 5
    7d4e:	80 83       	st	Z, r24
    7d50:	1e c0       	rjmp	.+60     	; 0x7d8e <PWM_u32TimerClock+0x1a2>
						break;
		case EXT_CLK_FALL	 :		Copy_u32TimerClk = EXT_CLOCK ;
    7d52:	8f ef       	ldi	r24, 0xFF	; 255
    7d54:	9f ef       	ldi	r25, 0xFF	; 255
    7d56:	af ef       	ldi	r26, 0xFF	; 255
    7d58:	bf ef       	ldi	r27, 0xFF	; 255
    7d5a:	89 83       	std	Y+1, r24	; 0x01
    7d5c:	9a 83       	std	Y+2, r25	; 0x02
    7d5e:	ab 83       	std	Y+3, r26	; 0x03
    7d60:	bc 83       	std	Y+4, r27	; 0x04
									//if( Copy_u8TimerNum == TIMER0 || Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B || Copy_u8TimerNum == TIMER1 )
									//{
										*Copy_pu8ClkSelectPrescalar = 6;
    7d62:	ef 81       	ldd	r30, Y+7	; 0x07
    7d64:	f8 85       	ldd	r31, Y+8	; 0x08
    7d66:	86 e0       	ldi	r24, 0x06	; 6
    7d68:	80 83       	st	Z, r24
    7d6a:	11 c0       	rjmp	.+34     	; 0x7d8e <PWM_u32TimerClock+0x1a2>
										//break;
									//}
									//#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		case EXT_CLK_RISE	 :		Copy_u32TimerClk = EXT_CLOCK ;
    7d6c:	8f ef       	ldi	r24, 0xFF	; 255
    7d6e:	9f ef       	ldi	r25, 0xFF	; 255
    7d70:	af ef       	ldi	r26, 0xFF	; 255
    7d72:	bf ef       	ldi	r27, 0xFF	; 255
    7d74:	89 83       	std	Y+1, r24	; 0x01
    7d76:	9a 83       	std	Y+2, r25	; 0x02
    7d78:	ab 83       	std	Y+3, r26	; 0x03
    7d7a:	bc 83       	std	Y+4, r27	; 0x04
									//if( Copy_u8TimerNum == TIMER0 || Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B || Copy_u8TimerNum == TIMER1 )
									//{
										*Copy_pu8ClkSelectPrescalar = 7;
    7d7c:	ef 81       	ldd	r30, Y+7	; 0x07
    7d7e:	f8 85       	ldd	r31, Y+8	; 0x08
    7d80:	87 e0       	ldi	r24, 0x07	; 7
    7d82:	80 83       	st	Z, r24
    7d84:	04 c0       	rjmp	.+8      	; 0x7d8e <PWM_u32TimerClock+0x1a2>
									//	break;
									//}
									//#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		default:	Copy_u32TimerClk = 0;
    7d86:	19 82       	std	Y+1, r1	; 0x01
    7d88:	1a 82       	std	Y+2, r1	; 0x02
    7d8a:	1b 82       	std	Y+3, r1	; 0x03
    7d8c:	1c 82       	std	Y+4, r1	; 0x04
					#warning "Unsupported Clock mode is selected , Timer is disabled"
	}

	return Copy_u32TimerClk ;
    7d8e:	89 81       	ldd	r24, Y+1	; 0x01
    7d90:	9a 81       	ldd	r25, Y+2	; 0x02
    7d92:	ab 81       	ldd	r26, Y+3	; 0x03
    7d94:	bc 81       	ldd	r27, Y+4	; 0x04

}
    7d96:	bc 01       	movw	r22, r24
    7d98:	cd 01       	movw	r24, r26
    7d9a:	2a 96       	adiw	r28, 0x0a	; 10
    7d9c:	0f b6       	in	r0, 0x3f	; 63
    7d9e:	f8 94       	cli
    7da0:	de bf       	out	0x3e, r29	; 62
    7da2:	0f be       	out	0x3f, r0	; 63
    7da4:	cd bf       	out	0x3d, r28	; 61
    7da6:	cf 91       	pop	r28
    7da8:	df 91       	pop	r29
    7daa:	08 95       	ret

00007dac <PWM_enuGetClock>:

ES_t PWM_enuGetClock( u8 Copy_u8TimerNum , u32 *Copy_pu32TimerClk)
{
    7dac:	df 93       	push	r29
    7dae:	cf 93       	push	r28
    7db0:	00 d0       	rcall	.+0      	; 0x7db2 <PWM_enuGetClock+0x6>
    7db2:	00 d0       	rcall	.+0      	; 0x7db4 <PWM_enuGetClock+0x8>
    7db4:	0f 92       	push	r0
    7db6:	cd b7       	in	r28, 0x3d	; 61
    7db8:	de b7       	in	r29, 0x3e	; 62
    7dba:	8a 83       	std	Y+2, r24	; 0x02
    7dbc:	7c 83       	std	Y+4, r23	; 0x04
    7dbe:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    7dc0:	81 e0       	ldi	r24, 0x01	; 1
    7dc2:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    7dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    7dc6:	89 3c       	cpi	r24, 0xC9	; 201
    7dc8:	19 f0       	breq	.+6      	; 0x7dd0 <PWM_enuGetClock+0x24>
    7dca:	8a 81       	ldd	r24, Y+2	; 0x02
    7dcc:	8a 3c       	cpi	r24, 0xCA	; 202
    7dce:	79 f4       	brne	.+30     	; 0x7dee <PWM_enuGetClock+0x42>
		*Copy_pu32TimerClk = Global_u32Timer1_Clk;
    7dd0:	80 91 40 02 	lds	r24, 0x0240
    7dd4:	90 91 41 02 	lds	r25, 0x0241
    7dd8:	a0 91 42 02 	lds	r26, 0x0242
    7ddc:	b0 91 43 02 	lds	r27, 0x0243
    7de0:	eb 81       	ldd	r30, Y+3	; 0x03
    7de2:	fc 81       	ldd	r31, Y+4	; 0x04
    7de4:	80 83       	st	Z, r24
    7de6:	91 83       	std	Z+1, r25	; 0x01
    7de8:	a2 83       	std	Z+2, r26	; 0x02
    7dea:	b3 83       	std	Z+3, r27	; 0x03
    7dec:	02 c0       	rjmp	.+4      	; 0x7df2 <PWM_enuGetClock+0x46>
	else Local_enuErrorState = ES_OUT_RANGE ;
    7dee:	82 e0       	ldi	r24, 0x02	; 2
    7df0:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    7df2:	89 81       	ldd	r24, Y+1	; 0x01
    7df4:	81 30       	cpi	r24, 0x01	; 1
    7df6:	19 f0       	breq	.+6      	; 0x7dfe <PWM_enuGetClock+0x52>
    7df8:	89 81       	ldd	r24, Y+1	; 0x01
    7dfa:	8d 83       	std	Y+5, r24	; 0x05
    7dfc:	01 c0       	rjmp	.+2      	; 0x7e00 <PWM_enuGetClock+0x54>
    7dfe:	1d 82       	std	Y+5, r1	; 0x05
    7e00:	8d 81       	ldd	r24, Y+5	; 0x05
}
    7e02:	0f 90       	pop	r0
    7e04:	0f 90       	pop	r0
    7e06:	0f 90       	pop	r0
    7e08:	0f 90       	pop	r0
    7e0a:	0f 90       	pop	r0
    7e0c:	cf 91       	pop	r28
    7e0e:	df 91       	pop	r29
    7e10:	08 95       	ret

00007e12 <PWM_enuSetClkPrescaler>:


ES_t PWM_enuSetClkPrescaler( u8 Copy_u8TimerNum , u8 Copy_u8PrescalerValue )
{
    7e12:	df 93       	push	r29
    7e14:	cf 93       	push	r28
    7e16:	cd b7       	in	r28, 0x3d	; 61
    7e18:	de b7       	in	r29, 0x3e	; 62
    7e1a:	2a 97       	sbiw	r28, 0x0a	; 10
    7e1c:	0f b6       	in	r0, 0x3f	; 63
    7e1e:	f8 94       	cli
    7e20:	de bf       	out	0x3e, r29	; 62
    7e22:	0f be       	out	0x3f, r0	; 63
    7e24:	cd bf       	out	0x3d, r28	; 61
    7e26:	88 87       	std	Y+8, r24	; 0x08
    7e28:	69 87       	std	Y+9, r22	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    7e2a:	81 e0       	ldi	r24, 0x01	; 1
    7e2c:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8ClkSelectPrescaler = NO_CLK ;
    7e2e:	8a e0       	ldi	r24, 0x0A	; 10
    7e30:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    7e32:	e9 e5       	ldi	r30, 0x59	; 89
    7e34:	f0 e0       	ldi	r31, 0x00	; 0
    7e36:	80 81       	ld	r24, Z
    7e38:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32TimerClk = PWM_u32TimerClock( Copy_u8TimerNum , Copy_u8PrescalerValue , &Local_u8ClkSelectPrescaler ) ;
    7e3a:	9e 01       	movw	r18, r28
    7e3c:	29 5f       	subi	r18, 0xF9	; 249
    7e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    7e40:	88 85       	ldd	r24, Y+8	; 0x08
    7e42:	69 85       	ldd	r22, Y+9	; 0x09
    7e44:	a9 01       	movw	r20, r18
    7e46:	0e 94 f6 3d 	call	0x7bec	; 0x7bec <PWM_u32TimerClock>
    7e4a:	dc 01       	movw	r26, r24
    7e4c:	cb 01       	movw	r24, r22
    7e4e:	89 83       	std	Y+1, r24	; 0x01
    7e50:	9a 83       	std	Y+2, r25	; 0x02
    7e52:	ab 83       	std	Y+3, r26	; 0x03
    7e54:	bc 83       	std	Y+4, r27	; 0x04
		Global_u32Timer0_Clk = Local_u32TimerClk ;					// Saving New Actual Timer0 Clock
		Timers[ TIMER0 - TIMER0 ].ClkSelect = Copy_u8PrescalerValue ;
	}
	else
#endif
	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    7e56:	88 85       	ldd	r24, Y+8	; 0x08
    7e58:	89 3c       	cpi	r24, 0xC9	; 201
    7e5a:	19 f0       	breq	.+6      	; 0x7e62 <PWM_enuSetClkPrescaler+0x50>
    7e5c:	88 85       	ldd	r24, Y+8	; 0x08
    7e5e:	8a 3c       	cpi	r24, 0xCA	; 202
    7e60:	49 f5       	brne	.+82     	; 0x7eb4 <PWM_enuSetClkPrescaler+0xa2>
	{
		TIMSK &= ~( TC1_INT_EN_MASK ) ;								// Disable Timer1 Interrupts
    7e62:	a9 e5       	ldi	r26, 0x59	; 89
    7e64:	b0 e0       	ldi	r27, 0x00	; 0
    7e66:	e9 e5       	ldi	r30, 0x59	; 89
    7e68:	f0 e0       	ldi	r31, 0x00	; 0
    7e6a:	80 81       	ld	r24, Z
    7e6c:	83 7c       	andi	r24, 0xC3	; 195
    7e6e:	8c 93       	st	X, r24
		TCCR1B &= ~( CLK1_SEL_BITS_MASK );							// Masking Clock Select bits
    7e70:	ae e4       	ldi	r26, 0x4E	; 78
    7e72:	b0 e0       	ldi	r27, 0x00	; 0
    7e74:	ee e4       	ldi	r30, 0x4E	; 78
    7e76:	f0 e0       	ldi	r31, 0x00	; 0
    7e78:	80 81       	ld	r24, Z
    7e7a:	88 7f       	andi	r24, 0xF8	; 248
    7e7c:	8c 93       	st	X, r24
		TCCR1B |= ( Local_u8ClkSelectPrescaler  << CLK1_SEL_BITS );	// Setting New Prescaler
    7e7e:	ae e4       	ldi	r26, 0x4E	; 78
    7e80:	b0 e0       	ldi	r27, 0x00	; 0
    7e82:	ee e4       	ldi	r30, 0x4E	; 78
    7e84:	f0 e0       	ldi	r31, 0x00	; 0
    7e86:	90 81       	ld	r25, Z
    7e88:	8f 81       	ldd	r24, Y+7	; 0x07
    7e8a:	89 2b       	or	r24, r25
    7e8c:	8c 93       	st	X, r24
		Global_u32Timer1_Clk = Local_u32TimerClk ;					// Saving New Actual Timer1 Clock
    7e8e:	89 81       	ldd	r24, Y+1	; 0x01
    7e90:	9a 81       	ldd	r25, Y+2	; 0x02
    7e92:	ab 81       	ldd	r26, Y+3	; 0x03
    7e94:	bc 81       	ldd	r27, Y+4	; 0x04
    7e96:	80 93 40 02 	sts	0x0240, r24
    7e9a:	90 93 41 02 	sts	0x0241, r25
    7e9e:	a0 93 42 02 	sts	0x0242, r26
    7ea2:	b0 93 43 02 	sts	0x0243, r27
		PWMs[ TIMER1A - TIMER1A ].ClkSelect = Copy_u8PrescalerValue ;
    7ea6:	89 85       	ldd	r24, Y+9	; 0x09
    7ea8:	80 93 9c 01 	sts	0x019C, r24
		PWMs[ TIMER1B - TIMER1A ].ClkSelect = Copy_u8PrescalerValue ;
    7eac:	89 85       	ldd	r24, Y+9	; 0x09
    7eae:	80 93 a1 01 	sts	0x01A1, r24
    7eb2:	02 c0       	rjmp	.+4      	; 0x7eb8 <PWM_enuSetClkPrescaler+0xa6>
		TCCR2 |= ( Local_u8ClkSelectPrescaler  << CLK2_SEL_BITS );	// Setting New Prescaler
		Global_u32Timer2_Clk = Local_u32TimerClk ;					// Saving New Actual Timer2 Clock
		Timers[ TIMER2 - TIMER0 ].ClkSelect = Copy_u8PrescalerValue ;
	}
#endif
	else Local_enuErrorState = ES_OUT_RANGE ;
    7eb4:	82 e0       	ldi	r24, 0x02	; 2
    7eb6:	8e 83       	std	Y+6, r24	; 0x06

	TIMSK = Local_u8CopyTIMSK ;										// Re-setting Timer Interrupt Mask Register to its Status
    7eb8:	e9 e5       	ldi	r30, 0x59	; 89
    7eba:	f0 e0       	ldi	r31, 0x00	; 0
    7ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    7ebe:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    7ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    7ec2:	81 30       	cpi	r24, 0x01	; 1
    7ec4:	19 f0       	breq	.+6      	; 0x7ecc <PWM_enuSetClkPrescaler+0xba>
    7ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    7ec8:	8a 87       	std	Y+10, r24	; 0x0a
    7eca:	01 c0       	rjmp	.+2      	; 0x7ece <PWM_enuSetClkPrescaler+0xbc>
    7ecc:	1a 86       	std	Y+10, r1	; 0x0a
    7ece:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    7ed0:	2a 96       	adiw	r28, 0x0a	; 10
    7ed2:	0f b6       	in	r0, 0x3f	; 63
    7ed4:	f8 94       	cli
    7ed6:	de bf       	out	0x3e, r29	; 62
    7ed8:	0f be       	out	0x3f, r0	; 63
    7eda:	cd bf       	out	0x3d, r28	; 61
    7edc:	cf 91       	pop	r28
    7ede:	df 91       	pop	r29
    7ee0:	08 95       	ret

00007ee2 <PWM_enuGetClkSelect>:

ES_t PWM_enuGetClkSelect( u8 Copy_u8TimerNum , u16 *Copy_pu8TimerClkSelect )
{
    7ee2:	df 93       	push	r29
    7ee4:	cf 93       	push	r28
    7ee6:	00 d0       	rcall	.+0      	; 0x7ee8 <PWM_enuGetClkSelect+0x6>
    7ee8:	00 d0       	rcall	.+0      	; 0x7eea <PWM_enuGetClkSelect+0x8>
    7eea:	0f 92       	push	r0
    7eec:	cd b7       	in	r28, 0x3d	; 61
    7eee:	de b7       	in	r29, 0x3e	; 62
    7ef0:	8b 83       	std	Y+3, r24	; 0x03
    7ef2:	7d 83       	std	Y+5, r23	; 0x05
    7ef4:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_OUT_RANGE ;
    7ef6:	82 e0       	ldi	r24, 0x02	; 2
    7ef8:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    7efa:	19 82       	std	Y+1, r1	; 0x01
    7efc:	29 c0       	rjmp	.+82     	; 0x7f50 <PWM_enuGetClkSelect+0x6e>
	{
		if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    7efe:	89 81       	ldd	r24, Y+1	; 0x01
    7f00:	28 2f       	mov	r18, r24
    7f02:	30 e0       	ldi	r19, 0x00	; 0
    7f04:	c9 01       	movw	r24, r18
    7f06:	88 0f       	add	r24, r24
    7f08:	99 1f       	adc	r25, r25
    7f0a:	88 0f       	add	r24, r24
    7f0c:	99 1f       	adc	r25, r25
    7f0e:	82 0f       	add	r24, r18
    7f10:	93 1f       	adc	r25, r19
    7f12:	fc 01       	movw	r30, r24
    7f14:	e5 56       	subi	r30, 0x65	; 101
    7f16:	fe 4f       	sbci	r31, 0xFE	; 254
    7f18:	90 81       	ld	r25, Z
    7f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    7f1c:	98 17       	cp	r25, r24
    7f1e:	a9 f4       	brne	.+42     	; 0x7f4a <PWM_enuGetClkSelect+0x68>
		{
			*Copy_pu8TimerClkSelect = PWMs[Local_u8Iter].ClkSelect;
    7f20:	89 81       	ldd	r24, Y+1	; 0x01
    7f22:	28 2f       	mov	r18, r24
    7f24:	30 e0       	ldi	r19, 0x00	; 0
    7f26:	c9 01       	movw	r24, r18
    7f28:	88 0f       	add	r24, r24
    7f2a:	99 1f       	adc	r25, r25
    7f2c:	88 0f       	add	r24, r24
    7f2e:	99 1f       	adc	r25, r25
    7f30:	82 0f       	add	r24, r18
    7f32:	93 1f       	adc	r25, r19
    7f34:	fc 01       	movw	r30, r24
    7f36:	e4 56       	subi	r30, 0x64	; 100
    7f38:	fe 4f       	sbci	r31, 0xFE	; 254
    7f3a:	80 81       	ld	r24, Z
    7f3c:	88 2f       	mov	r24, r24
    7f3e:	90 e0       	ldi	r25, 0x00	; 0
    7f40:	ec 81       	ldd	r30, Y+4	; 0x04
    7f42:	fd 81       	ldd	r31, Y+5	; 0x05
    7f44:	91 83       	std	Z+1, r25	; 0x01
    7f46:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK ;
    7f48:	1a 82       	std	Y+2, r1	; 0x02

ES_t PWM_enuGetClkSelect( u8 Copy_u8TimerNum , u16 *Copy_pu8TimerClkSelect )
{
	ES_t Local_enuErrorState = ES_OUT_RANGE ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    7f4a:	89 81       	ldd	r24, Y+1	; 0x01
    7f4c:	8f 5f       	subi	r24, 0xFF	; 255
    7f4e:	89 83       	std	Y+1, r24	; 0x01
    7f50:	90 91 98 01 	lds	r25, 0x0198
    7f54:	89 81       	ldd	r24, Y+1	; 0x01
    7f56:	89 17       	cp	r24, r25
    7f58:	90 f2       	brcs	.-92     	; 0x7efe <PWM_enuGetClkSelect+0x1c>
			Local_enuErrorState = ES_OK ;
		}
	}


	return Local_enuErrorState ;
    7f5a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    7f5c:	0f 90       	pop	r0
    7f5e:	0f 90       	pop	r0
    7f60:	0f 90       	pop	r0
    7f62:	0f 90       	pop	r0
    7f64:	0f 90       	pop	r0
    7f66:	cf 91       	pop	r28
    7f68:	df 91       	pop	r29
    7f6a:	08 95       	ret

00007f6c <PWM_enuSetCOM_Mode>:

ES_t PWM_enuSetCOM_Mode( u8 Copy_u8TimerNum , u8 Copy_u8COM_Mode )
{
    7f6c:	df 93       	push	r29
    7f6e:	cf 93       	push	r28
    7f70:	00 d0       	rcall	.+0      	; 0x7f72 <PWM_enuSetCOM_Mode+0x6>
    7f72:	00 d0       	rcall	.+0      	; 0x7f74 <PWM_enuSetCOM_Mode+0x8>
    7f74:	0f 92       	push	r0
    7f76:	cd b7       	in	r28, 0x3d	; 61
    7f78:	de b7       	in	r29, 0x3e	; 62
    7f7a:	8b 83       	std	Y+3, r24	; 0x03
    7f7c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    7f7e:	81 e0       	ldi	r24, 0x01	; 1
    7f80:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    7f82:	e9 e5       	ldi	r30, 0x59	; 89
    7f84:	f0 e0       	ldi	r31, 0x00	; 0
    7f86:	80 81       	ld	r24, Z
    7f88:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8COM_Mode == COMP_NON_INVERTED ||	Copy_u8COM_Mode == COMP_INVERTED )
    7f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    7f8c:	86 31       	cpi	r24, 0x16	; 22
    7f8e:	21 f0       	breq	.+8      	; 0x7f98 <PWM_enuSetCOM_Mode+0x2c>
    7f90:	8c 81       	ldd	r24, Y+4	; 0x04
    7f92:	87 31       	cpi	r24, 0x17	; 23
    7f94:	09 f0       	breq	.+2      	; 0x7f98 <PWM_enuSetCOM_Mode+0x2c>
    7f96:	58 c0       	rjmp	.+176    	; 0x8048 <PWM_enuSetCOM_Mode+0xdc>
			TCCR0 |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COMP0_MAT_OUT_MODE_BITS ) ;		// Setting New Compare Output Mode
			Timers[ TIMER0 - TIMER0 ].CompOutMode = Copy_u8COM_Mode ;
		}
		else
#endif
		if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    7f98:	8b 81       	ldd	r24, Y+3	; 0x03
    7f9a:	89 3c       	cpi	r24, 0xC9	; 201
    7f9c:	21 f0       	breq	.+8      	; 0x7fa6 <PWM_enuSetCOM_Mode+0x3a>
    7f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    7fa0:	8a 3c       	cpi	r24, 0xCA	; 202
    7fa2:	09 f0       	breq	.+2      	; 0x7fa6 <PWM_enuSetCOM_Mode+0x3a>
    7fa4:	4a c0       	rjmp	.+148    	; 0x803a <PWM_enuSetCOM_Mode+0xce>
		{
			TIMSK &= ~( TC1_INT_EN_MASK ) ;													// Disable Timer1 Interrupts
    7fa6:	a9 e5       	ldi	r26, 0x59	; 89
    7fa8:	b0 e0       	ldi	r27, 0x00	; 0
    7faa:	e9 e5       	ldi	r30, 0x59	; 89
    7fac:	f0 e0       	ldi	r31, 0x00	; 0
    7fae:	80 81       	ld	r24, Z
    7fb0:	83 7c       	andi	r24, 0xC3	; 195
    7fb2:	8c 93       	st	X, r24
			if( Copy_u8TimerNum == TIMER1A )
    7fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    7fb6:	89 3c       	cpi	r24, 0xC9	; 201
    7fb8:	01 f5       	brne	.+64     	; 0x7ffa <PWM_enuSetCOM_Mode+0x8e>
			{
				TCCR1A &= ~( COM1A_SEL_BITS_MASK ) ;										// Masking COM Select bits
    7fba:	af e4       	ldi	r26, 0x4F	; 79
    7fbc:	b0 e0       	ldi	r27, 0x00	; 0
    7fbe:	ef e4       	ldi	r30, 0x4F	; 79
    7fc0:	f0 e0       	ldi	r31, 0x00	; 0
    7fc2:	80 81       	ld	r24, Z
    7fc4:	8f 73       	andi	r24, 0x3F	; 63
    7fc6:	8c 93       	st	X, r24
				TCCR1A |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COM1A_SEL_BITS ) ;			// Setting New Compare Output Mode
    7fc8:	af e4       	ldi	r26, 0x4F	; 79
    7fca:	b0 e0       	ldi	r27, 0x00	; 0
    7fcc:	ef e4       	ldi	r30, 0x4F	; 79
    7fce:	f0 e0       	ldi	r31, 0x00	; 0
    7fd0:	80 81       	ld	r24, Z
    7fd2:	28 2f       	mov	r18, r24
    7fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    7fd6:	88 2f       	mov	r24, r24
    7fd8:	90 e0       	ldi	r25, 0x00	; 0
    7fda:	44 97       	sbiw	r24, 0x14	; 20
    7fdc:	00 24       	eor	r0, r0
    7fde:	96 95       	lsr	r25
    7fe0:	87 95       	ror	r24
    7fe2:	07 94       	ror	r0
    7fe4:	96 95       	lsr	r25
    7fe6:	87 95       	ror	r24
    7fe8:	07 94       	ror	r0
    7fea:	98 2f       	mov	r25, r24
    7fec:	80 2d       	mov	r24, r0
    7fee:	82 2b       	or	r24, r18
    7ff0:	8c 93       	st	X, r24
				PWMs[ TIMER1A - TIMER1A ].CompOutMode = Copy_u8COM_Mode ;
    7ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    7ff4:	80 93 9d 01 	sts	0x019D, r24
    7ff8:	22 c0       	rjmp	.+68     	; 0x803e <PWM_enuSetCOM_Mode+0xd2>
			}
			else if( Copy_u8TimerNum == TIMER1B )
    7ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    7ffc:	8a 3c       	cpi	r24, 0xCA	; 202
    7ffe:	f9 f4       	brne	.+62     	; 0x803e <PWM_enuSetCOM_Mode+0xd2>
			{
				TCCR1B &= ~( COM1B_SEL_BITS_MASK ) ;										// Masking COM Select bits
    8000:	ae e4       	ldi	r26, 0x4E	; 78
    8002:	b0 e0       	ldi	r27, 0x00	; 0
    8004:	ee e4       	ldi	r30, 0x4E	; 78
    8006:	f0 e0       	ldi	r31, 0x00	; 0
    8008:	80 81       	ld	r24, Z
    800a:	8f 7c       	andi	r24, 0xCF	; 207
    800c:	8c 93       	st	X, r24
				TCCR1B |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COM1B_SEL_BITS ) ;			// Setting New Compare Output Mode
    800e:	ae e4       	ldi	r26, 0x4E	; 78
    8010:	b0 e0       	ldi	r27, 0x00	; 0
    8012:	ee e4       	ldi	r30, 0x4E	; 78
    8014:	f0 e0       	ldi	r31, 0x00	; 0
    8016:	80 81       	ld	r24, Z
    8018:	28 2f       	mov	r18, r24
    801a:	8c 81       	ldd	r24, Y+4	; 0x04
    801c:	88 2f       	mov	r24, r24
    801e:	90 e0       	ldi	r25, 0x00	; 0
    8020:	44 97       	sbiw	r24, 0x14	; 20
    8022:	82 95       	swap	r24
    8024:	92 95       	swap	r25
    8026:	90 7f       	andi	r25, 0xF0	; 240
    8028:	98 27       	eor	r25, r24
    802a:	80 7f       	andi	r24, 0xF0	; 240
    802c:	98 27       	eor	r25, r24
    802e:	82 2b       	or	r24, r18
    8030:	8c 93       	st	X, r24
				PWMs[ TIMER1B - TIMER1A ].CompOutMode = Copy_u8COM_Mode ;
    8032:	8c 81       	ldd	r24, Y+4	; 0x04
    8034:	80 93 a2 01 	sts	0x01A2, r24
    8038:	02 c0       	rjmp	.+4      	; 0x803e <PWM_enuSetCOM_Mode+0xd2>
			TCCR2 &= ~( COMP2_MAT_OUT_MODE_BITS_MASK ) ;									// Masking COM Select bits
			TCCR2 |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COMP2_MAT_OUT_MODE_BITS ) ;		// Setting New Compare Output Mode
			Timers[ TIMER2 - TIMER0 ].CompOutMode = Copy_u8COM_Mode ;
		}
#endif
		else Local_enuErrorState = ES_OUT_RANGE ;
    803a:	82 e0       	ldi	r24, 0x02	; 2
    803c:	8a 83       	std	Y+2, r24	; 0x02

		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    803e:	e9 e5       	ldi	r30, 0x59	; 89
    8040:	f0 e0       	ldi	r31, 0x00	; 0
    8042:	89 81       	ldd	r24, Y+1	; 0x01
    8044:	80 83       	st	Z, r24
    8046:	02 c0       	rjmp	.+4      	; 0x804c <PWM_enuSetCOM_Mode+0xe0>

	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE ;
    8048:	82 e0       	ldi	r24, 0x02	; 2
    804a:	8a 83       	std	Y+2, r24	; 0x02
		#warning "PWM_enuSetCOM_Mode(): Non Supported Compare Output mode, No Action Taken ."
	}


	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    804c:	8a 81       	ldd	r24, Y+2	; 0x02
    804e:	81 30       	cpi	r24, 0x01	; 1
    8050:	19 f0       	breq	.+6      	; 0x8058 <PWM_enuSetCOM_Mode+0xec>
    8052:	8a 81       	ldd	r24, Y+2	; 0x02
    8054:	8d 83       	std	Y+5, r24	; 0x05
    8056:	01 c0       	rjmp	.+2      	; 0x805a <PWM_enuSetCOM_Mode+0xee>
    8058:	1d 82       	std	Y+5, r1	; 0x05
    805a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    805c:	0f 90       	pop	r0
    805e:	0f 90       	pop	r0
    8060:	0f 90       	pop	r0
    8062:	0f 90       	pop	r0
    8064:	0f 90       	pop	r0
    8066:	cf 91       	pop	r28
    8068:	df 91       	pop	r29
    806a:	08 95       	ret

0000806c <PWM_enuGetCOM_Mode>:

ES_t PWM_enuGetCOM_Mode( u8 Copy_u8TimerNum , u8 *Copy_pu8PWM_OC_Mode)
{
    806c:	df 93       	push	r29
    806e:	cf 93       	push	r28
    8070:	00 d0       	rcall	.+0      	; 0x8072 <PWM_enuGetCOM_Mode+0x6>
    8072:	00 d0       	rcall	.+0      	; 0x8074 <PWM_enuGetCOM_Mode+0x8>
    8074:	0f 92       	push	r0
    8076:	cd b7       	in	r28, 0x3d	; 61
    8078:	de b7       	in	r29, 0x3e	; 62
    807a:	8b 83       	std	Y+3, r24	; 0x03
    807c:	7d 83       	std	Y+5, r23	; 0x05
    807e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_OUT_RANGE ;
    8080:	82 e0       	ldi	r24, 0x02	; 2
    8082:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    8084:	19 82       	std	Y+1, r1	; 0x01
    8086:	26 c0       	rjmp	.+76     	; 0x80d4 <PWM_enuGetCOM_Mode+0x68>
	{
		if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    8088:	89 81       	ldd	r24, Y+1	; 0x01
    808a:	28 2f       	mov	r18, r24
    808c:	30 e0       	ldi	r19, 0x00	; 0
    808e:	c9 01       	movw	r24, r18
    8090:	88 0f       	add	r24, r24
    8092:	99 1f       	adc	r25, r25
    8094:	88 0f       	add	r24, r24
    8096:	99 1f       	adc	r25, r25
    8098:	82 0f       	add	r24, r18
    809a:	93 1f       	adc	r25, r19
    809c:	fc 01       	movw	r30, r24
    809e:	e5 56       	subi	r30, 0x65	; 101
    80a0:	fe 4f       	sbci	r31, 0xFE	; 254
    80a2:	90 81       	ld	r25, Z
    80a4:	8b 81       	ldd	r24, Y+3	; 0x03
    80a6:	98 17       	cp	r25, r24
    80a8:	91 f4       	brne	.+36     	; 0x80ce <PWM_enuGetCOM_Mode+0x62>
		{
			*Copy_pu8PWM_OC_Mode = PWMs[Local_u8Iter].CompOutMode;
    80aa:	89 81       	ldd	r24, Y+1	; 0x01
    80ac:	28 2f       	mov	r18, r24
    80ae:	30 e0       	ldi	r19, 0x00	; 0
    80b0:	c9 01       	movw	r24, r18
    80b2:	88 0f       	add	r24, r24
    80b4:	99 1f       	adc	r25, r25
    80b6:	88 0f       	add	r24, r24
    80b8:	99 1f       	adc	r25, r25
    80ba:	82 0f       	add	r24, r18
    80bc:	93 1f       	adc	r25, r19
    80be:	fc 01       	movw	r30, r24
    80c0:	e3 56       	subi	r30, 0x63	; 99
    80c2:	fe 4f       	sbci	r31, 0xFE	; 254
    80c4:	80 81       	ld	r24, Z
    80c6:	ec 81       	ldd	r30, Y+4	; 0x04
    80c8:	fd 81       	ldd	r31, Y+5	; 0x05
    80ca:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK ;
    80cc:	1a 82       	std	Y+2, r1	; 0x02

ES_t PWM_enuGetCOM_Mode( u8 Copy_u8TimerNum , u8 *Copy_pu8PWM_OC_Mode)
{
	ES_t Local_enuErrorState = ES_OUT_RANGE ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    80ce:	89 81       	ldd	r24, Y+1	; 0x01
    80d0:	8f 5f       	subi	r24, 0xFF	; 255
    80d2:	89 83       	std	Y+1, r24	; 0x01
    80d4:	90 91 98 01 	lds	r25, 0x0198
    80d8:	89 81       	ldd	r24, Y+1	; 0x01
    80da:	89 17       	cp	r24, r25
    80dc:	a8 f2       	brcs	.-86     	; 0x8088 <PWM_enuGetCOM_Mode+0x1c>
			*Copy_pu8PWM_OC_Mode = PWMs[Local_u8Iter].CompOutMode;
			Local_enuErrorState = ES_OK ;
		}
	}

	return Local_enuErrorState ;
    80de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    80e0:	0f 90       	pop	r0
    80e2:	0f 90       	pop	r0
    80e4:	0f 90       	pop	r0
    80e6:	0f 90       	pop	r0
    80e8:	0f 90       	pop	r0
    80ea:	cf 91       	pop	r28
    80ec:	df 91       	pop	r29
    80ee:	08 95       	ret

000080f0 <PWM_enuSetWGM_Mode>:


ES_t PWM_enuSetWGM_Mode( u8 Copy_u8TimerNum , u8 Copy_u8WGM_Mode )
{
    80f0:	df 93       	push	r29
    80f2:	cf 93       	push	r28
    80f4:	00 d0       	rcall	.+0      	; 0x80f6 <PWM_enuSetWGM_Mode+0x6>
    80f6:	00 d0       	rcall	.+0      	; 0x80f8 <PWM_enuSetWGM_Mode+0x8>
    80f8:	00 d0       	rcall	.+0      	; 0x80fa <PWM_enuSetWGM_Mode+0xa>
    80fa:	cd b7       	in	r28, 0x3d	; 61
    80fc:	de b7       	in	r29, 0x3e	; 62
    80fe:	8c 83       	std	Y+4, r24	; 0x04
    8100:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    8102:	81 e0       	ldi	r24, 0x01	; 1
    8104:	8b 83       	std	Y+3, r24	; 0x03


	if( Copy_u8WGM_Mode > WGM_MODE_00	&& Copy_u8WGM_Mode <= WGM_FAST_OCR1A &&
    8106:	8d 81       	ldd	r24, Y+5	; 0x05
    8108:	85 36       	cpi	r24, 0x65	; 101
    810a:	08 f4       	brcc	.+2      	; 0x810e <PWM_enuSetWGM_Mode+0x1e>
    810c:	6a c0       	rjmp	.+212    	; 0x81e2 <PWM_enuSetWGM_Mode+0xf2>
    810e:	8d 81       	ldd	r24, Y+5	; 0x05
    8110:	84 37       	cpi	r24, 0x74	; 116
    8112:	08 f0       	brcs	.+2      	; 0x8116 <PWM_enuSetWGM_Mode+0x26>
    8114:	66 c0       	rjmp	.+204    	; 0x81e2 <PWM_enuSetWGM_Mode+0xf2>
    8116:	8d 81       	ldd	r24, Y+5	; 0x05
    8118:	88 36       	cpi	r24, 0x68	; 104
    811a:	09 f4       	brne	.+2      	; 0x811e <PWM_enuSetWGM_Mode+0x2e>
    811c:	62 c0       	rjmp	.+196    	; 0x81e2 <PWM_enuSetWGM_Mode+0xf2>
    811e:	8d 81       	ldd	r24, Y+5	; 0x05
    8120:	80 37       	cpi	r24, 0x70	; 112
    8122:	09 f4       	brne	.+2      	; 0x8126 <PWM_enuSetWGM_Mode+0x36>
    8124:	5e c0       	rjmp	.+188    	; 0x81e2 <PWM_enuSetWGM_Mode+0xf2>
    8126:	8d 81       	ldd	r24, Y+5	; 0x05
    8128:	81 37       	cpi	r24, 0x71	; 113
    812a:	09 f4       	brne	.+2      	; 0x812e <PWM_enuSetWGM_Mode+0x3e>
    812c:	5a c0       	rjmp	.+180    	; 0x81e2 <PWM_enuSetWGM_Mode+0xf2>
		Copy_u8WGM_Mode != WGM_MODE_04	&& Copy_u8WGM_Mode != WGM_MODE_12 && Copy_u8WGM_Mode != WGM_MODE_13 )
	{

		u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    812e:	e9 e5       	ldi	r30, 0x59	; 89
    8130:	f0 e0       	ldi	r31, 0x00	; 0
    8132:	80 81       	ld	r24, Z
    8134:	8a 83       	std	Y+2, r24	; 0x02
			TCCR0 |= ((Local_u8WGM >> BIT0_MASK ) << WGM01_BIT );		// Setting WGM01 Select bit to New Waveform Generation Mode
			Timers[ TIMER0 - TIMER0 ].WaveGenMode = Copy_u8WGM_Mode ;
		}
		else
#endif
		if( ( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B ) &&
    8136:	8c 81       	ldd	r24, Y+4	; 0x04
    8138:	89 3c       	cpi	r24, 0xC9	; 201
    813a:	21 f0       	breq	.+8      	; 0x8144 <PWM_enuSetWGM_Mode+0x54>
    813c:	8c 81       	ldd	r24, Y+4	; 0x04
    813e:	8a 3c       	cpi	r24, 0xCA	; 202
    8140:	09 f0       	breq	.+2      	; 0x8144 <PWM_enuSetWGM_Mode+0x54>
    8142:	48 c0       	rjmp	.+144    	; 0x81d4 <PWM_enuSetWGM_Mode+0xe4>
    8144:	8d 81       	ldd	r24, Y+5	; 0x05
    8146:	85 36       	cpi	r24, 0x65	; 101
    8148:	08 f4       	brcc	.+2      	; 0x814c <PWM_enuSetWGM_Mode+0x5c>
    814a:	44 c0       	rjmp	.+136    	; 0x81d4 <PWM_enuSetWGM_Mode+0xe4>
    814c:	8d 81       	ldd	r24, Y+5	; 0x05
    814e:	84 37       	cpi	r24, 0x74	; 116
    8150:	08 f0       	brcs	.+2      	; 0x8154 <PWM_enuSetWGM_Mode+0x64>
    8152:	40 c0       	rjmp	.+128    	; 0x81d4 <PWM_enuSetWGM_Mode+0xe4>
    8154:	8d 81       	ldd	r24, Y+5	; 0x05
    8156:	88 36       	cpi	r24, 0x68	; 104
    8158:	e9 f1       	breq	.+122    	; 0x81d4 <PWM_enuSetWGM_Mode+0xe4>
    815a:	8d 81       	ldd	r24, Y+5	; 0x05
    815c:	80 37       	cpi	r24, 0x70	; 112
    815e:	d1 f1       	breq	.+116    	; 0x81d4 <PWM_enuSetWGM_Mode+0xe4>
    8160:	8d 81       	ldd	r24, Y+5	; 0x05
    8162:	81 37       	cpi	r24, 0x71	; 113
    8164:	b9 f1       	breq	.+110    	; 0x81d4 <PWM_enuSetWGM_Mode+0xe4>
			Copy_u8WGM_Mode > WGM_MODE_00	&& Copy_u8WGM_Mode <= WGM_FAST_OCR1A &&
			Copy_u8WGM_Mode != WGM_MODE_04	&& Copy_u8WGM_Mode != WGM_MODE_12 && Copy_u8WGM_Mode != WGM_MODE_13 )
		{
			u8 Local_u8WGM = Copy_u8WGM_Mode - WGM_MODE_00 ;
    8166:	8d 81       	ldd	r24, Y+5	; 0x05
    8168:	84 56       	subi	r24, 0x64	; 100
    816a:	89 83       	std	Y+1, r24	; 0x01
			TIMSK &= ~( TC1_INT_EN_MASK ) ;													// Disable Timer1 Interrupts
    816c:	a9 e5       	ldi	r26, 0x59	; 89
    816e:	b0 e0       	ldi	r27, 0x00	; 0
    8170:	e9 e5       	ldi	r30, 0x59	; 89
    8172:	f0 e0       	ldi	r31, 0x00	; 0
    8174:	80 81       	ld	r24, Z
    8176:	83 7c       	andi	r24, 0xC3	; 195
    8178:	8c 93       	st	X, r24
			TCCR1B &= ~( WGM1B_SEL_BITS_MASK );												// Masking WGM1B Select bits
    817a:	ae e4       	ldi	r26, 0x4E	; 78
    817c:	b0 e0       	ldi	r27, 0x00	; 0
    817e:	ee e4       	ldi	r30, 0x4E	; 78
    8180:	f0 e0       	ldi	r31, 0x00	; 0
    8182:	80 81       	ld	r24, Z
    8184:	87 7e       	andi	r24, 0xE7	; 231
    8186:	8c 93       	st	X, r24
			TCCR1A |= ( ( Local_u8WGM & TWO_BITS_MASK ) << WGM1A_SEL_BITS );				// Setting WGM10 & WGM11 Select bits
    8188:	af e4       	ldi	r26, 0x4F	; 79
    818a:	b0 e0       	ldi	r27, 0x00	; 0
    818c:	ef e4       	ldi	r30, 0x4F	; 79
    818e:	f0 e0       	ldi	r31, 0x00	; 0
    8190:	80 81       	ld	r24, Z
    8192:	98 2f       	mov	r25, r24
    8194:	89 81       	ldd	r24, Y+1	; 0x01
    8196:	83 70       	andi	r24, 0x03	; 3
    8198:	89 2b       	or	r24, r25
    819a:	8c 93       	st	X, r24
			TCCR1B |= ( ( ( Local_u8WGM >> BIT1_MASK) & TWO_BITS_MASK ) << WGM1B_SEL_BITS );// Setting WGM12 & WGM13 Select bits
    819c:	ae e4       	ldi	r26, 0x4E	; 78
    819e:	b0 e0       	ldi	r27, 0x00	; 0
    81a0:	ee e4       	ldi	r30, 0x4E	; 78
    81a2:	f0 e0       	ldi	r31, 0x00	; 0
    81a4:	80 81       	ld	r24, Z
    81a6:	28 2f       	mov	r18, r24
    81a8:	89 81       	ldd	r24, Y+1	; 0x01
    81aa:	86 95       	lsr	r24
    81ac:	86 95       	lsr	r24
    81ae:	88 2f       	mov	r24, r24
    81b0:	90 e0       	ldi	r25, 0x00	; 0
    81b2:	83 70       	andi	r24, 0x03	; 3
    81b4:	90 70       	andi	r25, 0x00	; 0
    81b6:	88 0f       	add	r24, r24
    81b8:	99 1f       	adc	r25, r25
    81ba:	88 0f       	add	r24, r24
    81bc:	99 1f       	adc	r25, r25
    81be:	88 0f       	add	r24, r24
    81c0:	99 1f       	adc	r25, r25
    81c2:	82 2b       	or	r24, r18
    81c4:	8c 93       	st	X, r24
			PWMs[ TIMER1A - TIMER1A ].WaveGenMode = Copy_u8WGM_Mode ;
    81c6:	8d 81       	ldd	r24, Y+5	; 0x05
    81c8:	80 93 9e 01 	sts	0x019E, r24
			PWMs[ TIMER1B - TIMER1A ].WaveGenMode = Copy_u8WGM_Mode ;
    81cc:	8d 81       	ldd	r24, Y+5	; 0x05
    81ce:	80 93 a3 01 	sts	0x01A3, r24
    81d2:	02 c0       	rjmp	.+4      	; 0x81d8 <PWM_enuSetWGM_Mode+0xe8>
			TCCR0 |= ( BIT0_MASK<< WGM20_BIT ) ;						// Setting WGM20 Select bit to 1
			TCCR0 |= (( Local_u8WGM >> BIT0_MASK ) << WGM21_BIT );		// Setting WGM21 Select bit to NEW Waveform Generation Mode
			Timers[ TIMER2 - TIMER0 ].WaveGenMode = Copy_u8WGM_Mode ;
		}
#endif
		else Local_enuErrorState = ES_OUT_RANGE ;
    81d4:	82 e0       	ldi	r24, 0x02	; 2
    81d6:	8b 83       	std	Y+3, r24	; 0x03

		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    81d8:	e9 e5       	ldi	r30, 0x59	; 89
    81da:	f0 e0       	ldi	r31, 0x00	; 0
    81dc:	8a 81       	ldd	r24, Y+2	; 0x02
    81de:	80 83       	st	Z, r24
    81e0:	02 c0       	rjmp	.+4      	; 0x81e6 <PWM_enuSetWGM_Mode+0xf6>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    81e2:	82 e0       	ldi	r24, 0x02	; 2
    81e4:	8b 83       	std	Y+3, r24	; 0x03

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    81e6:	8b 81       	ldd	r24, Y+3	; 0x03
    81e8:	81 30       	cpi	r24, 0x01	; 1
    81ea:	19 f0       	breq	.+6      	; 0x81f2 <PWM_enuSetWGM_Mode+0x102>
    81ec:	8b 81       	ldd	r24, Y+3	; 0x03
    81ee:	8e 83       	std	Y+6, r24	; 0x06
    81f0:	01 c0       	rjmp	.+2      	; 0x81f4 <PWM_enuSetWGM_Mode+0x104>
    81f2:	1e 82       	std	Y+6, r1	; 0x06
    81f4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    81f6:	26 96       	adiw	r28, 0x06	; 6
    81f8:	0f b6       	in	r0, 0x3f	; 63
    81fa:	f8 94       	cli
    81fc:	de bf       	out	0x3e, r29	; 62
    81fe:	0f be       	out	0x3f, r0	; 63
    8200:	cd bf       	out	0x3d, r28	; 61
    8202:	cf 91       	pop	r28
    8204:	df 91       	pop	r29
    8206:	08 95       	ret

00008208 <PWM_enuGetWGM_Mode>:

ES_t PWM_enuGetWGM_Mode( u8 Copy_u8TimerNum , u8 *Copy_pu8TimerWGM_Mode)
{
    8208:	df 93       	push	r29
    820a:	cf 93       	push	r28
    820c:	00 d0       	rcall	.+0      	; 0x820e <PWM_enuGetWGM_Mode+0x6>
    820e:	00 d0       	rcall	.+0      	; 0x8210 <PWM_enuGetWGM_Mode+0x8>
    8210:	0f 92       	push	r0
    8212:	cd b7       	in	r28, 0x3d	; 61
    8214:	de b7       	in	r29, 0x3e	; 62
    8216:	8b 83       	std	Y+3, r24	; 0x03
    8218:	7d 83       	std	Y+5, r23	; 0x05
    821a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_OUT_RANGE ;
    821c:	82 e0       	ldi	r24, 0x02	; 2
    821e:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    8220:	19 82       	std	Y+1, r1	; 0x01
    8222:	26 c0       	rjmp	.+76     	; 0x8270 <PWM_enuGetWGM_Mode+0x68>
	{
		if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    8224:	89 81       	ldd	r24, Y+1	; 0x01
    8226:	28 2f       	mov	r18, r24
    8228:	30 e0       	ldi	r19, 0x00	; 0
    822a:	c9 01       	movw	r24, r18
    822c:	88 0f       	add	r24, r24
    822e:	99 1f       	adc	r25, r25
    8230:	88 0f       	add	r24, r24
    8232:	99 1f       	adc	r25, r25
    8234:	82 0f       	add	r24, r18
    8236:	93 1f       	adc	r25, r19
    8238:	fc 01       	movw	r30, r24
    823a:	e5 56       	subi	r30, 0x65	; 101
    823c:	fe 4f       	sbci	r31, 0xFE	; 254
    823e:	90 81       	ld	r25, Z
    8240:	8b 81       	ldd	r24, Y+3	; 0x03
    8242:	98 17       	cp	r25, r24
    8244:	91 f4       	brne	.+36     	; 0x826a <PWM_enuGetWGM_Mode+0x62>
		{
			*Copy_pu8TimerWGM_Mode = PWMs[Local_u8Iter].WaveGenMode;
    8246:	89 81       	ldd	r24, Y+1	; 0x01
    8248:	28 2f       	mov	r18, r24
    824a:	30 e0       	ldi	r19, 0x00	; 0
    824c:	c9 01       	movw	r24, r18
    824e:	88 0f       	add	r24, r24
    8250:	99 1f       	adc	r25, r25
    8252:	88 0f       	add	r24, r24
    8254:	99 1f       	adc	r25, r25
    8256:	82 0f       	add	r24, r18
    8258:	93 1f       	adc	r25, r19
    825a:	fc 01       	movw	r30, r24
    825c:	e2 56       	subi	r30, 0x62	; 98
    825e:	fe 4f       	sbci	r31, 0xFE	; 254
    8260:	80 81       	ld	r24, Z
    8262:	ec 81       	ldd	r30, Y+4	; 0x04
    8264:	fd 81       	ldd	r31, Y+5	; 0x05
    8266:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK ;
    8268:	1a 82       	std	Y+2, r1	; 0x02

ES_t PWM_enuGetWGM_Mode( u8 Copy_u8TimerNum , u8 *Copy_pu8TimerWGM_Mode)
{
	ES_t Local_enuErrorState = ES_OUT_RANGE ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    826a:	89 81       	ldd	r24, Y+1	; 0x01
    826c:	8f 5f       	subi	r24, 0xFF	; 255
    826e:	89 83       	std	Y+1, r24	; 0x01
    8270:	90 91 98 01 	lds	r25, 0x0198
    8274:	89 81       	ldd	r24, Y+1	; 0x01
    8276:	89 17       	cp	r24, r25
    8278:	a8 f2       	brcs	.-86     	; 0x8224 <PWM_enuGetWGM_Mode+0x1c>
		{
			*Copy_pu8TimerWGM_Mode = PWMs[Local_u8Iter].WaveGenMode;
			Local_enuErrorState = ES_OK ;
		}
	}
	return Local_enuErrorState ;
    827a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    827c:	0f 90       	pop	r0
    827e:	0f 90       	pop	r0
    8280:	0f 90       	pop	r0
    8282:	0f 90       	pop	r0
    8284:	0f 90       	pop	r0
    8286:	cf 91       	pop	r28
    8288:	df 91       	pop	r29
    828a:	08 95       	ret

0000828c <PWM_enuSetOCRnValue>:

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
*/
ES_t PWM_enuSetOCRnValue( u8 Copy_u8TimerNum , u16 Copy_u16OCRnValue )
{
    828c:	df 93       	push	r29
    828e:	cf 93       	push	r28
    8290:	cd b7       	in	r28, 0x3d	; 61
    8292:	de b7       	in	r29, 0x3e	; 62
    8294:	27 97       	sbiw	r28, 0x07	; 7
    8296:	0f b6       	in	r0, 0x3f	; 63
    8298:	f8 94       	cli
    829a:	de bf       	out	0x3e, r29	; 62
    829c:	0f be       	out	0x3f, r0	; 63
    829e:	cd bf       	out	0x3d, r28	; 61
    82a0:	8c 83       	std	Y+4, r24	; 0x04
    82a2:	7e 83       	std	Y+6, r23	; 0x06
    82a4:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK ;
    82a6:	81 e0       	ldi	r24, 0x01	; 1
    82a8:	8b 83       	std	Y+3, r24	; 0x03
		OCR0 = Copy_u16OCRnValue ;
		Global_u8OCR0_Value = OCR0 ;
	}
	else
#endif
	if( Copy_u8TimerNum == TIMER1A && Copy_u16OCRnValue <= Timer1Max )
    82aa:	8c 81       	ldd	r24, Y+4	; 0x04
    82ac:	89 3c       	cpi	r24, 0xC9	; 201
    82ae:	21 f5       	brne	.+72     	; 0x82f8 <PWM_enuSetOCRnValue+0x6c>
    82b0:	20 91 99 01 	lds	r18, 0x0199
    82b4:	30 91 9a 01 	lds	r19, 0x019A
    82b8:	8d 81       	ldd	r24, Y+5	; 0x05
    82ba:	9e 81       	ldd	r25, Y+6	; 0x06
    82bc:	28 17       	cp	r18, r24
    82be:	39 07       	cpc	r19, r25
    82c0:	d8 f0       	brcs	.+54     	; 0x82f8 <PWM_enuSetOCRnValue+0x6c>
	{
		u8 Local_u8Temp = SREG ;
    82c2:	ef e5       	ldi	r30, 0x5F	; 95
    82c4:	f0 e0       	ldi	r31, 0x00	; 0
    82c6:	80 81       	ld	r24, Z
    82c8:	8a 83       	std	Y+2, r24	; 0x02
		asm( "CLI" );
    82ca:	f8 94       	cli
		OCR1AH  = Copy_u16OCRnValue >> 8 ;
    82cc:	eb e4       	ldi	r30, 0x4B	; 75
    82ce:	f0 e0       	ldi	r31, 0x00	; 0
    82d0:	8d 81       	ldd	r24, Y+5	; 0x05
    82d2:	9e 81       	ldd	r25, Y+6	; 0x06
    82d4:	89 2f       	mov	r24, r25
    82d6:	99 27       	eor	r25, r25
    82d8:	80 83       	st	Z, r24
		OCR1AL 	= Copy_u16OCRnValue ;
    82da:	ea e4       	ldi	r30, 0x4A	; 74
    82dc:	f0 e0       	ldi	r31, 0x00	; 0
    82de:	8d 81       	ldd	r24, Y+5	; 0x05
    82e0:	80 83       	st	Z, r24
		SREG = Local_u8Temp;
    82e2:	ef e5       	ldi	r30, 0x5F	; 95
    82e4:	f0 e0       	ldi	r31, 0x00	; 0
    82e6:	8a 81       	ldd	r24, Y+2	; 0x02
    82e8:	80 83       	st	Z, r24
		Global_u16OCR1A_Value = Copy_u16OCRnValue ;
    82ea:	8d 81       	ldd	r24, Y+5	; 0x05
    82ec:	9e 81       	ldd	r25, Y+6	; 0x06
    82ee:	90 93 3b 02 	sts	0x023B, r25
    82f2:	80 93 3a 02 	sts	0x023A, r24
    82f6:	29 c0       	rjmp	.+82     	; 0x834a <PWM_enuSetOCRnValue+0xbe>
	}
	else if( Copy_u8TimerNum == TIMER1B && Copy_u16OCRnValue <= Timer1Max )
    82f8:	8c 81       	ldd	r24, Y+4	; 0x04
    82fa:	8a 3c       	cpi	r24, 0xCA	; 202
    82fc:	21 f5       	brne	.+72     	; 0x8346 <PWM_enuSetOCRnValue+0xba>
    82fe:	20 91 99 01 	lds	r18, 0x0199
    8302:	30 91 9a 01 	lds	r19, 0x019A
    8306:	8d 81       	ldd	r24, Y+5	; 0x05
    8308:	9e 81       	ldd	r25, Y+6	; 0x06
    830a:	28 17       	cp	r18, r24
    830c:	39 07       	cpc	r19, r25
    830e:	d8 f0       	brcs	.+54     	; 0x8346 <PWM_enuSetOCRnValue+0xba>
	{
		u8 Local_u8Temp = SREG ;
    8310:	ef e5       	ldi	r30, 0x5F	; 95
    8312:	f0 e0       	ldi	r31, 0x00	; 0
    8314:	80 81       	ld	r24, Z
    8316:	89 83       	std	Y+1, r24	; 0x01
		asm( "CLI" );
    8318:	f8 94       	cli
		OCR1BH  = Copy_u16OCRnValue >> 8 ;
    831a:	e9 e4       	ldi	r30, 0x49	; 73
    831c:	f0 e0       	ldi	r31, 0x00	; 0
    831e:	8d 81       	ldd	r24, Y+5	; 0x05
    8320:	9e 81       	ldd	r25, Y+6	; 0x06
    8322:	89 2f       	mov	r24, r25
    8324:	99 27       	eor	r25, r25
    8326:	80 83       	st	Z, r24
		OCR1BL 	= Copy_u16OCRnValue ;
    8328:	e8 e4       	ldi	r30, 0x48	; 72
    832a:	f0 e0       	ldi	r31, 0x00	; 0
    832c:	8d 81       	ldd	r24, Y+5	; 0x05
    832e:	80 83       	st	Z, r24
		SREG = Local_u8Temp;
    8330:	ef e5       	ldi	r30, 0x5F	; 95
    8332:	f0 e0       	ldi	r31, 0x00	; 0
    8334:	89 81       	ldd	r24, Y+1	; 0x01
    8336:	80 83       	st	Z, r24
		Global_u16OCR1B_Value = Copy_u16OCRnValue ;
    8338:	8d 81       	ldd	r24, Y+5	; 0x05
    833a:	9e 81       	ldd	r25, Y+6	; 0x06
    833c:	90 93 3d 02 	sts	0x023D, r25
    8340:	80 93 3c 02 	sts	0x023C, r24
    8344:	02 c0       	rjmp	.+4      	; 0x834a <PWM_enuSetOCRnValue+0xbe>
	{
		OCR2 = Copy_u16OCRnValue ;
		Global_u8OCR2_Value = OCR2 ;
	}
#endif
	else Local_enuErrorState = ES_OUT_RANGE ;
    8346:	82 e0       	ldi	r24, 0x02	; 2
    8348:	8b 83       	std	Y+3, r24	; 0x03

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    834a:	8b 81       	ldd	r24, Y+3	; 0x03
    834c:	81 30       	cpi	r24, 0x01	; 1
    834e:	19 f0       	breq	.+6      	; 0x8356 <PWM_enuSetOCRnValue+0xca>
    8350:	8b 81       	ldd	r24, Y+3	; 0x03
    8352:	8f 83       	std	Y+7, r24	; 0x07
    8354:	01 c0       	rjmp	.+2      	; 0x8358 <PWM_enuSetOCRnValue+0xcc>
    8356:	1f 82       	std	Y+7, r1	; 0x07
    8358:	8f 81       	ldd	r24, Y+7	; 0x07
}
    835a:	27 96       	adiw	r28, 0x07	; 7
    835c:	0f b6       	in	r0, 0x3f	; 63
    835e:	f8 94       	cli
    8360:	de bf       	out	0x3e, r29	; 62
    8362:	0f be       	out	0x3f, r0	; 63
    8364:	cd bf       	out	0x3d, r28	; 61
    8366:	cf 91       	pop	r28
    8368:	df 91       	pop	r29
    836a:	08 95       	ret

0000836c <PWM_enuReadOCRnValue>:

ES_t PWM_enuReadOCRnValue( u8 Copy_u8TimerNum , void *Copy_pCounterValue )
{
    836c:	df 93       	push	r29
    836e:	cf 93       	push	r28
    8370:	00 d0       	rcall	.+0      	; 0x8372 <PWM_enuReadOCRnValue+0x6>
    8372:	00 d0       	rcall	.+0      	; 0x8374 <PWM_enuReadOCRnValue+0x8>
    8374:	0f 92       	push	r0
    8376:	cd b7       	in	r28, 0x3d	; 61
    8378:	de b7       	in	r29, 0x3e	; 62
    837a:	8a 83       	std	Y+2, r24	; 0x02
    837c:	7c 83       	std	Y+4, r23	; 0x04
    837e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    8380:	81 e0       	ldi	r24, 0x01	; 1
    8382:	89 83       	std	Y+1, r24	; 0x01
		{
			*( (u8 *)Copy_pCounterValue ) = Global_u8OCR0_Value ;
		}
		else
#endif
		if( Copy_u8TimerNum == TIMER1A )
    8384:	8a 81       	ldd	r24, Y+2	; 0x02
    8386:	89 3c       	cpi	r24, 0xC9	; 201
    8388:	49 f4       	brne	.+18     	; 0x839c <PWM_enuReadOCRnValue+0x30>
		{
			*( (u16 *)Copy_pCounterValue ) = Global_u16OCR1A_Value ;
    838a:	eb 81       	ldd	r30, Y+3	; 0x03
    838c:	fc 81       	ldd	r31, Y+4	; 0x04
    838e:	80 91 3a 02 	lds	r24, 0x023A
    8392:	90 91 3b 02 	lds	r25, 0x023B
    8396:	91 83       	std	Z+1, r25	; 0x01
    8398:	80 83       	st	Z, r24
    839a:	0e c0       	rjmp	.+28     	; 0x83b8 <PWM_enuReadOCRnValue+0x4c>
		}
		else if( Copy_u8TimerNum == TIMER1B )
    839c:	8a 81       	ldd	r24, Y+2	; 0x02
    839e:	8a 3c       	cpi	r24, 0xCA	; 202
    83a0:	49 f4       	brne	.+18     	; 0x83b4 <PWM_enuReadOCRnValue+0x48>
		{
			*( (u16 *)Copy_pCounterValue ) = Global_u16OCR1B_Value ;
    83a2:	eb 81       	ldd	r30, Y+3	; 0x03
    83a4:	fc 81       	ldd	r31, Y+4	; 0x04
    83a6:	80 91 3c 02 	lds	r24, 0x023C
    83aa:	90 91 3d 02 	lds	r25, 0x023D
    83ae:	91 83       	std	Z+1, r25	; 0x01
    83b0:	80 83       	st	Z, r24
    83b2:	02 c0       	rjmp	.+4      	; 0x83b8 <PWM_enuReadOCRnValue+0x4c>
		else if( Copy_u8TimerNum == TIMER2 )
		{
			*( (u8 *)Copy_pCounterValue ) = Global_u8OCR2_Value ;
		}
#endif
		else Local_enuErrorState = ES_OUT_RANGE ;
    83b4:	82 e0       	ldi	r24, 0x02	; 2
    83b6:	89 83       	std	Y+1, r24	; 0x01

		return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    83b8:	89 81       	ldd	r24, Y+1	; 0x01
    83ba:	81 30       	cpi	r24, 0x01	; 1
    83bc:	19 f0       	breq	.+6      	; 0x83c4 <PWM_enuReadOCRnValue+0x58>
    83be:	89 81       	ldd	r24, Y+1	; 0x01
    83c0:	8d 83       	std	Y+5, r24	; 0x05
    83c2:	01 c0       	rjmp	.+2      	; 0x83c6 <PWM_enuReadOCRnValue+0x5a>
    83c4:	1d 82       	std	Y+5, r1	; 0x05
    83c6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    83c8:	0f 90       	pop	r0
    83ca:	0f 90       	pop	r0
    83cc:	0f 90       	pop	r0
    83ce:	0f 90       	pop	r0
    83d0:	0f 90       	pop	r0
    83d2:	cf 91       	pop	r28
    83d4:	df 91       	pop	r29
    83d6:	08 95       	ret

000083d8 <PWM_enuSetICR1Value>:

ES_t PWM_enuSetICR1Value( u16 Copy_u16ICR1Value )
{
    83d8:	df 93       	push	r29
    83da:	cf 93       	push	r28
    83dc:	00 d0       	rcall	.+0      	; 0x83de <PWM_enuSetICR1Value+0x6>
    83de:	0f 92       	push	r0
    83e0:	cd b7       	in	r28, 0x3d	; 61
    83e2:	de b7       	in	r29, 0x3e	; 62
    83e4:	9b 83       	std	Y+3, r25	; 0x03
    83e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Temp = SREG ;
    83e8:	ef e5       	ldi	r30, 0x5F	; 95
    83ea:	f0 e0       	ldi	r31, 0x00	; 0
    83ec:	80 81       	ld	r24, Z
    83ee:	89 83       	std	Y+1, r24	; 0x01
	asm( "CLI" );
    83f0:	f8 94       	cli
	ICR1H = Copy_u16ICR1Value >> 8 ;
    83f2:	e7 e4       	ldi	r30, 0x47	; 71
    83f4:	f0 e0       	ldi	r31, 0x00	; 0
    83f6:	8a 81       	ldd	r24, Y+2	; 0x02
    83f8:	9b 81       	ldd	r25, Y+3	; 0x03
    83fa:	89 2f       	mov	r24, r25
    83fc:	99 27       	eor	r25, r25
    83fe:	80 83       	st	Z, r24
	ICR1L = Copy_u16ICR1Value ;
    8400:	e6 e4       	ldi	r30, 0x46	; 70
    8402:	f0 e0       	ldi	r31, 0x00	; 0
    8404:	8a 81       	ldd	r24, Y+2	; 0x02
    8406:	80 83       	st	Z, r24
	SREG = Local_u8Temp;
    8408:	ef e5       	ldi	r30, 0x5F	; 95
    840a:	f0 e0       	ldi	r31, 0x00	; 0
    840c:	89 81       	ldd	r24, Y+1	; 0x01
    840e:	80 83       	st	Z, r24
	Global_u16ICR1_Value = Copy_u16ICR1Value ;
    8410:	8a 81       	ldd	r24, Y+2	; 0x02
    8412:	9b 81       	ldd	r25, Y+3	; 0x03
    8414:	90 93 3f 02 	sts	0x023F, r25
    8418:	80 93 3e 02 	sts	0x023E, r24
	return ES_OK;
    841c:	80 e0       	ldi	r24, 0x00	; 0
}
    841e:	0f 90       	pop	r0
    8420:	0f 90       	pop	r0
    8422:	0f 90       	pop	r0
    8424:	cf 91       	pop	r28
    8426:	df 91       	pop	r29
    8428:	08 95       	ret

0000842a <PWM_enuSetInterruptMode>:

ES_t PWM_enuSetInterruptMode( u8 Copy_u8TimerNum , u8 Copy_u8TimerInterruptMode )/////////////************************///////////////////////
{
    842a:	df 93       	push	r29
    842c:	cf 93       	push	r28
    842e:	00 d0       	rcall	.+0      	; 0x8430 <PWM_enuSetInterruptMode+0x6>
    8430:	cd b7       	in	r28, 0x3d	; 61
    8432:	de b7       	in	r29, 0x3e	; 62
    8434:	89 83       	std	Y+1, r24	; 0x01
    8436:	6a 83       	std	Y+2, r22	; 0x02
	return ES_OK;
    8438:	80 e0       	ldi	r24, 0x00	; 0
}
    843a:	0f 90       	pop	r0
    843c:	0f 90       	pop	r0
    843e:	cf 91       	pop	r28
    8440:	df 91       	pop	r29
    8442:	08 95       	ret

00008444 <PWM_enuGetInterruptMode>:

ES_t PWM_enuGetInterruptMode( u8 Copy_u8TimerNum , u8 *Copy_pu8TimerInterruptMode )////////////////*****************************//////////////////////
{
    8444:	df 93       	push	r29
    8446:	cf 93       	push	r28
    8448:	00 d0       	rcall	.+0      	; 0x844a <PWM_enuGetInterruptMode+0x6>
    844a:	0f 92       	push	r0
    844c:	cd b7       	in	r28, 0x3d	; 61
    844e:	de b7       	in	r29, 0x3e	; 62
    8450:	89 83       	std	Y+1, r24	; 0x01
    8452:	7b 83       	std	Y+3, r23	; 0x03
    8454:	6a 83       	std	Y+2, r22	; 0x02
	return ES_OK;
    8456:	80 e0       	ldi	r24, 0x00	; 0
}
    8458:	0f 90       	pop	r0
    845a:	0f 90       	pop	r0
    845c:	0f 90       	pop	r0
    845e:	cf 91       	pop	r28
    8460:	df 91       	pop	r29
    8462:	08 95       	ret

00008464 <PWM_enuSetDutyCycle>:

ES_t PWM_enuSetDutyCycle( u8 Copy_u8TimerNum , f32 Copy_f32DutyCycle )//////////***********************************/////////////////////
{
    8464:	df 93       	push	r29
    8466:	cf 93       	push	r28
    8468:	00 d0       	rcall	.+0      	; 0x846a <PWM_enuSetDutyCycle+0x6>
    846a:	00 d0       	rcall	.+0      	; 0x846c <PWM_enuSetDutyCycle+0x8>
    846c:	0f 92       	push	r0
    846e:	cd b7       	in	r28, 0x3d	; 61
    8470:	de b7       	in	r29, 0x3e	; 62
    8472:	89 83       	std	Y+1, r24	; 0x01
    8474:	4a 83       	std	Y+2, r20	; 0x02
    8476:	5b 83       	std	Y+3, r21	; 0x03
    8478:	6c 83       	std	Y+4, r22	; 0x04
    847a:	7d 83       	std	Y+5, r23	; 0x05
	return ES_OK;
    847c:	80 e0       	ldi	r24, 0x00	; 0
}
    847e:	0f 90       	pop	r0
    8480:	0f 90       	pop	r0
    8482:	0f 90       	pop	r0
    8484:	0f 90       	pop	r0
    8486:	0f 90       	pop	r0
    8488:	cf 91       	pop	r28
    848a:	df 91       	pop	r29
    848c:	08 95       	ret

0000848e <PWM_enuInterruptEnable>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

ES_t PWM_enuInterruptEnable( u8 Copy_u8TimerIntName)
{
    848e:	df 93       	push	r29
    8490:	cf 93       	push	r28
    8492:	00 d0       	rcall	.+0      	; 0x8494 <PWM_enuInterruptEnable+0x6>
    8494:	00 d0       	rcall	.+0      	; 0x8496 <PWM_enuInterruptEnable+0x8>
    8496:	0f 92       	push	r0
    8498:	cd b7       	in	r28, 0x3d	; 61
    849a:	de b7       	in	r29, 0x3e	; 62
    849c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    849e:	81 e0       	ldi	r24, 0x01	; 1
    84a0:	89 83       	std	Y+1, r24	; 0x01

	asm(" CLI ") ;														// Disable ALL Interrupts
    84a2:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    84a4:	8a 81       	ldd	r24, Y+2	; 0x02
    84a6:	28 2f       	mov	r18, r24
    84a8:	30 e0       	ldi	r19, 0x00	; 0
    84aa:	3d 83       	std	Y+5, r19	; 0x05
    84ac:	2c 83       	std	Y+4, r18	; 0x04
    84ae:	8c 81       	ldd	r24, Y+4	; 0x04
    84b0:	9d 81       	ldd	r25, Y+5	; 0x05
    84b2:	80 34       	cpi	r24, 0x40	; 64
    84b4:	91 05       	cpc	r25, r1
    84b6:	31 f1       	breq	.+76     	; 0x8504 <PWM_enuInterruptEnable+0x76>
    84b8:	2c 81       	ldd	r18, Y+4	; 0x04
    84ba:	3d 81       	ldd	r19, Y+5	; 0x05
    84bc:	21 34       	cpi	r18, 0x41	; 65
    84be:	31 05       	cpc	r19, r1
    84c0:	5c f4       	brge	.+22     	; 0x84d8 <PWM_enuInterruptEnable+0x4a>
    84c2:	8c 81       	ldd	r24, Y+4	; 0x04
    84c4:	9d 81       	ldd	r25, Y+5	; 0x05
    84c6:	8e 33       	cpi	r24, 0x3E	; 62
    84c8:	91 05       	cpc	r25, r1
    84ca:	61 f0       	breq	.+24     	; 0x84e4 <PWM_enuInterruptEnable+0x56>
    84cc:	2c 81       	ldd	r18, Y+4	; 0x04
    84ce:	3d 81       	ldd	r19, Y+5	; 0x05
    84d0:	2f 33       	cpi	r18, 0x3F	; 63
    84d2:	31 05       	cpc	r19, r1
    84d4:	79 f0       	breq	.+30     	; 0x84f4 <PWM_enuInterruptEnable+0x66>
    84d6:	26 c0       	rjmp	.+76     	; 0x8524 <PWM_enuInterruptEnable+0x96>
    84d8:	8c 81       	ldd	r24, Y+4	; 0x04
    84da:	9d 81       	ldd	r25, Y+5	; 0x05
    84dc:	81 34       	cpi	r24, 0x41	; 65
    84de:	91 05       	cpc	r25, r1
    84e0:	c9 f0       	breq	.+50     	; 0x8514 <PWM_enuInterruptEnable+0x86>
    84e2:	20 c0       	rjmp	.+64     	; 0x8524 <PWM_enuInterruptEnable+0x96>
		case TOIE2	:	TIMSK |= (BIT0_MASK << TOIE2_BIT);
						break;
		case OCIE2	:	TIMSK |= (BIT0_MASK << OCIE2_BIT);
						break;
#endif
		case TOIE1	:	TIMSK |= (BIT0_MASK << TOIE1_BIT);
    84e4:	a9 e5       	ldi	r26, 0x59	; 89
    84e6:	b0 e0       	ldi	r27, 0x00	; 0
    84e8:	e9 e5       	ldi	r30, 0x59	; 89
    84ea:	f0 e0       	ldi	r31, 0x00	; 0
    84ec:	80 81       	ld	r24, Z
    84ee:	84 60       	ori	r24, 0x04	; 4
    84f0:	8c 93       	st	X, r24
    84f2:	1a c0       	rjmp	.+52     	; 0x8528 <PWM_enuInterruptEnable+0x9a>
						break;
		case OCIE1B	:	TIMSK |= (BIT0_MASK << OCIE1B_BIT);
    84f4:	a9 e5       	ldi	r26, 0x59	; 89
    84f6:	b0 e0       	ldi	r27, 0x00	; 0
    84f8:	e9 e5       	ldi	r30, 0x59	; 89
    84fa:	f0 e0       	ldi	r31, 0x00	; 0
    84fc:	80 81       	ld	r24, Z
    84fe:	88 60       	ori	r24, 0x08	; 8
    8500:	8c 93       	st	X, r24
    8502:	12 c0       	rjmp	.+36     	; 0x8528 <PWM_enuInterruptEnable+0x9a>
						break;
		case OCIE1A	:	TIMSK |= (BIT0_MASK << OCIE1A_BIT);
    8504:	a9 e5       	ldi	r26, 0x59	; 89
    8506:	b0 e0       	ldi	r27, 0x00	; 0
    8508:	e9 e5       	ldi	r30, 0x59	; 89
    850a:	f0 e0       	ldi	r31, 0x00	; 0
    850c:	80 81       	ld	r24, Z
    850e:	80 61       	ori	r24, 0x10	; 16
    8510:	8c 93       	st	X, r24
    8512:	0a c0       	rjmp	.+20     	; 0x8528 <PWM_enuInterruptEnable+0x9a>
						break;
		case TICIE1	:	TIMSK |= (BIT0_MASK << TICIE1_BIT);
    8514:	a9 e5       	ldi	r26, 0x59	; 89
    8516:	b0 e0       	ldi	r27, 0x00	; 0
    8518:	e9 e5       	ldi	r30, 0x59	; 89
    851a:	f0 e0       	ldi	r31, 0x00	; 0
    851c:	80 81       	ld	r24, Z
    851e:	80 62       	ori	r24, 0x20	; 32
    8520:	8c 93       	st	X, r24
    8522:	02 c0       	rjmp	.+4      	; 0x8528 <PWM_enuInterruptEnable+0x9a>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    8524:	82 e0       	ldi	r24, 0x02	; 2
    8526:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}
	asm(" SEI ") ;														// Enable ALL Interrupts
    8528:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    852a:	89 81       	ldd	r24, Y+1	; 0x01
    852c:	81 30       	cpi	r24, 0x01	; 1
    852e:	19 f0       	breq	.+6      	; 0x8536 <PWM_enuInterruptEnable+0xa8>
    8530:	99 81       	ldd	r25, Y+1	; 0x01
    8532:	9b 83       	std	Y+3, r25	; 0x03
    8534:	01 c0       	rjmp	.+2      	; 0x8538 <PWM_enuInterruptEnable+0xaa>
    8536:	1b 82       	std	Y+3, r1	; 0x03
    8538:	8b 81       	ldd	r24, Y+3	; 0x03
}
    853a:	0f 90       	pop	r0
    853c:	0f 90       	pop	r0
    853e:	0f 90       	pop	r0
    8540:	0f 90       	pop	r0
    8542:	0f 90       	pop	r0
    8544:	cf 91       	pop	r28
    8546:	df 91       	pop	r29
    8548:	08 95       	ret

0000854a <PWM_enuInterruptDisable>:

ES_t PWM_enuInterruptDisable( u8 Copy_u8TimerIntName)
{
    854a:	df 93       	push	r29
    854c:	cf 93       	push	r28
    854e:	00 d0       	rcall	.+0      	; 0x8550 <PWM_enuInterruptDisable+0x6>
    8550:	00 d0       	rcall	.+0      	; 0x8552 <PWM_enuInterruptDisable+0x8>
    8552:	0f 92       	push	r0
    8554:	cd b7       	in	r28, 0x3d	; 61
    8556:	de b7       	in	r29, 0x3e	; 62
    8558:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    855a:	81 e0       	ldi	r24, 0x01	; 1
    855c:	89 83       	std	Y+1, r24	; 0x01

	asm(" CLI ") ;														// Disable ALL Interrupts
    855e:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    8560:	8a 81       	ldd	r24, Y+2	; 0x02
    8562:	28 2f       	mov	r18, r24
    8564:	30 e0       	ldi	r19, 0x00	; 0
    8566:	3d 83       	std	Y+5, r19	; 0x05
    8568:	2c 83       	std	Y+4, r18	; 0x04
    856a:	8c 81       	ldd	r24, Y+4	; 0x04
    856c:	9d 81       	ldd	r25, Y+5	; 0x05
    856e:	80 34       	cpi	r24, 0x40	; 64
    8570:	91 05       	cpc	r25, r1
    8572:	31 f1       	breq	.+76     	; 0x85c0 <PWM_enuInterruptDisable+0x76>
    8574:	2c 81       	ldd	r18, Y+4	; 0x04
    8576:	3d 81       	ldd	r19, Y+5	; 0x05
    8578:	21 34       	cpi	r18, 0x41	; 65
    857a:	31 05       	cpc	r19, r1
    857c:	5c f4       	brge	.+22     	; 0x8594 <PWM_enuInterruptDisable+0x4a>
    857e:	8c 81       	ldd	r24, Y+4	; 0x04
    8580:	9d 81       	ldd	r25, Y+5	; 0x05
    8582:	8e 33       	cpi	r24, 0x3E	; 62
    8584:	91 05       	cpc	r25, r1
    8586:	61 f0       	breq	.+24     	; 0x85a0 <PWM_enuInterruptDisable+0x56>
    8588:	2c 81       	ldd	r18, Y+4	; 0x04
    858a:	3d 81       	ldd	r19, Y+5	; 0x05
    858c:	2f 33       	cpi	r18, 0x3F	; 63
    858e:	31 05       	cpc	r19, r1
    8590:	79 f0       	breq	.+30     	; 0x85b0 <PWM_enuInterruptDisable+0x66>
    8592:	26 c0       	rjmp	.+76     	; 0x85e0 <PWM_enuInterruptDisable+0x96>
    8594:	8c 81       	ldd	r24, Y+4	; 0x04
    8596:	9d 81       	ldd	r25, Y+5	; 0x05
    8598:	81 34       	cpi	r24, 0x41	; 65
    859a:	91 05       	cpc	r25, r1
    859c:	c9 f0       	breq	.+50     	; 0x85d0 <PWM_enuInterruptDisable+0x86>
    859e:	20 c0       	rjmp	.+64     	; 0x85e0 <PWM_enuInterruptDisable+0x96>
		case TOIE2	:	TIMSK &= ~(BIT0_MASK << TOIE2_BIT);
						break;
		case OCIE2	:	TIMSK &= ~(BIT0_MASK << OCIE2_BIT);
						break;
#endif
		case TOIE1	:	TIMSK &= ~(BIT0_MASK << TOIE1_BIT);
    85a0:	a9 e5       	ldi	r26, 0x59	; 89
    85a2:	b0 e0       	ldi	r27, 0x00	; 0
    85a4:	e9 e5       	ldi	r30, 0x59	; 89
    85a6:	f0 e0       	ldi	r31, 0x00	; 0
    85a8:	80 81       	ld	r24, Z
    85aa:	8b 7f       	andi	r24, 0xFB	; 251
    85ac:	8c 93       	st	X, r24
    85ae:	1a c0       	rjmp	.+52     	; 0x85e4 <PWM_enuInterruptDisable+0x9a>
						break;
		case OCIE1B	:	TIMSK &= ~(BIT0_MASK << OCIE1B_BIT);
    85b0:	a9 e5       	ldi	r26, 0x59	; 89
    85b2:	b0 e0       	ldi	r27, 0x00	; 0
    85b4:	e9 e5       	ldi	r30, 0x59	; 89
    85b6:	f0 e0       	ldi	r31, 0x00	; 0
    85b8:	80 81       	ld	r24, Z
    85ba:	87 7f       	andi	r24, 0xF7	; 247
    85bc:	8c 93       	st	X, r24
    85be:	12 c0       	rjmp	.+36     	; 0x85e4 <PWM_enuInterruptDisable+0x9a>
						break;
		case OCIE1A	:	TIMSK &= ~(BIT0_MASK << OCIE1A_BIT);
    85c0:	a9 e5       	ldi	r26, 0x59	; 89
    85c2:	b0 e0       	ldi	r27, 0x00	; 0
    85c4:	e9 e5       	ldi	r30, 0x59	; 89
    85c6:	f0 e0       	ldi	r31, 0x00	; 0
    85c8:	80 81       	ld	r24, Z
    85ca:	8f 7e       	andi	r24, 0xEF	; 239
    85cc:	8c 93       	st	X, r24
    85ce:	0a c0       	rjmp	.+20     	; 0x85e4 <PWM_enuInterruptDisable+0x9a>
						break;
		case TICIE1	:	TIMSK &= ~(BIT0_MASK << TICIE1_BIT);
    85d0:	a9 e5       	ldi	r26, 0x59	; 89
    85d2:	b0 e0       	ldi	r27, 0x00	; 0
    85d4:	e9 e5       	ldi	r30, 0x59	; 89
    85d6:	f0 e0       	ldi	r31, 0x00	; 0
    85d8:	80 81       	ld	r24, Z
    85da:	8f 7d       	andi	r24, 0xDF	; 223
    85dc:	8c 93       	st	X, r24
    85de:	02 c0       	rjmp	.+4      	; 0x85e4 <PWM_enuInterruptDisable+0x9a>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    85e0:	82 e0       	ldi	r24, 0x02	; 2
    85e2:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}

	asm(" SEI ") ;														// Re-Enable ALL Interrupts
    85e4:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    85e6:	89 81       	ldd	r24, Y+1	; 0x01
    85e8:	81 30       	cpi	r24, 0x01	; 1
    85ea:	19 f0       	breq	.+6      	; 0x85f2 <PWM_enuInterruptDisable+0xa8>
    85ec:	99 81       	ldd	r25, Y+1	; 0x01
    85ee:	9b 83       	std	Y+3, r25	; 0x03
    85f0:	01 c0       	rjmp	.+2      	; 0x85f4 <PWM_enuInterruptDisable+0xaa>
    85f2:	1b 82       	std	Y+3, r1	; 0x03
    85f4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    85f6:	0f 90       	pop	r0
    85f8:	0f 90       	pop	r0
    85fa:	0f 90       	pop	r0
    85fc:	0f 90       	pop	r0
    85fe:	0f 90       	pop	r0
    8600:	cf 91       	pop	r28
    8602:	df 91       	pop	r29
    8604:	08 95       	ret

00008606 <PWM_IsInterruptEnabled>:

bool PWM_IsInterruptEnabled( u8 Copy_u8TimerIntName )
{
    8606:	df 93       	push	r29
    8608:	cf 93       	push	r28
    860a:	00 d0       	rcall	.+0      	; 0x860c <PWM_IsInterruptEnabled+0x6>
    860c:	00 d0       	rcall	.+0      	; 0x860e <PWM_IsInterruptEnabled+0x8>
    860e:	0f 92       	push	r0
    8610:	cd b7       	in	r28, 0x3d	; 61
    8612:	de b7       	in	r29, 0x3e	; 62
    8614:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Status = 0 ;
    8616:	19 82       	std	Y+1, r1	; 0x01

	switch ( Copy_u8TimerIntName )
    8618:	8a 81       	ldd	r24, Y+2	; 0x02
    861a:	28 2f       	mov	r18, r24
    861c:	30 e0       	ldi	r19, 0x00	; 0
    861e:	3d 83       	std	Y+5, r19	; 0x05
    8620:	2c 83       	std	Y+4, r18	; 0x04
    8622:	8c 81       	ldd	r24, Y+4	; 0x04
    8624:	9d 81       	ldd	r25, Y+5	; 0x05
    8626:	80 34       	cpi	r24, 0x40	; 64
    8628:	91 05       	cpc	r25, r1
    862a:	69 f1       	breq	.+90     	; 0x8686 <PWM_IsInterruptEnabled+0x80>
    862c:	2c 81       	ldd	r18, Y+4	; 0x04
    862e:	3d 81       	ldd	r19, Y+5	; 0x05
    8630:	21 34       	cpi	r18, 0x41	; 65
    8632:	31 05       	cpc	r19, r1
    8634:	5c f4       	brge	.+22     	; 0x864c <PWM_IsInterruptEnabled+0x46>
    8636:	8c 81       	ldd	r24, Y+4	; 0x04
    8638:	9d 81       	ldd	r25, Y+5	; 0x05
    863a:	8e 33       	cpi	r24, 0x3E	; 62
    863c:	91 05       	cpc	r25, r1
    863e:	61 f0       	breq	.+24     	; 0x8658 <PWM_IsInterruptEnabled+0x52>
    8640:	2c 81       	ldd	r18, Y+4	; 0x04
    8642:	3d 81       	ldd	r19, Y+5	; 0x05
    8644:	2f 33       	cpi	r18, 0x3F	; 63
    8646:	31 05       	cpc	r19, r1
    8648:	91 f0       	breq	.+36     	; 0x866e <PWM_IsInterruptEnabled+0x68>
    864a:	33 c0       	rjmp	.+102    	; 0x86b2 <PWM_IsInterruptEnabled+0xac>
    864c:	8c 81       	ldd	r24, Y+4	; 0x04
    864e:	9d 81       	ldd	r25, Y+5	; 0x05
    8650:	81 34       	cpi	r24, 0x41	; 65
    8652:	91 05       	cpc	r25, r1
    8654:	19 f1       	breq	.+70     	; 0x869c <PWM_IsInterruptEnabled+0x96>
    8656:	2d c0       	rjmp	.+90     	; 0x86b2 <PWM_IsInterruptEnabled+0xac>
						break;
		case OCIE2	:	Local_u8Status |= ( (TIMSK >> OCIE2_BIT) & BIT0_MASK );
						break;

#endif
		case TOIE1	:	Local_u8Status |= ( (TIMSK >> TOIE1_BIT) & BIT0_MASK );
    8658:	e9 e5       	ldi	r30, 0x59	; 89
    865a:	f0 e0       	ldi	r31, 0x00	; 0
    865c:	80 81       	ld	r24, Z
    865e:	86 95       	lsr	r24
    8660:	86 95       	lsr	r24
    8662:	98 2f       	mov	r25, r24
    8664:	91 70       	andi	r25, 0x01	; 1
    8666:	89 81       	ldd	r24, Y+1	; 0x01
    8668:	89 2b       	or	r24, r25
    866a:	89 83       	std	Y+1, r24	; 0x01
    866c:	22 c0       	rjmp	.+68     	; 0x86b2 <PWM_IsInterruptEnabled+0xac>
						break;
		case OCIE1B	:	Local_u8Status |= ( (TIMSK >> OCIE1B_BIT) & BIT0_MASK );
    866e:	e9 e5       	ldi	r30, 0x59	; 89
    8670:	f0 e0       	ldi	r31, 0x00	; 0
    8672:	80 81       	ld	r24, Z
    8674:	86 95       	lsr	r24
    8676:	86 95       	lsr	r24
    8678:	86 95       	lsr	r24
    867a:	98 2f       	mov	r25, r24
    867c:	91 70       	andi	r25, 0x01	; 1
    867e:	89 81       	ldd	r24, Y+1	; 0x01
    8680:	89 2b       	or	r24, r25
    8682:	89 83       	std	Y+1, r24	; 0x01
    8684:	16 c0       	rjmp	.+44     	; 0x86b2 <PWM_IsInterruptEnabled+0xac>
						break;
		case OCIE1A	:	Local_u8Status |= ( (TIMSK >> OCIE1A_BIT) & BIT0_MASK );
    8686:	e9 e5       	ldi	r30, 0x59	; 89
    8688:	f0 e0       	ldi	r31, 0x00	; 0
    868a:	80 81       	ld	r24, Z
    868c:	82 95       	swap	r24
    868e:	8f 70       	andi	r24, 0x0F	; 15
    8690:	98 2f       	mov	r25, r24
    8692:	91 70       	andi	r25, 0x01	; 1
    8694:	89 81       	ldd	r24, Y+1	; 0x01
    8696:	89 2b       	or	r24, r25
    8698:	89 83       	std	Y+1, r24	; 0x01
    869a:	0b c0       	rjmp	.+22     	; 0x86b2 <PWM_IsInterruptEnabled+0xac>
						break;
		case TICIE1	:	Local_u8Status |= ( (TIMSK >> TICIE1_BIT) & BIT0_MASK );
    869c:	e9 e5       	ldi	r30, 0x59	; 89
    869e:	f0 e0       	ldi	r31, 0x00	; 0
    86a0:	80 81       	ld	r24, Z
    86a2:	82 95       	swap	r24
    86a4:	86 95       	lsr	r24
    86a6:	87 70       	andi	r24, 0x07	; 7
    86a8:	98 2f       	mov	r25, r24
    86aa:	91 70       	andi	r25, 0x01	; 1
    86ac:	89 81       	ldd	r24, Y+1	; 0x01
    86ae:	89 2b       	or	r24, r25
    86b0:	89 83       	std	Y+1, r24	; 0x01
						break;
	}
	return ( ( Local_u8Status )? TRUE : FALSE ) ;
    86b2:	1b 82       	std	Y+3, r1	; 0x03
    86b4:	89 81       	ldd	r24, Y+1	; 0x01
    86b6:	88 23       	and	r24, r24
    86b8:	11 f4       	brne	.+4      	; 0x86be <PWM_IsInterruptEnabled+0xb8>
    86ba:	91 e0       	ldi	r25, 0x01	; 1
    86bc:	9b 83       	std	Y+3, r25	; 0x03
    86be:	8b 81       	ldd	r24, Y+3	; 0x03
}
    86c0:	0f 90       	pop	r0
    86c2:	0f 90       	pop	r0
    86c4:	0f 90       	pop	r0
    86c6:	0f 90       	pop	r0
    86c8:	0f 90       	pop	r0
    86ca:	cf 91       	pop	r28
    86cc:	df 91       	pop	r29
    86ce:	08 95       	ret

000086d0 <PWM_enuCallBack>:


ES_t PWM_enuCallBack( u8 Copy_u8TimerIntName , void (*Copy_pAppFun)(void*) , void *Copy_pAppVar)
{
    86d0:	df 93       	push	r29
    86d2:	cf 93       	push	r28
    86d4:	cd b7       	in	r28, 0x3d	; 61
    86d6:	de b7       	in	r29, 0x3e	; 62
    86d8:	28 97       	sbiw	r28, 0x08	; 8
    86da:	0f b6       	in	r0, 0x3f	; 63
    86dc:	f8 94       	cli
    86de:	de bf       	out	0x3e, r29	; 62
    86e0:	0f be       	out	0x3f, r0	; 63
    86e2:	cd bf       	out	0x3d, r28	; 61
    86e4:	8c 83       	std	Y+4, r24	; 0x04
    86e6:	7e 83       	std	Y+6, r23	; 0x06
    86e8:	6d 83       	std	Y+5, r22	; 0x05
    86ea:	58 87       	std	Y+8, r21	; 0x08
    86ec:	4f 83       	std	Y+7, r20	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    86ee:	81 e0       	ldi	r24, 0x01	; 1
    86f0:	8b 83       	std	Y+3, r24	; 0x03

	u8 found = 0 ;
    86f2:	1a 82       	std	Y+2, r1	; 0x02

	if( Copy_pAppFun != NULL )
    86f4:	8d 81       	ldd	r24, Y+5	; 0x05
    86f6:	9e 81       	ldd	r25, Y+6	; 0x06
    86f8:	00 97       	sbiw	r24, 0x00	; 0
    86fa:	09 f4       	brne	.+2      	; 0x86fe <PWM_enuCallBack+0x2e>
    86fc:	44 c0       	rjmp	.+136    	; 0x8786 <PWM_enuCallBack+0xb6>
    86fe:	3a c0       	rjmp	.+116    	; 0x8774 <PWM_enuCallBack+0xa4>
	{
		for( u8 Local_u8Iter; Local_u8Iter < PWM_INTERRUPTS ; Local_u8Iter++ )
		{
			if( Global_AstrPWM_Pointers[Local_u8Iter].InterruptName == Copy_u8TimerIntName )
    8700:	89 81       	ldd	r24, Y+1	; 0x01
    8702:	28 2f       	mov	r18, r24
    8704:	30 e0       	ldi	r19, 0x00	; 0
    8706:	c9 01       	movw	r24, r18
    8708:	88 0f       	add	r24, r24
    870a:	99 1f       	adc	r25, r25
    870c:	88 0f       	add	r24, r24
    870e:	99 1f       	adc	r25, r25
    8710:	82 0f       	add	r24, r18
    8712:	93 1f       	adc	r25, r19
    8714:	fc 01       	movw	r30, r24
    8716:	e1 55       	subi	r30, 0x51	; 81
    8718:	fe 4f       	sbci	r31, 0xFE	; 254
    871a:	90 81       	ld	r25, Z
    871c:	8c 81       	ldd	r24, Y+4	; 0x04
    871e:	98 17       	cp	r25, r24
    8720:	31 f5       	brne	.+76     	; 0x876e <PWM_enuCallBack+0x9e>
			{
				Global_AstrPWM_Pointers[Local_u8Iter].ptrFun = Copy_pAppFun;
    8722:	89 81       	ldd	r24, Y+1	; 0x01
    8724:	28 2f       	mov	r18, r24
    8726:	30 e0       	ldi	r19, 0x00	; 0
    8728:	c9 01       	movw	r24, r18
    872a:	88 0f       	add	r24, r24
    872c:	99 1f       	adc	r25, r25
    872e:	88 0f       	add	r24, r24
    8730:	99 1f       	adc	r25, r25
    8732:	82 0f       	add	r24, r18
    8734:	93 1f       	adc	r25, r19
    8736:	fc 01       	movw	r30, r24
    8738:	ee 54       	subi	r30, 0x4E	; 78
    873a:	fe 4f       	sbci	r31, 0xFE	; 254
    873c:	8d 81       	ldd	r24, Y+5	; 0x05
    873e:	9e 81       	ldd	r25, Y+6	; 0x06
    8740:	91 83       	std	Z+1, r25	; 0x01
    8742:	80 83       	st	Z, r24
				Global_AstrPWM_Pointers[Local_u8Iter].ptrVar = Copy_pAppVar;
    8744:	89 81       	ldd	r24, Y+1	; 0x01
    8746:	28 2f       	mov	r18, r24
    8748:	30 e0       	ldi	r19, 0x00	; 0
    874a:	c9 01       	movw	r24, r18
    874c:	88 0f       	add	r24, r24
    874e:	99 1f       	adc	r25, r25
    8750:	88 0f       	add	r24, r24
    8752:	99 1f       	adc	r25, r25
    8754:	82 0f       	add	r24, r18
    8756:	93 1f       	adc	r25, r19
    8758:	fc 01       	movw	r30, r24
    875a:	e0 55       	subi	r30, 0x50	; 80
    875c:	fe 4f       	sbci	r31, 0xFE	; 254
    875e:	8f 81       	ldd	r24, Y+7	; 0x07
    8760:	98 85       	ldd	r25, Y+8	; 0x08
    8762:	91 83       	std	Z+1, r25	; 0x01
    8764:	80 83       	st	Z, r24
				Local_enuErrorState = ES_OK ;
    8766:	1b 82       	std	Y+3, r1	; 0x03
				found = 1;
    8768:	81 e0       	ldi	r24, 0x01	; 1
    876a:	8a 83       	std	Y+2, r24	; 0x02
    876c:	06 c0       	rjmp	.+12     	; 0x877a <PWM_enuCallBack+0xaa>

	u8 found = 0 ;

	if( Copy_pAppFun != NULL )
	{
		for( u8 Local_u8Iter; Local_u8Iter < PWM_INTERRUPTS ; Local_u8Iter++ )
    876e:	89 81       	ldd	r24, Y+1	; 0x01
    8770:	8f 5f       	subi	r24, 0xFF	; 255
    8772:	89 83       	std	Y+1, r24	; 0x01
    8774:	89 81       	ldd	r24, Y+1	; 0x01
    8776:	83 30       	cpi	r24, 0x03	; 3
    8778:	18 f2       	brcs	.-122    	; 0x8700 <PWM_enuCallBack+0x30>
				Local_enuErrorState = ES_OK ;
				found = 1;
				break;
			}
		}
		if(!found) Local_enuErrorState = ES_OUT_RANGE ;
    877a:	8a 81       	ldd	r24, Y+2	; 0x02
    877c:	88 23       	and	r24, r24
    877e:	29 f4       	brne	.+10     	; 0x878a <PWM_enuCallBack+0xba>
    8780:	82 e0       	ldi	r24, 0x02	; 2
    8782:	8b 83       	std	Y+3, r24	; 0x03
    8784:	02 c0       	rjmp	.+4      	; 0x878a <PWM_enuCallBack+0xba>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    8786:	83 e0       	ldi	r24, 0x03	; 3
    8788:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;
    878a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    878c:	28 96       	adiw	r28, 0x08	; 8
    878e:	0f b6       	in	r0, 0x3f	; 63
    8790:	f8 94       	cli
    8792:	de bf       	out	0x3e, r29	; 62
    8794:	0f be       	out	0x3f, r0	; 63
    8796:	cd bf       	out	0x3d, r28	; 61
    8798:	cf 91       	pop	r28
    879a:	df 91       	pop	r29
    879c:	08 95       	ret

0000879e <__vector_7>:
}

#endif

void __vector_7( void )/*	OCIE1A	*/
{
    879e:	1f 92       	push	r1
    87a0:	0f 92       	push	r0
    87a2:	0f b6       	in	r0, 0x3f	; 63
    87a4:	0f 92       	push	r0
    87a6:	11 24       	eor	r1, r1
    87a8:	2f 93       	push	r18
    87aa:	3f 93       	push	r19
    87ac:	4f 93       	push	r20
    87ae:	5f 93       	push	r21
    87b0:	6f 93       	push	r22
    87b2:	7f 93       	push	r23
    87b4:	8f 93       	push	r24
    87b6:	9f 93       	push	r25
    87b8:	af 93       	push	r26
    87ba:	bf 93       	push	r27
    87bc:	ef 93       	push	r30
    87be:	ff 93       	push	r31
    87c0:	df 93       	push	r29
    87c2:	cf 93       	push	r28
    87c4:	cd b7       	in	r28, 0x3d	; 61
    87c6:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[2].ptrFun != NULL )
    87c8:	80 91 bc 01 	lds	r24, 0x01BC
    87cc:	90 91 bd 01 	lds	r25, 0x01BD
    87d0:	00 97       	sbiw	r24, 0x00	; 0
    87d2:	49 f0       	breq	.+18     	; 0x87e6 <__vector_7+0x48>
	{
		(*Global_AstrPWM_Pointers[2].ptrFun)( Global_AstrPWM_Pointers[2].ptrVar );
    87d4:	e0 91 bc 01 	lds	r30, 0x01BC
    87d8:	f0 91 bd 01 	lds	r31, 0x01BD
    87dc:	80 91 ba 01 	lds	r24, 0x01BA
    87e0:	90 91 bb 01 	lds	r25, 0x01BB
    87e4:	09 95       	icall
	}
}
    87e6:	cf 91       	pop	r28
    87e8:	df 91       	pop	r29
    87ea:	ff 91       	pop	r31
    87ec:	ef 91       	pop	r30
    87ee:	bf 91       	pop	r27
    87f0:	af 91       	pop	r26
    87f2:	9f 91       	pop	r25
    87f4:	8f 91       	pop	r24
    87f6:	7f 91       	pop	r23
    87f8:	6f 91       	pop	r22
    87fa:	5f 91       	pop	r21
    87fc:	4f 91       	pop	r20
    87fe:	3f 91       	pop	r19
    8800:	2f 91       	pop	r18
    8802:	0f 90       	pop	r0
    8804:	0f be       	out	0x3f, r0	; 63
    8806:	0f 90       	pop	r0
    8808:	1f 90       	pop	r1
    880a:	18 95       	reti

0000880c <__vector_8>:
void __vector_8( void )/*	OCIE1B	*/
{
    880c:	1f 92       	push	r1
    880e:	0f 92       	push	r0
    8810:	0f b6       	in	r0, 0x3f	; 63
    8812:	0f 92       	push	r0
    8814:	11 24       	eor	r1, r1
    8816:	2f 93       	push	r18
    8818:	3f 93       	push	r19
    881a:	4f 93       	push	r20
    881c:	5f 93       	push	r21
    881e:	6f 93       	push	r22
    8820:	7f 93       	push	r23
    8822:	8f 93       	push	r24
    8824:	9f 93       	push	r25
    8826:	af 93       	push	r26
    8828:	bf 93       	push	r27
    882a:	ef 93       	push	r30
    882c:	ff 93       	push	r31
    882e:	df 93       	push	r29
    8830:	cf 93       	push	r28
    8832:	cd b7       	in	r28, 0x3d	; 61
    8834:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[1].ptrFun != NULL )
    8836:	80 91 b7 01 	lds	r24, 0x01B7
    883a:	90 91 b8 01 	lds	r25, 0x01B8
    883e:	00 97       	sbiw	r24, 0x00	; 0
    8840:	49 f0       	breq	.+18     	; 0x8854 <__vector_8+0x48>
	{
		(*Global_AstrPWM_Pointers[1].ptrFun)( Global_AstrPWM_Pointers[1].ptrVar );
    8842:	e0 91 b7 01 	lds	r30, 0x01B7
    8846:	f0 91 b8 01 	lds	r31, 0x01B8
    884a:	80 91 b5 01 	lds	r24, 0x01B5
    884e:	90 91 b6 01 	lds	r25, 0x01B6
    8852:	09 95       	icall
	}
}
    8854:	cf 91       	pop	r28
    8856:	df 91       	pop	r29
    8858:	ff 91       	pop	r31
    885a:	ef 91       	pop	r30
    885c:	bf 91       	pop	r27
    885e:	af 91       	pop	r26
    8860:	9f 91       	pop	r25
    8862:	8f 91       	pop	r24
    8864:	7f 91       	pop	r23
    8866:	6f 91       	pop	r22
    8868:	5f 91       	pop	r21
    886a:	4f 91       	pop	r20
    886c:	3f 91       	pop	r19
    886e:	2f 91       	pop	r18
    8870:	0f 90       	pop	r0
    8872:	0f be       	out	0x3f, r0	; 63
    8874:	0f 90       	pop	r0
    8876:	1f 90       	pop	r1
    8878:	18 95       	reti

0000887a <__vector_9>:
void __vector_9( void )/*	TOIE1	*/
{
    887a:	1f 92       	push	r1
    887c:	0f 92       	push	r0
    887e:	0f b6       	in	r0, 0x3f	; 63
    8880:	0f 92       	push	r0
    8882:	11 24       	eor	r1, r1
    8884:	2f 93       	push	r18
    8886:	3f 93       	push	r19
    8888:	4f 93       	push	r20
    888a:	5f 93       	push	r21
    888c:	6f 93       	push	r22
    888e:	7f 93       	push	r23
    8890:	8f 93       	push	r24
    8892:	9f 93       	push	r25
    8894:	af 93       	push	r26
    8896:	bf 93       	push	r27
    8898:	ef 93       	push	r30
    889a:	ff 93       	push	r31
    889c:	df 93       	push	r29
    889e:	cf 93       	push	r28
    88a0:	cd b7       	in	r28, 0x3d	; 61
    88a2:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[0].ptrFun != NULL )
    88a4:	80 91 b2 01 	lds	r24, 0x01B2
    88a8:	90 91 b3 01 	lds	r25, 0x01B3
    88ac:	00 97       	sbiw	r24, 0x00	; 0
    88ae:	49 f0       	breq	.+18     	; 0x88c2 <__vector_9+0x48>
	{
		(*Global_AstrPWM_Pointers[0].ptrFun)( Global_AstrPWM_Pointers[0].ptrVar );
    88b0:	e0 91 b2 01 	lds	r30, 0x01B2
    88b4:	f0 91 b3 01 	lds	r31, 0x01B3
    88b8:	80 91 b0 01 	lds	r24, 0x01B0
    88bc:	90 91 b1 01 	lds	r25, 0x01B1
    88c0:	09 95       	icall
	}
}
    88c2:	cf 91       	pop	r28
    88c4:	df 91       	pop	r29
    88c6:	ff 91       	pop	r31
    88c8:	ef 91       	pop	r30
    88ca:	bf 91       	pop	r27
    88cc:	af 91       	pop	r26
    88ce:	9f 91       	pop	r25
    88d0:	8f 91       	pop	r24
    88d2:	7f 91       	pop	r23
    88d4:	6f 91       	pop	r22
    88d6:	5f 91       	pop	r21
    88d8:	4f 91       	pop	r20
    88da:	3f 91       	pop	r19
    88dc:	2f 91       	pop	r18
    88de:	0f 90       	pop	r0
    88e0:	0f be       	out	0x3f, r0	; 63
    88e2:	0f 90       	pop	r0
    88e4:	1f 90       	pop	r1
    88e6:	18 95       	reti

000088e8 <GIE_enuInit>:

#include "..\..\Libraries\stdTypes.h"
#include "..\..\Libraries\errorState.h"

ES_t GIE_enuInit(void)
{
    88e8:	df 93       	push	r29
    88ea:	cf 93       	push	r28
    88ec:	cd b7       	in	r28, 0x3d	; 61
    88ee:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
    88f0:	f8 94       	cli

	return ES_OK;
    88f2:	80 e0       	ldi	r24, 0x00	; 0
}
    88f4:	cf 91       	pop	r28
    88f6:	df 91       	pop	r29
    88f8:	08 95       	ret

000088fa <GIE_enuEnable>:

ES_t GIE_enuEnable(void)
{
    88fa:	df 93       	push	r29
    88fc:	cf 93       	push	r28
    88fe:	cd b7       	in	r28, 0x3d	; 61
    8900:	de b7       	in	r29, 0x3e	; 62

	asm("SEI");
    8902:	78 94       	sei
	return ES_OK;
    8904:	80 e0       	ldi	r24, 0x00	; 0
}
    8906:	cf 91       	pop	r28
    8908:	df 91       	pop	r29
    890a:	08 95       	ret

0000890c <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
    890c:	df 93       	push	r29
    890e:	cf 93       	push	r28
    8910:	cd b7       	in	r28, 0x3d	; 61
    8912:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
    8914:	f8 94       	cli
	return ES_OK;
    8916:	80 e0       	ldi	r24, 0x00	; 0
}
    8918:	cf 91       	pop	r28
    891a:	df 91       	pop	r29
    891c:	08 95       	ret

0000891e <EXTI_enuInit>:

extern 	EXTI_t EXTI_AstrEXTI_Config[EXTI_NUM] ;


ES_t EXTI_enuInit(void)
{
    891e:	df 93       	push	r29
    8920:	cf 93       	push	r28
    8922:	cd b7       	in	r28, 0x3d	; 61
    8924:	de b7       	in	r29, 0x3e	; 62
    8926:	2e 97       	sbiw	r28, 0x0e	; 14
    8928:	0f b6       	in	r0, 0x3f	; 63
    892a:	f8 94       	cli
    892c:	de bf       	out	0x3e, r29	; 62
    892e:	0f be       	out	0x3f, r0	; 63
    8930:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    8932:	81 e0       	ldi	r24, 0x01	; 1
    8934:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
    8936:	19 82       	std	Y+1, r1	; 0x01
    8938:	93 c1       	rjmp	.+806    	; 0x8c60 <EXTI_enuInit+0x342>
	{
		if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT0 )						/********************************************************************/
    893a:	89 81       	ldd	r24, Y+1	; 0x01
    893c:	28 2f       	mov	r18, r24
    893e:	30 e0       	ldi	r19, 0x00	; 0
    8940:	c9 01       	movw	r24, r18
    8942:	88 0f       	add	r24, r24
    8944:	99 1f       	adc	r25, r25
    8946:	82 0f       	add	r24, r18
    8948:	93 1f       	adc	r25, r19
    894a:	fc 01       	movw	r30, r24
    894c:	ef 53       	subi	r30, 0x3F	; 63
    894e:	fe 4f       	sbci	r31, 0xFE	; 254
    8950:	80 81       	ld	r24, Z
    8952:	8d 33       	cpi	r24, 0x3D	; 61
    8954:	09 f0       	breq	.+2      	; 0x8958 <EXTI_enuInit+0x3a>
    8956:	82 c0       	rjmp	.+260    	; 0x8a5c <EXTI_enuInit+0x13e>
		{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	TWO_BITS_MASK	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
    8958:	a5 e5       	ldi	r26, 0x55	; 85
    895a:	b0 e0       	ldi	r27, 0x00	; 0
    895c:	e5 e5       	ldi	r30, 0x55	; 85
    895e:	f0 e0       	ldi	r31, 0x00	; 0
    8960:	80 81       	ld	r24, Z
    8962:	8c 7f       	andi	r24, 0xFC	; 252
    8964:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
    8966:	89 81       	ldd	r24, Y+1	; 0x01
    8968:	28 2f       	mov	r18, r24
    896a:	30 e0       	ldi	r19, 0x00	; 0
    896c:	c9 01       	movw	r24, r18
    896e:	88 0f       	add	r24, r24
    8970:	99 1f       	adc	r25, r25
    8972:	82 0f       	add	r24, r18
    8974:	93 1f       	adc	r25, r19
    8976:	fc 01       	movw	r30, r24
    8978:	e1 54       	subi	r30, 0x41	; 65
    897a:	fe 4f       	sbci	r31, 0xFE	; 254
    897c:	80 81       	ld	r24, Z
    897e:	28 2f       	mov	r18, r24
    8980:	30 e0       	ldi	r19, 0x00	; 0
    8982:	3e 87       	std	Y+14, r19	; 0x0e
    8984:	2d 87       	std	Y+13, r18	; 0x0d
    8986:	8d 85       	ldd	r24, Y+13	; 0x0d
    8988:	9e 85       	ldd	r25, Y+14	; 0x0e
    898a:	88 33       	cpi	r24, 0x38	; 56
    898c:	91 05       	cpc	r25, r1
    898e:	b1 f0       	breq	.+44     	; 0x89bc <EXTI_enuInit+0x9e>
    8990:	2d 85       	ldd	r18, Y+13	; 0x0d
    8992:	3e 85       	ldd	r19, Y+14	; 0x0e
    8994:	29 33       	cpi	r18, 0x39	; 57
    8996:	31 05       	cpc	r19, r1
    8998:	34 f4       	brge	.+12     	; 0x89a6 <EXTI_enuInit+0x88>
    899a:	8d 85       	ldd	r24, Y+13	; 0x0d
    899c:	9e 85       	ldd	r25, Y+14	; 0x0e
    899e:	87 33       	cpi	r24, 0x37	; 55
    89a0:	91 05       	cpc	r25, r1
    89a2:	31 f1       	breq	.+76     	; 0x89f0 <EXTI_enuInit+0xd2>
    89a4:	23 c0       	rjmp	.+70     	; 0x89ec <EXTI_enuInit+0xce>
    89a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    89a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    89aa:	29 33       	cpi	r18, 0x39	; 57
    89ac:	31 05       	cpc	r19, r1
    89ae:	71 f0       	breq	.+28     	; 0x89cc <EXTI_enuInit+0xae>
    89b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    89b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    89b4:	8a 33       	cpi	r24, 0x3A	; 58
    89b6:	91 05       	cpc	r25, r1
    89b8:	89 f0       	breq	.+34     	; 0x89dc <EXTI_enuInit+0xbe>
    89ba:	18 c0       	rjmp	.+48     	; 0x89ec <EXTI_enuInit+0xce>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC00_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    89bc:	a5 e5       	ldi	r26, 0x55	; 85
    89be:	b0 e0       	ldi	r27, 0x00	; 0
    89c0:	e5 e5       	ldi	r30, 0x55	; 85
    89c2:	f0 e0       	ldi	r31, 0x00	; 0
    89c4:	80 81       	ld	r24, Z
    89c6:	81 60       	ori	r24, 0x01	; 1
    89c8:	8c 93       	st	X, r24
    89ca:	12 c0       	rjmp	.+36     	; 0x89f0 <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC01_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
    89cc:	a5 e5       	ldi	r26, 0x55	; 85
    89ce:	b0 e0       	ldi	r27, 0x00	; 0
    89d0:	e5 e5       	ldi	r30, 0x55	; 85
    89d2:	f0 e0       	ldi	r31, 0x00	; 0
    89d4:	80 81       	ld	r24, Z
    89d6:	82 60       	ori	r24, 0x02	; 2
    89d8:	8c 93       	st	X, r24
    89da:	0a c0       	rjmp	.+20     	; 0x89f0 <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC00_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
    89dc:	a5 e5       	ldi	r26, 0x55	; 85
    89de:	b0 e0       	ldi	r27, 0x00	; 0
    89e0:	e5 e5       	ldi	r30, 0x55	; 85
    89e2:	f0 e0       	ldi	r31, 0x00	; 0
    89e4:	80 81       	ld	r24, Z
    89e6:	83 60       	ori	r24, 0x03	; 3
    89e8:	8c 93       	st	X, r24
    89ea:	02 c0       	rjmp	.+4      	; 0x89f0 <EXTI_enuInit+0xd2>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
    89ec:	82 e0       	ldi	r24, 0x02	; 2
    89ee:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
    89f0:	8a 81       	ldd	r24, Y+2	; 0x02
    89f2:	82 30       	cpi	r24, 0x02	; 2
    89f4:	09 f4       	brne	.+2      	; 0x89f8 <EXTI_enuInit+0xda>
    89f6:	3a c1       	rjmp	.+628    	; 0x8c6c <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT0	mode		*/
    89f8:	89 81       	ldd	r24, Y+1	; 0x01
    89fa:	28 2f       	mov	r18, r24
    89fc:	30 e0       	ldi	r19, 0x00	; 0
    89fe:	c9 01       	movw	r24, r18
    8a00:	88 0f       	add	r24, r24
    8a02:	99 1f       	adc	r25, r25
    8a04:	82 0f       	add	r24, r18
    8a06:	93 1f       	adc	r25, r19
    8a08:	fc 01       	movw	r30, r24
    8a0a:	e0 54       	subi	r30, 0x40	; 64
    8a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    8a0e:	80 81       	ld	r24, Z
    8a10:	28 2f       	mov	r18, r24
    8a12:	30 e0       	ldi	r19, 0x00	; 0
    8a14:	3c 87       	std	Y+12, r19	; 0x0c
    8a16:	2b 87       	std	Y+11, r18	; 0x0b
    8a18:	8b 85       	ldd	r24, Y+11	; 0x0b
    8a1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    8a1c:	8b 33       	cpi	r24, 0x3B	; 59
    8a1e:	91 05       	cpc	r25, r1
    8a20:	31 f0       	breq	.+12     	; 0x8a2e <EXTI_enuInit+0x110>
    8a22:	2b 85       	ldd	r18, Y+11	; 0x0b
    8a24:	3c 85       	ldd	r19, Y+12	; 0x0c
    8a26:	2c 33       	cpi	r18, 0x3C	; 60
    8a28:	31 05       	cpc	r19, r1
    8a2a:	49 f0       	breq	.+18     	; 0x8a3e <EXTI_enuInit+0x120>
    8a2c:	10 c0       	rjmp	.+32     	; 0x8a4e <EXTI_enuInit+0x130>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE0_BIT	);	/*			ENABLE INTERRUPT		*/
    8a2e:	ab e5       	ldi	r26, 0x5B	; 91
    8a30:	b0 e0       	ldi	r27, 0x00	; 0
    8a32:	eb e5       	ldi	r30, 0x5B	; 91
    8a34:	f0 e0       	ldi	r31, 0x00	; 0
    8a36:	80 81       	ld	r24, Z
    8a38:	80 64       	ori	r24, 0x40	; 64
    8a3a:	8c 93       	st	X, r24
    8a3c:	0a c0       	rjmp	.+20     	; 0x8a52 <EXTI_enuInit+0x134>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE0_BIT	);	/*			DISABLE INTERRUPT		*/
    8a3e:	ab e5       	ldi	r26, 0x5B	; 91
    8a40:	b0 e0       	ldi	r27, 0x00	; 0
    8a42:	eb e5       	ldi	r30, 0x5B	; 91
    8a44:	f0 e0       	ldi	r31, 0x00	; 0
    8a46:	80 81       	ld	r24, Z
    8a48:	8f 7b       	andi	r24, 0xBF	; 191
    8a4a:	8c 93       	st	X, r24
    8a4c:	02 c0       	rjmp	.+4      	; 0x8a52 <EXTI_enuInit+0x134>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    8a4e:	82 e0       	ldi	r24, 0x02	; 2
    8a50:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
    8a52:	8a 81       	ldd	r24, Y+2	; 0x02
    8a54:	82 30       	cpi	r24, 0x02	; 2
    8a56:	09 f4       	brne	.+2      	; 0x8a5a <EXTI_enuInit+0x13c>
    8a58:	09 c1       	rjmp	.+530    	; 0x8c6c <EXTI_enuInit+0x34e>
    8a5a:	ff c0       	rjmp	.+510    	; 0x8c5a <EXTI_enuInit+0x33c>
		}

		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT1 )				/********************************************************************/
    8a5c:	89 81       	ldd	r24, Y+1	; 0x01
    8a5e:	28 2f       	mov	r18, r24
    8a60:	30 e0       	ldi	r19, 0x00	; 0
    8a62:	c9 01       	movw	r24, r18
    8a64:	88 0f       	add	r24, r24
    8a66:	99 1f       	adc	r25, r25
    8a68:	82 0f       	add	r24, r18
    8a6a:	93 1f       	adc	r25, r19
    8a6c:	fc 01       	movw	r30, r24
    8a6e:	ef 53       	subi	r30, 0x3F	; 63
    8a70:	fe 4f       	sbci	r31, 0xFE	; 254
    8a72:	80 81       	ld	r24, Z
    8a74:	8e 33       	cpi	r24, 0x3E	; 62
    8a76:	09 f0       	breq	.+2      	; 0x8a7a <EXTI_enuInit+0x15c>
    8a78:	7e c0       	rjmp	.+252    	; 0x8b76 <EXTI_enuInit+0x258>
		{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	TWO_BITS_MASK	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
    8a7a:	a5 e5       	ldi	r26, 0x55	; 85
    8a7c:	b0 e0       	ldi	r27, 0x00	; 0
    8a7e:	e5 e5       	ldi	r30, 0x55	; 85
    8a80:	f0 e0       	ldi	r31, 0x00	; 0
    8a82:	80 81       	ld	r24, Z
    8a84:	83 7f       	andi	r24, 0xF3	; 243
    8a86:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
    8a88:	89 81       	ldd	r24, Y+1	; 0x01
    8a8a:	28 2f       	mov	r18, r24
    8a8c:	30 e0       	ldi	r19, 0x00	; 0
    8a8e:	c9 01       	movw	r24, r18
    8a90:	88 0f       	add	r24, r24
    8a92:	99 1f       	adc	r25, r25
    8a94:	82 0f       	add	r24, r18
    8a96:	93 1f       	adc	r25, r19
    8a98:	fc 01       	movw	r30, r24
    8a9a:	e1 54       	subi	r30, 0x41	; 65
    8a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    8a9e:	80 81       	ld	r24, Z
    8aa0:	28 2f       	mov	r18, r24
    8aa2:	30 e0       	ldi	r19, 0x00	; 0
    8aa4:	3a 87       	std	Y+10, r19	; 0x0a
    8aa6:	29 87       	std	Y+9, r18	; 0x09
    8aa8:	89 85       	ldd	r24, Y+9	; 0x09
    8aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    8aac:	88 33       	cpi	r24, 0x38	; 56
    8aae:	91 05       	cpc	r25, r1
    8ab0:	b1 f0       	breq	.+44     	; 0x8ade <EXTI_enuInit+0x1c0>
    8ab2:	29 85       	ldd	r18, Y+9	; 0x09
    8ab4:	3a 85       	ldd	r19, Y+10	; 0x0a
    8ab6:	29 33       	cpi	r18, 0x39	; 57
    8ab8:	31 05       	cpc	r19, r1
    8aba:	34 f4       	brge	.+12     	; 0x8ac8 <EXTI_enuInit+0x1aa>
    8abc:	89 85       	ldd	r24, Y+9	; 0x09
    8abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    8ac0:	87 33       	cpi	r24, 0x37	; 55
    8ac2:	91 05       	cpc	r25, r1
    8ac4:	31 f1       	breq	.+76     	; 0x8b12 <EXTI_enuInit+0x1f4>
    8ac6:	23 c0       	rjmp	.+70     	; 0x8b0e <EXTI_enuInit+0x1f0>
    8ac8:	29 85       	ldd	r18, Y+9	; 0x09
    8aca:	3a 85       	ldd	r19, Y+10	; 0x0a
    8acc:	29 33       	cpi	r18, 0x39	; 57
    8ace:	31 05       	cpc	r19, r1
    8ad0:	71 f0       	breq	.+28     	; 0x8aee <EXTI_enuInit+0x1d0>
    8ad2:	89 85       	ldd	r24, Y+9	; 0x09
    8ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    8ad6:	8a 33       	cpi	r24, 0x3A	; 58
    8ad8:	91 05       	cpc	r25, r1
    8ada:	89 f0       	breq	.+34     	; 0x8afe <EXTI_enuInit+0x1e0>
    8adc:	18 c0       	rjmp	.+48     	; 0x8b0e <EXTI_enuInit+0x1f0>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC10_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    8ade:	a5 e5       	ldi	r26, 0x55	; 85
    8ae0:	b0 e0       	ldi	r27, 0x00	; 0
    8ae2:	e5 e5       	ldi	r30, 0x55	; 85
    8ae4:	f0 e0       	ldi	r31, 0x00	; 0
    8ae6:	80 81       	ld	r24, Z
    8ae8:	84 60       	ori	r24, 0x04	; 4
    8aea:	8c 93       	st	X, r24
    8aec:	12 c0       	rjmp	.+36     	; 0x8b12 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC11_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
    8aee:	a5 e5       	ldi	r26, 0x55	; 85
    8af0:	b0 e0       	ldi	r27, 0x00	; 0
    8af2:	e5 e5       	ldi	r30, 0x55	; 85
    8af4:	f0 e0       	ldi	r31, 0x00	; 0
    8af6:	80 81       	ld	r24, Z
    8af8:	88 60       	ori	r24, 0x08	; 8
    8afa:	8c 93       	st	X, r24
    8afc:	0a c0       	rjmp	.+20     	; 0x8b12 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC10_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
    8afe:	a5 e5       	ldi	r26, 0x55	; 85
    8b00:	b0 e0       	ldi	r27, 0x00	; 0
    8b02:	e5 e5       	ldi	r30, 0x55	; 85
    8b04:	f0 e0       	ldi	r31, 0x00	; 0
    8b06:	80 81       	ld	r24, Z
    8b08:	8c 60       	ori	r24, 0x0C	; 12
    8b0a:	8c 93       	st	X, r24
    8b0c:	02 c0       	rjmp	.+4      	; 0x8b12 <EXTI_enuInit+0x1f4>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
    8b0e:	82 e0       	ldi	r24, 0x02	; 2
    8b10:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
    8b12:	8a 81       	ldd	r24, Y+2	; 0x02
    8b14:	82 30       	cpi	r24, 0x02	; 2
    8b16:	09 f4       	brne	.+2      	; 0x8b1a <EXTI_enuInit+0x1fc>
    8b18:	a9 c0       	rjmp	.+338    	; 0x8c6c <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT1	mode		*/
    8b1a:	89 81       	ldd	r24, Y+1	; 0x01
    8b1c:	28 2f       	mov	r18, r24
    8b1e:	30 e0       	ldi	r19, 0x00	; 0
    8b20:	c9 01       	movw	r24, r18
    8b22:	88 0f       	add	r24, r24
    8b24:	99 1f       	adc	r25, r25
    8b26:	82 0f       	add	r24, r18
    8b28:	93 1f       	adc	r25, r19
    8b2a:	fc 01       	movw	r30, r24
    8b2c:	e0 54       	subi	r30, 0x40	; 64
    8b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    8b30:	80 81       	ld	r24, Z
    8b32:	28 2f       	mov	r18, r24
    8b34:	30 e0       	ldi	r19, 0x00	; 0
    8b36:	38 87       	std	Y+8, r19	; 0x08
    8b38:	2f 83       	std	Y+7, r18	; 0x07
    8b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    8b3c:	98 85       	ldd	r25, Y+8	; 0x08
    8b3e:	8b 33       	cpi	r24, 0x3B	; 59
    8b40:	91 05       	cpc	r25, r1
    8b42:	31 f0       	breq	.+12     	; 0x8b50 <EXTI_enuInit+0x232>
    8b44:	2f 81       	ldd	r18, Y+7	; 0x07
    8b46:	38 85       	ldd	r19, Y+8	; 0x08
    8b48:	2c 33       	cpi	r18, 0x3C	; 60
    8b4a:	31 05       	cpc	r19, r1
    8b4c:	49 f0       	breq	.+18     	; 0x8b60 <EXTI_enuInit+0x242>
    8b4e:	10 c0       	rjmp	.+32     	; 0x8b70 <EXTI_enuInit+0x252>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE1_BIT	);	/*			ENABLE INTERRUPT		*/
    8b50:	ab e5       	ldi	r26, 0x5B	; 91
    8b52:	b0 e0       	ldi	r27, 0x00	; 0
    8b54:	eb e5       	ldi	r30, 0x5B	; 91
    8b56:	f0 e0       	ldi	r31, 0x00	; 0
    8b58:	80 81       	ld	r24, Z
    8b5a:	80 68       	ori	r24, 0x80	; 128
    8b5c:	8c 93       	st	X, r24
    8b5e:	7d c0       	rjmp	.+250    	; 0x8c5a <EXTI_enuInit+0x33c>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE1_BIT	);	/*			DISABLE INTERRUPT		*/
    8b60:	ab e5       	ldi	r26, 0x5B	; 91
    8b62:	b0 e0       	ldi	r27, 0x00	; 0
    8b64:	eb e5       	ldi	r30, 0x5B	; 91
    8b66:	f0 e0       	ldi	r31, 0x00	; 0
    8b68:	80 81       	ld	r24, Z
    8b6a:	8f 77       	andi	r24, 0x7F	; 127
    8b6c:	8c 93       	st	X, r24
    8b6e:	75 c0       	rjmp	.+234    	; 0x8c5a <EXTI_enuInit+0x33c>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    8b70:	82 e0       	ldi	r24, 0x02	; 2
    8b72:	8a 83       	std	Y+2, r24	; 0x02
    8b74:	72 c0       	rjmp	.+228    	; 0x8c5a <EXTI_enuInit+0x33c>
			}
		}
		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT2 )				/********************************************************************/
    8b76:	89 81       	ldd	r24, Y+1	; 0x01
    8b78:	28 2f       	mov	r18, r24
    8b7a:	30 e0       	ldi	r19, 0x00	; 0
    8b7c:	c9 01       	movw	r24, r18
    8b7e:	88 0f       	add	r24, r24
    8b80:	99 1f       	adc	r25, r25
    8b82:	82 0f       	add	r24, r18
    8b84:	93 1f       	adc	r25, r19
    8b86:	fc 01       	movw	r30, r24
    8b88:	ef 53       	subi	r30, 0x3F	; 63
    8b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    8b8c:	80 81       	ld	r24, Z
    8b8e:	8f 33       	cpi	r24, 0x3F	; 63
    8b90:	09 f0       	breq	.+2      	; 0x8b94 <EXTI_enuInit+0x276>
    8b92:	61 c0       	rjmp	.+194    	; 0x8c56 <EXTI_enuInit+0x338>
		{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/********************************************************************/
    8b94:	89 81       	ldd	r24, Y+1	; 0x01
    8b96:	28 2f       	mov	r18, r24
    8b98:	30 e0       	ldi	r19, 0x00	; 0
    8b9a:	c9 01       	movw	r24, r18
    8b9c:	88 0f       	add	r24, r24
    8b9e:	99 1f       	adc	r25, r25
    8ba0:	82 0f       	add	r24, r18
    8ba2:	93 1f       	adc	r25, r19
    8ba4:	fc 01       	movw	r30, r24
    8ba6:	e1 54       	subi	r30, 0x41	; 65
    8ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    8baa:	80 81       	ld	r24, Z
    8bac:	28 2f       	mov	r18, r24
    8bae:	30 e0       	ldi	r19, 0x00	; 0
    8bb0:	3e 83       	std	Y+6, r19	; 0x06
    8bb2:	2d 83       	std	Y+5, r18	; 0x05
    8bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    8bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    8bb8:	89 33       	cpi	r24, 0x39	; 57
    8bba:	91 05       	cpc	r25, r1
    8bbc:	31 f0       	breq	.+12     	; 0x8bca <EXTI_enuInit+0x2ac>
    8bbe:	2d 81       	ldd	r18, Y+5	; 0x05
    8bc0:	3e 81       	ldd	r19, Y+6	; 0x06
    8bc2:	2a 33       	cpi	r18, 0x3A	; 58
    8bc4:	31 05       	cpc	r19, r1
    8bc6:	49 f0       	breq	.+18     	; 0x8bda <EXTI_enuInit+0x2bc>
    8bc8:	10 c0       	rjmp	.+32     	; 0x8bea <EXTI_enuInit+0x2cc>
			{																		/*																	*/
				case	FALLING_EDGE:	MCUCSR &= ~(BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
    8bca:	a4 e5       	ldi	r26, 0x54	; 84
    8bcc:	b0 e0       	ldi	r27, 0x00	; 0
    8bce:	e4 e5       	ldi	r30, 0x54	; 84
    8bd0:	f0 e0       	ldi	r31, 0x00	; 0
    8bd2:	80 81       	ld	r24, Z
    8bd4:	8f 7b       	andi	r24, 0xBF	; 191
    8bd6:	8c 93       	st	X, r24
    8bd8:	0a c0       	rjmp	.+20     	; 0x8bee <EXTI_enuInit+0x2d0>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCSR |=  (BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
    8bda:	a4 e5       	ldi	r26, 0x54	; 84
    8bdc:	b0 e0       	ldi	r27, 0x00	; 0
    8bde:	e4 e5       	ldi	r30, 0x54	; 84
    8be0:	f0 e0       	ldi	r31, 0x00	; 0
    8be2:	80 81       	ld	r24, Z
    8be4:	80 64       	ori	r24, 0x40	; 64
    8be6:	8c 93       	st	X, r24
    8be8:	02 c0       	rjmp	.+4      	; 0x8bee <EXTI_enuInit+0x2d0>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
    8bea:	82 e0       	ldi	r24, 0x02	; 2
    8bec:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
    8bee:	8a 81       	ldd	r24, Y+2	; 0x02
    8bf0:	82 30       	cpi	r24, 0x02	; 2
    8bf2:	e1 f1       	breq	.+120    	; 0x8c6c <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT2	mode		*/
    8bf4:	89 81       	ldd	r24, Y+1	; 0x01
    8bf6:	28 2f       	mov	r18, r24
    8bf8:	30 e0       	ldi	r19, 0x00	; 0
    8bfa:	c9 01       	movw	r24, r18
    8bfc:	88 0f       	add	r24, r24
    8bfe:	99 1f       	adc	r25, r25
    8c00:	82 0f       	add	r24, r18
    8c02:	93 1f       	adc	r25, r19
    8c04:	fc 01       	movw	r30, r24
    8c06:	e0 54       	subi	r30, 0x40	; 64
    8c08:	fe 4f       	sbci	r31, 0xFE	; 254
    8c0a:	80 81       	ld	r24, Z
    8c0c:	28 2f       	mov	r18, r24
    8c0e:	30 e0       	ldi	r19, 0x00	; 0
    8c10:	3c 83       	std	Y+4, r19	; 0x04
    8c12:	2b 83       	std	Y+3, r18	; 0x03
    8c14:	8b 81       	ldd	r24, Y+3	; 0x03
    8c16:	9c 81       	ldd	r25, Y+4	; 0x04
    8c18:	8b 33       	cpi	r24, 0x3B	; 59
    8c1a:	91 05       	cpc	r25, r1
    8c1c:	31 f0       	breq	.+12     	; 0x8c2a <EXTI_enuInit+0x30c>
    8c1e:	2b 81       	ldd	r18, Y+3	; 0x03
    8c20:	3c 81       	ldd	r19, Y+4	; 0x04
    8c22:	2c 33       	cpi	r18, 0x3C	; 60
    8c24:	31 05       	cpc	r19, r1
    8c26:	49 f0       	breq	.+18     	; 0x8c3a <EXTI_enuInit+0x31c>
    8c28:	10 c0       	rjmp	.+32     	; 0x8c4a <EXTI_enuInit+0x32c>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE2_BIT	);	/*			ENABLE INTERRUPT		*/
    8c2a:	ab e5       	ldi	r26, 0x5B	; 91
    8c2c:	b0 e0       	ldi	r27, 0x00	; 0
    8c2e:	eb e5       	ldi	r30, 0x5B	; 91
    8c30:	f0 e0       	ldi	r31, 0x00	; 0
    8c32:	80 81       	ld	r24, Z
    8c34:	80 62       	ori	r24, 0x20	; 32
    8c36:	8c 93       	st	X, r24
    8c38:	0a c0       	rjmp	.+20     	; 0x8c4e <EXTI_enuInit+0x330>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE2_BIT	);	/*			DISABLE INTERRUPT		*/
    8c3a:	ab e5       	ldi	r26, 0x5B	; 91
    8c3c:	b0 e0       	ldi	r27, 0x00	; 0
    8c3e:	eb e5       	ldi	r30, 0x5B	; 91
    8c40:	f0 e0       	ldi	r31, 0x00	; 0
    8c42:	80 81       	ld	r24, Z
    8c44:	8f 7d       	andi	r24, 0xDF	; 223
    8c46:	8c 93       	st	X, r24
    8c48:	02 c0       	rjmp	.+4      	; 0x8c4e <EXTI_enuInit+0x330>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    8c4a:	82 e0       	ldi	r24, 0x02	; 2
    8c4c:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
    8c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    8c50:	82 30       	cpi	r24, 0x02	; 2
    8c52:	61 f0       	breq	.+24     	; 0x8c6c <EXTI_enuInit+0x34e>
    8c54:	02 c0       	rjmp	.+4      	; 0x8c5a <EXTI_enuInit+0x33c>
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    8c56:	82 e0       	ldi	r24, 0x02	; 2
    8c58:	8a 83       	std	Y+2, r24	; 0x02

ES_t EXTI_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
    8c5a:	89 81       	ldd	r24, Y+1	; 0x01
    8c5c:	8f 5f       	subi	r24, 0xFF	; 255
    8c5e:	89 83       	std	Y+1, r24	; 0x01
    8c60:	90 91 be 01 	lds	r25, 0x01BE
    8c64:	89 81       	ldd	r24, Y+1	; 0x01
    8c66:	89 17       	cp	r24, r25
    8c68:	08 f4       	brcc	.+2      	; 0x8c6c <EXTI_enuInit+0x34e>
    8c6a:	67 ce       	rjmp	.-818    	; 0x893a <EXTI_enuInit+0x1c>
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
		}
		else Local_enuErrorState = ES_OUT_RANGE;
	}
	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    8c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    8c6e:	82 30       	cpi	r24, 0x02	; 2
    8c70:	09 f0       	breq	.+2      	; 0x8c74 <EXTI_enuInit+0x356>
    8c72:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    8c74:	8a 81       	ldd	r24, Y+2	; 0x02
}
    8c76:	2e 96       	adiw	r28, 0x0e	; 14
    8c78:	0f b6       	in	r0, 0x3f	; 63
    8c7a:	f8 94       	cli
    8c7c:	de bf       	out	0x3e, r29	; 62
    8c7e:	0f be       	out	0x3f, r0	; 63
    8c80:	cd bf       	out	0x3d, r28	; 61
    8c82:	cf 91       	pop	r28
    8c84:	df 91       	pop	r29
    8c86:	08 95       	ret

00008c88 <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt( u8 Copy_u8IntNum )
{
    8c88:	df 93       	push	r29
    8c8a:	cf 93       	push	r28
    8c8c:	00 d0       	rcall	.+0      	; 0x8c8e <EXTI_enuEnableInterrupt+0x6>
    8c8e:	cd b7       	in	r28, 0x3d	; 61
    8c90:	de b7       	in	r29, 0x3e	; 62
    8c92:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    8c94:	81 e0       	ldi	r24, 0x01	; 1
    8c96:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    8c98:	8a 81       	ldd	r24, Y+2	; 0x02
    8c9a:	8d 33       	cpi	r24, 0x3D	; 61
    8c9c:	41 f4       	brne	.+16     	; 0x8cae <EXTI_enuEnableInterrupt+0x26>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE0_BIT	);							/*			ENABLE INT0			*/
    8c9e:	ab e5       	ldi	r26, 0x5B	; 91
    8ca0:	b0 e0       	ldi	r27, 0x00	; 0
    8ca2:	eb e5       	ldi	r30, 0x5B	; 91
    8ca4:	f0 e0       	ldi	r31, 0x00	; 0
    8ca6:	80 81       	ld	r24, Z
    8ca8:	80 64       	ori	r24, 0x40	; 64
    8caa:	8c 93       	st	X, r24
    8cac:	18 c0       	rjmp	.+48     	; 0x8cde <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    8cae:	8a 81       	ldd	r24, Y+2	; 0x02
    8cb0:	8e 33       	cpi	r24, 0x3E	; 62
    8cb2:	41 f4       	brne	.+16     	; 0x8cc4 <EXTI_enuEnableInterrupt+0x3c>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE1_BIT	);							/*			ENABLE INT1			*/
    8cb4:	ab e5       	ldi	r26, 0x5B	; 91
    8cb6:	b0 e0       	ldi	r27, 0x00	; 0
    8cb8:	eb e5       	ldi	r30, 0x5B	; 91
    8cba:	f0 e0       	ldi	r31, 0x00	; 0
    8cbc:	80 81       	ld	r24, Z
    8cbe:	80 68       	ori	r24, 0x80	; 128
    8cc0:	8c 93       	st	X, r24
    8cc2:	0d c0       	rjmp	.+26     	; 0x8cde <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    8cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    8cc6:	8f 33       	cpi	r24, 0x3F	; 63
    8cc8:	41 f4       	brne	.+16     	; 0x8cda <EXTI_enuEnableInterrupt+0x52>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE2_BIT	);							/*			ENABLE INT2			*/
    8cca:	ab e5       	ldi	r26, 0x5B	; 91
    8ccc:	b0 e0       	ldi	r27, 0x00	; 0
    8cce:	eb e5       	ldi	r30, 0x5B	; 91
    8cd0:	f0 e0       	ldi	r31, 0x00	; 0
    8cd2:	80 81       	ld	r24, Z
    8cd4:	80 62       	ori	r24, 0x20	; 32
    8cd6:	8c 93       	st	X, r24
    8cd8:	02 c0       	rjmp	.+4      	; 0x8cde <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    8cda:	82 e0       	ldi	r24, 0x02	; 2
    8cdc:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    8cde:	89 81       	ldd	r24, Y+1	; 0x01
    8ce0:	82 30       	cpi	r24, 0x02	; 2
    8ce2:	09 f0       	breq	.+2      	; 0x8ce6 <EXTI_enuEnableInterrupt+0x5e>
    8ce4:	19 82       	std	Y+1, r1	; 0x01


	return Local_enuErrorState ;
    8ce6:	89 81       	ldd	r24, Y+1	; 0x01
}
    8ce8:	0f 90       	pop	r0
    8cea:	0f 90       	pop	r0
    8cec:	cf 91       	pop	r28
    8cee:	df 91       	pop	r29
    8cf0:	08 95       	ret

00008cf2 <EXTI_enuDisableInterrupt>:

ES_t EXTI_enuDisableInterrupt( u8 Copy_u8IntNum )
{
    8cf2:	df 93       	push	r29
    8cf4:	cf 93       	push	r28
    8cf6:	00 d0       	rcall	.+0      	; 0x8cf8 <EXTI_enuDisableInterrupt+0x6>
    8cf8:	cd b7       	in	r28, 0x3d	; 61
    8cfa:	de b7       	in	r29, 0x3e	; 62
    8cfc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    8cfe:	81 e0       	ldi	r24, 0x01	; 1
    8d00:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    8d02:	8a 81       	ldd	r24, Y+2	; 0x02
    8d04:	8d 33       	cpi	r24, 0x3D	; 61
    8d06:	41 f4       	brne	.+16     	; 0x8d18 <EXTI_enuDisableInterrupt+0x26>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE0_BIT	);							/*			DISABLE INT0		*/
    8d08:	ab e5       	ldi	r26, 0x5B	; 91
    8d0a:	b0 e0       	ldi	r27, 0x00	; 0
    8d0c:	eb e5       	ldi	r30, 0x5B	; 91
    8d0e:	f0 e0       	ldi	r31, 0x00	; 0
    8d10:	80 81       	ld	r24, Z
    8d12:	8f 7b       	andi	r24, 0xBF	; 191
    8d14:	8c 93       	st	X, r24
    8d16:	18 c0       	rjmp	.+48     	; 0x8d48 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    8d18:	8a 81       	ldd	r24, Y+2	; 0x02
    8d1a:	8e 33       	cpi	r24, 0x3E	; 62
    8d1c:	41 f4       	brne	.+16     	; 0x8d2e <EXTI_enuDisableInterrupt+0x3c>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE1_BIT	);							/*			DISABLE INT1		*/
    8d1e:	ab e5       	ldi	r26, 0x5B	; 91
    8d20:	b0 e0       	ldi	r27, 0x00	; 0
    8d22:	eb e5       	ldi	r30, 0x5B	; 91
    8d24:	f0 e0       	ldi	r31, 0x00	; 0
    8d26:	80 81       	ld	r24, Z
    8d28:	8f 77       	andi	r24, 0x7F	; 127
    8d2a:	8c 93       	st	X, r24
    8d2c:	0d c0       	rjmp	.+26     	; 0x8d48 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    8d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    8d30:	8f 33       	cpi	r24, 0x3F	; 63
    8d32:	41 f4       	brne	.+16     	; 0x8d44 <EXTI_enuDisableInterrupt+0x52>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE2_BIT	);							/*			DISABLE INT2		*/
    8d34:	ab e5       	ldi	r26, 0x5B	; 91
    8d36:	b0 e0       	ldi	r27, 0x00	; 0
    8d38:	eb e5       	ldi	r30, 0x5B	; 91
    8d3a:	f0 e0       	ldi	r31, 0x00	; 0
    8d3c:	80 81       	ld	r24, Z
    8d3e:	8f 7d       	andi	r24, 0xDF	; 223
    8d40:	8c 93       	st	X, r24
    8d42:	02 c0       	rjmp	.+4      	; 0x8d48 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    8d44:	82 e0       	ldi	r24, 0x02	; 2
    8d46:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    8d48:	89 81       	ldd	r24, Y+1	; 0x01
    8d4a:	82 30       	cpi	r24, 0x02	; 2
    8d4c:	09 f0       	breq	.+2      	; 0x8d50 <EXTI_enuDisableInterrupt+0x5e>
    8d4e:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    8d50:	89 81       	ldd	r24, Y+1	; 0x01
}
    8d52:	0f 90       	pop	r0
    8d54:	0f 90       	pop	r0
    8d56:	cf 91       	pop	r28
    8d58:	df 91       	pop	r29
    8d5a:	08 95       	ret

00008d5c <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel( u8 Copy_u8IntNum , u8 Copy_u8SenseLevel )
{
    8d5c:	df 93       	push	r29
    8d5e:	cf 93       	push	r28
    8d60:	cd b7       	in	r28, 0x3d	; 61
    8d62:	de b7       	in	r29, 0x3e	; 62
    8d64:	29 97       	sbiw	r28, 0x09	; 9
    8d66:	0f b6       	in	r0, 0x3f	; 63
    8d68:	f8 94       	cli
    8d6a:	de bf       	out	0x3e, r29	; 62
    8d6c:	0f be       	out	0x3f, r0	; 63
    8d6e:	cd bf       	out	0x3d, r28	; 61
    8d70:	8a 83       	std	Y+2, r24	; 0x02
    8d72:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    8d74:	81 e0       	ldi	r24, 0x01	; 1
    8d76:	89 83       	std	Y+1, r24	; 0x01


	if( Copy_u8IntNum == INT0 )													/********************************************************************/
    8d78:	8a 81       	ldd	r24, Y+2	; 0x02
    8d7a:	8d 33       	cpi	r24, 0x3D	; 61
    8d7c:	09 f0       	breq	.+2      	; 0x8d80 <EXTI_enuSetSenseLevel+0x24>
    8d7e:	43 c0       	rjmp	.+134    	; 0x8e06 <EXTI_enuSetSenseLevel+0xaa>
	{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	TWO_BITS_MASK	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
    8d80:	a5 e5       	ldi	r26, 0x55	; 85
    8d82:	b0 e0       	ldi	r27, 0x00	; 0
    8d84:	e5 e5       	ldi	r30, 0x55	; 85
    8d86:	f0 e0       	ldi	r31, 0x00	; 0
    8d88:	80 81       	ld	r24, Z
    8d8a:	8c 7f       	andi	r24, 0xFC	; 252
    8d8c:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    8d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    8d90:	28 2f       	mov	r18, r24
    8d92:	30 e0       	ldi	r19, 0x00	; 0
    8d94:	39 87       	std	Y+9, r19	; 0x09
    8d96:	28 87       	std	Y+8, r18	; 0x08
    8d98:	88 85       	ldd	r24, Y+8	; 0x08
    8d9a:	99 85       	ldd	r25, Y+9	; 0x09
    8d9c:	88 33       	cpi	r24, 0x38	; 56
    8d9e:	91 05       	cpc	r25, r1
    8da0:	b9 f0       	breq	.+46     	; 0x8dd0 <EXTI_enuSetSenseLevel+0x74>
    8da2:	28 85       	ldd	r18, Y+8	; 0x08
    8da4:	39 85       	ldd	r19, Y+9	; 0x09
    8da6:	29 33       	cpi	r18, 0x39	; 57
    8da8:	31 05       	cpc	r19, r1
    8daa:	3c f4       	brge	.+14     	; 0x8dba <EXTI_enuSetSenseLevel+0x5e>
    8dac:	88 85       	ldd	r24, Y+8	; 0x08
    8dae:	99 85       	ldd	r25, Y+9	; 0x09
    8db0:	87 33       	cpi	r24, 0x37	; 55
    8db2:	91 05       	cpc	r25, r1
    8db4:	09 f4       	brne	.+2      	; 0x8db8 <EXTI_enuSetSenseLevel+0x5c>
    8db6:	96 c0       	rjmp	.+300    	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
    8db8:	23 c0       	rjmp	.+70     	; 0x8e00 <EXTI_enuSetSenseLevel+0xa4>
    8dba:	28 85       	ldd	r18, Y+8	; 0x08
    8dbc:	39 85       	ldd	r19, Y+9	; 0x09
    8dbe:	29 33       	cpi	r18, 0x39	; 57
    8dc0:	31 05       	cpc	r19, r1
    8dc2:	71 f0       	breq	.+28     	; 0x8de0 <EXTI_enuSetSenseLevel+0x84>
    8dc4:	88 85       	ldd	r24, Y+8	; 0x08
    8dc6:	99 85       	ldd	r25, Y+9	; 0x09
    8dc8:	8a 33       	cpi	r24, 0x3A	; 58
    8dca:	91 05       	cpc	r25, r1
    8dcc:	89 f0       	breq	.+34     	; 0x8df0 <EXTI_enuSetSenseLevel+0x94>
    8dce:	18 c0       	rjmp	.+48     	; 0x8e00 <EXTI_enuSetSenseLevel+0xa4>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC00_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    8dd0:	a5 e5       	ldi	r26, 0x55	; 85
    8dd2:	b0 e0       	ldi	r27, 0x00	; 0
    8dd4:	e5 e5       	ldi	r30, 0x55	; 85
    8dd6:	f0 e0       	ldi	r31, 0x00	; 0
    8dd8:	80 81       	ld	r24, Z
    8dda:	81 60       	ori	r24, 0x01	; 1
    8ddc:	8c 93       	st	X, r24
    8dde:	82 c0       	rjmp	.+260    	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC01_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
    8de0:	a5 e5       	ldi	r26, 0x55	; 85
    8de2:	b0 e0       	ldi	r27, 0x00	; 0
    8de4:	e5 e5       	ldi	r30, 0x55	; 85
    8de6:	f0 e0       	ldi	r31, 0x00	; 0
    8de8:	80 81       	ld	r24, Z
    8dea:	82 60       	ori	r24, 0x02	; 2
    8dec:	8c 93       	st	X, r24
    8dee:	7a c0       	rjmp	.+244    	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC00_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
    8df0:	a5 e5       	ldi	r26, 0x55	; 85
    8df2:	b0 e0       	ldi	r27, 0x00	; 0
    8df4:	e5 e5       	ldi	r30, 0x55	; 85
    8df6:	f0 e0       	ldi	r31, 0x00	; 0
    8df8:	80 81       	ld	r24, Z
    8dfa:	83 60       	ori	r24, 0x03	; 3
    8dfc:	8c 93       	st	X, r24
    8dfe:	72 c0       	rjmp	.+228    	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    8e00:	82 e0       	ldi	r24, 0x02	; 2
    8e02:	89 83       	std	Y+1, r24	; 0x01
    8e04:	6f c0       	rjmp	.+222    	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
		}
	}

	else if( Copy_u8IntNum == INT1 )											/********************************************************************/
    8e06:	8a 81       	ldd	r24, Y+2	; 0x02
    8e08:	8e 33       	cpi	r24, 0x3E	; 62
    8e0a:	09 f0       	breq	.+2      	; 0x8e0e <EXTI_enuSetSenseLevel+0xb2>
    8e0c:	43 c0       	rjmp	.+134    	; 0x8e94 <EXTI_enuSetSenseLevel+0x138>
	{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	TWO_BITS_MASK	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
    8e0e:	a5 e5       	ldi	r26, 0x55	; 85
    8e10:	b0 e0       	ldi	r27, 0x00	; 0
    8e12:	e5 e5       	ldi	r30, 0x55	; 85
    8e14:	f0 e0       	ldi	r31, 0x00	; 0
    8e16:	80 81       	ld	r24, Z
    8e18:	83 7f       	andi	r24, 0xF3	; 243
    8e1a:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    8e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    8e1e:	28 2f       	mov	r18, r24
    8e20:	30 e0       	ldi	r19, 0x00	; 0
    8e22:	3f 83       	std	Y+7, r19	; 0x07
    8e24:	2e 83       	std	Y+6, r18	; 0x06
    8e26:	8e 81       	ldd	r24, Y+6	; 0x06
    8e28:	9f 81       	ldd	r25, Y+7	; 0x07
    8e2a:	88 33       	cpi	r24, 0x38	; 56
    8e2c:	91 05       	cpc	r25, r1
    8e2e:	b9 f0       	breq	.+46     	; 0x8e5e <EXTI_enuSetSenseLevel+0x102>
    8e30:	2e 81       	ldd	r18, Y+6	; 0x06
    8e32:	3f 81       	ldd	r19, Y+7	; 0x07
    8e34:	29 33       	cpi	r18, 0x39	; 57
    8e36:	31 05       	cpc	r19, r1
    8e38:	3c f4       	brge	.+14     	; 0x8e48 <EXTI_enuSetSenseLevel+0xec>
    8e3a:	8e 81       	ldd	r24, Y+6	; 0x06
    8e3c:	9f 81       	ldd	r25, Y+7	; 0x07
    8e3e:	87 33       	cpi	r24, 0x37	; 55
    8e40:	91 05       	cpc	r25, r1
    8e42:	09 f4       	brne	.+2      	; 0x8e46 <EXTI_enuSetSenseLevel+0xea>
    8e44:	4f c0       	rjmp	.+158    	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
    8e46:	23 c0       	rjmp	.+70     	; 0x8e8e <EXTI_enuSetSenseLevel+0x132>
    8e48:	2e 81       	ldd	r18, Y+6	; 0x06
    8e4a:	3f 81       	ldd	r19, Y+7	; 0x07
    8e4c:	29 33       	cpi	r18, 0x39	; 57
    8e4e:	31 05       	cpc	r19, r1
    8e50:	71 f0       	breq	.+28     	; 0x8e6e <EXTI_enuSetSenseLevel+0x112>
    8e52:	8e 81       	ldd	r24, Y+6	; 0x06
    8e54:	9f 81       	ldd	r25, Y+7	; 0x07
    8e56:	8a 33       	cpi	r24, 0x3A	; 58
    8e58:	91 05       	cpc	r25, r1
    8e5a:	89 f0       	breq	.+34     	; 0x8e7e <EXTI_enuSetSenseLevel+0x122>
    8e5c:	18 c0       	rjmp	.+48     	; 0x8e8e <EXTI_enuSetSenseLevel+0x132>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC10_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    8e5e:	a5 e5       	ldi	r26, 0x55	; 85
    8e60:	b0 e0       	ldi	r27, 0x00	; 0
    8e62:	e5 e5       	ldi	r30, 0x55	; 85
    8e64:	f0 e0       	ldi	r31, 0x00	; 0
    8e66:	80 81       	ld	r24, Z
    8e68:	84 60       	ori	r24, 0x04	; 4
    8e6a:	8c 93       	st	X, r24
    8e6c:	3b c0       	rjmp	.+118    	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC11_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
    8e6e:	a5 e5       	ldi	r26, 0x55	; 85
    8e70:	b0 e0       	ldi	r27, 0x00	; 0
    8e72:	e5 e5       	ldi	r30, 0x55	; 85
    8e74:	f0 e0       	ldi	r31, 0x00	; 0
    8e76:	80 81       	ld	r24, Z
    8e78:	88 60       	ori	r24, 0x08	; 8
    8e7a:	8c 93       	st	X, r24
    8e7c:	33 c0       	rjmp	.+102    	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC10_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
    8e7e:	a5 e5       	ldi	r26, 0x55	; 85
    8e80:	b0 e0       	ldi	r27, 0x00	; 0
    8e82:	e5 e5       	ldi	r30, 0x55	; 85
    8e84:	f0 e0       	ldi	r31, 0x00	; 0
    8e86:	80 81       	ld	r24, Z
    8e88:	8c 60       	ori	r24, 0x0C	; 12
    8e8a:	8c 93       	st	X, r24
    8e8c:	2b c0       	rjmp	.+86     	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    8e8e:	82 e0       	ldi	r24, 0x02	; 2
    8e90:	89 83       	std	Y+1, r24	; 0x01
    8e92:	28 c0       	rjmp	.+80     	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else if( Copy_u8IntNum == INT2 )											/********************************************************************/
    8e94:	8a 81       	ldd	r24, Y+2	; 0x02
    8e96:	8f 33       	cpi	r24, 0x3F	; 63
    8e98:	19 f5       	brne	.+70     	; 0x8ee0 <EXTI_enuSetSenseLevel+0x184>
	{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
		switch( Copy_u8SenseLevel )												/********************************************************************/
    8e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    8e9c:	28 2f       	mov	r18, r24
    8e9e:	30 e0       	ldi	r19, 0x00	; 0
    8ea0:	3d 83       	std	Y+5, r19	; 0x05
    8ea2:	2c 83       	std	Y+4, r18	; 0x04
    8ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    8ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    8ea8:	89 33       	cpi	r24, 0x39	; 57
    8eaa:	91 05       	cpc	r25, r1
    8eac:	31 f0       	breq	.+12     	; 0x8eba <EXTI_enuSetSenseLevel+0x15e>
    8eae:	2c 81       	ldd	r18, Y+4	; 0x04
    8eb0:	3d 81       	ldd	r19, Y+5	; 0x05
    8eb2:	2a 33       	cpi	r18, 0x3A	; 58
    8eb4:	31 05       	cpc	r19, r1
    8eb6:	49 f0       	breq	.+18     	; 0x8eca <EXTI_enuSetSenseLevel+0x16e>
    8eb8:	10 c0       	rjmp	.+32     	; 0x8eda <EXTI_enuSetSenseLevel+0x17e>
		{																		/*																	*/
			case	FALLING_EDGE:	MCUCSR &= ~(BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
    8eba:	a4 e5       	ldi	r26, 0x54	; 84
    8ebc:	b0 e0       	ldi	r27, 0x00	; 0
    8ebe:	e4 e5       	ldi	r30, 0x54	; 84
    8ec0:	f0 e0       	ldi	r31, 0x00	; 0
    8ec2:	80 81       	ld	r24, Z
    8ec4:	8f 7b       	andi	r24, 0xBF	; 191
    8ec6:	8c 93       	st	X, r24
    8ec8:	0d c0       	rjmp	.+26     	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCSR |=  (BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
    8eca:	a4 e5       	ldi	r26, 0x54	; 84
    8ecc:	b0 e0       	ldi	r27, 0x00	; 0
    8ece:	e4 e5       	ldi	r30, 0x54	; 84
    8ed0:	f0 e0       	ldi	r31, 0x00	; 0
    8ed2:	80 81       	ld	r24, Z
    8ed4:	80 64       	ori	r24, 0x40	; 64
    8ed6:	8c 93       	st	X, r24
    8ed8:	05 c0       	rjmp	.+10     	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    8eda:	82 e0       	ldi	r24, 0x02	; 2
    8edc:	89 83       	std	Y+1, r24	; 0x01
    8ede:	02 c0       	rjmp	.+4      	; 0x8ee4 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    8ee0:	82 e0       	ldi	r24, 0x02	; 2
    8ee2:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    8ee4:	89 81       	ldd	r24, Y+1	; 0x01
    8ee6:	82 30       	cpi	r24, 0x02	; 2
    8ee8:	09 f0       	breq	.+2      	; 0x8eec <EXTI_enuSetSenseLevel+0x190>
    8eea:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    8eec:	89 81       	ldd	r24, Y+1	; 0x01
}
    8eee:	29 96       	adiw	r28, 0x09	; 9
    8ef0:	0f b6       	in	r0, 0x3f	; 63
    8ef2:	f8 94       	cli
    8ef4:	de bf       	out	0x3e, r29	; 62
    8ef6:	0f be       	out	0x3f, r0	; 63
    8ef8:	cd bf       	out	0x3d, r28	; 61
    8efa:	cf 91       	pop	r28
    8efc:	df 91       	pop	r29
    8efe:	08 95       	ret

00008f00 <__vector_1>:
void __vector_2(void)__attribute__((signal));	//ISR	INT1
void __vector_3(void)__attribute__((signal));	//ISR	INT2


void __vector_1(void)
{
    8f00:	1f 92       	push	r1
    8f02:	0f 92       	push	r0
    8f04:	0f b6       	in	r0, 0x3f	; 63
    8f06:	0f 92       	push	r0
    8f08:	11 24       	eor	r1, r1
    8f0a:	2f 93       	push	r18
    8f0c:	3f 93       	push	r19
    8f0e:	4f 93       	push	r20
    8f10:	5f 93       	push	r21
    8f12:	6f 93       	push	r22
    8f14:	7f 93       	push	r23
    8f16:	8f 93       	push	r24
    8f18:	9f 93       	push	r25
    8f1a:	af 93       	push	r26
    8f1c:	bf 93       	push	r27
    8f1e:	ef 93       	push	r30
    8f20:	ff 93       	push	r31
    8f22:	df 93       	push	r29
    8f24:	cf 93       	push	r28
    8f26:	cd b7       	in	r28, 0x3d	; 61
    8f28:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[0] != NULL)
    8f2a:	80 91 44 02 	lds	r24, 0x0244
    8f2e:	90 91 45 02 	lds	r25, 0x0245
    8f32:	00 97       	sbiw	r24, 0x00	; 0
    8f34:	29 f0       	breq	.+10     	; 0x8f40 <__vector_1+0x40>
	{
		EXTI_ApFunction_AppFun[0]();
    8f36:	e0 91 44 02 	lds	r30, 0x0244
    8f3a:	f0 91 45 02 	lds	r31, 0x0245
    8f3e:	09 95       	icall
	}
}
    8f40:	cf 91       	pop	r28
    8f42:	df 91       	pop	r29
    8f44:	ff 91       	pop	r31
    8f46:	ef 91       	pop	r30
    8f48:	bf 91       	pop	r27
    8f4a:	af 91       	pop	r26
    8f4c:	9f 91       	pop	r25
    8f4e:	8f 91       	pop	r24
    8f50:	7f 91       	pop	r23
    8f52:	6f 91       	pop	r22
    8f54:	5f 91       	pop	r21
    8f56:	4f 91       	pop	r20
    8f58:	3f 91       	pop	r19
    8f5a:	2f 91       	pop	r18
    8f5c:	0f 90       	pop	r0
    8f5e:	0f be       	out	0x3f, r0	; 63
    8f60:	0f 90       	pop	r0
    8f62:	1f 90       	pop	r1
    8f64:	18 95       	reti

00008f66 <__vector_2>:
void __vector_2(void)
{
    8f66:	1f 92       	push	r1
    8f68:	0f 92       	push	r0
    8f6a:	0f b6       	in	r0, 0x3f	; 63
    8f6c:	0f 92       	push	r0
    8f6e:	11 24       	eor	r1, r1
    8f70:	2f 93       	push	r18
    8f72:	3f 93       	push	r19
    8f74:	4f 93       	push	r20
    8f76:	5f 93       	push	r21
    8f78:	6f 93       	push	r22
    8f7a:	7f 93       	push	r23
    8f7c:	8f 93       	push	r24
    8f7e:	9f 93       	push	r25
    8f80:	af 93       	push	r26
    8f82:	bf 93       	push	r27
    8f84:	ef 93       	push	r30
    8f86:	ff 93       	push	r31
    8f88:	df 93       	push	r29
    8f8a:	cf 93       	push	r28
    8f8c:	cd b7       	in	r28, 0x3d	; 61
    8f8e:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[1] != NULL)
    8f90:	80 91 46 02 	lds	r24, 0x0246
    8f94:	90 91 47 02 	lds	r25, 0x0247
    8f98:	00 97       	sbiw	r24, 0x00	; 0
    8f9a:	29 f0       	breq	.+10     	; 0x8fa6 <__vector_2+0x40>
	{
		EXTI_ApFunction_AppFun[1]();
    8f9c:	e0 91 46 02 	lds	r30, 0x0246
    8fa0:	f0 91 47 02 	lds	r31, 0x0247
    8fa4:	09 95       	icall
	}
}
    8fa6:	cf 91       	pop	r28
    8fa8:	df 91       	pop	r29
    8faa:	ff 91       	pop	r31
    8fac:	ef 91       	pop	r30
    8fae:	bf 91       	pop	r27
    8fb0:	af 91       	pop	r26
    8fb2:	9f 91       	pop	r25
    8fb4:	8f 91       	pop	r24
    8fb6:	7f 91       	pop	r23
    8fb8:	6f 91       	pop	r22
    8fba:	5f 91       	pop	r21
    8fbc:	4f 91       	pop	r20
    8fbe:	3f 91       	pop	r19
    8fc0:	2f 91       	pop	r18
    8fc2:	0f 90       	pop	r0
    8fc4:	0f be       	out	0x3f, r0	; 63
    8fc6:	0f 90       	pop	r0
    8fc8:	1f 90       	pop	r1
    8fca:	18 95       	reti

00008fcc <__vector_3>:
void __vector_3(void)
{
    8fcc:	1f 92       	push	r1
    8fce:	0f 92       	push	r0
    8fd0:	0f b6       	in	r0, 0x3f	; 63
    8fd2:	0f 92       	push	r0
    8fd4:	11 24       	eor	r1, r1
    8fd6:	2f 93       	push	r18
    8fd8:	3f 93       	push	r19
    8fda:	4f 93       	push	r20
    8fdc:	5f 93       	push	r21
    8fde:	6f 93       	push	r22
    8fe0:	7f 93       	push	r23
    8fe2:	8f 93       	push	r24
    8fe4:	9f 93       	push	r25
    8fe6:	af 93       	push	r26
    8fe8:	bf 93       	push	r27
    8fea:	ef 93       	push	r30
    8fec:	ff 93       	push	r31
    8fee:	df 93       	push	r29
    8ff0:	cf 93       	push	r28
    8ff2:	cd b7       	in	r28, 0x3d	; 61
    8ff4:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[2] != NULL)
    8ff6:	80 91 48 02 	lds	r24, 0x0248
    8ffa:	90 91 49 02 	lds	r25, 0x0249
    8ffe:	00 97       	sbiw	r24, 0x00	; 0
    9000:	29 f0       	breq	.+10     	; 0x900c <__vector_3+0x40>
	{
		EXTI_ApFunction_AppFun[2]();
    9002:	e0 91 48 02 	lds	r30, 0x0248
    9006:	f0 91 49 02 	lds	r31, 0x0249
    900a:	09 95       	icall
	}
}
    900c:	cf 91       	pop	r28
    900e:	df 91       	pop	r29
    9010:	ff 91       	pop	r31
    9012:	ef 91       	pop	r30
    9014:	bf 91       	pop	r27
    9016:	af 91       	pop	r26
    9018:	9f 91       	pop	r25
    901a:	8f 91       	pop	r24
    901c:	7f 91       	pop	r23
    901e:	6f 91       	pop	r22
    9020:	5f 91       	pop	r21
    9022:	4f 91       	pop	r20
    9024:	3f 91       	pop	r19
    9026:	2f 91       	pop	r18
    9028:	0f 90       	pop	r0
    902a:	0f be       	out	0x3f, r0	; 63
    902c:	0f 90       	pop	r0
    902e:	1f 90       	pop	r1
    9030:	18 95       	reti

00009032 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack( void (*Copy_pAppFunction)() , u8 Copy_u8IntNum)
{
    9032:	df 93       	push	r29
    9034:	cf 93       	push	r28
    9036:	00 d0       	rcall	.+0      	; 0x9038 <EXTI_enuCallBack+0x6>
    9038:	00 d0       	rcall	.+0      	; 0x903a <EXTI_enuCallBack+0x8>
    903a:	cd b7       	in	r28, 0x3d	; 61
    903c:	de b7       	in	r29, 0x3e	; 62
    903e:	9b 83       	std	Y+3, r25	; 0x03
    9040:	8a 83       	std	Y+2, r24	; 0x02
    9042:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    9044:	81 e0       	ldi	r24, 0x01	; 1
    9046:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pAppFunction != NULL)
    9048:	8a 81       	ldd	r24, Y+2	; 0x02
    904a:	9b 81       	ldd	r25, Y+3	; 0x03
    904c:	00 97       	sbiw	r24, 0x00	; 0
    904e:	89 f0       	breq	.+34     	; 0x9072 <EXTI_enuCallBack+0x40>
	{
		EXTI_ApFunction_AppFun[(Copy_u8IntNum -= INT0)] =  Copy_pAppFunction ;
    9050:	8c 81       	ldd	r24, Y+4	; 0x04
    9052:	8d 53       	subi	r24, 0x3D	; 61
    9054:	8c 83       	std	Y+4, r24	; 0x04
    9056:	8c 81       	ldd	r24, Y+4	; 0x04
    9058:	88 2f       	mov	r24, r24
    905a:	90 e0       	ldi	r25, 0x00	; 0
    905c:	2a 81       	ldd	r18, Y+2	; 0x02
    905e:	3b 81       	ldd	r19, Y+3	; 0x03
    9060:	88 0f       	add	r24, r24
    9062:	99 1f       	adc	r25, r25
    9064:	fc 01       	movw	r30, r24
    9066:	ec 5b       	subi	r30, 0xBC	; 188
    9068:	fd 4f       	sbci	r31, 0xFD	; 253
    906a:	31 83       	std	Z+1, r19	; 0x01
    906c:	20 83       	st	Z, r18
		Local_enuErrorState = ES_OK;
    906e:	19 82       	std	Y+1, r1	; 0x01
    9070:	02 c0       	rjmp	.+4      	; 0x9076 <EXTI_enuCallBack+0x44>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    9072:	83 e0       	ldi	r24, 0x03	; 3
    9074:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    9076:	89 81       	ldd	r24, Y+1	; 0x01
}
    9078:	0f 90       	pop	r0
    907a:	0f 90       	pop	r0
    907c:	0f 90       	pop	r0
    907e:	0f 90       	pop	r0
    9080:	cf 91       	pop	r28
    9082:	df 91       	pop	r29
    9084:	08 95       	ret

00009086 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
    9086:	df 93       	push	r29
    9088:	cf 93       	push	r28
    908a:	0f 92       	push	r0
    908c:	cd b7       	in	r28, 0x3d	; 61
    908e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    9090:	19 82       	std	Y+1, r1	; 0x01

	//

	return Local_enuErrorState ;
    9092:	89 81       	ldd	r24, Y+1	; 0x01
}
    9094:	0f 90       	pop	r0
    9096:	cf 91       	pop	r28
    9098:	df 91       	pop	r29
    909a:	08 95       	ret

0000909c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    909c:	df 93       	push	r29
    909e:	cf 93       	push	r28
    90a0:	00 d0       	rcall	.+0      	; 0x90a2 <DIO_enuSetPinDirection+0x6>
    90a2:	00 d0       	rcall	.+0      	; 0x90a4 <DIO_enuSetPinDirection+0x8>
    90a4:	00 d0       	rcall	.+0      	; 0x90a6 <DIO_enuSetPinDirection+0xa>
    90a6:	cd b7       	in	r28, 0x3d	; 61
    90a8:	de b7       	in	r29, 0x3e	; 62
    90aa:	8a 83       	std	Y+2, r24	; 0x02
    90ac:	6b 83       	std	Y+3, r22	; 0x03
    90ae:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    90b0:	81 e0       	ldi	r24, 0x01	; 1
    90b2:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    90b4:	8a 81       	ldd	r24, Y+2	; 0x02
    90b6:	84 30       	cpi	r24, 0x04	; 4
    90b8:	08 f0       	brcs	.+2      	; 0x90bc <DIO_enuSetPinDirection+0x20>
    90ba:	d0 c0       	rjmp	.+416    	; 0x925c <DIO_enuSetPinDirection+0x1c0>
    90bc:	8b 81       	ldd	r24, Y+3	; 0x03
    90be:	88 30       	cpi	r24, 0x08	; 8
    90c0:	08 f0       	brcs	.+2      	; 0x90c4 <DIO_enuSetPinDirection+0x28>
    90c2:	cc c0       	rjmp	.+408    	; 0x925c <DIO_enuSetPinDirection+0x1c0>
    90c4:	8c 81       	ldd	r24, Y+4	; 0x04
    90c6:	82 30       	cpi	r24, 0x02	; 2
    90c8:	08 f0       	brcs	.+2      	; 0x90cc <DIO_enuSetPinDirection+0x30>
    90ca:	c8 c0       	rjmp	.+400    	; 0x925c <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT )
	{
		switch (Copy_u8GroupID)
    90cc:	8a 81       	ldd	r24, Y+2	; 0x02
    90ce:	28 2f       	mov	r18, r24
    90d0:	30 e0       	ldi	r19, 0x00	; 0
    90d2:	3e 83       	std	Y+6, r19	; 0x06
    90d4:	2d 83       	std	Y+5, r18	; 0x05
    90d6:	6d 81       	ldd	r22, Y+5	; 0x05
    90d8:	7e 81       	ldd	r23, Y+6	; 0x06
    90da:	61 30       	cpi	r22, 0x01	; 1
    90dc:	71 05       	cpc	r23, r1
    90de:	09 f4       	brne	.+2      	; 0x90e2 <DIO_enuSetPinDirection+0x46>
    90e0:	41 c0       	rjmp	.+130    	; 0x9164 <DIO_enuSetPinDirection+0xc8>
    90e2:	8d 81       	ldd	r24, Y+5	; 0x05
    90e4:	9e 81       	ldd	r25, Y+6	; 0x06
    90e6:	82 30       	cpi	r24, 0x02	; 2
    90e8:	91 05       	cpc	r25, r1
    90ea:	34 f4       	brge	.+12     	; 0x90f8 <DIO_enuSetPinDirection+0x5c>
    90ec:	2d 81       	ldd	r18, Y+5	; 0x05
    90ee:	3e 81       	ldd	r19, Y+6	; 0x06
    90f0:	21 15       	cp	r18, r1
    90f2:	31 05       	cpc	r19, r1
    90f4:	71 f0       	breq	.+28     	; 0x9112 <DIO_enuSetPinDirection+0x76>
    90f6:	b0 c0       	rjmp	.+352    	; 0x9258 <DIO_enuSetPinDirection+0x1bc>
    90f8:	6d 81       	ldd	r22, Y+5	; 0x05
    90fa:	7e 81       	ldd	r23, Y+6	; 0x06
    90fc:	62 30       	cpi	r22, 0x02	; 2
    90fe:	71 05       	cpc	r23, r1
    9100:	09 f4       	brne	.+2      	; 0x9104 <DIO_enuSetPinDirection+0x68>
    9102:	59 c0       	rjmp	.+178    	; 0x91b6 <DIO_enuSetPinDirection+0x11a>
    9104:	8d 81       	ldd	r24, Y+5	; 0x05
    9106:	9e 81       	ldd	r25, Y+6	; 0x06
    9108:	83 30       	cpi	r24, 0x03	; 3
    910a:	91 05       	cpc	r25, r1
    910c:	09 f4       	brne	.+2      	; 0x9110 <DIO_enuSetPinDirection+0x74>
    910e:	7c c0       	rjmp	.+248    	; 0x9208 <DIO_enuSetPinDirection+0x16c>
    9110:	a3 c0       	rjmp	.+326    	; 0x9258 <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    9112:	aa e3       	ldi	r26, 0x3A	; 58
    9114:	b0 e0       	ldi	r27, 0x00	; 0
    9116:	ea e3       	ldi	r30, 0x3A	; 58
    9118:	f0 e0       	ldi	r31, 0x00	; 0
    911a:	80 81       	ld	r24, Z
    911c:	48 2f       	mov	r20, r24
    911e:	8b 81       	ldd	r24, Y+3	; 0x03
    9120:	28 2f       	mov	r18, r24
    9122:	30 e0       	ldi	r19, 0x00	; 0
    9124:	81 e0       	ldi	r24, 0x01	; 1
    9126:	90 e0       	ldi	r25, 0x00	; 0
    9128:	02 c0       	rjmp	.+4      	; 0x912e <DIO_enuSetPinDirection+0x92>
    912a:	88 0f       	add	r24, r24
    912c:	99 1f       	adc	r25, r25
    912e:	2a 95       	dec	r18
    9130:	e2 f7       	brpl	.-8      	; 0x912a <DIO_enuSetPinDirection+0x8e>
    9132:	80 95       	com	r24
    9134:	84 23       	and	r24, r20
    9136:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction <<   Copy_u8PinID );
    9138:	aa e3       	ldi	r26, 0x3A	; 58
    913a:	b0 e0       	ldi	r27, 0x00	; 0
    913c:	ea e3       	ldi	r30, 0x3A	; 58
    913e:	f0 e0       	ldi	r31, 0x00	; 0
    9140:	80 81       	ld	r24, Z
    9142:	48 2f       	mov	r20, r24
    9144:	8c 81       	ldd	r24, Y+4	; 0x04
    9146:	28 2f       	mov	r18, r24
    9148:	30 e0       	ldi	r19, 0x00	; 0
    914a:	8b 81       	ldd	r24, Y+3	; 0x03
    914c:	88 2f       	mov	r24, r24
    914e:	90 e0       	ldi	r25, 0x00	; 0
    9150:	b9 01       	movw	r22, r18
    9152:	02 c0       	rjmp	.+4      	; 0x9158 <DIO_enuSetPinDirection+0xbc>
    9154:	66 0f       	add	r22, r22
    9156:	77 1f       	adc	r23, r23
    9158:	8a 95       	dec	r24
    915a:	e2 f7       	brpl	.-8      	; 0x9154 <DIO_enuSetPinDirection+0xb8>
    915c:	cb 01       	movw	r24, r22
    915e:	84 2b       	or	r24, r20
    9160:	8c 93       	st	X, r24
    9162:	7a c0       	rjmp	.+244    	; 0x9258 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    9164:	a7 e3       	ldi	r26, 0x37	; 55
    9166:	b0 e0       	ldi	r27, 0x00	; 0
    9168:	e7 e3       	ldi	r30, 0x37	; 55
    916a:	f0 e0       	ldi	r31, 0x00	; 0
    916c:	80 81       	ld	r24, Z
    916e:	48 2f       	mov	r20, r24
    9170:	8b 81       	ldd	r24, Y+3	; 0x03
    9172:	28 2f       	mov	r18, r24
    9174:	30 e0       	ldi	r19, 0x00	; 0
    9176:	81 e0       	ldi	r24, 0x01	; 1
    9178:	90 e0       	ldi	r25, 0x00	; 0
    917a:	02 c0       	rjmp	.+4      	; 0x9180 <DIO_enuSetPinDirection+0xe4>
    917c:	88 0f       	add	r24, r24
    917e:	99 1f       	adc	r25, r25
    9180:	2a 95       	dec	r18
    9182:	e2 f7       	brpl	.-8      	; 0x917c <DIO_enuSetPinDirection+0xe0>
    9184:	80 95       	com	r24
    9186:	84 23       	and	r24, r20
    9188:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction <<   Copy_u8PinID );
    918a:	a7 e3       	ldi	r26, 0x37	; 55
    918c:	b0 e0       	ldi	r27, 0x00	; 0
    918e:	e7 e3       	ldi	r30, 0x37	; 55
    9190:	f0 e0       	ldi	r31, 0x00	; 0
    9192:	80 81       	ld	r24, Z
    9194:	48 2f       	mov	r20, r24
    9196:	8c 81       	ldd	r24, Y+4	; 0x04
    9198:	28 2f       	mov	r18, r24
    919a:	30 e0       	ldi	r19, 0x00	; 0
    919c:	8b 81       	ldd	r24, Y+3	; 0x03
    919e:	88 2f       	mov	r24, r24
    91a0:	90 e0       	ldi	r25, 0x00	; 0
    91a2:	b9 01       	movw	r22, r18
    91a4:	02 c0       	rjmp	.+4      	; 0x91aa <DIO_enuSetPinDirection+0x10e>
    91a6:	66 0f       	add	r22, r22
    91a8:	77 1f       	adc	r23, r23
    91aa:	8a 95       	dec	r24
    91ac:	e2 f7       	brpl	.-8      	; 0x91a6 <DIO_enuSetPinDirection+0x10a>
    91ae:	cb 01       	movw	r24, r22
    91b0:	84 2b       	or	r24, r20
    91b2:	8c 93       	st	X, r24
    91b4:	51 c0       	rjmp	.+162    	; 0x9258 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    91b6:	a4 e3       	ldi	r26, 0x34	; 52
    91b8:	b0 e0       	ldi	r27, 0x00	; 0
    91ba:	e4 e3       	ldi	r30, 0x34	; 52
    91bc:	f0 e0       	ldi	r31, 0x00	; 0
    91be:	80 81       	ld	r24, Z
    91c0:	48 2f       	mov	r20, r24
    91c2:	8b 81       	ldd	r24, Y+3	; 0x03
    91c4:	28 2f       	mov	r18, r24
    91c6:	30 e0       	ldi	r19, 0x00	; 0
    91c8:	81 e0       	ldi	r24, 0x01	; 1
    91ca:	90 e0       	ldi	r25, 0x00	; 0
    91cc:	02 c0       	rjmp	.+4      	; 0x91d2 <DIO_enuSetPinDirection+0x136>
    91ce:	88 0f       	add	r24, r24
    91d0:	99 1f       	adc	r25, r25
    91d2:	2a 95       	dec	r18
    91d4:	e2 f7       	brpl	.-8      	; 0x91ce <DIO_enuSetPinDirection+0x132>
    91d6:	80 95       	com	r24
    91d8:	84 23       	and	r24, r20
    91da:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction <<   Copy_u8PinID );
    91dc:	a4 e3       	ldi	r26, 0x34	; 52
    91de:	b0 e0       	ldi	r27, 0x00	; 0
    91e0:	e4 e3       	ldi	r30, 0x34	; 52
    91e2:	f0 e0       	ldi	r31, 0x00	; 0
    91e4:	80 81       	ld	r24, Z
    91e6:	48 2f       	mov	r20, r24
    91e8:	8c 81       	ldd	r24, Y+4	; 0x04
    91ea:	28 2f       	mov	r18, r24
    91ec:	30 e0       	ldi	r19, 0x00	; 0
    91ee:	8b 81       	ldd	r24, Y+3	; 0x03
    91f0:	88 2f       	mov	r24, r24
    91f2:	90 e0       	ldi	r25, 0x00	; 0
    91f4:	b9 01       	movw	r22, r18
    91f6:	02 c0       	rjmp	.+4      	; 0x91fc <DIO_enuSetPinDirection+0x160>
    91f8:	66 0f       	add	r22, r22
    91fa:	77 1f       	adc	r23, r23
    91fc:	8a 95       	dec	r24
    91fe:	e2 f7       	brpl	.-8      	; 0x91f8 <DIO_enuSetPinDirection+0x15c>
    9200:	cb 01       	movw	r24, r22
    9202:	84 2b       	or	r24, r20
    9204:	8c 93       	st	X, r24
    9206:	28 c0       	rjmp	.+80     	; 0x9258 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    9208:	a1 e3       	ldi	r26, 0x31	; 49
    920a:	b0 e0       	ldi	r27, 0x00	; 0
    920c:	e1 e3       	ldi	r30, 0x31	; 49
    920e:	f0 e0       	ldi	r31, 0x00	; 0
    9210:	80 81       	ld	r24, Z
    9212:	48 2f       	mov	r20, r24
    9214:	8b 81       	ldd	r24, Y+3	; 0x03
    9216:	28 2f       	mov	r18, r24
    9218:	30 e0       	ldi	r19, 0x00	; 0
    921a:	81 e0       	ldi	r24, 0x01	; 1
    921c:	90 e0       	ldi	r25, 0x00	; 0
    921e:	02 c0       	rjmp	.+4      	; 0x9224 <DIO_enuSetPinDirection+0x188>
    9220:	88 0f       	add	r24, r24
    9222:	99 1f       	adc	r25, r25
    9224:	2a 95       	dec	r18
    9226:	e2 f7       	brpl	.-8      	; 0x9220 <DIO_enuSetPinDirection+0x184>
    9228:	80 95       	com	r24
    922a:	84 23       	and	r24, r20
    922c:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction <<   Copy_u8PinID );
    922e:	a1 e3       	ldi	r26, 0x31	; 49
    9230:	b0 e0       	ldi	r27, 0x00	; 0
    9232:	e1 e3       	ldi	r30, 0x31	; 49
    9234:	f0 e0       	ldi	r31, 0x00	; 0
    9236:	80 81       	ld	r24, Z
    9238:	48 2f       	mov	r20, r24
    923a:	8c 81       	ldd	r24, Y+4	; 0x04
    923c:	28 2f       	mov	r18, r24
    923e:	30 e0       	ldi	r19, 0x00	; 0
    9240:	8b 81       	ldd	r24, Y+3	; 0x03
    9242:	88 2f       	mov	r24, r24
    9244:	90 e0       	ldi	r25, 0x00	; 0
    9246:	b9 01       	movw	r22, r18
    9248:	02 c0       	rjmp	.+4      	; 0x924e <DIO_enuSetPinDirection+0x1b2>
    924a:	66 0f       	add	r22, r22
    924c:	77 1f       	adc	r23, r23
    924e:	8a 95       	dec	r24
    9250:	e2 f7       	brpl	.-8      	; 0x924a <DIO_enuSetPinDirection+0x1ae>
    9252:	cb 01       	movw	r24, r22
    9254:	84 2b       	or	r24, r20
    9256:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    9258:	19 82       	std	Y+1, r1	; 0x01
    925a:	02 c0       	rjmp	.+4      	; 0x9260 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    925c:	82 e0       	ldi	r24, 0x02	; 2
    925e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    9260:	89 81       	ldd	r24, Y+1	; 0x01
}
    9262:	26 96       	adiw	r28, 0x06	; 6
    9264:	0f b6       	in	r0, 0x3f	; 63
    9266:	f8 94       	cli
    9268:	de bf       	out	0x3e, r29	; 62
    926a:	0f be       	out	0x3f, r0	; 63
    926c:	cd bf       	out	0x3d, r28	; 61
    926e:	cf 91       	pop	r28
    9270:	df 91       	pop	r29
    9272:	08 95       	ret

00009274 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    9274:	df 93       	push	r29
    9276:	cf 93       	push	r28
    9278:	00 d0       	rcall	.+0      	; 0x927a <DIO_enuSetPinValue+0x6>
    927a:	00 d0       	rcall	.+0      	; 0x927c <DIO_enuSetPinValue+0x8>
    927c:	00 d0       	rcall	.+0      	; 0x927e <DIO_enuSetPinValue+0xa>
    927e:	cd b7       	in	r28, 0x3d	; 61
    9280:	de b7       	in	r29, 0x3e	; 62
    9282:	8a 83       	std	Y+2, r24	; 0x02
    9284:	6b 83       	std	Y+3, r22	; 0x03
    9286:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    9288:	81 e0       	ldi	r24, 0x01	; 1
    928a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    928c:	8a 81       	ldd	r24, Y+2	; 0x02
    928e:	84 30       	cpi	r24, 0x04	; 4
    9290:	08 f0       	brcs	.+2      	; 0x9294 <DIO_enuSetPinValue+0x20>
    9292:	d3 c0       	rjmp	.+422    	; 0x943a <DIO_enuSetPinValue+0x1c6>
    9294:	8b 81       	ldd	r24, Y+3	; 0x03
    9296:	88 30       	cpi	r24, 0x08	; 8
    9298:	08 f0       	brcs	.+2      	; 0x929c <DIO_enuSetPinValue+0x28>
    929a:	cf c0       	rjmp	.+414    	; 0x943a <DIO_enuSetPinValue+0x1c6>
    929c:	8c 81       	ldd	r24, Y+4	; 0x04
    929e:	82 30       	cpi	r24, 0x02	; 2
    92a0:	20 f0       	brcs	.+8      	; 0x92aa <DIO_enuSetPinValue+0x36>
    92a2:	8c 81       	ldd	r24, Y+4	; 0x04
    92a4:	82 30       	cpi	r24, 0x02	; 2
    92a6:	08 f0       	brcs	.+2      	; 0x92aa <DIO_enuSetPinValue+0x36>
    92a8:	c8 c0       	rjmp	.+400    	; 0x943a <DIO_enuSetPinValue+0x1c6>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ) )
	{
		switch (Copy_u8GroupID)
    92aa:	8a 81       	ldd	r24, Y+2	; 0x02
    92ac:	28 2f       	mov	r18, r24
    92ae:	30 e0       	ldi	r19, 0x00	; 0
    92b0:	3e 83       	std	Y+6, r19	; 0x06
    92b2:	2d 83       	std	Y+5, r18	; 0x05
    92b4:	6d 81       	ldd	r22, Y+5	; 0x05
    92b6:	7e 81       	ldd	r23, Y+6	; 0x06
    92b8:	61 30       	cpi	r22, 0x01	; 1
    92ba:	71 05       	cpc	r23, r1
    92bc:	09 f4       	brne	.+2      	; 0x92c0 <DIO_enuSetPinValue+0x4c>
    92be:	41 c0       	rjmp	.+130    	; 0x9342 <DIO_enuSetPinValue+0xce>
    92c0:	8d 81       	ldd	r24, Y+5	; 0x05
    92c2:	9e 81       	ldd	r25, Y+6	; 0x06
    92c4:	82 30       	cpi	r24, 0x02	; 2
    92c6:	91 05       	cpc	r25, r1
    92c8:	34 f4       	brge	.+12     	; 0x92d6 <DIO_enuSetPinValue+0x62>
    92ca:	2d 81       	ldd	r18, Y+5	; 0x05
    92cc:	3e 81       	ldd	r19, Y+6	; 0x06
    92ce:	21 15       	cp	r18, r1
    92d0:	31 05       	cpc	r19, r1
    92d2:	71 f0       	breq	.+28     	; 0x92f0 <DIO_enuSetPinValue+0x7c>
    92d4:	b0 c0       	rjmp	.+352    	; 0x9436 <DIO_enuSetPinValue+0x1c2>
    92d6:	6d 81       	ldd	r22, Y+5	; 0x05
    92d8:	7e 81       	ldd	r23, Y+6	; 0x06
    92da:	62 30       	cpi	r22, 0x02	; 2
    92dc:	71 05       	cpc	r23, r1
    92de:	09 f4       	brne	.+2      	; 0x92e2 <DIO_enuSetPinValue+0x6e>
    92e0:	59 c0       	rjmp	.+178    	; 0x9394 <DIO_enuSetPinValue+0x120>
    92e2:	8d 81       	ldd	r24, Y+5	; 0x05
    92e4:	9e 81       	ldd	r25, Y+6	; 0x06
    92e6:	83 30       	cpi	r24, 0x03	; 3
    92e8:	91 05       	cpc	r25, r1
    92ea:	09 f4       	brne	.+2      	; 0x92ee <DIO_enuSetPinValue+0x7a>
    92ec:	7c c0       	rjmp	.+248    	; 0x93e6 <DIO_enuSetPinValue+0x172>
    92ee:	a3 c0       	rjmp	.+326    	; 0x9436 <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    92f0:	ab e3       	ldi	r26, 0x3B	; 59
    92f2:	b0 e0       	ldi	r27, 0x00	; 0
    92f4:	eb e3       	ldi	r30, 0x3B	; 59
    92f6:	f0 e0       	ldi	r31, 0x00	; 0
    92f8:	80 81       	ld	r24, Z
    92fa:	48 2f       	mov	r20, r24
    92fc:	8b 81       	ldd	r24, Y+3	; 0x03
    92fe:	28 2f       	mov	r18, r24
    9300:	30 e0       	ldi	r19, 0x00	; 0
    9302:	81 e0       	ldi	r24, 0x01	; 1
    9304:	90 e0       	ldi	r25, 0x00	; 0
    9306:	02 c0       	rjmp	.+4      	; 0x930c <DIO_enuSetPinValue+0x98>
    9308:	88 0f       	add	r24, r24
    930a:	99 1f       	adc	r25, r25
    930c:	2a 95       	dec	r18
    930e:	e2 f7       	brpl	.-8      	; 0x9308 <DIO_enuSetPinValue+0x94>
    9310:	80 95       	com	r24
    9312:	84 23       	and	r24, r20
    9314:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value <<   Copy_u8PinID );
    9316:	ab e3       	ldi	r26, 0x3B	; 59
    9318:	b0 e0       	ldi	r27, 0x00	; 0
    931a:	eb e3       	ldi	r30, 0x3B	; 59
    931c:	f0 e0       	ldi	r31, 0x00	; 0
    931e:	80 81       	ld	r24, Z
    9320:	48 2f       	mov	r20, r24
    9322:	8c 81       	ldd	r24, Y+4	; 0x04
    9324:	28 2f       	mov	r18, r24
    9326:	30 e0       	ldi	r19, 0x00	; 0
    9328:	8b 81       	ldd	r24, Y+3	; 0x03
    932a:	88 2f       	mov	r24, r24
    932c:	90 e0       	ldi	r25, 0x00	; 0
    932e:	b9 01       	movw	r22, r18
    9330:	02 c0       	rjmp	.+4      	; 0x9336 <DIO_enuSetPinValue+0xc2>
    9332:	66 0f       	add	r22, r22
    9334:	77 1f       	adc	r23, r23
    9336:	8a 95       	dec	r24
    9338:	e2 f7       	brpl	.-8      	; 0x9332 <DIO_enuSetPinValue+0xbe>
    933a:	cb 01       	movw	r24, r22
    933c:	84 2b       	or	r24, r20
    933e:	8c 93       	st	X, r24
    9340:	7a c0       	rjmp	.+244    	; 0x9436 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    9342:	a8 e3       	ldi	r26, 0x38	; 56
    9344:	b0 e0       	ldi	r27, 0x00	; 0
    9346:	e8 e3       	ldi	r30, 0x38	; 56
    9348:	f0 e0       	ldi	r31, 0x00	; 0
    934a:	80 81       	ld	r24, Z
    934c:	48 2f       	mov	r20, r24
    934e:	8b 81       	ldd	r24, Y+3	; 0x03
    9350:	28 2f       	mov	r18, r24
    9352:	30 e0       	ldi	r19, 0x00	; 0
    9354:	81 e0       	ldi	r24, 0x01	; 1
    9356:	90 e0       	ldi	r25, 0x00	; 0
    9358:	02 c0       	rjmp	.+4      	; 0x935e <DIO_enuSetPinValue+0xea>
    935a:	88 0f       	add	r24, r24
    935c:	99 1f       	adc	r25, r25
    935e:	2a 95       	dec	r18
    9360:	e2 f7       	brpl	.-8      	; 0x935a <DIO_enuSetPinValue+0xe6>
    9362:	80 95       	com	r24
    9364:	84 23       	and	r24, r20
    9366:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value <<   Copy_u8PinID );
    9368:	a8 e3       	ldi	r26, 0x38	; 56
    936a:	b0 e0       	ldi	r27, 0x00	; 0
    936c:	e8 e3       	ldi	r30, 0x38	; 56
    936e:	f0 e0       	ldi	r31, 0x00	; 0
    9370:	80 81       	ld	r24, Z
    9372:	48 2f       	mov	r20, r24
    9374:	8c 81       	ldd	r24, Y+4	; 0x04
    9376:	28 2f       	mov	r18, r24
    9378:	30 e0       	ldi	r19, 0x00	; 0
    937a:	8b 81       	ldd	r24, Y+3	; 0x03
    937c:	88 2f       	mov	r24, r24
    937e:	90 e0       	ldi	r25, 0x00	; 0
    9380:	b9 01       	movw	r22, r18
    9382:	02 c0       	rjmp	.+4      	; 0x9388 <DIO_enuSetPinValue+0x114>
    9384:	66 0f       	add	r22, r22
    9386:	77 1f       	adc	r23, r23
    9388:	8a 95       	dec	r24
    938a:	e2 f7       	brpl	.-8      	; 0x9384 <DIO_enuSetPinValue+0x110>
    938c:	cb 01       	movw	r24, r22
    938e:	84 2b       	or	r24, r20
    9390:	8c 93       	st	X, r24
    9392:	51 c0       	rjmp	.+162    	; 0x9436 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    9394:	a5 e3       	ldi	r26, 0x35	; 53
    9396:	b0 e0       	ldi	r27, 0x00	; 0
    9398:	e5 e3       	ldi	r30, 0x35	; 53
    939a:	f0 e0       	ldi	r31, 0x00	; 0
    939c:	80 81       	ld	r24, Z
    939e:	48 2f       	mov	r20, r24
    93a0:	8b 81       	ldd	r24, Y+3	; 0x03
    93a2:	28 2f       	mov	r18, r24
    93a4:	30 e0       	ldi	r19, 0x00	; 0
    93a6:	81 e0       	ldi	r24, 0x01	; 1
    93a8:	90 e0       	ldi	r25, 0x00	; 0
    93aa:	02 c0       	rjmp	.+4      	; 0x93b0 <DIO_enuSetPinValue+0x13c>
    93ac:	88 0f       	add	r24, r24
    93ae:	99 1f       	adc	r25, r25
    93b0:	2a 95       	dec	r18
    93b2:	e2 f7       	brpl	.-8      	; 0x93ac <DIO_enuSetPinValue+0x138>
    93b4:	80 95       	com	r24
    93b6:	84 23       	and	r24, r20
    93b8:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value <<   Copy_u8PinID );
    93ba:	a5 e3       	ldi	r26, 0x35	; 53
    93bc:	b0 e0       	ldi	r27, 0x00	; 0
    93be:	e5 e3       	ldi	r30, 0x35	; 53
    93c0:	f0 e0       	ldi	r31, 0x00	; 0
    93c2:	80 81       	ld	r24, Z
    93c4:	48 2f       	mov	r20, r24
    93c6:	8c 81       	ldd	r24, Y+4	; 0x04
    93c8:	28 2f       	mov	r18, r24
    93ca:	30 e0       	ldi	r19, 0x00	; 0
    93cc:	8b 81       	ldd	r24, Y+3	; 0x03
    93ce:	88 2f       	mov	r24, r24
    93d0:	90 e0       	ldi	r25, 0x00	; 0
    93d2:	b9 01       	movw	r22, r18
    93d4:	02 c0       	rjmp	.+4      	; 0x93da <DIO_enuSetPinValue+0x166>
    93d6:	66 0f       	add	r22, r22
    93d8:	77 1f       	adc	r23, r23
    93da:	8a 95       	dec	r24
    93dc:	e2 f7       	brpl	.-8      	; 0x93d6 <DIO_enuSetPinValue+0x162>
    93de:	cb 01       	movw	r24, r22
    93e0:	84 2b       	or	r24, r20
    93e2:	8c 93       	st	X, r24
    93e4:	28 c0       	rjmp	.+80     	; 0x9436 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    93e6:	a2 e3       	ldi	r26, 0x32	; 50
    93e8:	b0 e0       	ldi	r27, 0x00	; 0
    93ea:	e2 e3       	ldi	r30, 0x32	; 50
    93ec:	f0 e0       	ldi	r31, 0x00	; 0
    93ee:	80 81       	ld	r24, Z
    93f0:	48 2f       	mov	r20, r24
    93f2:	8b 81       	ldd	r24, Y+3	; 0x03
    93f4:	28 2f       	mov	r18, r24
    93f6:	30 e0       	ldi	r19, 0x00	; 0
    93f8:	81 e0       	ldi	r24, 0x01	; 1
    93fa:	90 e0       	ldi	r25, 0x00	; 0
    93fc:	02 c0       	rjmp	.+4      	; 0x9402 <DIO_enuSetPinValue+0x18e>
    93fe:	88 0f       	add	r24, r24
    9400:	99 1f       	adc	r25, r25
    9402:	2a 95       	dec	r18
    9404:	e2 f7       	brpl	.-8      	; 0x93fe <DIO_enuSetPinValue+0x18a>
    9406:	80 95       	com	r24
    9408:	84 23       	and	r24, r20
    940a:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value <<   Copy_u8PinID );
    940c:	a2 e3       	ldi	r26, 0x32	; 50
    940e:	b0 e0       	ldi	r27, 0x00	; 0
    9410:	e2 e3       	ldi	r30, 0x32	; 50
    9412:	f0 e0       	ldi	r31, 0x00	; 0
    9414:	80 81       	ld	r24, Z
    9416:	48 2f       	mov	r20, r24
    9418:	8c 81       	ldd	r24, Y+4	; 0x04
    941a:	28 2f       	mov	r18, r24
    941c:	30 e0       	ldi	r19, 0x00	; 0
    941e:	8b 81       	ldd	r24, Y+3	; 0x03
    9420:	88 2f       	mov	r24, r24
    9422:	90 e0       	ldi	r25, 0x00	; 0
    9424:	b9 01       	movw	r22, r18
    9426:	02 c0       	rjmp	.+4      	; 0x942c <DIO_enuSetPinValue+0x1b8>
    9428:	66 0f       	add	r22, r22
    942a:	77 1f       	adc	r23, r23
    942c:	8a 95       	dec	r24
    942e:	e2 f7       	brpl	.-8      	; 0x9428 <DIO_enuSetPinValue+0x1b4>
    9430:	cb 01       	movw	r24, r22
    9432:	84 2b       	or	r24, r20
    9434:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    9436:	19 82       	std	Y+1, r1	; 0x01
    9438:	02 c0       	rjmp	.+4      	; 0x943e <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    943a:	82 e0       	ldi	r24, 0x02	; 2
    943c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    943e:	89 81       	ldd	r24, Y+1	; 0x01
}
    9440:	26 96       	adiw	r28, 0x06	; 6
    9442:	0f b6       	in	r0, 0x3f	; 63
    9444:	f8 94       	cli
    9446:	de bf       	out	0x3e, r29	; 62
    9448:	0f be       	out	0x3f, r0	; 63
    944a:	cd bf       	out	0x3d, r28	; 61
    944c:	cf 91       	pop	r28
    944e:	df 91       	pop	r29
    9450:	08 95       	ret

00009452 <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    9452:	df 93       	push	r29
    9454:	cf 93       	push	r28
    9456:	00 d0       	rcall	.+0      	; 0x9458 <DIO_enuTogglePinValue+0x6>
    9458:	00 d0       	rcall	.+0      	; 0x945a <DIO_enuTogglePinValue+0x8>
    945a:	0f 92       	push	r0
    945c:	cd b7       	in	r28, 0x3d	; 61
    945e:	de b7       	in	r29, 0x3e	; 62
    9460:	8a 83       	std	Y+2, r24	; 0x02
    9462:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    9464:	81 e0       	ldi	r24, 0x01	; 1
    9466:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    9468:	8a 81       	ldd	r24, Y+2	; 0x02
    946a:	84 30       	cpi	r24, 0x04	; 4
    946c:	08 f0       	brcs	.+2      	; 0x9470 <DIO_enuTogglePinValue+0x1e>
    946e:	74 c0       	rjmp	.+232    	; 0x9558 <DIO_enuTogglePinValue+0x106>
    9470:	8b 81       	ldd	r24, Y+3	; 0x03
    9472:	88 30       	cpi	r24, 0x08	; 8
    9474:	08 f0       	brcs	.+2      	; 0x9478 <DIO_enuTogglePinValue+0x26>
    9476:	70 c0       	rjmp	.+224    	; 0x9558 <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
    9478:	8a 81       	ldd	r24, Y+2	; 0x02
    947a:	28 2f       	mov	r18, r24
    947c:	30 e0       	ldi	r19, 0x00	; 0
    947e:	3d 83       	std	Y+5, r19	; 0x05
    9480:	2c 83       	std	Y+4, r18	; 0x04
    9482:	8c 81       	ldd	r24, Y+4	; 0x04
    9484:	9d 81       	ldd	r25, Y+5	; 0x05
    9486:	81 30       	cpi	r24, 0x01	; 1
    9488:	91 05       	cpc	r25, r1
    948a:	49 f1       	breq	.+82     	; 0x94de <DIO_enuTogglePinValue+0x8c>
    948c:	2c 81       	ldd	r18, Y+4	; 0x04
    948e:	3d 81       	ldd	r19, Y+5	; 0x05
    9490:	22 30       	cpi	r18, 0x02	; 2
    9492:	31 05       	cpc	r19, r1
    9494:	2c f4       	brge	.+10     	; 0x94a0 <DIO_enuTogglePinValue+0x4e>
    9496:	8c 81       	ldd	r24, Y+4	; 0x04
    9498:	9d 81       	ldd	r25, Y+5	; 0x05
    949a:	00 97       	sbiw	r24, 0x00	; 0
    949c:	61 f0       	breq	.+24     	; 0x94b6 <DIO_enuTogglePinValue+0x64>
    949e:	5a c0       	rjmp	.+180    	; 0x9554 <DIO_enuTogglePinValue+0x102>
    94a0:	2c 81       	ldd	r18, Y+4	; 0x04
    94a2:	3d 81       	ldd	r19, Y+5	; 0x05
    94a4:	22 30       	cpi	r18, 0x02	; 2
    94a6:	31 05       	cpc	r19, r1
    94a8:	71 f1       	breq	.+92     	; 0x9506 <DIO_enuTogglePinValue+0xb4>
    94aa:	8c 81       	ldd	r24, Y+4	; 0x04
    94ac:	9d 81       	ldd	r25, Y+5	; 0x05
    94ae:	83 30       	cpi	r24, 0x03	; 3
    94b0:	91 05       	cpc	r25, r1
    94b2:	e9 f1       	breq	.+122    	; 0x952e <DIO_enuTogglePinValue+0xdc>
    94b4:	4f c0       	rjmp	.+158    	; 0x9554 <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    94b6:	ab e3       	ldi	r26, 0x3B	; 59
    94b8:	b0 e0       	ldi	r27, 0x00	; 0
    94ba:	eb e3       	ldi	r30, 0x3B	; 59
    94bc:	f0 e0       	ldi	r31, 0x00	; 0
    94be:	80 81       	ld	r24, Z
    94c0:	48 2f       	mov	r20, r24
    94c2:	8b 81       	ldd	r24, Y+3	; 0x03
    94c4:	28 2f       	mov	r18, r24
    94c6:	30 e0       	ldi	r19, 0x00	; 0
    94c8:	81 e0       	ldi	r24, 0x01	; 1
    94ca:	90 e0       	ldi	r25, 0x00	; 0
    94cc:	02 2e       	mov	r0, r18
    94ce:	02 c0       	rjmp	.+4      	; 0x94d4 <DIO_enuTogglePinValue+0x82>
    94d0:	88 0f       	add	r24, r24
    94d2:	99 1f       	adc	r25, r25
    94d4:	0a 94       	dec	r0
    94d6:	e2 f7       	brpl	.-8      	; 0x94d0 <DIO_enuTogglePinValue+0x7e>
    94d8:	84 27       	eor	r24, r20
    94da:	8c 93       	st	X, r24
    94dc:	3b c0       	rjmp	.+118    	; 0x9554 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    94de:	a8 e3       	ldi	r26, 0x38	; 56
    94e0:	b0 e0       	ldi	r27, 0x00	; 0
    94e2:	e8 e3       	ldi	r30, 0x38	; 56
    94e4:	f0 e0       	ldi	r31, 0x00	; 0
    94e6:	80 81       	ld	r24, Z
    94e8:	48 2f       	mov	r20, r24
    94ea:	8b 81       	ldd	r24, Y+3	; 0x03
    94ec:	28 2f       	mov	r18, r24
    94ee:	30 e0       	ldi	r19, 0x00	; 0
    94f0:	81 e0       	ldi	r24, 0x01	; 1
    94f2:	90 e0       	ldi	r25, 0x00	; 0
    94f4:	02 2e       	mov	r0, r18
    94f6:	02 c0       	rjmp	.+4      	; 0x94fc <DIO_enuTogglePinValue+0xaa>
    94f8:	88 0f       	add	r24, r24
    94fa:	99 1f       	adc	r25, r25
    94fc:	0a 94       	dec	r0
    94fe:	e2 f7       	brpl	.-8      	; 0x94f8 <DIO_enuTogglePinValue+0xa6>
    9500:	84 27       	eor	r24, r20
    9502:	8c 93       	st	X, r24
    9504:	27 c0       	rjmp	.+78     	; 0x9554 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    9506:	a5 e3       	ldi	r26, 0x35	; 53
    9508:	b0 e0       	ldi	r27, 0x00	; 0
    950a:	e5 e3       	ldi	r30, 0x35	; 53
    950c:	f0 e0       	ldi	r31, 0x00	; 0
    950e:	80 81       	ld	r24, Z
    9510:	48 2f       	mov	r20, r24
    9512:	8b 81       	ldd	r24, Y+3	; 0x03
    9514:	28 2f       	mov	r18, r24
    9516:	30 e0       	ldi	r19, 0x00	; 0
    9518:	81 e0       	ldi	r24, 0x01	; 1
    951a:	90 e0       	ldi	r25, 0x00	; 0
    951c:	02 2e       	mov	r0, r18
    951e:	02 c0       	rjmp	.+4      	; 0x9524 <DIO_enuTogglePinValue+0xd2>
    9520:	88 0f       	add	r24, r24
    9522:	99 1f       	adc	r25, r25
    9524:	0a 94       	dec	r0
    9526:	e2 f7       	brpl	.-8      	; 0x9520 <DIO_enuTogglePinValue+0xce>
    9528:	84 27       	eor	r24, r20
    952a:	8c 93       	st	X, r24
    952c:	13 c0       	rjmp	.+38     	; 0x9554 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    952e:	a2 e3       	ldi	r26, 0x32	; 50
    9530:	b0 e0       	ldi	r27, 0x00	; 0
    9532:	e2 e3       	ldi	r30, 0x32	; 50
    9534:	f0 e0       	ldi	r31, 0x00	; 0
    9536:	80 81       	ld	r24, Z
    9538:	48 2f       	mov	r20, r24
    953a:	8b 81       	ldd	r24, Y+3	; 0x03
    953c:	28 2f       	mov	r18, r24
    953e:	30 e0       	ldi	r19, 0x00	; 0
    9540:	81 e0       	ldi	r24, 0x01	; 1
    9542:	90 e0       	ldi	r25, 0x00	; 0
    9544:	02 2e       	mov	r0, r18
    9546:	02 c0       	rjmp	.+4      	; 0x954c <DIO_enuTogglePinValue+0xfa>
    9548:	88 0f       	add	r24, r24
    954a:	99 1f       	adc	r25, r25
    954c:	0a 94       	dec	r0
    954e:	e2 f7       	brpl	.-8      	; 0x9548 <DIO_enuTogglePinValue+0xf6>
    9550:	84 27       	eor	r24, r20
    9552:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    9554:	19 82       	std	Y+1, r1	; 0x01
    9556:	02 c0       	rjmp	.+4      	; 0x955c <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    9558:	82 e0       	ldi	r24, 0x02	; 2
    955a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    955c:	89 81       	ldd	r24, Y+1	; 0x01
}
    955e:	0f 90       	pop	r0
    9560:	0f 90       	pop	r0
    9562:	0f 90       	pop	r0
    9564:	0f 90       	pop	r0
    9566:	0f 90       	pop	r0
    9568:	cf 91       	pop	r28
    956a:	df 91       	pop	r29
    956c:	08 95       	ret

0000956e <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 *Copy_pu8Value)
{
    956e:	df 93       	push	r29
    9570:	cf 93       	push	r28
    9572:	cd b7       	in	r28, 0x3d	; 61
    9574:	de b7       	in	r29, 0x3e	; 62
    9576:	27 97       	sbiw	r28, 0x07	; 7
    9578:	0f b6       	in	r0, 0x3f	; 63
    957a:	f8 94       	cli
    957c:	de bf       	out	0x3e, r29	; 62
    957e:	0f be       	out	0x3f, r0	; 63
    9580:	cd bf       	out	0x3d, r28	; 61
    9582:	8a 83       	std	Y+2, r24	; 0x02
    9584:	6b 83       	std	Y+3, r22	; 0x03
    9586:	5d 83       	std	Y+5, r21	; 0x05
    9588:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    958a:	81 e0       	ldi	r24, 0x01	; 1
    958c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    958e:	8c 81       	ldd	r24, Y+4	; 0x04
    9590:	9d 81       	ldd	r25, Y+5	; 0x05
    9592:	00 97       	sbiw	r24, 0x00	; 0
    9594:	09 f4       	brne	.+2      	; 0x9598 <DIO_enuGetPinValue+0x2a>
    9596:	7d c0       	rjmp	.+250    	; 0x9692 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    9598:	8a 81       	ldd	r24, Y+2	; 0x02
    959a:	84 30       	cpi	r24, 0x04	; 4
    959c:	08 f0       	brcs	.+2      	; 0x95a0 <DIO_enuGetPinValue+0x32>
    959e:	76 c0       	rjmp	.+236    	; 0x968c <DIO_enuGetPinValue+0x11e>
    95a0:	8b 81       	ldd	r24, Y+3	; 0x03
    95a2:	88 30       	cpi	r24, 0x08	; 8
    95a4:	08 f0       	brcs	.+2      	; 0x95a8 <DIO_enuGetPinValue+0x3a>
    95a6:	72 c0       	rjmp	.+228    	; 0x968c <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    95a8:	8a 81       	ldd	r24, Y+2	; 0x02
    95aa:	28 2f       	mov	r18, r24
    95ac:	30 e0       	ldi	r19, 0x00	; 0
    95ae:	3f 83       	std	Y+7, r19	; 0x07
    95b0:	2e 83       	std	Y+6, r18	; 0x06
    95b2:	4e 81       	ldd	r20, Y+6	; 0x06
    95b4:	5f 81       	ldd	r21, Y+7	; 0x07
    95b6:	41 30       	cpi	r20, 0x01	; 1
    95b8:	51 05       	cpc	r21, r1
    95ba:	59 f1       	breq	.+86     	; 0x9612 <DIO_enuGetPinValue+0xa4>
    95bc:	8e 81       	ldd	r24, Y+6	; 0x06
    95be:	9f 81       	ldd	r25, Y+7	; 0x07
    95c0:	82 30       	cpi	r24, 0x02	; 2
    95c2:	91 05       	cpc	r25, r1
    95c4:	34 f4       	brge	.+12     	; 0x95d2 <DIO_enuGetPinValue+0x64>
    95c6:	2e 81       	ldd	r18, Y+6	; 0x06
    95c8:	3f 81       	ldd	r19, Y+7	; 0x07
    95ca:	21 15       	cp	r18, r1
    95cc:	31 05       	cpc	r19, r1
    95ce:	69 f0       	breq	.+26     	; 0x95ea <DIO_enuGetPinValue+0x7c>
    95d0:	5b c0       	rjmp	.+182    	; 0x9688 <DIO_enuGetPinValue+0x11a>
    95d2:	4e 81       	ldd	r20, Y+6	; 0x06
    95d4:	5f 81       	ldd	r21, Y+7	; 0x07
    95d6:	42 30       	cpi	r20, 0x02	; 2
    95d8:	51 05       	cpc	r21, r1
    95da:	79 f1       	breq	.+94     	; 0x963a <DIO_enuGetPinValue+0xcc>
    95dc:	8e 81       	ldd	r24, Y+6	; 0x06
    95de:	9f 81       	ldd	r25, Y+7	; 0x07
    95e0:	83 30       	cpi	r24, 0x03	; 3
    95e2:	91 05       	cpc	r25, r1
    95e4:	09 f4       	brne	.+2      	; 0x95e8 <DIO_enuGetPinValue+0x7a>
    95e6:	3d c0       	rjmp	.+122    	; 0x9662 <DIO_enuGetPinValue+0xf4>
    95e8:	4f c0       	rjmp	.+158    	; 0x9688 <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( ( PINA >> Copy_u8PinID ) & DIO_BIT_MASK );
    95ea:	e9 e3       	ldi	r30, 0x39	; 57
    95ec:	f0 e0       	ldi	r31, 0x00	; 0
    95ee:	80 81       	ld	r24, Z
    95f0:	28 2f       	mov	r18, r24
    95f2:	30 e0       	ldi	r19, 0x00	; 0
    95f4:	8b 81       	ldd	r24, Y+3	; 0x03
    95f6:	88 2f       	mov	r24, r24
    95f8:	90 e0       	ldi	r25, 0x00	; 0
    95fa:	a9 01       	movw	r20, r18
    95fc:	02 c0       	rjmp	.+4      	; 0x9602 <DIO_enuGetPinValue+0x94>
    95fe:	55 95       	asr	r21
    9600:	47 95       	ror	r20
    9602:	8a 95       	dec	r24
    9604:	e2 f7       	brpl	.-8      	; 0x95fe <DIO_enuGetPinValue+0x90>
    9606:	ca 01       	movw	r24, r20
    9608:	81 70       	andi	r24, 0x01	; 1
    960a:	ec 81       	ldd	r30, Y+4	; 0x04
    960c:	fd 81       	ldd	r31, Y+5	; 0x05
    960e:	80 83       	st	Z, r24
    9610:	3b c0       	rjmp	.+118    	; 0x9688 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( ( PINB >> Copy_u8PinID ) & DIO_BIT_MASK );
    9612:	e6 e3       	ldi	r30, 0x36	; 54
    9614:	f0 e0       	ldi	r31, 0x00	; 0
    9616:	80 81       	ld	r24, Z
    9618:	28 2f       	mov	r18, r24
    961a:	30 e0       	ldi	r19, 0x00	; 0
    961c:	8b 81       	ldd	r24, Y+3	; 0x03
    961e:	88 2f       	mov	r24, r24
    9620:	90 e0       	ldi	r25, 0x00	; 0
    9622:	a9 01       	movw	r20, r18
    9624:	02 c0       	rjmp	.+4      	; 0x962a <DIO_enuGetPinValue+0xbc>
    9626:	55 95       	asr	r21
    9628:	47 95       	ror	r20
    962a:	8a 95       	dec	r24
    962c:	e2 f7       	brpl	.-8      	; 0x9626 <DIO_enuGetPinValue+0xb8>
    962e:	ca 01       	movw	r24, r20
    9630:	81 70       	andi	r24, 0x01	; 1
    9632:	ec 81       	ldd	r30, Y+4	; 0x04
    9634:	fd 81       	ldd	r31, Y+5	; 0x05
    9636:	80 83       	st	Z, r24
    9638:	27 c0       	rjmp	.+78     	; 0x9688 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( ( PINC >> Copy_u8PinID ) & DIO_BIT_MASK );
    963a:	e3 e3       	ldi	r30, 0x33	; 51
    963c:	f0 e0       	ldi	r31, 0x00	; 0
    963e:	80 81       	ld	r24, Z
    9640:	28 2f       	mov	r18, r24
    9642:	30 e0       	ldi	r19, 0x00	; 0
    9644:	8b 81       	ldd	r24, Y+3	; 0x03
    9646:	88 2f       	mov	r24, r24
    9648:	90 e0       	ldi	r25, 0x00	; 0
    964a:	a9 01       	movw	r20, r18
    964c:	02 c0       	rjmp	.+4      	; 0x9652 <DIO_enuGetPinValue+0xe4>
    964e:	55 95       	asr	r21
    9650:	47 95       	ror	r20
    9652:	8a 95       	dec	r24
    9654:	e2 f7       	brpl	.-8      	; 0x964e <DIO_enuGetPinValue+0xe0>
    9656:	ca 01       	movw	r24, r20
    9658:	81 70       	andi	r24, 0x01	; 1
    965a:	ec 81       	ldd	r30, Y+4	; 0x04
    965c:	fd 81       	ldd	r31, Y+5	; 0x05
    965e:	80 83       	st	Z, r24
    9660:	13 c0       	rjmp	.+38     	; 0x9688 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( ( PIND >> Copy_u8PinID ) & DIO_BIT_MASK );
    9662:	e0 e3       	ldi	r30, 0x30	; 48
    9664:	f0 e0       	ldi	r31, 0x00	; 0
    9666:	80 81       	ld	r24, Z
    9668:	28 2f       	mov	r18, r24
    966a:	30 e0       	ldi	r19, 0x00	; 0
    966c:	8b 81       	ldd	r24, Y+3	; 0x03
    966e:	88 2f       	mov	r24, r24
    9670:	90 e0       	ldi	r25, 0x00	; 0
    9672:	a9 01       	movw	r20, r18
    9674:	02 c0       	rjmp	.+4      	; 0x967a <DIO_enuGetPinValue+0x10c>
    9676:	55 95       	asr	r21
    9678:	47 95       	ror	r20
    967a:	8a 95       	dec	r24
    967c:	e2 f7       	brpl	.-8      	; 0x9676 <DIO_enuGetPinValue+0x108>
    967e:	ca 01       	movw	r24, r20
    9680:	81 70       	andi	r24, 0x01	; 1
    9682:	ec 81       	ldd	r30, Y+4	; 0x04
    9684:	fd 81       	ldd	r31, Y+5	; 0x05
    9686:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    9688:	19 82       	std	Y+1, r1	; 0x01
    968a:	05 c0       	rjmp	.+10     	; 0x9696 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    968c:	82 e0       	ldi	r24, 0x02	; 2
    968e:	89 83       	std	Y+1, r24	; 0x01
    9690:	02 c0       	rjmp	.+4      	; 0x9696 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    9692:	83 e0       	ldi	r24, 0x03	; 3
    9694:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    9696:	89 81       	ldd	r24, Y+1	; 0x01
}
    9698:	27 96       	adiw	r28, 0x07	; 7
    969a:	0f b6       	in	r0, 0x3f	; 63
    969c:	f8 94       	cli
    969e:	de bf       	out	0x3e, r29	; 62
    96a0:	0f be       	out	0x3f, r0	; 63
    96a2:	cd bf       	out	0x3d, r28	; 61
    96a4:	cf 91       	pop	r28
    96a6:	df 91       	pop	r29
    96a8:	08 95       	ret

000096aa <ADC_enuInit>:

static void(*ADC_pFunISRFun)(void) =NULL;


ES_t ADC_enuInit(void)
{
    96aa:	df 93       	push	r29
    96ac:	cf 93       	push	r28
    96ae:	0f 92       	push	r0
    96b0:	cd b7       	in	r28, 0x3d	; 61
    96b2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    96b4:	81 e0       	ldi	r24, 0x01	; 1
    96b6:	89 83       	std	Y+1, r24	; 0x01

	//////////////////////////////////
	// 	Setting Prescalar Factor	//
	//////////////////////////////////
	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    96b8:	a6 e2       	ldi	r26, 0x26	; 38
    96ba:	b0 e0       	ldi	r27, 0x00	; 0
    96bc:	e6 e2       	ldi	r30, 0x26	; 38
    96be:	f0 e0       	ldi	r31, 0x00	; 0
    96c0:	80 81       	ld	r24, Z
    96c2:	88 7f       	andi	r24, 0xF8	; 248
    96c4:	8c 93       	st	X, r24
#if ( ADC_PRES >= PRES_2 && ADC_PRES <= PRES_128 )
	ADCSRA |= ( (ADC_PRES - PRES_0 ) << ADC_PRE_SCALAR_BITS );
    96c6:	a6 e2       	ldi	r26, 0x26	; 38
    96c8:	b0 e0       	ldi	r27, 0x00	; 0
    96ca:	e6 e2       	ldi	r30, 0x26	; 38
    96cc:	f0 e0       	ldi	r31, 0x00	; 0
    96ce:	80 81       	ld	r24, Z
    96d0:	86 60       	ori	r24, 0x06	; 6
    96d2:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	// Setting Reference Voltage	//
	//////////////////////////////////
	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    96d4:	a7 e2       	ldi	r26, 0x27	; 39
    96d6:	b0 e0       	ldi	r27, 0x00	; 0
    96d8:	e7 e2       	ldi	r30, 0x27	; 39
    96da:	f0 e0       	ldi	r31, 0x00	; 0
    96dc:	80 81       	ld	r24, Z
    96de:	8f 73       	andi	r24, 0x3F	; 63
    96e0:	8c 93       	st	X, r24
#if ( ADC_VREF >= AREF_REF && ADC_VREF <= INTERNAL_REF )
	ADMUX |= ( (ADC_VREF - AREF_REF) << ADC_REF_SEL_BITS);
    96e2:	a7 e2       	ldi	r26, 0x27	; 39
    96e4:	b0 e0       	ldi	r27, 0x00	; 0
    96e6:	e7 e2       	ldi	r30, 0x27	; 39
    96e8:	f0 e0       	ldi	r31, 0x00	; 0
    96ea:	80 81       	ld	r24, Z
    96ec:	80 64       	ori	r24, 0x40	; 64
    96ee:	8c 93       	st	X, r24

	//////////////////////////////////////
	// Setting Output Adjust Direction	//
	//////////////////////////////////////
#if ( ADC_ADJUST == RIGHT_ADJUST )
	ADMUX &= ~(BIT_MASK << ADLAR_BIT);
    96f0:	a7 e2       	ldi	r26, 0x27	; 39
    96f2:	b0 e0       	ldi	r27, 0x00	; 0
    96f4:	e7 e2       	ldi	r30, 0x27	; 39
    96f6:	f0 e0       	ldi	r31, 0x00	; 0
    96f8:	80 81       	ld	r24, Z
    96fa:	8f 7d       	andi	r24, 0xDF	; 223
    96fc:	8c 93       	st	X, r24
#endif

	//////////////////////////////////////
	//	 Selecting Initial Channel		//
	//////////////////////////////////////
	ADMUX &= ~(ADC_CH_SEL_BITS_MASK);
    96fe:	a7 e2       	ldi	r26, 0x27	; 39
    9700:	b0 e0       	ldi	r27, 0x00	; 0
    9702:	e7 e2       	ldi	r30, 0x27	; 39
    9704:	f0 e0       	ldi	r31, 0x00	; 0
    9706:	80 81       	ld	r24, Z
    9708:	80 7e       	andi	r24, 0xE0	; 224
    970a:	8c 93       	st	X, r24
#if ( ADC_INIT_CHANNEL >= CH_00 && ADC_INIT_CHANNEL <= CH_31 )
	ADMUX |= ( (ADC_INIT_CHANNEL - CH_00) << ADC_CH_SEL_BITS );
    970c:	a7 e2       	ldi	r26, 0x27	; 39
    970e:	b0 e0       	ldi	r27, 0x00	; 0
    9710:	e7 e2       	ldi	r30, 0x27	; 39
    9712:	f0 e0       	ldi	r31, 0x00	; 0
    9714:	80 81       	ld	r24, Z
    9716:	89 60       	ori	r24, 0x09	; 9
    9718:	8c 93       	st	X, r24
	//	 Setting ADC Interrupt Mode		//
	//////////////////////////////////////
#if ( ADC_INTERRUPT_MODE == ADC_POLLING )
	ADCSRA &= ~(BIT_MASK << ADC_INT_ENABLE_BIT);
#elif ( ADC_INTERRUPT_MODE == ADC_INTERRUPT )
	ADCSRA |= ( BIT_MASK << ADC_INT_ENABLE_BIT);
    971a:	a6 e2       	ldi	r26, 0x26	; 38
    971c:	b0 e0       	ldi	r27, 0x00	; 0
    971e:	e6 e2       	ldi	r30, 0x26	; 38
    9720:	f0 e0       	ldi	r31, 0x00	; 0
    9722:	80 81       	ld	r24, Z
    9724:	88 60       	ori	r24, 0x08	; 8
    9726:	8c 93       	st	X, r24
	///////////////////////////////////
	// Selecting ADC Trigger  Source //
	///////////////////////////////////
#if ( ADC_TRIGGER_SOURCE >= FREE_RUNNING && ADC_TRIGGER_SOURCE <= TIMER1_CAPT_EVENT )

	SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    9728:	a0 e5       	ldi	r26, 0x50	; 80
    972a:	b0 e0       	ldi	r27, 0x00	; 0
    972c:	e0 e5       	ldi	r30, 0x50	; 80
    972e:	f0 e0       	ldi	r31, 0x00	; 0
    9730:	80 81       	ld	r24, Z
    9732:	88 7f       	andi	r24, 0xF8	; 248
    9734:	8c 93       	st	X, r24

	SFIOR |= ( (ADC_INIT_CHANNEL - FREE_RUNNING) << ADC_TRIGGER_SEL_BITS );
    9736:	a0 e5       	ldi	r26, 0x50	; 80
    9738:	b0 e0       	ldi	r27, 0x00	; 0
    973a:	e0 e5       	ldi	r30, 0x50	; 80
    973c:	f0 e0       	ldi	r31, 0x00	; 0
    973e:	80 81       	ld	r24, Z
    9740:	87 6e       	ori	r24, 0xE7	; 231
    9742:	8c 93       	st	X, r24
	//////////////////////////////////
	// Selecting ADC Trigger Mode	//
	//////////////////////////////////
#if ( ADC_TRIGGER_MODE == AUTO_TRIGGER || ADC_TRIGGER_MODE == SINGLE_TRIGGER )

	ADCSRA &= ~(BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT);
    9744:	a6 e2       	ldi	r26, 0x26	; 38
    9746:	b0 e0       	ldi	r27, 0x00	; 0
    9748:	e6 e2       	ldi	r30, 0x26	; 38
    974a:	f0 e0       	ldi	r31, 0x00	; 0
    974c:	80 81       	ld	r24, Z
    974e:	8f 7d       	andi	r24, 0xDF	; 223
    9750:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	//	 ENABLE ADC Peripheral		//
	//////////////////////////////////
	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
    9752:	a6 e2       	ldi	r26, 0x26	; 38
    9754:	b0 e0       	ldi	r27, 0x00	; 0
    9756:	e6 e2       	ldi	r30, 0x26	; 38
    9758:	f0 e0       	ldi	r31, 0x00	; 0
    975a:	80 81       	ld	r24, Z
    975c:	80 68       	ori	r24, 0x80	; 128
    975e:	8c 93       	st	X, r24

	if( Local_enuErrorState != ES_OUT_RANGE)
    9760:	89 81       	ldd	r24, Y+1	; 0x01
    9762:	82 30       	cpi	r24, 0x02	; 2
    9764:	09 f0       	breq	.+2      	; 0x9768 <ADC_enuInit+0xbe>
		Local_enuErrorState = ES_OK ;
    9766:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    9768:	89 81       	ldd	r24, Y+1	; 0x01
}
    976a:	0f 90       	pop	r0
    976c:	cf 91       	pop	r28
    976e:	df 91       	pop	r29
    9770:	08 95       	ret

00009772 <ADC_enuSetPreScalar>:

ES_t ADC_enuSetPreScalar(u8 Copy_u8PreScalarID)
{
    9772:	df 93       	push	r29
    9774:	cf 93       	push	r28
    9776:	00 d0       	rcall	.+0      	; 0x9778 <ADC_enuSetPreScalar+0x6>
    9778:	cd b7       	in	r28, 0x3d	; 61
    977a:	de b7       	in	r29, 0x3e	; 62
    977c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    977e:	81 e0       	ldi	r24, 0x01	; 1
    9780:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    9782:	a6 e2       	ldi	r26, 0x26	; 38
    9784:	b0 e0       	ldi	r27, 0x00	; 0
    9786:	e6 e2       	ldi	r30, 0x26	; 38
    9788:	f0 e0       	ldi	r31, 0x00	; 0
    978a:	80 81       	ld	r24, Z
    978c:	88 7f       	andi	r24, 0xF8	; 248
    978e:	8c 93       	st	X, r24

	if ( Copy_u8PreScalarID >= PRES_2 && Copy_u8PreScalarID <= PRES_128 )
    9790:	8a 81       	ldd	r24, Y+2	; 0x02
    9792:	89 37       	cpi	r24, 0x79	; 121
    9794:	78 f0       	brcs	.+30     	; 0x97b4 <ADC_enuSetPreScalar+0x42>
    9796:	8a 81       	ldd	r24, Y+2	; 0x02
    9798:	88 23       	and	r24, r24
    979a:	64 f0       	brlt	.+24     	; 0x97b4 <ADC_enuSetPreScalar+0x42>
	{
		ADCSRA |= ( (Copy_u8PreScalarID - PRES_0 ) << ADC_PRE_SCALAR_BITS );
    979c:	a6 e2       	ldi	r26, 0x26	; 38
    979e:	b0 e0       	ldi	r27, 0x00	; 0
    97a0:	e6 e2       	ldi	r30, 0x26	; 38
    97a2:	f0 e0       	ldi	r31, 0x00	; 0
    97a4:	80 81       	ld	r24, Z
    97a6:	98 2f       	mov	r25, r24
    97a8:	8a 81       	ldd	r24, Y+2	; 0x02
    97aa:	88 57       	subi	r24, 0x78	; 120
    97ac:	89 2b       	or	r24, r25
    97ae:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    97b0:	19 82       	std	Y+1, r1	; 0x01
    97b2:	02 c0       	rjmp	.+4      	; 0x97b8 <ADC_enuSetPreScalar+0x46>
	}
	else
		Local_enuErrorState = ES_OUT_RANGE;
    97b4:	82 e0       	ldi	r24, 0x02	; 2
    97b6:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    97b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    97ba:	0f 90       	pop	r0
    97bc:	0f 90       	pop	r0
    97be:	cf 91       	pop	r28
    97c0:	df 91       	pop	r29
    97c2:	08 95       	ret

000097c4 <ADC_enuSetRefVolt>:

ES_t ADC_enuSetRefVolt(u8 Copy_u8RefVoltID)
{
    97c4:	df 93       	push	r29
    97c6:	cf 93       	push	r28
    97c8:	00 d0       	rcall	.+0      	; 0x97ca <ADC_enuSetRefVolt+0x6>
    97ca:	cd b7       	in	r28, 0x3d	; 61
    97cc:	de b7       	in	r29, 0x3e	; 62
    97ce:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    97d0:	81 e0       	ldi	r24, 0x01	; 1
    97d2:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    97d4:	a7 e2       	ldi	r26, 0x27	; 39
    97d6:	b0 e0       	ldi	r27, 0x00	; 0
    97d8:	e7 e2       	ldi	r30, 0x27	; 39
    97da:	f0 e0       	ldi	r31, 0x00	; 0
    97dc:	80 81       	ld	r24, Z
    97de:	8f 73       	andi	r24, 0x3F	; 63
    97e0:	8c 93       	st	X, r24

	if ( Copy_u8RefVoltID >= AREF_REF && Copy_u8RefVoltID <= INTERNAL_REF )
    97e2:	8a 81       	ldd	r24, Y+2	; 0x02
    97e4:	88 23       	and	r24, r24
    97e6:	dc f4       	brge	.+54     	; 0x981e <ADC_enuSetRefVolt+0x5a>
    97e8:	8a 81       	ldd	r24, Y+2	; 0x02
    97ea:	83 38       	cpi	r24, 0x83	; 131
    97ec:	c0 f4       	brcc	.+48     	; 0x981e <ADC_enuSetRefVolt+0x5a>
	{
		ADMUX |= ( (Copy_u8RefVoltID - AREF_REF) << ADC_REF_SEL_BITS);
    97ee:	a7 e2       	ldi	r26, 0x27	; 39
    97f0:	b0 e0       	ldi	r27, 0x00	; 0
    97f2:	e7 e2       	ldi	r30, 0x27	; 39
    97f4:	f0 e0       	ldi	r31, 0x00	; 0
    97f6:	80 81       	ld	r24, Z
    97f8:	28 2f       	mov	r18, r24
    97fa:	8a 81       	ldd	r24, Y+2	; 0x02
    97fc:	88 2f       	mov	r24, r24
    97fe:	90 e0       	ldi	r25, 0x00	; 0
    9800:	80 58       	subi	r24, 0x80	; 128
    9802:	90 40       	sbci	r25, 0x00	; 0
    9804:	00 24       	eor	r0, r0
    9806:	96 95       	lsr	r25
    9808:	87 95       	ror	r24
    980a:	07 94       	ror	r0
    980c:	96 95       	lsr	r25
    980e:	87 95       	ror	r24
    9810:	07 94       	ror	r0
    9812:	98 2f       	mov	r25, r24
    9814:	80 2d       	mov	r24, r0
    9816:	82 2b       	or	r24, r18
    9818:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    981a:	19 82       	std	Y+1, r1	; 0x01
    981c:	02 c0       	rjmp	.+4      	; 0x9822 <ADC_enuSetRefVolt+0x5e>
	}
	else
		Local_enuErrorState = ES_OUT_RANGE;
    981e:	82 e0       	ldi	r24, 0x02	; 2
    9820:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    9822:	89 81       	ldd	r24, Y+1	; 0x01
}
    9824:	0f 90       	pop	r0
    9826:	0f 90       	pop	r0
    9828:	cf 91       	pop	r28
    982a:	df 91       	pop	r29
    982c:	08 95       	ret

0000982e <ADC_enuSelectChannel>:


ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    982e:	df 93       	push	r29
    9830:	cf 93       	push	r28
    9832:	00 d0       	rcall	.+0      	; 0x9834 <ADC_enuSelectChannel+0x6>
    9834:	cd b7       	in	r28, 0x3d	; 61
    9836:	de b7       	in	r29, 0x3e	; 62
    9838:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    983a:	81 e0       	ldi	r24, 0x01	; 1
    983c:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ChannelID >= CH_00 && Copy_u8ChannelID <= CH_31 )
    983e:	8a 81       	ldd	r24, Y+2	; 0x02
    9840:	85 38       	cpi	r24, 0x85	; 133
    9842:	a0 f0       	brcs	.+40     	; 0x986c <ADC_enuSelectChannel+0x3e>
    9844:	8a 81       	ldd	r24, Y+2	; 0x02
    9846:	85 3a       	cpi	r24, 0xA5	; 165
    9848:	88 f4       	brcc	.+34     	; 0x986c <ADC_enuSelectChannel+0x3e>
	{
		ADMUX &= ~( ADC_CH_SEL_BITS_MASK);
    984a:	a7 e2       	ldi	r26, 0x27	; 39
    984c:	b0 e0       	ldi	r27, 0x00	; 0
    984e:	e7 e2       	ldi	r30, 0x27	; 39
    9850:	f0 e0       	ldi	r31, 0x00	; 0
    9852:	80 81       	ld	r24, Z
    9854:	80 7e       	andi	r24, 0xE0	; 224
    9856:	8c 93       	st	X, r24
		ADMUX |= (Copy_u8ChannelID << ADC_CH_SEL_BITS);
    9858:	a7 e2       	ldi	r26, 0x27	; 39
    985a:	b0 e0       	ldi	r27, 0x00	; 0
    985c:	e7 e2       	ldi	r30, 0x27	; 39
    985e:	f0 e0       	ldi	r31, 0x00	; 0
    9860:	90 81       	ld	r25, Z
    9862:	8a 81       	ldd	r24, Y+2	; 0x02
    9864:	89 2b       	or	r24, r25
    9866:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK ;
    9868:	19 82       	std	Y+1, r1	; 0x01
    986a:	02 c0       	rjmp	.+4      	; 0x9870 <ADC_enuSelectChannel+0x42>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    986c:	82 e0       	ldi	r24, 0x02	; 2
    986e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    9870:	89 81       	ldd	r24, Y+1	; 0x01
}
    9872:	0f 90       	pop	r0
    9874:	0f 90       	pop	r0
    9876:	cf 91       	pop	r28
    9878:	df 91       	pop	r29
    987a:	08 95       	ret

0000987c <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    987c:	df 93       	push	r29
    987e:	cf 93       	push	r28
    9880:	cd b7       	in	r28, 0x3d	; 61
    9882:	de b7       	in	r29, 0x3e	; 62

	ADCSRA |= (BIT_MASK << ADC_START_CONVERSION_BIT );
    9884:	a6 e2       	ldi	r26, 0x26	; 38
    9886:	b0 e0       	ldi	r27, 0x00	; 0
    9888:	e6 e2       	ldi	r30, 0x26	; 38
    988a:	f0 e0       	ldi	r31, 0x00	; 0
    988c:	80 81       	ld	r24, Z
    988e:	80 64       	ori	r24, 0x40	; 64
    9890:	8c 93       	st	X, r24

	return ES_OK;
    9892:	80 e0       	ldi	r24, 0x00	; 0
}
    9894:	cf 91       	pop	r28
    9896:	df 91       	pop	r29
    9898:	08 95       	ret

0000989a <ADC_enuEnableAutoTrigger>:

ES_t ADC_enuEnableAutoTrigger(u8 Copy_u8TriggerSource)
{
    989a:	df 93       	push	r29
    989c:	cf 93       	push	r28
    989e:	00 d0       	rcall	.+0      	; 0x98a0 <ADC_enuEnableAutoTrigger+0x6>
    98a0:	cd b7       	in	r28, 0x3d	; 61
    98a2:	de b7       	in	r29, 0x3e	; 62
    98a4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    98a6:	81 e0       	ldi	r24, 0x01	; 1
    98a8:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8TriggerSource >= FREE_RUNNING && Copy_u8TriggerSource <= TIMER1_CAPT_EVENT )
    98aa:	8a 81       	ldd	r24, Y+2	; 0x02
    98ac:	87 3a       	cpi	r24, 0xA7	; 167
    98ae:	08 f1       	brcs	.+66     	; 0x98f2 <ADC_enuEnableAutoTrigger+0x58>
    98b0:	8a 81       	ldd	r24, Y+2	; 0x02
    98b2:	8f 3a       	cpi	r24, 0xAF	; 175
    98b4:	f0 f4       	brcc	.+60     	; 0x98f2 <ADC_enuEnableAutoTrigger+0x58>
	{
		ADCSRA &= (BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );
    98b6:	a6 e2       	ldi	r26, 0x26	; 38
    98b8:	b0 e0       	ldi	r27, 0x00	; 0
    98ba:	e6 e2       	ldi	r30, 0x26	; 38
    98bc:	f0 e0       	ldi	r31, 0x00	; 0
    98be:	80 81       	ld	r24, Z
    98c0:	80 72       	andi	r24, 0x20	; 32
    98c2:	8c 93       	st	X, r24

		SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    98c4:	a0 e5       	ldi	r26, 0x50	; 80
    98c6:	b0 e0       	ldi	r27, 0x00	; 0
    98c8:	e0 e5       	ldi	r30, 0x50	; 80
    98ca:	f0 e0       	ldi	r31, 0x00	; 0
    98cc:	80 81       	ld	r24, Z
    98ce:	88 7f       	andi	r24, 0xF8	; 248
    98d0:	8c 93       	st	X, r24
		SFIOR |= ( (ADC_INIT_CHANNEL - FREE_RUNNING ) << ADC_TRIGGER_SEL_BITS );
    98d2:	a0 e5       	ldi	r26, 0x50	; 80
    98d4:	b0 e0       	ldi	r27, 0x00	; 0
    98d6:	e0 e5       	ldi	r30, 0x50	; 80
    98d8:	f0 e0       	ldi	r31, 0x00	; 0
    98da:	80 81       	ld	r24, Z
    98dc:	87 6e       	ori	r24, 0xE7	; 231
    98de:	8c 93       	st	X, r24

		ADCSRA |= (BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );
    98e0:	a6 e2       	ldi	r26, 0x26	; 38
    98e2:	b0 e0       	ldi	r27, 0x00	; 0
    98e4:	e6 e2       	ldi	r30, 0x26	; 38
    98e6:	f0 e0       	ldi	r31, 0x00	; 0
    98e8:	80 81       	ld	r24, Z
    98ea:	80 62       	ori	r24, 0x20	; 32
    98ec:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    98ee:	19 82       	std	Y+1, r1	; 0x01
    98f0:	02 c0       	rjmp	.+4      	; 0x98f6 <ADC_enuEnableAutoTrigger+0x5c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    98f2:	82 e0       	ldi	r24, 0x02	; 2
    98f4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    98f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    98f8:	0f 90       	pop	r0
    98fa:	0f 90       	pop	r0
    98fc:	cf 91       	pop	r28
    98fe:	df 91       	pop	r29
    9900:	08 95       	ret

00009902 <ADC_enuDisableAutoTrigger>:

ES_t ADC_enuDisableAutoTrigger(void)
{
    9902:	df 93       	push	r29
    9904:	cf 93       	push	r28
    9906:	cd b7       	in	r28, 0x3d	; 61
    9908:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~(BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );
    990a:	a6 e2       	ldi	r26, 0x26	; 38
    990c:	b0 e0       	ldi	r27, 0x00	; 0
    990e:	e6 e2       	ldi	r30, 0x26	; 38
    9910:	f0 e0       	ldi	r31, 0x00	; 0
    9912:	80 81       	ld	r24, Z
    9914:	8f 7d       	andi	r24, 0xDF	; 223
    9916:	8c 93       	st	X, r24

	return ES_OK;
    9918:	80 e0       	ldi	r24, 0x00	; 0
}
    991a:	cf 91       	pop	r28
    991c:	df 91       	pop	r29
    991e:	08 95       	ret

00009920 <ADC_enuRead>:


ES_t ADC_enuRead(u16 *Copy_u16ADC_Value)
{
    9920:	df 93       	push	r29
    9922:	cf 93       	push	r28
    9924:	00 d0       	rcall	.+0      	; 0x9926 <ADC_enuRead+0x6>
    9926:	0f 92       	push	r0
    9928:	cd b7       	in	r28, 0x3d	; 61
    992a:	de b7       	in	r29, 0x3e	; 62
    992c:	9b 83       	std	Y+3, r25	; 0x03
    992e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    9930:	81 e0       	ldi	r24, 0x01	; 1
    9932:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u16ADC_Value != NULL)
    9934:	8a 81       	ldd	r24, Y+2	; 0x02
    9936:	9b 81       	ldd	r25, Y+3	; 0x03
    9938:	00 97       	sbiw	r24, 0x00	; 0
    993a:	e1 f0       	breq	.+56     	; 0x9974 <ADC_enuRead+0x54>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u16ADC_Value  = ADCL;
    993c:	e4 e2       	ldi	r30, 0x24	; 36
    993e:	f0 e0       	ldi	r31, 0x00	; 0
    9940:	80 81       	ld	r24, Z
    9942:	88 2f       	mov	r24, r24
    9944:	90 e0       	ldi	r25, 0x00	; 0
    9946:	ea 81       	ldd	r30, Y+2	; 0x02
    9948:	fb 81       	ldd	r31, Y+3	; 0x03
    994a:	91 83       	std	Z+1, r25	; 0x01
    994c:	80 83       	st	Z, r24
			*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );
    994e:	ea 81       	ldd	r30, Y+2	; 0x02
    9950:	fb 81       	ldd	r31, Y+3	; 0x03
    9952:	20 81       	ld	r18, Z
    9954:	31 81       	ldd	r19, Z+1	; 0x01
    9956:	e5 e2       	ldi	r30, 0x25	; 37
    9958:	f0 e0       	ldi	r31, 0x00	; 0
    995a:	80 81       	ld	r24, Z
    995c:	88 2f       	mov	r24, r24
    995e:	90 e0       	ldi	r25, 0x00	; 0
    9960:	98 2f       	mov	r25, r24
    9962:	88 27       	eor	r24, r24
    9964:	82 2b       	or	r24, r18
    9966:	93 2b       	or	r25, r19
    9968:	ea 81       	ldd	r30, Y+2	; 0x02
    996a:	fb 81       	ldd	r31, Y+3	; 0x03
    996c:	91 83       	std	Z+1, r25	; 0x01
    996e:	80 83       	st	Z, r24

			#warning "ADC_enuRead(u16*): Optimumt Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

		#endif

		Local_enuErrorState = ES_OK ;
    9970:	19 82       	std	Y+1, r1	; 0x01
    9972:	02 c0       	rjmp	.+4      	; 0x9978 <ADC_enuRead+0x58>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    9974:	83 e0       	ldi	r24, 0x03	; 3
    9976:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    9978:	89 81       	ldd	r24, Y+1	; 0x01
}
    997a:	0f 90       	pop	r0
    997c:	0f 90       	pop	r0
    997e:	0f 90       	pop	r0
    9980:	cf 91       	pop	r28
    9982:	df 91       	pop	r29
    9984:	08 95       	ret

00009986 <ADC_enuReadHigh>:

ES_t ADC_enuReadHigh(u8 *Copy_u8ADC_Value)

{
    9986:	df 93       	push	r29
    9988:	cf 93       	push	r28
    998a:	00 d0       	rcall	.+0      	; 0x998c <ADC_enuReadHigh+0x6>
    998c:	0f 92       	push	r0
    998e:	cd b7       	in	r28, 0x3d	; 61
    9990:	de b7       	in	r29, 0x3e	; 62
    9992:	9b 83       	std	Y+3, r25	; 0x03
    9994:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    9996:	81 e0       	ldi	r24, 0x01	; 1
    9998:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ADC_Value != NULL)
    999a:	8a 81       	ldd	r24, Y+2	; 0x02
    999c:	9b 81       	ldd	r25, Y+3	; 0x03
    999e:	00 97       	sbiw	r24, 0x00	; 0
    99a0:	01 f1       	breq	.+64     	; 0x99e2 <ADC_enuReadHigh+0x5c>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u8ADC_Value  = ( ADCL >> 2 );
    99a2:	e4 e2       	ldi	r30, 0x24	; 36
    99a4:	f0 e0       	ldi	r31, 0x00	; 0
    99a6:	80 81       	ld	r24, Z
    99a8:	86 95       	lsr	r24
    99aa:	86 95       	lsr	r24
    99ac:	ea 81       	ldd	r30, Y+2	; 0x02
    99ae:	fb 81       	ldd	r31, Y+3	; 0x03
    99b0:	80 83       	st	Z, r24
			*Copy_u8ADC_Value |= ( ADCH << 6 );
    99b2:	ea 81       	ldd	r30, Y+2	; 0x02
    99b4:	fb 81       	ldd	r31, Y+3	; 0x03
    99b6:	80 81       	ld	r24, Z
    99b8:	28 2f       	mov	r18, r24
    99ba:	e5 e2       	ldi	r30, 0x25	; 37
    99bc:	f0 e0       	ldi	r31, 0x00	; 0
    99be:	80 81       	ld	r24, Z
    99c0:	88 2f       	mov	r24, r24
    99c2:	90 e0       	ldi	r25, 0x00	; 0
    99c4:	00 24       	eor	r0, r0
    99c6:	96 95       	lsr	r25
    99c8:	87 95       	ror	r24
    99ca:	07 94       	ror	r0
    99cc:	96 95       	lsr	r25
    99ce:	87 95       	ror	r24
    99d0:	07 94       	ror	r0
    99d2:	98 2f       	mov	r25, r24
    99d4:	80 2d       	mov	r24, r0
    99d6:	82 2b       	or	r24, r18
    99d8:	ea 81       	ldd	r30, Y+2	; 0x02
    99da:	fb 81       	ldd	r31, Y+3	; 0x03
    99dc:	80 83       	st	Z, r24

			*Copy_u8ADC_Value = ADCH ;

		#endif

		Local_enuErrorState = ES_OK ;
    99de:	19 82       	std	Y+1, r1	; 0x01
    99e0:	02 c0       	rjmp	.+4      	; 0x99e6 <ADC_enuReadHigh+0x60>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    99e2:	83 e0       	ldi	r24, 0x03	; 3
    99e4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    99e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    99e8:	0f 90       	pop	r0
    99ea:	0f 90       	pop	r0
    99ec:	0f 90       	pop	r0
    99ee:	cf 91       	pop	r28
    99f0:	df 91       	pop	r29
    99f2:	08 95       	ret

000099f4 <ADC_enuPollingRead>:

ES_t ADC_enuPollingRead(u16 *Copy_u16ADC_Value)
{
    99f4:	df 93       	push	r29
    99f6:	cf 93       	push	r28
    99f8:	00 d0       	rcall	.+0      	; 0x99fa <ADC_enuPollingRead+0x6>
    99fa:	0f 92       	push	r0
    99fc:	cd b7       	in	r28, 0x3d	; 61
    99fe:	de b7       	in	r29, 0x3e	; 62
    9a00:	9b 83       	std	Y+3, r25	; 0x03
    9a02:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    9a04:	81 e0       	ldi	r24, 0x01	; 1
    9a06:	89 83       	std	Y+1, r24	; 0x01

	while( !( ( ADCSRA >> ADC_INT_FLAG_BIT ) & BIT_MASK ) );
    9a08:	e6 e2       	ldi	r30, 0x26	; 38
    9a0a:	f0 e0       	ldi	r31, 0x00	; 0
    9a0c:	80 81       	ld	r24, Z
    9a0e:	82 95       	swap	r24
    9a10:	8f 70       	andi	r24, 0x0F	; 15
    9a12:	88 2f       	mov	r24, r24
    9a14:	90 e0       	ldi	r25, 0x00	; 0
    9a16:	81 70       	andi	r24, 0x01	; 1
    9a18:	90 70       	andi	r25, 0x00	; 0
    9a1a:	00 97       	sbiw	r24, 0x00	; 0
    9a1c:	a9 f3       	breq	.-22     	; 0x9a08 <ADC_enuPollingRead+0x14>

	if( Copy_u16ADC_Value != NULL)
    9a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    9a20:	9b 81       	ldd	r25, Y+3	; 0x03
    9a22:	00 97       	sbiw	r24, 0x00	; 0
    9a24:	e1 f0       	breq	.+56     	; 0x9a5e <ADC_enuPollingRead+0x6a>
	{
#if ( ADC_ADJUST == RIGHT_ADJUST)

		*Copy_u16ADC_Value  = ADCL;
    9a26:	e4 e2       	ldi	r30, 0x24	; 36
    9a28:	f0 e0       	ldi	r31, 0x00	; 0
    9a2a:	80 81       	ld	r24, Z
    9a2c:	88 2f       	mov	r24, r24
    9a2e:	90 e0       	ldi	r25, 0x00	; 0
    9a30:	ea 81       	ldd	r30, Y+2	; 0x02
    9a32:	fb 81       	ldd	r31, Y+3	; 0x03
    9a34:	91 83       	std	Z+1, r25	; 0x01
    9a36:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );
    9a38:	ea 81       	ldd	r30, Y+2	; 0x02
    9a3a:	fb 81       	ldd	r31, Y+3	; 0x03
    9a3c:	20 81       	ld	r18, Z
    9a3e:	31 81       	ldd	r19, Z+1	; 0x01
    9a40:	e5 e2       	ldi	r30, 0x25	; 37
    9a42:	f0 e0       	ldi	r31, 0x00	; 0
    9a44:	80 81       	ld	r24, Z
    9a46:	88 2f       	mov	r24, r24
    9a48:	90 e0       	ldi	r25, 0x00	; 0
    9a4a:	98 2f       	mov	r25, r24
    9a4c:	88 27       	eor	r24, r24
    9a4e:	82 2b       	or	r24, r18
    9a50:	93 2b       	or	r25, r19
    9a52:	ea 81       	ldd	r30, Y+2	; 0x02
    9a54:	fb 81       	ldd	r31, Y+3	; 0x03
    9a56:	91 83       	std	Z+1, r25	; 0x01
    9a58:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 2 );

		#warning "ADC_enuRead(u16*): Optimum Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

#endif
		Local_enuErrorState = ES_OK ;
    9a5a:	19 82       	std	Y+1, r1	; 0x01
    9a5c:	02 c0       	rjmp	.+4      	; 0x9a62 <ADC_enuPollingRead+0x6e>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    9a5e:	83 e0       	ldi	r24, 0x03	; 3
    9a60:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (BIT_MASK << ADC_INT_FLAG_BIT );
    9a62:	a6 e2       	ldi	r26, 0x26	; 38
    9a64:	b0 e0       	ldi	r27, 0x00	; 0
    9a66:	e6 e2       	ldi	r30, 0x26	; 38
    9a68:	f0 e0       	ldi	r31, 0x00	; 0
    9a6a:	80 81       	ld	r24, Z
    9a6c:	80 61       	ori	r24, 0x10	; 16
    9a6e:	8c 93       	st	X, r24

	return Local_enuErrorState;
    9a70:	89 81       	ldd	r24, Y+1	; 0x01
}
    9a72:	0f 90       	pop	r0
    9a74:	0f 90       	pop	r0
    9a76:	0f 90       	pop	r0
    9a78:	cf 91       	pop	r28
    9a7a:	df 91       	pop	r29
    9a7c:	08 95       	ret

00009a7e <ADC_enuPollingReadHigh>:

ES_t ADC_enuPollingReadHigh(u8 *Copy_u8ADC_Value)

{
    9a7e:	df 93       	push	r29
    9a80:	cf 93       	push	r28
    9a82:	00 d0       	rcall	.+0      	; 0x9a84 <ADC_enuPollingReadHigh+0x6>
    9a84:	0f 92       	push	r0
    9a86:	cd b7       	in	r28, 0x3d	; 61
    9a88:	de b7       	in	r29, 0x3e	; 62
    9a8a:	9b 83       	std	Y+3, r25	; 0x03
    9a8c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    9a8e:	81 e0       	ldi	r24, 0x01	; 1
    9a90:	89 83       	std	Y+1, r24	; 0x01

	while( !( ( ADCSRA >> ADC_INT_FLAG_BIT ) & BIT_MASK ) );
    9a92:	e6 e2       	ldi	r30, 0x26	; 38
    9a94:	f0 e0       	ldi	r31, 0x00	; 0
    9a96:	80 81       	ld	r24, Z
    9a98:	82 95       	swap	r24
    9a9a:	8f 70       	andi	r24, 0x0F	; 15
    9a9c:	88 2f       	mov	r24, r24
    9a9e:	90 e0       	ldi	r25, 0x00	; 0
    9aa0:	81 70       	andi	r24, 0x01	; 1
    9aa2:	90 70       	andi	r25, 0x00	; 0
    9aa4:	00 97       	sbiw	r24, 0x00	; 0
    9aa6:	a9 f3       	breq	.-22     	; 0x9a92 <ADC_enuPollingReadHigh+0x14>

	if( Copy_u8ADC_Value != NULL)
    9aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    9aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    9aac:	00 97       	sbiw	r24, 0x00	; 0
    9aae:	01 f1       	breq	.+64     	; 0x9af0 <ADC_enuPollingReadHigh+0x72>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u8ADC_Value  = ( ADCL >> 2 );
    9ab0:	e4 e2       	ldi	r30, 0x24	; 36
    9ab2:	f0 e0       	ldi	r31, 0x00	; 0
    9ab4:	80 81       	ld	r24, Z
    9ab6:	86 95       	lsr	r24
    9ab8:	86 95       	lsr	r24
    9aba:	ea 81       	ldd	r30, Y+2	; 0x02
    9abc:	fb 81       	ldd	r31, Y+3	; 0x03
    9abe:	80 83       	st	Z, r24
			*Copy_u8ADC_Value |= ( ADCH << 6 );
    9ac0:	ea 81       	ldd	r30, Y+2	; 0x02
    9ac2:	fb 81       	ldd	r31, Y+3	; 0x03
    9ac4:	80 81       	ld	r24, Z
    9ac6:	28 2f       	mov	r18, r24
    9ac8:	e5 e2       	ldi	r30, 0x25	; 37
    9aca:	f0 e0       	ldi	r31, 0x00	; 0
    9acc:	80 81       	ld	r24, Z
    9ace:	88 2f       	mov	r24, r24
    9ad0:	90 e0       	ldi	r25, 0x00	; 0
    9ad2:	00 24       	eor	r0, r0
    9ad4:	96 95       	lsr	r25
    9ad6:	87 95       	ror	r24
    9ad8:	07 94       	ror	r0
    9ada:	96 95       	lsr	r25
    9adc:	87 95       	ror	r24
    9ade:	07 94       	ror	r0
    9ae0:	98 2f       	mov	r25, r24
    9ae2:	80 2d       	mov	r24, r0
    9ae4:	82 2b       	or	r24, r18
    9ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    9ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    9aea:	80 83       	st	Z, r24

			*Copy_u8ADC_Value = ADCH ;

		#endif

		Local_enuErrorState = ES_OK ;
    9aec:	19 82       	std	Y+1, r1	; 0x01
    9aee:	02 c0       	rjmp	.+4      	; 0x9af4 <ADC_enuPollingReadHigh+0x76>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    9af0:	83 e0       	ldi	r24, 0x03	; 3
    9af2:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (BIT_MASK << ADC_INT_FLAG_BIT );
    9af4:	a6 e2       	ldi	r26, 0x26	; 38
    9af6:	b0 e0       	ldi	r27, 0x00	; 0
    9af8:	e6 e2       	ldi	r30, 0x26	; 38
    9afa:	f0 e0       	ldi	r31, 0x00	; 0
    9afc:	80 81       	ld	r24, Z
    9afe:	80 61       	ori	r24, 0x10	; 16
    9b00:	8c 93       	st	X, r24

	return Local_enuErrorState;
    9b02:	89 81       	ldd	r24, Y+1	; 0x01
}
    9b04:	0f 90       	pop	r0
    9b06:	0f 90       	pop	r0
    9b08:	0f 90       	pop	r0
    9b0a:	cf 91       	pop	r28
    9b0c:	df 91       	pop	r29
    9b0e:	08 95       	ret

00009b10 <ADC_enuCallBack>:


ES_t ADC_enuCallBack(void ( *Copy_pFunAppFun )(void))
{
    9b10:	df 93       	push	r29
    9b12:	cf 93       	push	r28
    9b14:	00 d0       	rcall	.+0      	; 0x9b16 <ADC_enuCallBack+0x6>
    9b16:	0f 92       	push	r0
    9b18:	cd b7       	in	r28, 0x3d	; 61
    9b1a:	de b7       	in	r29, 0x3e	; 62
    9b1c:	9b 83       	std	Y+3, r25	; 0x03
    9b1e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    9b20:	81 e0       	ldi	r24, 0x01	; 1
    9b22:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pFunAppFun != NULL)
    9b24:	8a 81       	ldd	r24, Y+2	; 0x02
    9b26:	9b 81       	ldd	r25, Y+3	; 0x03
    9b28:	00 97       	sbiw	r24, 0x00	; 0
    9b2a:	41 f0       	breq	.+16     	; 0x9b3c <ADC_enuCallBack+0x2c>
	{
		ADC_pFunISRFun = Copy_pFunAppFun;
    9b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    9b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    9b30:	90 93 4b 02 	sts	0x024B, r25
    9b34:	80 93 4a 02 	sts	0x024A, r24
		Local_enuErrorState = ES_OK;
    9b38:	19 82       	std	Y+1, r1	; 0x01
    9b3a:	02 c0       	rjmp	.+4      	; 0x9b40 <ADC_enuCallBack+0x30>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    9b3c:	83 e0       	ldi	r24, 0x03	; 3
    9b3e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    9b40:	89 81       	ldd	r24, Y+1	; 0x01
}
    9b42:	0f 90       	pop	r0
    9b44:	0f 90       	pop	r0
    9b46:	0f 90       	pop	r0
    9b48:	cf 91       	pop	r28
    9b4a:	df 91       	pop	r29
    9b4c:	08 95       	ret

00009b4e <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    9b4e:	df 93       	push	r29
    9b50:	cf 93       	push	r28
    9b52:	cd b7       	in	r28, 0x3d	; 61
    9b54:	de b7       	in	r29, 0x3e	; 62

	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
    9b56:	a6 e2       	ldi	r26, 0x26	; 38
    9b58:	b0 e0       	ldi	r27, 0x00	; 0
    9b5a:	e6 e2       	ldi	r30, 0x26	; 38
    9b5c:	f0 e0       	ldi	r31, 0x00	; 0
    9b5e:	80 81       	ld	r24, Z
    9b60:	80 68       	ori	r24, 0x80	; 128
    9b62:	8c 93       	st	X, r24
	return ES_OK;
    9b64:	80 e0       	ldi	r24, 0x00	; 0
}
    9b66:	cf 91       	pop	r28
    9b68:	df 91       	pop	r29
    9b6a:	08 95       	ret

00009b6c <ADC_enuDisable>:

ES_t ADC_enuDisable(void)

{
    9b6c:	df 93       	push	r29
    9b6e:	cf 93       	push	r28
    9b70:	cd b7       	in	r28, 0x3d	; 61
    9b72:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~( BIT_MASK << ADC_ENABLE_BIT );
    9b74:	a6 e2       	ldi	r26, 0x26	; 38
    9b76:	b0 e0       	ldi	r27, 0x00	; 0
    9b78:	e6 e2       	ldi	r30, 0x26	; 38
    9b7a:	f0 e0       	ldi	r31, 0x00	; 0
    9b7c:	80 81       	ld	r24, Z
    9b7e:	8f 77       	andi	r24, 0x7F	; 127
    9b80:	8c 93       	st	X, r24
	return ES_OK;
    9b82:	80 e0       	ldi	r24, 0x00	; 0
}
    9b84:	cf 91       	pop	r28
    9b86:	df 91       	pop	r29
    9b88:	08 95       	ret

00009b8a <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void)
{
    9b8a:	df 93       	push	r29
    9b8c:	cf 93       	push	r28
    9b8e:	cd b7       	in	r28, 0x3d	; 61
    9b90:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
    9b92:	a6 e2       	ldi	r26, 0x26	; 38
    9b94:	b0 e0       	ldi	r27, 0x00	; 0
    9b96:	e6 e2       	ldi	r30, 0x26	; 38
    9b98:	f0 e0       	ldi	r31, 0x00	; 0
    9b9a:	80 81       	ld	r24, Z
    9b9c:	80 68       	ori	r24, 0x80	; 128
    9b9e:	8c 93       	st	X, r24
	return ES_OK;
    9ba0:	80 e0       	ldi	r24, 0x00	; 0
}
    9ba2:	cf 91       	pop	r28
    9ba4:	df 91       	pop	r29
    9ba6:	08 95       	ret

00009ba8 <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void)
{
    9ba8:	df 93       	push	r29
    9baa:	cf 93       	push	r28
    9bac:	cd b7       	in	r28, 0x3d	; 61
    9bae:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~( BIT_MASK << ADC_ENABLE_BIT );
    9bb0:	a6 e2       	ldi	r26, 0x26	; 38
    9bb2:	b0 e0       	ldi	r27, 0x00	; 0
    9bb4:	e6 e2       	ldi	r30, 0x26	; 38
    9bb6:	f0 e0       	ldi	r31, 0x00	; 0
    9bb8:	80 81       	ld	r24, Z
    9bba:	8f 77       	andi	r24, 0x7F	; 127
    9bbc:	8c 93       	st	X, r24
	return ES_OK;
    9bbe:	80 e0       	ldi	r24, 0x00	; 0
}
    9bc0:	cf 91       	pop	r28
    9bc2:	df 91       	pop	r29
    9bc4:	08 95       	ret

00009bc6 <__vector_16>:


void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    9bc6:	1f 92       	push	r1
    9bc8:	0f 92       	push	r0
    9bca:	0f b6       	in	r0, 0x3f	; 63
    9bcc:	0f 92       	push	r0
    9bce:	11 24       	eor	r1, r1
    9bd0:	2f 93       	push	r18
    9bd2:	3f 93       	push	r19
    9bd4:	4f 93       	push	r20
    9bd6:	5f 93       	push	r21
    9bd8:	6f 93       	push	r22
    9bda:	7f 93       	push	r23
    9bdc:	8f 93       	push	r24
    9bde:	9f 93       	push	r25
    9be0:	af 93       	push	r26
    9be2:	bf 93       	push	r27
    9be4:	ef 93       	push	r30
    9be6:	ff 93       	push	r31
    9be8:	df 93       	push	r29
    9bea:	cf 93       	push	r28
    9bec:	cd b7       	in	r28, 0x3d	; 61
    9bee:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pFunISRFun != NULL)
    9bf0:	80 91 4a 02 	lds	r24, 0x024A
    9bf4:	90 91 4b 02 	lds	r25, 0x024B
    9bf8:	00 97       	sbiw	r24, 0x00	; 0
    9bfa:	29 f0       	breq	.+10     	; 0x9c06 <__vector_16+0x40>
		ADC_pFunISRFun();
    9bfc:	e0 91 4a 02 	lds	r30, 0x024A
    9c00:	f0 91 4b 02 	lds	r31, 0x024B
    9c04:	09 95       	icall
}
    9c06:	cf 91       	pop	r28
    9c08:	df 91       	pop	r29
    9c0a:	ff 91       	pop	r31
    9c0c:	ef 91       	pop	r30
    9c0e:	bf 91       	pop	r27
    9c10:	af 91       	pop	r26
    9c12:	9f 91       	pop	r25
    9c14:	8f 91       	pop	r24
    9c16:	7f 91       	pop	r23
    9c18:	6f 91       	pop	r22
    9c1a:	5f 91       	pop	r21
    9c1c:	4f 91       	pop	r20
    9c1e:	3f 91       	pop	r19
    9c20:	2f 91       	pop	r18
    9c22:	0f 90       	pop	r0
    9c24:	0f be       	out	0x3f, r0	; 63
    9c26:	0f 90       	pop	r0
    9c28:	1f 90       	pop	r1
    9c2a:	18 95       	reti

00009c2c <Switch_enuInit>:
extern u8 Switch_u8SwitchesMaxNum ;
extern Switch_t Switch[];


ES_t Switch_enuInit(void)
{
    9c2c:	df 93       	push	r29
    9c2e:	cf 93       	push	r28
    9c30:	00 d0       	rcall	.+0      	; 0x9c32 <Switch_enuInit+0x6>
    9c32:	00 d0       	rcall	.+0      	; 0x9c34 <Switch_enuInit+0x8>
    9c34:	cd b7       	in	r28, 0x3d	; 61
    9c36:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];
    9c38:	81 e0       	ldi	r24, 0x01	; 1
    9c3a:	8a 83       	std	Y+2, r24	; 0x02
    9c3c:	51 c0       	rjmp	.+162    	; 0x9ce0 <Switch_enuInit+0xb4>

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
	{
		Local_enuAerror[0] = DIO_enuSetPinDirection	(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , DIO_u8INPUT);
    9c3e:	89 81       	ldd	r24, Y+1	; 0x01
    9c40:	28 2f       	mov	r18, r24
    9c42:	30 e0       	ldi	r19, 0x00	; 0
    9c44:	c9 01       	movw	r24, r18
    9c46:	88 0f       	add	r24, r24
    9c48:	99 1f       	adc	r25, r25
    9c4a:	82 0f       	add	r24, r18
    9c4c:	93 1f       	adc	r25, r19
    9c4e:	fc 01       	movw	r30, r24
    9c50:	e7 53       	subi	r30, 0x37	; 55
    9c52:	fe 4f       	sbci	r31, 0xFE	; 254
    9c54:	40 81       	ld	r20, Z
    9c56:	89 81       	ldd	r24, Y+1	; 0x01
    9c58:	28 2f       	mov	r18, r24
    9c5a:	30 e0       	ldi	r19, 0x00	; 0
    9c5c:	c9 01       	movw	r24, r18
    9c5e:	88 0f       	add	r24, r24
    9c60:	99 1f       	adc	r25, r25
    9c62:	82 0f       	add	r24, r18
    9c64:	93 1f       	adc	r25, r19
    9c66:	fc 01       	movw	r30, r24
    9c68:	e6 53       	subi	r30, 0x36	; 54
    9c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    9c6c:	90 81       	ld	r25, Z
    9c6e:	84 2f       	mov	r24, r20
    9c70:	69 2f       	mov	r22, r25
    9c72:	40 e0       	ldi	r20, 0x00	; 0
    9c74:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    9c78:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);
    9c7a:	89 81       	ldd	r24, Y+1	; 0x01
    9c7c:	28 2f       	mov	r18, r24
    9c7e:	30 e0       	ldi	r19, 0x00	; 0
    9c80:	c9 01       	movw	r24, r18
    9c82:	88 0f       	add	r24, r24
    9c84:	99 1f       	adc	r25, r25
    9c86:	82 0f       	add	r24, r18
    9c88:	93 1f       	adc	r25, r19
    9c8a:	fc 01       	movw	r30, r24
    9c8c:	e7 53       	subi	r30, 0x37	; 55
    9c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    9c90:	50 81       	ld	r21, Z
    9c92:	89 81       	ldd	r24, Y+1	; 0x01
    9c94:	28 2f       	mov	r18, r24
    9c96:	30 e0       	ldi	r19, 0x00	; 0
    9c98:	c9 01       	movw	r24, r18
    9c9a:	88 0f       	add	r24, r24
    9c9c:	99 1f       	adc	r25, r25
    9c9e:	82 0f       	add	r24, r18
    9ca0:	93 1f       	adc	r25, r19
    9ca2:	fc 01       	movw	r30, r24
    9ca4:	e6 53       	subi	r30, 0x36	; 54
    9ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    9ca8:	40 81       	ld	r20, Z
    9caa:	89 81       	ldd	r24, Y+1	; 0x01
    9cac:	28 2f       	mov	r18, r24
    9cae:	30 e0       	ldi	r19, 0x00	; 0
    9cb0:	c9 01       	movw	r24, r18
    9cb2:	88 0f       	add	r24, r24
    9cb4:	99 1f       	adc	r25, r25
    9cb6:	82 0f       	add	r24, r18
    9cb8:	93 1f       	adc	r25, r19
    9cba:	fc 01       	movw	r30, r24
    9cbc:	e5 53       	subi	r30, 0x35	; 53
    9cbe:	fe 4f       	sbci	r31, 0xFE	; 254
    9cc0:	90 81       	ld	r25, Z
    9cc2:	85 2f       	mov	r24, r21
    9cc4:	64 2f       	mov	r22, r20
    9cc6:	49 2f       	mov	r20, r25
    9cc8:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    9ccc:	8c 83       	std	Y+4, r24	; 0x04

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
    9cce:	8b 81       	ldd	r24, Y+3	; 0x03
    9cd0:	88 23       	and	r24, r24
    9cd2:	61 f4       	brne	.+24     	; 0x9cec <Switch_enuInit+0xc0>
    9cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    9cd6:	88 23       	and	r24, r24
    9cd8:	49 f4       	brne	.+18     	; 0x9cec <Switch_enuInit+0xc0>

ES_t Switch_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
    9cda:	89 81       	ldd	r24, Y+1	; 0x01
    9cdc:	8f 5f       	subi	r24, 0xFF	; 255
    9cde:	89 83       	std	Y+1, r24	; 0x01
    9ce0:	90 91 c8 01 	lds	r25, 0x01C8
    9ce4:	89 81       	ldd	r24, Y+1	; 0x01
    9ce6:	89 17       	cp	r24, r25
    9ce8:	08 f4       	brcc	.+2      	; 0x9cec <Switch_enuInit+0xc0>
    9cea:	a9 cf       	rjmp	.-174    	; 0x9c3e <Switch_enuInit+0x12>
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
	}

	if (Local_enuAerror[0] == ES_OK && Local_enuAerror[1] == ES_OK)
    9cec:	8b 81       	ldd	r24, Y+3	; 0x03
    9cee:	88 23       	and	r24, r24
    9cf0:	21 f4       	brne	.+8      	; 0x9cfa <Switch_enuInit+0xce>
    9cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    9cf4:	88 23       	and	r24, r24
    9cf6:	09 f4       	brne	.+2      	; 0x9cfa <Switch_enuInit+0xce>
		Local_enuErrorState = ES_OK;
    9cf8:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    9cfa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    9cfc:	0f 90       	pop	r0
    9cfe:	0f 90       	pop	r0
    9d00:	0f 90       	pop	r0
    9d02:	0f 90       	pop	r0
    9d04:	cf 91       	pop	r28
    9d06:	df 91       	pop	r29
    9d08:	08 95       	ret

00009d0a <Switch_enuGetPressed>:

ES_t Switch_enuGetPressed (u8 Copy_u8SwitchNum ,u8 *Copy_pu8SwitchValue)
{
    9d0a:	df 93       	push	r29
    9d0c:	cf 93       	push	r28
    9d0e:	00 d0       	rcall	.+0      	; 0x9d10 <Switch_enuGetPressed+0x6>
    9d10:	00 d0       	rcall	.+0      	; 0x9d12 <Switch_enuGetPressed+0x8>
    9d12:	cd b7       	in	r28, 0x3d	; 61
    9d14:	de b7       	in	r29, 0x3e	; 62
    9d16:	8a 83       	std	Y+2, r24	; 0x02
    9d18:	7c 83       	std	Y+4, r23	; 0x04
    9d1a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    9d1c:	81 e0       	ldi	r24, 0x01	; 1
    9d1e:	89 83       	std	Y+1, r24	; 0x01


	if( (Copy_u8SwitchNum -= SWITCH_ZERO) < Switch_u8SwitchesMaxNum )
    9d20:	8a 81       	ldd	r24, Y+2	; 0x02
    9d22:	89 5c       	subi	r24, 0xC9	; 201
    9d24:	8a 83       	std	Y+2, r24	; 0x02
    9d26:	90 91 c8 01 	lds	r25, 0x01C8
    9d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    9d2c:	89 17       	cp	r24, r25
    9d2e:	08 f5       	brcc	.+66     	; 0x9d72 <Switch_enuGetPressed+0x68>
	{
		Local_enuErrorState =  DIO_enuGetPinValue(Switch[Copy_u8SwitchNum].sw_Grp , Switch[Copy_u8SwitchNum].sw_Pin , Copy_pu8SwitchValue ) ;
    9d30:	8a 81       	ldd	r24, Y+2	; 0x02
    9d32:	28 2f       	mov	r18, r24
    9d34:	30 e0       	ldi	r19, 0x00	; 0
    9d36:	c9 01       	movw	r24, r18
    9d38:	88 0f       	add	r24, r24
    9d3a:	99 1f       	adc	r25, r25
    9d3c:	82 0f       	add	r24, r18
    9d3e:	93 1f       	adc	r25, r19
    9d40:	fc 01       	movw	r30, r24
    9d42:	e7 53       	subi	r30, 0x37	; 55
    9d44:	fe 4f       	sbci	r31, 0xFE	; 254
    9d46:	40 81       	ld	r20, Z
    9d48:	8a 81       	ldd	r24, Y+2	; 0x02
    9d4a:	28 2f       	mov	r18, r24
    9d4c:	30 e0       	ldi	r19, 0x00	; 0
    9d4e:	c9 01       	movw	r24, r18
    9d50:	88 0f       	add	r24, r24
    9d52:	99 1f       	adc	r25, r25
    9d54:	82 0f       	add	r24, r18
    9d56:	93 1f       	adc	r25, r19
    9d58:	fc 01       	movw	r30, r24
    9d5a:	e6 53       	subi	r30, 0x36	; 54
    9d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    9d5e:	90 81       	ld	r25, Z
    9d60:	2b 81       	ldd	r18, Y+3	; 0x03
    9d62:	3c 81       	ldd	r19, Y+4	; 0x04
    9d64:	84 2f       	mov	r24, r20
    9d66:	69 2f       	mov	r22, r25
    9d68:	a9 01       	movw	r20, r18
    9d6a:	0e 94 b7 4a 	call	0x956e	; 0x956e <DIO_enuGetPinValue>
    9d6e:	89 83       	std	Y+1, r24	; 0x01
    9d70:	02 c0       	rjmp	.+4      	; 0x9d76 <Switch_enuGetPressed+0x6c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    9d72:	82 e0       	ldi	r24, 0x02	; 2
    9d74:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    9d76:	89 81       	ldd	r24, Y+1	; 0x01
}
    9d78:	0f 90       	pop	r0
    9d7a:	0f 90       	pop	r0
    9d7c:	0f 90       	pop	r0
    9d7e:	0f 90       	pop	r0
    9d80:	cf 91       	pop	r28
    9d82:	df 91       	pop	r29
    9d84:	08 95       	ret

00009d86 <StepMotor_enuInit>:

u16 Global_u16FullCycleSteps;


ES_t StepMotor_enuInit( void )
{
    9d86:	df 93       	push	r29
    9d88:	cf 93       	push	r28
    9d8a:	cd b7       	in	r28, 0x3d	; 61
    9d8c:	de b7       	in	r29, 0x3e	; 62
    9d8e:	2a 97       	sbiw	r28, 0x0a	; 10
    9d90:	0f b6       	in	r0, 0x3f	; 63
    9d92:	f8 94       	cli
    9d94:	de bf       	out	0x3e, r29	; 62
    9d96:	0f be       	out	0x3f, r0	; 63
    9d98:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_AenuErrorStates[8];
	u8 Local_u8Iter= 0 ;
    9d9a:	19 82       	std	Y+1, r1	; 0x01
	else
	{
		#warning " Stepper Motor Stride Angle / Resolution has to be Specified. "
	}

	Timer_enuInit();
    9d9c:	0e 94 a5 18 	call	0x314a	; 0x314a <Timer_enuInit>

	Local_AenuErrorStates[0] = DIO_enuSetPinDirection( COIL1_GRP, COIL1_PIN, DIO_u8OUTPUT);
    9da0:	81 e0       	ldi	r24, 0x01	; 1
    9da2:	64 e0       	ldi	r22, 0x04	; 4
    9da4:	41 e0       	ldi	r20, 0x01	; 1
    9da6:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    9daa:	8a 83       	std	Y+2, r24	; 0x02
	Local_AenuErrorStates[1] = DIO_enuSetPinValue( COIL1_GRP, COIL1_PIN, COIL_IDLE);
    9dac:	81 e0       	ldi	r24, 0x01	; 1
    9dae:	64 e0       	ldi	r22, 0x04	; 4
    9db0:	41 e0       	ldi	r20, 0x01	; 1
    9db2:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    9db6:	8b 83       	std	Y+3, r24	; 0x03
	Local_AenuErrorStates[2] = DIO_enuSetPinDirection( COIL2_GRP, COIL2_PIN, DIO_u8OUTPUT);
    9db8:	81 e0       	ldi	r24, 0x01	; 1
    9dba:	65 e0       	ldi	r22, 0x05	; 5
    9dbc:	41 e0       	ldi	r20, 0x01	; 1
    9dbe:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    9dc2:	8c 83       	std	Y+4, r24	; 0x04
	Local_AenuErrorStates[3] = DIO_enuSetPinValue( COIL2_GRP, COIL2_PIN, COIL_IDLE);
    9dc4:	81 e0       	ldi	r24, 0x01	; 1
    9dc6:	65 e0       	ldi	r22, 0x05	; 5
    9dc8:	41 e0       	ldi	r20, 0x01	; 1
    9dca:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    9dce:	8d 83       	std	Y+5, r24	; 0x05
	Local_AenuErrorStates[4] = DIO_enuSetPinDirection( COIL3_GRP, COIL3_PIN, DIO_u8OUTPUT);
    9dd0:	81 e0       	ldi	r24, 0x01	; 1
    9dd2:	66 e0       	ldi	r22, 0x06	; 6
    9dd4:	41 e0       	ldi	r20, 0x01	; 1
    9dd6:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    9dda:	8e 83       	std	Y+6, r24	; 0x06
	Local_AenuErrorStates[5] = DIO_enuSetPinValue( COIL3_GRP, COIL3_PIN, COIL_IDLE);
    9ddc:	81 e0       	ldi	r24, 0x01	; 1
    9dde:	66 e0       	ldi	r22, 0x06	; 6
    9de0:	41 e0       	ldi	r20, 0x01	; 1
    9de2:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    9de6:	8f 83       	std	Y+7, r24	; 0x07
	Local_AenuErrorStates[6] = DIO_enuSetPinDirection( COIL4_GRP, COIL4_PIN, DIO_u8OUTPUT);
    9de8:	81 e0       	ldi	r24, 0x01	; 1
    9dea:	67 e0       	ldi	r22, 0x07	; 7
    9dec:	41 e0       	ldi	r20, 0x01	; 1
    9dee:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    9df2:	88 87       	std	Y+8, r24	; 0x08
	Local_AenuErrorStates[7] = DIO_enuSetPinValue( COIL4_GRP, COIL4_PIN, COIL_IDLE);
    9df4:	81 e0       	ldi	r24, 0x01	; 1
    9df6:	67 e0       	ldi	r22, 0x07	; 7
    9df8:	41 e0       	ldi	r20, 0x01	; 1
    9dfa:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    9dfe:	89 87       	std	Y+9, r24	; 0x09
    9e00:	03 c0       	rjmp	.+6      	; 0x9e08 <StepMotor_enuInit+0x82>

	for( ; (Local_u8Iter < 8) && ( Local_AenuErrorStates[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    9e02:	89 81       	ldd	r24, Y+1	; 0x01
    9e04:	8f 5f       	subi	r24, 0xFF	; 255
    9e06:	89 83       	std	Y+1, r24	; 0x01
    9e08:	89 81       	ldd	r24, Y+1	; 0x01
    9e0a:	88 30       	cpi	r24, 0x08	; 8
    9e0c:	58 f4       	brcc	.+22     	; 0x9e24 <StepMotor_enuInit+0x9e>
    9e0e:	89 81       	ldd	r24, Y+1	; 0x01
    9e10:	28 2f       	mov	r18, r24
    9e12:	30 e0       	ldi	r19, 0x00	; 0
    9e14:	ce 01       	movw	r24, r28
    9e16:	02 96       	adiw	r24, 0x02	; 2
    9e18:	fc 01       	movw	r30, r24
    9e1a:	e2 0f       	add	r30, r18
    9e1c:	f3 1f       	adc	r31, r19
    9e1e:	80 81       	ld	r24, Z
    9e20:	88 23       	and	r24, r24
    9e22:	79 f3       	breq	.-34     	; 0x9e02 <StepMotor_enuInit+0x7c>

	return ( ( Local_u8Iter == 8 )? ES_OK : Local_AenuErrorStates[Local_u8Iter] ) ;
    9e24:	89 81       	ldd	r24, Y+1	; 0x01
    9e26:	88 30       	cpi	r24, 0x08	; 8
    9e28:	59 f0       	breq	.+22     	; 0x9e40 <StepMotor_enuInit+0xba>
    9e2a:	89 81       	ldd	r24, Y+1	; 0x01
    9e2c:	28 2f       	mov	r18, r24
    9e2e:	30 e0       	ldi	r19, 0x00	; 0
    9e30:	ce 01       	movw	r24, r28
    9e32:	02 96       	adiw	r24, 0x02	; 2
    9e34:	fc 01       	movw	r30, r24
    9e36:	e2 0f       	add	r30, r18
    9e38:	f3 1f       	adc	r31, r19
    9e3a:	80 81       	ld	r24, Z
    9e3c:	8a 87       	std	Y+10, r24	; 0x0a
    9e3e:	01 c0       	rjmp	.+2      	; 0x9e42 <StepMotor_enuInit+0xbc>
    9e40:	1a 86       	std	Y+10, r1	; 0x0a
    9e42:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    9e44:	2a 96       	adiw	r28, 0x0a	; 10
    9e46:	0f b6       	in	r0, 0x3f	; 63
    9e48:	f8 94       	cli
    9e4a:	de bf       	out	0x3e, r29	; 62
    9e4c:	0f be       	out	0x3f, r0	; 63
    9e4e:	cd bf       	out	0x3d, r28	; 61
    9e50:	cf 91       	pop	r28
    9e52:	df 91       	pop	r29
    9e54:	08 95       	ret

00009e56 <StepMotor_enuFullCycle>:

ES_t StepMotor_enuFullCycle( u8 Copy_u8Direction , u16 Copy_u16StepSpeed)
{
    9e56:	df 93       	push	r29
    9e58:	cf 93       	push	r28
    9e5a:	cd b7       	in	r28, 0x3d	; 61
    9e5c:	de b7       	in	r29, 0x3e	; 62
    9e5e:	60 97       	sbiw	r28, 0x10	; 16
    9e60:	0f b6       	in	r0, 0x3f	; 63
    9e62:	f8 94       	cli
    9e64:	de bf       	out	0x3e, r29	; 62
    9e66:	0f be       	out	0x3f, r0	; 63
    9e68:	cd bf       	out	0x3d, r28	; 61
    9e6a:	8c 87       	std	Y+12, r24	; 0x0c
    9e6c:	7e 87       	std	Y+14, r23	; 0x0e
    9e6e:	6d 87       	std	Y+13, r22	; 0x0d
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorStates[4];
    9e70:	81 e0       	ldi	r24, 0x01	; 1
    9e72:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8StepDiff , Local_u8Output , Local_u8Iter = 0 , Local_u8ErrorFlag = 0 ;
    9e74:	1c 82       	std	Y+4, r1	; 0x04
    9e76:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16Iter;

	switch( Copy_u8Direction )
    9e78:	8c 85       	ldd	r24, Y+12	; 0x0c
    9e7a:	28 2f       	mov	r18, r24
    9e7c:	30 e0       	ldi	r19, 0x00	; 0
    9e7e:	38 8b       	std	Y+16, r19	; 0x10
    9e80:	2f 87       	std	Y+15, r18	; 0x0f
    9e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    9e84:	98 89       	ldd	r25, Y+16	; 0x10
    9e86:	81 34       	cpi	r24, 0x41	; 65
    9e88:	91 05       	cpc	r25, r1
    9e8a:	31 f0       	breq	.+12     	; 0x9e98 <StepMotor_enuFullCycle+0x42>
    9e8c:	2f 85       	ldd	r18, Y+15	; 0x0f
    9e8e:	38 89       	ldd	r19, Y+16	; 0x10
    9e90:	2f 35       	cpi	r18, 0x5F	; 95
    9e92:	31 05       	cpc	r19, r1
    9e94:	59 f0       	breq	.+22     	; 0x9eac <StepMotor_enuFullCycle+0x56>
    9e96:	0f c0       	rjmp	.+30     	; 0x9eb6 <StepMotor_enuFullCycle+0x60>
	{
		case CLOCKWISE			:	Local_u16Iter =  Global_u16FullCycleSteps-1 ;
    9e98:	80 91 4c 02 	lds	r24, 0x024C
    9e9c:	90 91 4d 02 	lds	r25, 0x024D
    9ea0:	01 97       	sbiw	r24, 0x01	; 1
    9ea2:	9a 83       	std	Y+2, r25	; 0x02
    9ea4:	89 83       	std	Y+1, r24	; 0x01
									Local_u8StepDiff = -1 ;
    9ea6:	8f ef       	ldi	r24, 0xFF	; 255
    9ea8:	8e 83       	std	Y+6, r24	; 0x06
    9eaa:	6d c0       	rjmp	.+218    	; 0x9f86 <StepMotor_enuFullCycle+0x130>
									break;
		case COUNTER_CLOCKWISE	:	Local_u16Iter =  0 ;
    9eac:	1a 82       	std	Y+2, r1	; 0x02
    9eae:	19 82       	std	Y+1, r1	; 0x01
									Local_u8StepDiff = 1 ;
    9eb0:	81 e0       	ldi	r24, 0x01	; 1
    9eb2:	8e 83       	std	Y+6, r24	; 0x06
    9eb4:	68 c0       	rjmp	.+208    	; 0x9f86 <StepMotor_enuFullCycle+0x130>
									break;
		default	: 	Local_u16Iter =  Global_u16FullCycleSteps ;
    9eb6:	80 91 4c 02 	lds	r24, 0x024C
    9eba:	90 91 4d 02 	lds	r25, 0x024D
    9ebe:	9a 83       	std	Y+2, r25	; 0x02
    9ec0:	89 83       	std	Y+1, r24	; 0x01
					Local_u8StepDiff = 1 ;
    9ec2:	81 e0       	ldi	r24, 0x01	; 1
    9ec4:	8e 83       	std	Y+6, r24	; 0x06
					Local_u8ErrorFlag =1 ;
    9ec6:	81 e0       	ldi	r24, 0x01	; 1
    9ec8:	8b 83       	std	Y+3, r24	; 0x03
					Local_enuErrorState = ES_OUT_RANGE;
    9eca:	82 e0       	ldi	r24, 0x02	; 2
    9ecc:	8f 83       	std	Y+7, r24	; 0x07
    9ece:	5b c0       	rjmp	.+182    	; 0x9f86 <StepMotor_enuFullCycle+0x130>


	for( ; ( Local_u16Iter >= 0 ) && ( Local_u16Iter <  Global_u16FullCycleSteps ) ; Local_u16Iter += Local_u8StepDiff )
	{
#if( COIL_ACTIVE == DIO_u8LOW )
		Local_u8Output = (u8) ( OUTPUT_LOW_PATTERN & ~( BIT_MASK << ( Local_u16Iter % COIL_NUM ) ) );
    9ed0:	89 81       	ldd	r24, Y+1	; 0x01
    9ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    9ed4:	9c 01       	movw	r18, r24
    9ed6:	23 70       	andi	r18, 0x03	; 3
    9ed8:	30 70       	andi	r19, 0x00	; 0
    9eda:	81 e0       	ldi	r24, 0x01	; 1
    9edc:	90 e0       	ldi	r25, 0x00	; 0
    9ede:	02 c0       	rjmp	.+4      	; 0x9ee4 <StepMotor_enuFullCycle+0x8e>
    9ee0:	88 0f       	add	r24, r24
    9ee2:	99 1f       	adc	r25, r25
    9ee4:	2a 95       	dec	r18
    9ee6:	e2 f7       	brpl	.-8      	; 0x9ee0 <StepMotor_enuFullCycle+0x8a>
    9ee8:	80 95       	com	r24
    9eea:	8f 70       	andi	r24, 0x0F	; 15
    9eec:	8d 83       	std	Y+5, r24	; 0x05
#elif ( COIL_ACTIVE == DIO_u8HIGH )
		Local_u8Output = (u8) ( OUTPUT_HIGH_PATTERN  | ( BIT_MASK << ( Local_u16Iter % COIL_NUM ) ) ) ;
#endif
		Local_AenuErrorStates[0] = DIO_enuSetPinValue( COIL1_GRP, COIL1_PIN, (( Local_u8Output >> COIL1_SHIFT ) & BIT_MASK ));
    9eee:	8d 81       	ldd	r24, Y+5	; 0x05
    9ef0:	98 2f       	mov	r25, r24
    9ef2:	91 70       	andi	r25, 0x01	; 1
    9ef4:	81 e0       	ldi	r24, 0x01	; 1
    9ef6:	64 e0       	ldi	r22, 0x04	; 4
    9ef8:	49 2f       	mov	r20, r25
    9efa:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    9efe:	88 87       	std	Y+8, r24	; 0x08
		Local_AenuErrorStates[1] = DIO_enuSetPinValue( COIL2_GRP, COIL2_PIN, (( Local_u8Output >> COIL2_SHIFT ) & BIT_MASK ));
    9f00:	8d 81       	ldd	r24, Y+5	; 0x05
    9f02:	86 95       	lsr	r24
    9f04:	98 2f       	mov	r25, r24
    9f06:	91 70       	andi	r25, 0x01	; 1
    9f08:	81 e0       	ldi	r24, 0x01	; 1
    9f0a:	65 e0       	ldi	r22, 0x05	; 5
    9f0c:	49 2f       	mov	r20, r25
    9f0e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    9f12:	89 87       	std	Y+9, r24	; 0x09
		Local_AenuErrorStates[2] = DIO_enuSetPinValue( COIL3_GRP, COIL3_PIN, (( Local_u8Output >> COIL3_SHIFT ) & BIT_MASK ));
    9f14:	8d 81       	ldd	r24, Y+5	; 0x05
    9f16:	86 95       	lsr	r24
    9f18:	86 95       	lsr	r24
    9f1a:	98 2f       	mov	r25, r24
    9f1c:	91 70       	andi	r25, 0x01	; 1
    9f1e:	81 e0       	ldi	r24, 0x01	; 1
    9f20:	66 e0       	ldi	r22, 0x06	; 6
    9f22:	49 2f       	mov	r20, r25
    9f24:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    9f28:	8a 87       	std	Y+10, r24	; 0x0a
		Local_AenuErrorStates[3] = DIO_enuSetPinValue( COIL4_GRP, COIL4_PIN, (( Local_u8Output >> COIL4_SHIFT ) & BIT_MASK ));
    9f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    9f2c:	86 95       	lsr	r24
    9f2e:	86 95       	lsr	r24
    9f30:	86 95       	lsr	r24
    9f32:	98 2f       	mov	r25, r24
    9f34:	91 70       	andi	r25, 0x01	; 1
    9f36:	81 e0       	ldi	r24, 0x01	; 1
    9f38:	67 e0       	ldi	r22, 0x07	; 7
    9f3a:	49 2f       	mov	r20, r25
    9f3c:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    9f40:	8b 87       	std	Y+11, r24	; 0x0b
		for( Local_u8Iter = 0 ; (Local_u8Iter < COIL_NUM) && ( Local_AenuErrorStates[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    9f42:	1c 82       	std	Y+4, r1	; 0x04
    9f44:	03 c0       	rjmp	.+6      	; 0x9f4c <StepMotor_enuFullCycle+0xf6>
    9f46:	8c 81       	ldd	r24, Y+4	; 0x04
    9f48:	8f 5f       	subi	r24, 0xFF	; 255
    9f4a:	8c 83       	std	Y+4, r24	; 0x04
    9f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    9f4e:	84 30       	cpi	r24, 0x04	; 4
    9f50:	58 f4       	brcc	.+22     	; 0x9f68 <StepMotor_enuFullCycle+0x112>
    9f52:	8c 81       	ldd	r24, Y+4	; 0x04
    9f54:	28 2f       	mov	r18, r24
    9f56:	30 e0       	ldi	r19, 0x00	; 0
    9f58:	ce 01       	movw	r24, r28
    9f5a:	08 96       	adiw	r24, 0x08	; 8
    9f5c:	fc 01       	movw	r30, r24
    9f5e:	e2 0f       	add	r30, r18
    9f60:	f3 1f       	adc	r31, r19
    9f62:	80 81       	ld	r24, Z
    9f64:	88 23       	and	r24, r24
    9f66:	79 f3       	breq	.-34     	; 0x9f46 <StepMotor_enuFullCycle+0xf0>
		if( Local_u8Iter != COIL_NUM )
    9f68:	8c 81       	ldd	r24, Y+4	; 0x04
    9f6a:	84 30       	cpi	r24, 0x04	; 4
    9f6c:	19 f0       	breq	.+6      	; 0x9f74 <StepMotor_enuFullCycle+0x11e>
		{
			Local_u8ErrorFlag = 1 ;
    9f6e:	81 e0       	ldi	r24, 0x01	; 1
    9f70:	8b 83       	std	Y+3, r24	; 0x03
    9f72:	13 c0       	rjmp	.+38     	; 0x9f9a <StepMotor_enuFullCycle+0x144>
					#warning " StepMotor_enuFullCycle(): Un-identified Direction, No motion "
	}



	for( ; ( Local_u16Iter >= 0 ) && ( Local_u16Iter <  Global_u16FullCycleSteps ) ; Local_u16Iter += Local_u8StepDiff )
    9f74:	8e 81       	ldd	r24, Y+6	; 0x06
    9f76:	28 2f       	mov	r18, r24
    9f78:	30 e0       	ldi	r19, 0x00	; 0
    9f7a:	89 81       	ldd	r24, Y+1	; 0x01
    9f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    9f7e:	82 0f       	add	r24, r18
    9f80:	93 1f       	adc	r25, r19
    9f82:	9a 83       	std	Y+2, r25	; 0x02
    9f84:	89 83       	std	Y+1, r24	; 0x01
    9f86:	20 91 4c 02 	lds	r18, 0x024C
    9f8a:	30 91 4d 02 	lds	r19, 0x024D
    9f8e:	89 81       	ldd	r24, Y+1	; 0x01
    9f90:	9a 81       	ldd	r25, Y+2	; 0x02
    9f92:	82 17       	cp	r24, r18
    9f94:	93 07       	cpc	r25, r19
    9f96:	08 f4       	brcc	.+2      	; 0x9f9a <StepMotor_enuFullCycle+0x144>
    9f98:	9b cf       	rjmp	.-202    	; 0x9ed0 <StepMotor_enuFullCycle+0x7a>
		{
			Local_u8ErrorFlag = 1 ;
			break;
		}
	}
	if( !Local_u8ErrorFlag)
    9f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    9f9c:	88 23       	and	r24, r24
    9f9e:	71 f4       	brne	.+28     	; 0x9fbc <StepMotor_enuFullCycle+0x166>
	{
		Local_enuErrorState = Timer_PollingDelay( TIMER2 , (u16)( 1000UL / (u32)Copy_u16StepSpeed ) );
    9fa0:	88 ee       	ldi	r24, 0xE8	; 232
    9fa2:	93 e0       	ldi	r25, 0x03	; 3
    9fa4:	2d 85       	ldd	r18, Y+13	; 0x0d
    9fa6:	3e 85       	ldd	r19, Y+14	; 0x0e
    9fa8:	b9 01       	movw	r22, r18
    9faa:	0e 94 1e 63 	call	0xc63c	; 0xc63c <__udivmodhi4>
    9fae:	cb 01       	movw	r24, r22
    9fb0:	9c 01       	movw	r18, r24
    9fb2:	8b ec       	ldi	r24, 0xCB	; 203
    9fb4:	b9 01       	movw	r22, r18
    9fb6:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <Timer_PollingDelay>
    9fba:	8f 83       	std	Y+7, r24	; 0x07
	}

	return Local_enuErrorState ;
    9fbc:	8f 81       	ldd	r24, Y+7	; 0x07
}
    9fbe:	60 96       	adiw	r28, 0x10	; 16
    9fc0:	0f b6       	in	r0, 0x3f	; 63
    9fc2:	f8 94       	cli
    9fc4:	de bf       	out	0x3e, r29	; 62
    9fc6:	0f be       	out	0x3f, r0	; 63
    9fc8:	cd bf       	out	0x3d, r28	; 61
    9fca:	cf 91       	pop	r28
    9fcc:	df 91       	pop	r29
    9fce:	08 95       	ret

00009fd0 <StepMotor_enuGoToAngle>:

ES_t StepMotor_enuGoToAngle( u8 Copy_u8Direction , u8 Copy_u8Angle , u16 Copy_u16StepSpeed )
{
    9fd0:	ef 92       	push	r14
    9fd2:	ff 92       	push	r15
    9fd4:	0f 93       	push	r16
    9fd6:	1f 93       	push	r17
    9fd8:	df 93       	push	r29
    9fda:	cf 93       	push	r28
    9fdc:	cd b7       	in	r28, 0x3d	; 61
    9fde:	de b7       	in	r29, 0x3e	; 62
    9fe0:	63 97       	sbiw	r28, 0x13	; 19
    9fe2:	0f b6       	in	r0, 0x3f	; 63
    9fe4:	f8 94       	cli
    9fe6:	de bf       	out	0x3e, r29	; 62
    9fe8:	0f be       	out	0x3f, r0	; 63
    9fea:	cd bf       	out	0x3d, r28	; 61
    9fec:	8e 87       	std	Y+14, r24	; 0x0e
    9fee:	6f 87       	std	Y+15, r22	; 0x0f
    9ff0:	59 8b       	std	Y+17, r21	; 0x11
    9ff2:	48 8b       	std	Y+16, r20	; 0x10
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorStates[4];
    9ff4:	81 e0       	ldi	r24, 0x01	; 1
    9ff6:	89 87       	std	Y+9, r24	; 0x09

	u8 Local_u8StepDiff , Local_u8Output , Local_u8Iter = 0 , Local_u8ErrorFlag = 0 ;
    9ff8:	1e 82       	std	Y+6, r1	; 0x06
    9ffa:	1d 82       	std	Y+5, r1	; 0x05
	u16 Local_u16Iter , Local_u8AngleSteps;

	Local_u8AngleSteps = (u8) ( ( Copy_u8Angle * (u32) Global_u16FullCycleSteps ) / 360UL ) ;
    9ffc:	8f 85       	ldd	r24, Y+15	; 0x0f
    9ffe:	e8 2e       	mov	r14, r24
    a000:	ff 24       	eor	r15, r15
    a002:	00 e0       	ldi	r16, 0x00	; 0
    a004:	10 e0       	ldi	r17, 0x00	; 0
    a006:	80 91 4c 02 	lds	r24, 0x024C
    a00a:	90 91 4d 02 	lds	r25, 0x024D
    a00e:	9c 01       	movw	r18, r24
    a010:	40 e0       	ldi	r20, 0x00	; 0
    a012:	50 e0       	ldi	r21, 0x00	; 0
    a014:	c8 01       	movw	r24, r16
    a016:	b7 01       	movw	r22, r14
    a018:	0e 94 ff 62 	call	0xc5fe	; 0xc5fe <__mulsi3>
    a01c:	dc 01       	movw	r26, r24
    a01e:	cb 01       	movw	r24, r22
    a020:	28 e6       	ldi	r18, 0x68	; 104
    a022:	31 e0       	ldi	r19, 0x01	; 1
    a024:	40 e0       	ldi	r20, 0x00	; 0
    a026:	50 e0       	ldi	r21, 0x00	; 0
    a028:	bc 01       	movw	r22, r24
    a02a:	cd 01       	movw	r24, r26
    a02c:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    a030:	da 01       	movw	r26, r20
    a032:	c9 01       	movw	r24, r18
    a034:	88 2f       	mov	r24, r24
    a036:	90 e0       	ldi	r25, 0x00	; 0
    a038:	9a 83       	std	Y+2, r25	; 0x02
    a03a:	89 83       	std	Y+1, r24	; 0x01

	switch( Copy_u8Direction )
    a03c:	8e 85       	ldd	r24, Y+14	; 0x0e
    a03e:	28 2f       	mov	r18, r24
    a040:	30 e0       	ldi	r19, 0x00	; 0
    a042:	3b 8b       	std	Y+19, r19	; 0x13
    a044:	2a 8b       	std	Y+18, r18	; 0x12
    a046:	8a 89       	ldd	r24, Y+18	; 0x12
    a048:	9b 89       	ldd	r25, Y+19	; 0x13
    a04a:	81 34       	cpi	r24, 0x41	; 65
    a04c:	91 05       	cpc	r25, r1
    a04e:	31 f0       	breq	.+12     	; 0xa05c <StepMotor_enuGoToAngle+0x8c>
    a050:	2a 89       	ldd	r18, Y+18	; 0x12
    a052:	3b 89       	ldd	r19, Y+19	; 0x13
    a054:	2f 35       	cpi	r18, 0x5F	; 95
    a056:	31 05       	cpc	r19, r1
    a058:	49 f0       	breq	.+18     	; 0xa06c <StepMotor_enuGoToAngle+0x9c>
    a05a:	0d c0       	rjmp	.+26     	; 0xa076 <StepMotor_enuGoToAngle+0xa6>
	{
		case CLOCKWISE			:	Local_u16Iter =  Local_u8AngleSteps-1 ;
    a05c:	89 81       	ldd	r24, Y+1	; 0x01
    a05e:	9a 81       	ldd	r25, Y+2	; 0x02
    a060:	01 97       	sbiw	r24, 0x01	; 1
    a062:	9c 83       	std	Y+4, r25	; 0x04
    a064:	8b 83       	std	Y+3, r24	; 0x03
									Local_u8StepDiff = -1 ;
    a066:	8f ef       	ldi	r24, 0xFF	; 255
    a068:	88 87       	std	Y+8, r24	; 0x08
    a06a:	11 c0       	rjmp	.+34     	; 0xa08e <StepMotor_enuGoToAngle+0xbe>
									break;
		case COUNTER_CLOCKWISE	:	Local_u16Iter =  0 ;
    a06c:	1c 82       	std	Y+4, r1	; 0x04
    a06e:	1b 82       	std	Y+3, r1	; 0x03
									Local_u8StepDiff = 1 ;
    a070:	81 e0       	ldi	r24, 0x01	; 1
    a072:	88 87       	std	Y+8, r24	; 0x08
    a074:	0c c0       	rjmp	.+24     	; 0xa08e <StepMotor_enuGoToAngle+0xbe>
									break;
		default	: 	Local_u16Iter =  Global_u16FullCycleSteps ;
    a076:	80 91 4c 02 	lds	r24, 0x024C
    a07a:	90 91 4d 02 	lds	r25, 0x024D
    a07e:	9c 83       	std	Y+4, r25	; 0x04
    a080:	8b 83       	std	Y+3, r24	; 0x03
					Local_u8StepDiff = 1 ;
    a082:	81 e0       	ldi	r24, 0x01	; 1
    a084:	88 87       	std	Y+8, r24	; 0x08
					Local_u8ErrorFlag =1 ;
    a086:	81 e0       	ldi	r24, 0x01	; 1
    a088:	8d 83       	std	Y+5, r24	; 0x05
					Local_enuErrorState = ES_OUT_RANGE;
    a08a:	82 e0       	ldi	r24, 0x02	; 2
    a08c:	89 87       	std	Y+9, r24	; 0x09
					#warning " StepMotor_enuFullCycle(): Un-identified Direction, No motion "
	}
	if( Local_enuErrorState == ES_NOK)
    a08e:	89 85       	ldd	r24, Y+9	; 0x09
    a090:	81 30       	cpi	r24, 0x01	; 1
    a092:	09 f0       	breq	.+2      	; 0xa096 <StepMotor_enuGoToAngle+0xc6>
    a094:	64 c0       	rjmp	.+200    	; 0xa15e <StepMotor_enuGoToAngle+0x18e>
    a096:	5b c0       	rjmp	.+182    	; 0xa14e <StepMotor_enuGoToAngle+0x17e>
	{
		for( ; ( Local_u16Iter >= 0 ) && ( Local_u16Iter <  Local_u8AngleSteps ) ; Local_u16Iter += Local_u8StepDiff )
		{
#if( COIL_ACTIVE == DIO_u8LOW )
		Local_u8Output = (u8) ( OUTPUT_LOW_PATTERN & ~( BIT_MASK << ( Local_u16Iter % COIL_NUM ) ) );
    a098:	8b 81       	ldd	r24, Y+3	; 0x03
    a09a:	9c 81       	ldd	r25, Y+4	; 0x04
    a09c:	9c 01       	movw	r18, r24
    a09e:	23 70       	andi	r18, 0x03	; 3
    a0a0:	30 70       	andi	r19, 0x00	; 0
    a0a2:	81 e0       	ldi	r24, 0x01	; 1
    a0a4:	90 e0       	ldi	r25, 0x00	; 0
    a0a6:	02 c0       	rjmp	.+4      	; 0xa0ac <StepMotor_enuGoToAngle+0xdc>
    a0a8:	88 0f       	add	r24, r24
    a0aa:	99 1f       	adc	r25, r25
    a0ac:	2a 95       	dec	r18
    a0ae:	e2 f7       	brpl	.-8      	; 0xa0a8 <StepMotor_enuGoToAngle+0xd8>
    a0b0:	80 95       	com	r24
    a0b2:	8f 70       	andi	r24, 0x0F	; 15
    a0b4:	8f 83       	std	Y+7, r24	; 0x07
#elif ( COIL_ACTIVE == DIO_u8HIGH )
		Local_u8Output = (u8) ( OUTPUT_HIGH_PATTERN  | ( BIT_MASK << ( Local_u16Iter % COIL_NUM ) ) ) ;
#endif

			Local_AenuErrorStates[0] = DIO_enuSetPinValue( COIL1_GRP, COIL1_PIN, (( Local_u8Output >> COIL1_SHIFT ) & BIT_MASK ));
    a0b6:	8f 81       	ldd	r24, Y+7	; 0x07
    a0b8:	98 2f       	mov	r25, r24
    a0ba:	91 70       	andi	r25, 0x01	; 1
    a0bc:	81 e0       	ldi	r24, 0x01	; 1
    a0be:	64 e0       	ldi	r22, 0x04	; 4
    a0c0:	49 2f       	mov	r20, r25
    a0c2:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a0c6:	8a 87       	std	Y+10, r24	; 0x0a
			Local_AenuErrorStates[1] = DIO_enuSetPinValue( COIL2_GRP, COIL2_PIN, (( Local_u8Output >> COIL2_SHIFT ) & BIT_MASK ));
    a0c8:	8f 81       	ldd	r24, Y+7	; 0x07
    a0ca:	86 95       	lsr	r24
    a0cc:	98 2f       	mov	r25, r24
    a0ce:	91 70       	andi	r25, 0x01	; 1
    a0d0:	81 e0       	ldi	r24, 0x01	; 1
    a0d2:	65 e0       	ldi	r22, 0x05	; 5
    a0d4:	49 2f       	mov	r20, r25
    a0d6:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a0da:	8b 87       	std	Y+11, r24	; 0x0b
			Local_AenuErrorStates[2] = DIO_enuSetPinValue( COIL3_GRP, COIL3_PIN, (( Local_u8Output >> COIL3_SHIFT ) & BIT_MASK ));
    a0dc:	8f 81       	ldd	r24, Y+7	; 0x07
    a0de:	86 95       	lsr	r24
    a0e0:	86 95       	lsr	r24
    a0e2:	98 2f       	mov	r25, r24
    a0e4:	91 70       	andi	r25, 0x01	; 1
    a0e6:	81 e0       	ldi	r24, 0x01	; 1
    a0e8:	66 e0       	ldi	r22, 0x06	; 6
    a0ea:	49 2f       	mov	r20, r25
    a0ec:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a0f0:	8c 87       	std	Y+12, r24	; 0x0c
			Local_AenuErrorStates[3] = DIO_enuSetPinValue( COIL4_GRP, COIL4_PIN, (( Local_u8Output >> COIL4_SHIFT ) & BIT_MASK ));
    a0f2:	8f 81       	ldd	r24, Y+7	; 0x07
    a0f4:	86 95       	lsr	r24
    a0f6:	86 95       	lsr	r24
    a0f8:	86 95       	lsr	r24
    a0fa:	98 2f       	mov	r25, r24
    a0fc:	91 70       	andi	r25, 0x01	; 1
    a0fe:	81 e0       	ldi	r24, 0x01	; 1
    a100:	67 e0       	ldi	r22, 0x07	; 7
    a102:	49 2f       	mov	r20, r25
    a104:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a108:	8d 87       	std	Y+13, r24	; 0x0d
			for( Local_u8Iter = 0 ; (Local_u8Iter < COIL_NUM) && ( Local_AenuErrorStates[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    a10a:	1e 82       	std	Y+6, r1	; 0x06
    a10c:	03 c0       	rjmp	.+6      	; 0xa114 <StepMotor_enuGoToAngle+0x144>
    a10e:	8e 81       	ldd	r24, Y+6	; 0x06
    a110:	8f 5f       	subi	r24, 0xFF	; 255
    a112:	8e 83       	std	Y+6, r24	; 0x06
    a114:	8e 81       	ldd	r24, Y+6	; 0x06
    a116:	84 30       	cpi	r24, 0x04	; 4
    a118:	58 f4       	brcc	.+22     	; 0xa130 <StepMotor_enuGoToAngle+0x160>
    a11a:	8e 81       	ldd	r24, Y+6	; 0x06
    a11c:	28 2f       	mov	r18, r24
    a11e:	30 e0       	ldi	r19, 0x00	; 0
    a120:	ce 01       	movw	r24, r28
    a122:	0a 96       	adiw	r24, 0x0a	; 10
    a124:	fc 01       	movw	r30, r24
    a126:	e2 0f       	add	r30, r18
    a128:	f3 1f       	adc	r31, r19
    a12a:	80 81       	ld	r24, Z
    a12c:	88 23       	and	r24, r24
    a12e:	79 f3       	breq	.-34     	; 0xa10e <StepMotor_enuGoToAngle+0x13e>
			if( Local_u8Iter != COIL_NUM )
    a130:	8e 81       	ldd	r24, Y+6	; 0x06
    a132:	84 30       	cpi	r24, 0x04	; 4
    a134:	19 f0       	breq	.+6      	; 0xa13c <StepMotor_enuGoToAngle+0x16c>
			{
				Local_u8ErrorFlag = 1 ;
    a136:	81 e0       	ldi	r24, 0x01	; 1
    a138:	8d 83       	std	Y+5, r24	; 0x05
    a13a:	11 c0       	rjmp	.+34     	; 0xa15e <StepMotor_enuGoToAngle+0x18e>
					Local_enuErrorState = ES_OUT_RANGE;
					#warning " StepMotor_enuFullCycle(): Un-identified Direction, No motion "
	}
	if( Local_enuErrorState == ES_NOK)
	{
		for( ; ( Local_u16Iter >= 0 ) && ( Local_u16Iter <  Local_u8AngleSteps ) ; Local_u16Iter += Local_u8StepDiff )
    a13c:	88 85       	ldd	r24, Y+8	; 0x08
    a13e:	28 2f       	mov	r18, r24
    a140:	30 e0       	ldi	r19, 0x00	; 0
    a142:	8b 81       	ldd	r24, Y+3	; 0x03
    a144:	9c 81       	ldd	r25, Y+4	; 0x04
    a146:	82 0f       	add	r24, r18
    a148:	93 1f       	adc	r25, r19
    a14a:	9c 83       	std	Y+4, r25	; 0x04
    a14c:	8b 83       	std	Y+3, r24	; 0x03
    a14e:	2b 81       	ldd	r18, Y+3	; 0x03
    a150:	3c 81       	ldd	r19, Y+4	; 0x04
    a152:	89 81       	ldd	r24, Y+1	; 0x01
    a154:	9a 81       	ldd	r25, Y+2	; 0x02
    a156:	28 17       	cp	r18, r24
    a158:	39 07       	cpc	r19, r25
    a15a:	08 f4       	brcc	.+2      	; 0xa15e <StepMotor_enuGoToAngle+0x18e>
    a15c:	9d cf       	rjmp	.-198    	; 0xa098 <StepMotor_enuGoToAngle+0xc8>
				break;
			}
		}
	}

	if( !Local_u8ErrorFlag)
    a15e:	8d 81       	ldd	r24, Y+5	; 0x05
    a160:	88 23       	and	r24, r24
    a162:	71 f4       	brne	.+28     	; 0xa180 <StepMotor_enuGoToAngle+0x1b0>
	{
		Local_enuErrorState = Timer_PollingDelay( TIMER2 , (u16)( 1000UL / (u32)Copy_u16StepSpeed ) );
    a164:	88 ee       	ldi	r24, 0xE8	; 232
    a166:	93 e0       	ldi	r25, 0x03	; 3
    a168:	28 89       	ldd	r18, Y+16	; 0x10
    a16a:	39 89       	ldd	r19, Y+17	; 0x11
    a16c:	b9 01       	movw	r22, r18
    a16e:	0e 94 1e 63 	call	0xc63c	; 0xc63c <__udivmodhi4>
    a172:	cb 01       	movw	r24, r22
    a174:	9c 01       	movw	r18, r24
    a176:	8b ec       	ldi	r24, 0xCB	; 203
    a178:	b9 01       	movw	r22, r18
    a17a:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <Timer_PollingDelay>
    a17e:	89 87       	std	Y+9, r24	; 0x09
	}

	return Local_enuErrorState ;
    a180:	89 85       	ldd	r24, Y+9	; 0x09
}
    a182:	63 96       	adiw	r28, 0x13	; 19
    a184:	0f b6       	in	r0, 0x3f	; 63
    a186:	f8 94       	cli
    a188:	de bf       	out	0x3e, r29	; 62
    a18a:	0f be       	out	0x3f, r0	; 63
    a18c:	cd bf       	out	0x3d, r28	; 61
    a18e:	cf 91       	pop	r28
    a190:	df 91       	pop	r29
    a192:	1f 91       	pop	r17
    a194:	0f 91       	pop	r16
    a196:	ff 90       	pop	r15
    a198:	ef 90       	pop	r14
    a19a:	08 95       	ret

0000a19c <SevSeg_enuInit>:
extern u8 ModuleValuePins;
extern u8 ModuleControlPins;
extern SSegModule_t SSegModule[];

ES_t SevSeg_enuInit(void)
{
    a19c:	df 93       	push	r29
    a19e:	cf 93       	push	r28
    a1a0:	00 d0       	rcall	.+0      	; 0xa1a2 <SevSeg_enuInit+0x6>
    a1a2:	00 d0       	rcall	.+0      	; 0xa1a4 <SevSeg_enuInit+0x8>
    a1a4:	cd b7       	in	r28, 0x3d	; 61
    a1a6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    a1a8:	81 e0       	ldi	r24, 0x01	; 1
    a1aa:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    a1ac:	8b e0       	ldi	r24, 0x0B	; 11
    a1ae:	8b 83       	std	Y+3, r24	; 0x03
    a1b0:	bc c0       	rjmp	.+376    	; 0xa32a <SevSeg_enuInit+0x18e>
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
    a1b2:	8b 81       	ldd	r24, Y+3	; 0x03
    a1b4:	8b 50       	subi	r24, 0x0B	; 11
    a1b6:	8a 83       	std	Y+2, r24	; 0x02
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    a1b8:	19 82       	std	Y+1, r1	; 0x01
    a1ba:	3a c0       	rjmp	.+116    	; 0xa230 <SevSeg_enuInit+0x94>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
    a1bc:	8a 81       	ldd	r24, Y+2	; 0x02
    a1be:	28 2f       	mov	r18, r24
    a1c0:	30 e0       	ldi	r19, 0x00	; 0
    a1c2:	89 81       	ldd	r24, Y+1	; 0x01
    a1c4:	48 2f       	mov	r20, r24
    a1c6:	50 e0       	ldi	r21, 0x00	; 0
    a1c8:	c9 01       	movw	r24, r18
    a1ca:	88 0f       	add	r24, r24
    a1cc:	99 1f       	adc	r25, r25
    a1ce:	88 0f       	add	r24, r24
    a1d0:	99 1f       	adc	r25, r25
    a1d2:	88 0f       	add	r24, r24
    a1d4:	99 1f       	adc	r25, r25
    a1d6:	82 1b       	sub	r24, r18
    a1d8:	93 0b       	sbc	r25, r19
    a1da:	84 0f       	add	r24, r20
    a1dc:	95 1f       	adc	r25, r21
    a1de:	88 0f       	add	r24, r24
    a1e0:	99 1f       	adc	r25, r25
    a1e2:	fc 01       	movw	r30, r24
    a1e4:	eb 52       	subi	r30, 0x2B	; 43
    a1e6:	fe 4f       	sbci	r31, 0xFE	; 254
    a1e8:	60 81       	ld	r22, Z
    a1ea:	8a 81       	ldd	r24, Y+2	; 0x02
    a1ec:	28 2f       	mov	r18, r24
    a1ee:	30 e0       	ldi	r19, 0x00	; 0
    a1f0:	89 81       	ldd	r24, Y+1	; 0x01
    a1f2:	48 2f       	mov	r20, r24
    a1f4:	50 e0       	ldi	r21, 0x00	; 0
    a1f6:	c9 01       	movw	r24, r18
    a1f8:	88 0f       	add	r24, r24
    a1fa:	99 1f       	adc	r25, r25
    a1fc:	88 0f       	add	r24, r24
    a1fe:	99 1f       	adc	r25, r25
    a200:	88 0f       	add	r24, r24
    a202:	99 1f       	adc	r25, r25
    a204:	82 1b       	sub	r24, r18
    a206:	93 0b       	sbc	r25, r19
    a208:	84 0f       	add	r24, r20
    a20a:	95 1f       	adc	r25, r21
    a20c:	88 0f       	add	r24, r24
    a20e:	99 1f       	adc	r25, r25
    a210:	fc 01       	movw	r30, r24
    a212:	ea 52       	subi	r30, 0x2A	; 42
    a214:	fe 4f       	sbci	r31, 0xFE	; 254
    a216:	90 81       	ld	r25, Z
    a218:	86 2f       	mov	r24, r22
    a21a:	69 2f       	mov	r22, r25
    a21c:	41 e0       	ldi	r20, 0x01	; 1
    a21e:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    a222:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    a224:	8c 81       	ldd	r24, Y+4	; 0x04
    a226:	88 23       	and	r24, r24
    a228:	41 f4       	brne	.+16     	; 0xa23a <SevSeg_enuInit+0x9e>
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    a22a:	89 81       	ldd	r24, Y+1	; 0x01
    a22c:	8f 5f       	subi	r24, 0xFF	; 255
    a22e:	89 83       	std	Y+1, r24	; 0x01
    a230:	90 91 d3 01 	lds	r25, 0x01D3
    a234:	89 81       	ldd	r24, Y+1	; 0x01
    a236:	89 17       	cp	r24, r25
    a238:	08 f2       	brcs	.-126    	; 0xa1bc <SevSeg_enuInit+0x20>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
		if( Local_enuErrorState == ES_OK)
    a23a:	8c 81       	ldd	r24, Y+4	; 0x04
    a23c:	88 23       	and	r24, r24
    a23e:	61 f5       	brne	.+88     	; 0xa298 <SevSeg_enuInit+0xfc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
    a240:	8a 81       	ldd	r24, Y+2	; 0x02
    a242:	88 2f       	mov	r24, r24
    a244:	90 e0       	ldi	r25, 0x00	; 0
    a246:	9c 01       	movw	r18, r24
    a248:	22 0f       	add	r18, r18
    a24a:	33 1f       	adc	r19, r19
    a24c:	c9 01       	movw	r24, r18
    a24e:	88 0f       	add	r24, r24
    a250:	99 1f       	adc	r25, r25
    a252:	88 0f       	add	r24, r24
    a254:	99 1f       	adc	r25, r25
    a256:	88 0f       	add	r24, r24
    a258:	99 1f       	adc	r25, r25
    a25a:	82 1b       	sub	r24, r18
    a25c:	93 0b       	sbc	r25, r19
    a25e:	fc 01       	movw	r30, r24
    a260:	e3 52       	subi	r30, 0x23	; 35
    a262:	fe 4f       	sbci	r31, 0xFE	; 254
    a264:	40 81       	ld	r20, Z
    a266:	8a 81       	ldd	r24, Y+2	; 0x02
    a268:	88 2f       	mov	r24, r24
    a26a:	90 e0       	ldi	r25, 0x00	; 0
    a26c:	9c 01       	movw	r18, r24
    a26e:	22 0f       	add	r18, r18
    a270:	33 1f       	adc	r19, r19
    a272:	c9 01       	movw	r24, r18
    a274:	88 0f       	add	r24, r24
    a276:	99 1f       	adc	r25, r25
    a278:	88 0f       	add	r24, r24
    a27a:	99 1f       	adc	r25, r25
    a27c:	88 0f       	add	r24, r24
    a27e:	99 1f       	adc	r25, r25
    a280:	82 1b       	sub	r24, r18
    a282:	93 0b       	sbc	r25, r19
    a284:	fc 01       	movw	r30, r24
    a286:	e2 52       	subi	r30, 0x22	; 34
    a288:	fe 4f       	sbci	r31, 0xFE	; 254
    a28a:	90 81       	ld	r25, Z
    a28c:	84 2f       	mov	r24, r20
    a28e:	69 2f       	mov	r22, r25
    a290:	41 e0       	ldi	r20, 0x01	; 1
    a292:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    a296:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    a298:	19 82       	std	Y+1, r1	; 0x01
    a29a:	3b c0       	rjmp	.+118    	; 0xa312 <SevSeg_enuInit+0x176>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    a29c:	8a 81       	ldd	r24, Y+2	; 0x02
    a29e:	28 2f       	mov	r18, r24
    a2a0:	30 e0       	ldi	r19, 0x00	; 0
    a2a2:	89 81       	ldd	r24, Y+1	; 0x01
    a2a4:	48 2f       	mov	r20, r24
    a2a6:	50 e0       	ldi	r21, 0x00	; 0
    a2a8:	c9 01       	movw	r24, r18
    a2aa:	88 0f       	add	r24, r24
    a2ac:	99 1f       	adc	r25, r25
    a2ae:	88 0f       	add	r24, r24
    a2b0:	99 1f       	adc	r25, r25
    a2b2:	88 0f       	add	r24, r24
    a2b4:	99 1f       	adc	r25, r25
    a2b6:	82 1b       	sub	r24, r18
    a2b8:	93 0b       	sbc	r25, r19
    a2ba:	84 0f       	add	r24, r20
    a2bc:	95 1f       	adc	r25, r21
    a2be:	05 96       	adiw	r24, 0x05	; 5
    a2c0:	88 0f       	add	r24, r24
    a2c2:	99 1f       	adc	r25, r25
    a2c4:	fc 01       	movw	r30, r24
    a2c6:	eb 52       	subi	r30, 0x2B	; 43
    a2c8:	fe 4f       	sbci	r31, 0xFE	; 254
    a2ca:	60 81       	ld	r22, Z
    a2cc:	8a 81       	ldd	r24, Y+2	; 0x02
    a2ce:	28 2f       	mov	r18, r24
    a2d0:	30 e0       	ldi	r19, 0x00	; 0
    a2d2:	89 81       	ldd	r24, Y+1	; 0x01
    a2d4:	48 2f       	mov	r20, r24
    a2d6:	50 e0       	ldi	r21, 0x00	; 0
    a2d8:	c9 01       	movw	r24, r18
    a2da:	88 0f       	add	r24, r24
    a2dc:	99 1f       	adc	r25, r25
    a2de:	88 0f       	add	r24, r24
    a2e0:	99 1f       	adc	r25, r25
    a2e2:	88 0f       	add	r24, r24
    a2e4:	99 1f       	adc	r25, r25
    a2e6:	82 1b       	sub	r24, r18
    a2e8:	93 0b       	sbc	r25, r19
    a2ea:	84 0f       	add	r24, r20
    a2ec:	95 1f       	adc	r25, r21
    a2ee:	88 0f       	add	r24, r24
    a2f0:	99 1f       	adc	r25, r25
    a2f2:	fc 01       	movw	r30, r24
    a2f4:	e0 52       	subi	r30, 0x20	; 32
    a2f6:	fe 4f       	sbci	r31, 0xFE	; 254
    a2f8:	90 81       	ld	r25, Z
    a2fa:	86 2f       	mov	r24, r22
    a2fc:	69 2f       	mov	r22, r25
    a2fe:	41 e0       	ldi	r20, 0x01	; 1
    a300:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    a304:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    a306:	8c 81       	ldd	r24, Y+4	; 0x04
    a308:	88 23       	and	r24, r24
    a30a:	61 f4       	brne	.+24     	; 0xa324 <SevSeg_enuInit+0x188>
		if( Local_enuErrorState == ES_OK)
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    a30c:	89 81       	ldd	r24, Y+1	; 0x01
    a30e:	8f 5f       	subi	r24, 0xFF	; 255
    a310:	89 83       	std	Y+1, r24	; 0x01
    a312:	8c 81       	ldd	r24, Y+4	; 0x04
    a314:	88 23       	and	r24, r24
    a316:	31 f4       	brne	.+12     	; 0xa324 <SevSeg_enuInit+0x188>
    a318:	90 91 d4 01 	lds	r25, 0x01D4
    a31c:	89 81       	ldd	r24, Y+1	; 0x01
    a31e:	89 17       	cp	r24, r25
    a320:	08 f4       	brcc	.+2      	; 0xa324 <SevSeg_enuInit+0x188>
    a322:	bc cf       	rjmp	.-136    	; 0xa29c <SevSeg_enuInit+0x100>
ES_t SevSeg_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    a324:	8b 81       	ldd	r24, Y+3	; 0x03
    a326:	8f 5f       	subi	r24, 0xFF	; 255
    a328:	8b 83       	std	Y+3, r24	; 0x03
    a32a:	90 91 d2 01 	lds	r25, 0x01D2
    a32e:	8b 81       	ldd	r24, Y+3	; 0x03
    a330:	98 17       	cp	r25, r24
    a332:	08 f0       	brcs	.+2      	; 0xa336 <SevSeg_enuInit+0x19a>
    a334:	3e cf       	rjmp	.-388    	; 0xa1b2 <SevSeg_enuInit+0x16>
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
	}

	return Local_enuErrorState ;//DONE
    a336:	8c 81       	ldd	r24, Y+4	; 0x04
}
    a338:	0f 90       	pop	r0
    a33a:	0f 90       	pop	r0
    a33c:	0f 90       	pop	r0
    a33e:	0f 90       	pop	r0
    a340:	cf 91       	pop	r28
    a342:	df 91       	pop	r29
    a344:	08 95       	ret

0000a346 <SevSeg_enuSetDigitValue>:
ES_t SevSeg_enuSetDigitValue(u8 Copy_u8ModuleNum , u8 Copy_u8SevSegDigitValue)
{
    a346:	df 93       	push	r29
    a348:	cf 93       	push	r28
    a34a:	00 d0       	rcall	.+0      	; 0xa34c <SevSeg_enuSetDigitValue+0x6>
    a34c:	00 d0       	rcall	.+0      	; 0xa34e <SevSeg_enuSetDigitValue+0x8>
    a34e:	cd b7       	in	r28, 0x3d	; 61
    a350:	de b7       	in	r29, 0x3e	; 62
    a352:	8b 83       	std	Y+3, r24	; 0x03
    a354:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK ;
    a356:	81 e0       	ldi	r24, 0x01	; 1
    a358:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    a35a:	8b 81       	ldd	r24, Y+3	; 0x03
    a35c:	8b 50       	subi	r24, 0x0B	; 11
    a35e:	8b 83       	std	Y+3, r24	; 0x03
    a360:	90 91 d2 01 	lds	r25, 0x01D2
    a364:	8b 81       	ldd	r24, Y+3	; 0x03
    a366:	89 17       	cp	r24, r25
    a368:	08 f0       	brcs	.+2      	; 0xa36c <SevSeg_enuSetDigitValue+0x26>
    a36a:	59 c0       	rjmp	.+178    	; 0xa41e <SevSeg_enuSetDigitValue+0xd8>
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
    a36c:	8c 81       	ldd	r24, Y+4	; 0x04
    a36e:	8a 30       	cpi	r24, 0x0A	; 10
    a370:	08 f0       	brcs	.+2      	; 0xa374 <SevSeg_enuSetDigitValue+0x2e>
    a372:	52 c0       	rjmp	.+164    	; 0xa418 <SevSeg_enuSetDigitValue+0xd2>
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    a374:	19 82       	std	Y+1, r1	; 0x01
    a376:	49 c0       	rjmp	.+146    	; 0xa40a <SevSeg_enuSetDigitValue+0xc4>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputGrp ,
    a378:	8b 81       	ldd	r24, Y+3	; 0x03
    a37a:	28 2f       	mov	r18, r24
    a37c:	30 e0       	ldi	r19, 0x00	; 0
    a37e:	89 81       	ldd	r24, Y+1	; 0x01
    a380:	48 2f       	mov	r20, r24
    a382:	50 e0       	ldi	r21, 0x00	; 0
    a384:	c9 01       	movw	r24, r18
    a386:	88 0f       	add	r24, r24
    a388:	99 1f       	adc	r25, r25
    a38a:	88 0f       	add	r24, r24
    a38c:	99 1f       	adc	r25, r25
    a38e:	88 0f       	add	r24, r24
    a390:	99 1f       	adc	r25, r25
    a392:	82 1b       	sub	r24, r18
    a394:	93 0b       	sbc	r25, r19
    a396:	84 0f       	add	r24, r20
    a398:	95 1f       	adc	r25, r21
    a39a:	88 0f       	add	r24, r24
    a39c:	99 1f       	adc	r25, r25
    a39e:	fc 01       	movw	r30, r24
    a3a0:	eb 52       	subi	r30, 0x2B	; 43
    a3a2:	fe 4f       	sbci	r31, 0xFE	; 254
    a3a4:	60 81       	ld	r22, Z
    a3a6:	8b 81       	ldd	r24, Y+3	; 0x03
    a3a8:	28 2f       	mov	r18, r24
    a3aa:	30 e0       	ldi	r19, 0x00	; 0
    a3ac:	89 81       	ldd	r24, Y+1	; 0x01
    a3ae:	48 2f       	mov	r20, r24
    a3b0:	50 e0       	ldi	r21, 0x00	; 0
    a3b2:	c9 01       	movw	r24, r18
    a3b4:	88 0f       	add	r24, r24
    a3b6:	99 1f       	adc	r25, r25
    a3b8:	88 0f       	add	r24, r24
    a3ba:	99 1f       	adc	r25, r25
    a3bc:	88 0f       	add	r24, r24
    a3be:	99 1f       	adc	r25, r25
    a3c0:	82 1b       	sub	r24, r18
    a3c2:	93 0b       	sbc	r25, r19
    a3c4:	84 0f       	add	r24, r20
    a3c6:	95 1f       	adc	r25, r21
    a3c8:	88 0f       	add	r24, r24
    a3ca:	99 1f       	adc	r25, r25
    a3cc:	fc 01       	movw	r30, r24
    a3ce:	ea 52       	subi	r30, 0x2A	; 42
    a3d0:	fe 4f       	sbci	r31, 0xFE	; 254
    a3d2:	40 81       	ld	r20, Z
    a3d4:	8c 81       	ldd	r24, Y+4	; 0x04
    a3d6:	28 2f       	mov	r18, r24
    a3d8:	30 e0       	ldi	r19, 0x00	; 0
    a3da:	89 81       	ldd	r24, Y+1	; 0x01
    a3dc:	88 2f       	mov	r24, r24
    a3de:	90 e0       	ldi	r25, 0x00	; 0
    a3e0:	f9 01       	movw	r30, r18
    a3e2:	02 c0       	rjmp	.+4      	; 0xa3e8 <SevSeg_enuSetDigitValue+0xa2>
    a3e4:	f5 95       	asr	r31
    a3e6:	e7 95       	ror	r30
    a3e8:	8a 95       	dec	r24
    a3ea:	e2 f7       	brpl	.-8      	; 0xa3e4 <SevSeg_enuSetDigitValue+0x9e>
    a3ec:	cf 01       	movw	r24, r30
    a3ee:	98 2f       	mov	r25, r24
    a3f0:	91 70       	andi	r25, 0x01	; 1
    a3f2:	86 2f       	mov	r24, r22
    a3f4:	64 2f       	mov	r22, r20
    a3f6:	49 2f       	mov	r20, r25
    a3f8:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a3fc:	8a 83       	std	Y+2, r24	; 0x02
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
    a3fe:	8a 81       	ldd	r24, Y+2	; 0x02
    a400:	88 23       	and	r24, r24
    a402:	79 f4       	brne	.+30     	; 0xa422 <SevSeg_enuSetDigitValue+0xdc>

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    a404:	89 81       	ldd	r24, Y+1	; 0x01
    a406:	8f 5f       	subi	r24, 0xFF	; 255
    a408:	89 83       	std	Y+1, r24	; 0x01
    a40a:	90 91 d3 01 	lds	r25, 0x01D3
    a40e:	89 81       	ldd	r24, Y+1	; 0x01
    a410:	89 17       	cp	r24, r25
    a412:	08 f4       	brcc	.+2      	; 0xa416 <SevSeg_enuSetDigitValue+0xd0>
    a414:	b1 cf       	rjmp	.-158    	; 0xa378 <SevSeg_enuSetDigitValue+0x32>
    a416:	05 c0       	rjmp	.+10     	; 0xa422 <SevSeg_enuSetDigitValue+0xdc>
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    a418:	82 e0       	ldi	r24, 0x02	; 2
    a41a:	8a 83       	std	Y+2, r24	; 0x02
    a41c:	02 c0       	rjmp	.+4      	; 0xa422 <SevSeg_enuSetDigitValue+0xdc>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    a41e:	82 e0       	ldi	r24, 0x02	; 2
    a420:	8a 83       	std	Y+2, r24	; 0x02


	return Local_enuErrorState ;//DONE
    a422:	8a 81       	ldd	r24, Y+2	; 0x02
}
    a424:	0f 90       	pop	r0
    a426:	0f 90       	pop	r0
    a428:	0f 90       	pop	r0
    a42a:	0f 90       	pop	r0
    a42c:	cf 91       	pop	r28
    a42e:	df 91       	pop	r29
    a430:	08 95       	ret

0000a432 <SevSeg_enuSetDIPValue>:

ES_t SevSeg_enuSetDIPValue(u8 Copy_u8ModuleNum ,u8 Copy_u8SevSegDIPValue)
{
    a432:	df 93       	push	r29
    a434:	cf 93       	push	r28
    a436:	00 d0       	rcall	.+0      	; 0xa438 <SevSeg_enuSetDIPValue+0x6>
    a438:	0f 92       	push	r0
    a43a:	cd b7       	in	r28, 0x3d	; 61
    a43c:	de b7       	in	r29, 0x3e	; 62
    a43e:	8a 83       	std	Y+2, r24	; 0x02
    a440:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    a442:	81 e0       	ldi	r24, 0x01	; 1
    a444:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    a446:	8a 81       	ldd	r24, Y+2	; 0x02
    a448:	8b 50       	subi	r24, 0x0B	; 11
    a44a:	8a 83       	std	Y+2, r24	; 0x02
    a44c:	90 91 d2 01 	lds	r25, 0x01D2
    a450:	8a 81       	ldd	r24, Y+2	; 0x02
    a452:	89 17       	cp	r24, r25
    a454:	b0 f5       	brcc	.+108    	; 0xa4c2 <SevSeg_enuSetDIPValue+0x90>
	{
		if( Copy_u8SevSegDIPValue == DIP_ON ||Copy_u8SevSegDIPValue == DIP_OFF )
    a456:	8b 81       	ldd	r24, Y+3	; 0x03
    a458:	81 30       	cpi	r24, 0x01	; 1
    a45a:	19 f0       	breq	.+6      	; 0xa462 <SevSeg_enuSetDIPValue+0x30>
    a45c:	8b 81       	ldd	r24, Y+3	; 0x03
    a45e:	88 23       	and	r24, r24
    a460:	69 f5       	brne	.+90     	; 0xa4bc <SevSeg_enuSetDIPValue+0x8a>
		{
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].DIP_Conf.InputGrp ,
    a462:	8a 81       	ldd	r24, Y+2	; 0x02
    a464:	88 2f       	mov	r24, r24
    a466:	90 e0       	ldi	r25, 0x00	; 0
    a468:	9c 01       	movw	r18, r24
    a46a:	22 0f       	add	r18, r18
    a46c:	33 1f       	adc	r19, r19
    a46e:	c9 01       	movw	r24, r18
    a470:	88 0f       	add	r24, r24
    a472:	99 1f       	adc	r25, r25
    a474:	88 0f       	add	r24, r24
    a476:	99 1f       	adc	r25, r25
    a478:	88 0f       	add	r24, r24
    a47a:	99 1f       	adc	r25, r25
    a47c:	82 1b       	sub	r24, r18
    a47e:	93 0b       	sbc	r25, r19
    a480:	fc 01       	movw	r30, r24
    a482:	e3 52       	subi	r30, 0x23	; 35
    a484:	fe 4f       	sbci	r31, 0xFE	; 254
    a486:	40 81       	ld	r20, Z
    a488:	8a 81       	ldd	r24, Y+2	; 0x02
    a48a:	88 2f       	mov	r24, r24
    a48c:	90 e0       	ldi	r25, 0x00	; 0
    a48e:	9c 01       	movw	r18, r24
    a490:	22 0f       	add	r18, r18
    a492:	33 1f       	adc	r19, r19
    a494:	c9 01       	movw	r24, r18
    a496:	88 0f       	add	r24, r24
    a498:	99 1f       	adc	r25, r25
    a49a:	88 0f       	add	r24, r24
    a49c:	99 1f       	adc	r25, r25
    a49e:	88 0f       	add	r24, r24
    a4a0:	99 1f       	adc	r25, r25
    a4a2:	82 1b       	sub	r24, r18
    a4a4:	93 0b       	sbc	r25, r19
    a4a6:	fc 01       	movw	r30, r24
    a4a8:	e2 52       	subi	r30, 0x22	; 34
    a4aa:	fe 4f       	sbci	r31, 0xFE	; 254
    a4ac:	90 81       	ld	r25, Z
    a4ae:	84 2f       	mov	r24, r20
    a4b0:	69 2f       	mov	r22, r25
    a4b2:	4b 81       	ldd	r20, Y+3	; 0x03
    a4b4:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a4b8:	89 83       	std	Y+1, r24	; 0x01
    a4ba:	05 c0       	rjmp	.+10     	; 0xa4c6 <SevSeg_enuSetDIPValue+0x94>
														SSegModule[Copy_u8ModuleNum].DIP_Conf.InputPin  , Copy_u8SevSegDIPValue );
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    a4bc:	82 e0       	ldi	r24, 0x02	; 2
    a4be:	89 83       	std	Y+1, r24	; 0x01
    a4c0:	02 c0       	rjmp	.+4      	; 0xa4c6 <SevSeg_enuSetDIPValue+0x94>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    a4c2:	82 e0       	ldi	r24, 0x02	; 2
    a4c4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    a4c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    a4c8:	0f 90       	pop	r0
    a4ca:	0f 90       	pop	r0
    a4cc:	0f 90       	pop	r0
    a4ce:	cf 91       	pop	r28
    a4d0:	df 91       	pop	r29
    a4d2:	08 95       	ret

0000a4d4 <SevSeg_enuFrameDelay>:

ES_t SevSeg_enuFrameDelay(u8 Copy_u8SevSegTotalModules, u8 *Copy_pu8SevSegModuleDelay)
{
    a4d4:	df 93       	push	r29
    a4d6:	cf 93       	push	r28
    a4d8:	00 d0       	rcall	.+0      	; 0xa4da <SevSeg_enuFrameDelay+0x6>
    a4da:	00 d0       	rcall	.+0      	; 0xa4dc <SevSeg_enuFrameDelay+0x8>
    a4dc:	cd b7       	in	r28, 0x3d	; 61
    a4de:	de b7       	in	r29, 0x3e	; 62
    a4e0:	8a 83       	std	Y+2, r24	; 0x02
    a4e2:	7c 83       	std	Y+4, r23	; 0x04
    a4e4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    a4e6:	81 e0       	ldi	r24, 0x01	; 1
    a4e8:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8SevSegTotalModules <= SevSeg_u8MaxModules)
    a4ea:	90 91 d2 01 	lds	r25, 0x01D2
    a4ee:	8a 81       	ldd	r24, Y+2	; 0x02
    a4f0:	98 17       	cp	r25, r24
    a4f2:	98 f0       	brcs	.+38     	; 0xa51a <SevSeg_enuFrameDelay+0x46>
	{

		*Copy_pu8SevSegModuleDelay = SevSeg_u8MODULE_DELAY( Copy_u8SevSegTotalModules );
    a4f4:	8a 81       	ldd	r24, Y+2	; 0x02
    a4f6:	88 2f       	mov	r24, r24
    a4f8:	90 e0       	ldi	r25, 0x00	; 0
    a4fa:	ac 01       	movw	r20, r24
    a4fc:	4d 5e       	subi	r20, 0xED	; 237
    a4fe:	5f 4f       	sbci	r21, 0xFF	; 255
    a500:	8a 81       	ldd	r24, Y+2	; 0x02
    a502:	28 2f       	mov	r18, r24
    a504:	30 e0       	ldi	r19, 0x00	; 0
    a506:	ca 01       	movw	r24, r20
    a508:	b9 01       	movw	r22, r18
    a50a:	0e 94 32 63 	call	0xc664	; 0xc664 <__divmodhi4>
    a50e:	cb 01       	movw	r24, r22
    a510:	eb 81       	ldd	r30, Y+3	; 0x03
    a512:	fc 81       	ldd	r31, Y+4	; 0x04
    a514:	80 83       	st	Z, r24

		Local_enuErrorState=ES_OK;
    a516:	19 82       	std	Y+1, r1	; 0x01
    a518:	02 c0       	rjmp	.+4      	; 0xa51e <SevSeg_enuFrameDelay+0x4a>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    a51a:	82 e0       	ldi	r24, 0x02	; 2
    a51c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    a51e:	89 81       	ldd	r24, Y+1	; 0x01
}
    a520:	0f 90       	pop	r0
    a522:	0f 90       	pop	r0
    a524:	0f 90       	pop	r0
    a526:	0f 90       	pop	r0
    a528:	cf 91       	pop	r28
    a52a:	df 91       	pop	r29
    a52c:	08 95       	ret

0000a52e <SevSeg_enuModuleControl>:

ES_t SevSeg_enuModuleControl(u8 Copy_u8SevSegModuleNum , u8 Copy_u8SevSegModuleStatus)
{
    a52e:	df 93       	push	r29
    a530:	cf 93       	push	r28
    a532:	cd b7       	in	r28, 0x3d	; 61
    a534:	de b7       	in	r29, 0x3e	; 62
    a536:	27 97       	sbiw	r28, 0x07	; 7
    a538:	0f b6       	in	r0, 0x3f	; 63
    a53a:	f8 94       	cli
    a53c:	de bf       	out	0x3e, r29	; 62
    a53e:	0f be       	out	0x3f, r0	; 63
    a540:	cd bf       	out	0x3d, r28	; 61
    a542:	8c 83       	std	Y+4, r24	; 0x04
    a544:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    a546:	81 e0       	ldi	r24, 0x01	; 1
    a548:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Output;

	if( Copy_u8SevSegModuleStatus == MODULE_DISABLE || Copy_u8SevSegModuleStatus == MODULE_ENABLE )
    a54a:	8d 81       	ldd	r24, Y+5	; 0x05
    a54c:	8d 30       	cpi	r24, 0x0D	; 13
    a54e:	21 f0       	breq	.+8      	; 0xa558 <SevSeg_enuModuleControl+0x2a>
    a550:	8d 81       	ldd	r24, Y+5	; 0x05
    a552:	8e 30       	cpi	r24, 0x0E	; 14
    a554:	09 f0       	breq	.+2      	; 0xa558 <SevSeg_enuModuleControl+0x2a>
    a556:	64 c0       	rjmp	.+200    	; 0xa620 <SevSeg_enuModuleControl+0xf2>
	{
		if( (Copy_u8SevSegModuleNum -= MODULE_1)< SevSeg_u8MaxModules )
    a558:	8c 81       	ldd	r24, Y+4	; 0x04
    a55a:	8b 50       	subi	r24, 0x0B	; 11
    a55c:	8c 83       	std	Y+4, r24	; 0x04
    a55e:	90 91 d2 01 	lds	r25, 0x01D2
    a562:	8c 81       	ldd	r24, Y+4	; 0x04
    a564:	89 17       	cp	r24, r25
    a566:	08 f0       	brcs	.+2      	; 0xa56a <SevSeg_enuModuleControl+0x3c>
    a568:	58 c0       	rjmp	.+176    	; 0xa61a <SevSeg_enuModuleControl+0xec>
		{
			switch( Copy_u8SevSegModuleStatus )
    a56a:	8d 81       	ldd	r24, Y+5	; 0x05
    a56c:	28 2f       	mov	r18, r24
    a56e:	30 e0       	ldi	r19, 0x00	; 0
    a570:	3f 83       	std	Y+7, r19	; 0x07
    a572:	2e 83       	std	Y+6, r18	; 0x06
    a574:	8e 81       	ldd	r24, Y+6	; 0x06
    a576:	9f 81       	ldd	r25, Y+7	; 0x07
    a578:	8d 30       	cpi	r24, 0x0D	; 13
    a57a:	91 05       	cpc	r25, r1
    a57c:	31 f0       	breq	.+12     	; 0xa58a <SevSeg_enuModuleControl+0x5c>
    a57e:	2e 81       	ldd	r18, Y+6	; 0x06
    a580:	3f 81       	ldd	r19, Y+7	; 0x07
    a582:	2e 30       	cpi	r18, 0x0E	; 14
    a584:	31 05       	cpc	r19, r1
    a586:	19 f0       	breq	.+6      	; 0xa58e <SevSeg_enuModuleControl+0x60>
    a588:	04 c0       	rjmp	.+8      	; 0xa592 <SevSeg_enuModuleControl+0x64>
			{
				case MODULE_DISABLE : Local_u8Output = DIO_u8LOW;
    a58a:	1a 82       	std	Y+2, r1	; 0x02
    a58c:	02 c0       	rjmp	.+4      	; 0xa592 <SevSeg_enuModuleControl+0x64>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
    a58e:	81 e0       	ldi	r24, 0x01	; 1
    a590:	8a 83       	std	Y+2, r24	; 0x02
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    a592:	19 82       	std	Y+1, r1	; 0x01
    a594:	3b c0       	rjmp	.+118    	; 0xa60c <SevSeg_enuModuleControl+0xde>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    a596:	8c 81       	ldd	r24, Y+4	; 0x04
    a598:	28 2f       	mov	r18, r24
    a59a:	30 e0       	ldi	r19, 0x00	; 0
    a59c:	89 81       	ldd	r24, Y+1	; 0x01
    a59e:	48 2f       	mov	r20, r24
    a5a0:	50 e0       	ldi	r21, 0x00	; 0
    a5a2:	c9 01       	movw	r24, r18
    a5a4:	88 0f       	add	r24, r24
    a5a6:	99 1f       	adc	r25, r25
    a5a8:	88 0f       	add	r24, r24
    a5aa:	99 1f       	adc	r25, r25
    a5ac:	88 0f       	add	r24, r24
    a5ae:	99 1f       	adc	r25, r25
    a5b0:	82 1b       	sub	r24, r18
    a5b2:	93 0b       	sbc	r25, r19
    a5b4:	84 0f       	add	r24, r20
    a5b6:	95 1f       	adc	r25, r21
    a5b8:	05 96       	adiw	r24, 0x05	; 5
    a5ba:	88 0f       	add	r24, r24
    a5bc:	99 1f       	adc	r25, r25
    a5be:	fc 01       	movw	r30, r24
    a5c0:	eb 52       	subi	r30, 0x2B	; 43
    a5c2:	fe 4f       	sbci	r31, 0xFE	; 254
    a5c4:	60 81       	ld	r22, Z
    a5c6:	8c 81       	ldd	r24, Y+4	; 0x04
    a5c8:	28 2f       	mov	r18, r24
    a5ca:	30 e0       	ldi	r19, 0x00	; 0
    a5cc:	89 81       	ldd	r24, Y+1	; 0x01
    a5ce:	48 2f       	mov	r20, r24
    a5d0:	50 e0       	ldi	r21, 0x00	; 0
    a5d2:	c9 01       	movw	r24, r18
    a5d4:	88 0f       	add	r24, r24
    a5d6:	99 1f       	adc	r25, r25
    a5d8:	88 0f       	add	r24, r24
    a5da:	99 1f       	adc	r25, r25
    a5dc:	88 0f       	add	r24, r24
    a5de:	99 1f       	adc	r25, r25
    a5e0:	82 1b       	sub	r24, r18
    a5e2:	93 0b       	sbc	r25, r19
    a5e4:	84 0f       	add	r24, r20
    a5e6:	95 1f       	adc	r25, r21
    a5e8:	88 0f       	add	r24, r24
    a5ea:	99 1f       	adc	r25, r25
    a5ec:	fc 01       	movw	r30, r24
    a5ee:	e0 52       	subi	r30, 0x20	; 32
    a5f0:	fe 4f       	sbci	r31, 0xFE	; 254
    a5f2:	90 81       	ld	r25, Z
    a5f4:	86 2f       	mov	r24, r22
    a5f6:	69 2f       	mov	r22, r25
    a5f8:	4a 81       	ldd	r20, Y+2	; 0x02
    a5fa:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a5fe:	8b 83       	std	Y+3, r24	; 0x03
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
    a600:	8b 81       	ldd	r24, Y+3	; 0x03
    a602:	88 23       	and	r24, r24
    a604:	79 f4       	brne	.+30     	; 0xa624 <SevSeg_enuModuleControl+0xf6>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    a606:	89 81       	ldd	r24, Y+1	; 0x01
    a608:	8f 5f       	subi	r24, 0xFF	; 255
    a60a:	89 83       	std	Y+1, r24	; 0x01
    a60c:	90 91 d4 01 	lds	r25, 0x01D4
    a610:	89 81       	ldd	r24, Y+1	; 0x01
    a612:	89 17       	cp	r24, r25
    a614:	08 f4       	brcc	.+2      	; 0xa618 <SevSeg_enuModuleControl+0xea>
    a616:	bf cf       	rjmp	.-130    	; 0xa596 <SevSeg_enuModuleControl+0x68>
    a618:	05 c0       	rjmp	.+10     	; 0xa624 <SevSeg_enuModuleControl+0xf6>
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else	Local_enuErrorState = ES_OUT_RANGE;
    a61a:	82 e0       	ldi	r24, 0x02	; 2
    a61c:	8b 83       	std	Y+3, r24	; 0x03
    a61e:	02 c0       	rjmp	.+4      	; 0xa624 <SevSeg_enuModuleControl+0xf6>
	}
	else	Local_enuErrorState = ES_OUT_RANGE;
    a620:	82 e0       	ldi	r24, 0x02	; 2
    a622:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;//DONE
    a624:	8b 81       	ldd	r24, Y+3	; 0x03
}
    a626:	27 96       	adiw	r28, 0x07	; 7
    a628:	0f b6       	in	r0, 0x3f	; 63
    a62a:	f8 94       	cli
    a62c:	de bf       	out	0x3e, r29	; 62
    a62e:	0f be       	out	0x3f, r0	; 63
    a630:	cd bf       	out	0x3d, r28	; 61
    a632:	cf 91       	pop	r28
    a634:	df 91       	pop	r29
    a636:	08 95       	ret

0000a638 <LM35_enuInit>:
#include "..\..\MCAL\DIO\DIO_int.h"

#include "LM35_config.h"

ES_t LM35_enuInit(void)
{
    a638:	df 93       	push	r29
    a63a:	cf 93       	push	r28
    a63c:	00 d0       	rcall	.+0      	; 0xa63e <LM35_enuInit+0x6>
    a63e:	0f 92       	push	r0
    a640:	cd b7       	in	r28, 0x3d	; 61
    a642:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[2];
    a644:	81 e0       	ldi	r24, 0x01	; 1
    a646:	89 83       	std	Y+1, r24	; 0x01

	Local_AenuErrorState[0] = DIO_enuSetPinDirection( LM35_VSS_GRP , LM35_VSS_PIN , DIO_u8OUTPUT);
    a648:	82 e0       	ldi	r24, 0x02	; 2
    a64a:	61 e0       	ldi	r22, 0x01	; 1
    a64c:	41 e0       	ldi	r20, 0x01	; 1
    a64e:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    a652:	8a 83       	std	Y+2, r24	; 0x02
	Local_AenuErrorState[1] = DIO_enuSetPinValue( LM35_VSS_GRP , LM35_VSS_PIN , DIO_u8HIGH);
    a654:	82 e0       	ldi	r24, 0x02	; 2
    a656:	61 e0       	ldi	r22, 0x01	; 1
    a658:	41 e0       	ldi	r20, 0x01	; 1
    a65a:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a65e:	8b 83       	std	Y+3, r24	; 0x03

	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    a660:	8a 81       	ldd	r24, Y+2	; 0x02
    a662:	88 23       	and	r24, r24
    a664:	09 f5       	brne	.+66     	; 0xa6a8 <LM35_enuInit+0x70>
    a666:	8b 81       	ldd	r24, Y+3	; 0x03
    a668:	88 23       	and	r24, r24
    a66a:	f1 f4       	brne	.+60     	; 0xa6a8 <LM35_enuInit+0x70>
	{
		Local_AenuErrorState[0] = DIO_enuSetPinDirection( LM35_GROUND_GRP , LM35_GROUND_PIN , DIO_u8OUTPUT );
    a66c:	82 e0       	ldi	r24, 0x02	; 2
    a66e:	60 e0       	ldi	r22, 0x00	; 0
    a670:	41 e0       	ldi	r20, 0x01	; 1
    a672:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    a676:	8a 83       	std	Y+2, r24	; 0x02
		Local_AenuErrorState[1] = DIO_enuSetPinValue( LM35_GROUND_GRP , LM35_GROUND_PIN , DIO_u8LOW);
    a678:	82 e0       	ldi	r24, 0x02	; 2
    a67a:	60 e0       	ldi	r22, 0x00	; 0
    a67c:	40 e0       	ldi	r20, 0x00	; 0
    a67e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a682:	8b 83       	std	Y+3, r24	; 0x03

		if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    a684:	8a 81       	ldd	r24, Y+2	; 0x02
    a686:	88 23       	and	r24, r24
    a688:	79 f4       	brne	.+30     	; 0xa6a8 <LM35_enuInit+0x70>
    a68a:	8b 81       	ldd	r24, Y+3	; 0x03
    a68c:	88 23       	and	r24, r24
    a68e:	61 f4       	brne	.+24     	; 0xa6a8 <LM35_enuInit+0x70>
		{
			Local_AenuErrorState[0] = DIO_enuSetPinDirection( TEMP_VALUE_GRP , TEMP_VALUE_PIN , DIO_u8INPUT );
    a690:	80 e0       	ldi	r24, 0x00	; 0
    a692:	60 e0       	ldi	r22, 0x00	; 0
    a694:	40 e0       	ldi	r20, 0x00	; 0
    a696:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    a69a:	8a 83       	std	Y+2, r24	; 0x02
			Local_AenuErrorState[1] = DIO_enuSetPinValue( TEMP_VALUE_GRP , TEMP_VALUE_PIN , TEMP_VALUE_STATE );
    a69c:	80 e0       	ldi	r24, 0x00	; 0
    a69e:	60 e0       	ldi	r22, 0x00	; 0
    a6a0:	40 e0       	ldi	r20, 0x00	; 0
    a6a2:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a6a6:	8b 83       	std	Y+3, r24	; 0x03
		}

	}

	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    a6a8:	8a 81       	ldd	r24, Y+2	; 0x02
    a6aa:	88 23       	and	r24, r24
    a6ac:	21 f4       	brne	.+8      	; 0xa6b6 <LM35_enuInit+0x7e>
    a6ae:	8b 81       	ldd	r24, Y+3	; 0x03
    a6b0:	88 23       	and	r24, r24
    a6b2:	09 f4       	brne	.+2      	; 0xa6b6 <LM35_enuInit+0x7e>
		Local_enuErrorState = ES_OK;
    a6b4:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    a6b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    a6b8:	0f 90       	pop	r0
    a6ba:	0f 90       	pop	r0
    a6bc:	0f 90       	pop	r0
    a6be:	cf 91       	pop	r28
    a6c0:	df 91       	pop	r29
    a6c2:	08 95       	ret

0000a6c4 <LD_enuInit>:
extern u8 LD_u8LD_MaxNum;
extern LD_t LD[];


ES_t LD_enuInit(void)
{
    a6c4:	df 93       	push	r29
    a6c6:	cf 93       	push	r28
    a6c8:	00 d0       	rcall	.+0      	; 0xa6ca <LD_enuInit+0x6>
    a6ca:	00 d0       	rcall	.+0      	; 0xa6cc <LD_enuInit+0x8>
    a6cc:	cd b7       	in	r28, 0x3d	; 61
    a6ce:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];
    a6d0:	81 e0       	ldi	r24, 0x01	; 1
    a6d2:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    a6d4:	19 82       	std	Y+1, r1	; 0x01
    a6d6:	39 c0       	rjmp	.+114    	; 0xa74a <LD_enuInit+0x86>
	{
		Local_AenuStatus[0] = DIO_enuSetPinDirection( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , DIO_u8OUTPUT);
    a6d8:	89 81       	ldd	r24, Y+1	; 0x01
    a6da:	88 2f       	mov	r24, r24
    a6dc:	90 e0       	ldi	r25, 0x00	; 0
    a6de:	88 0f       	add	r24, r24
    a6e0:	99 1f       	adc	r25, r25
    a6e2:	fc 01       	movw	r30, r24
    a6e4:	ee 50       	subi	r30, 0x0E	; 14
    a6e6:	fe 4f       	sbci	r31, 0xFE	; 254
    a6e8:	20 81       	ld	r18, Z
    a6ea:	89 81       	ldd	r24, Y+1	; 0x01
    a6ec:	88 2f       	mov	r24, r24
    a6ee:	90 e0       	ldi	r25, 0x00	; 0
    a6f0:	88 0f       	add	r24, r24
    a6f2:	99 1f       	adc	r25, r25
    a6f4:	fc 01       	movw	r30, r24
    a6f6:	ed 50       	subi	r30, 0x0D	; 13
    a6f8:	fe 4f       	sbci	r31, 0xFE	; 254
    a6fa:	90 81       	ld	r25, Z
    a6fc:	82 2f       	mov	r24, r18
    a6fe:	69 2f       	mov	r22, r25
    a700:	41 e0       	ldi	r20, 0x01	; 1
    a702:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    a706:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);
    a708:	89 81       	ldd	r24, Y+1	; 0x01
    a70a:	88 2f       	mov	r24, r24
    a70c:	90 e0       	ldi	r25, 0x00	; 0
    a70e:	88 0f       	add	r24, r24
    a710:	99 1f       	adc	r25, r25
    a712:	fc 01       	movw	r30, r24
    a714:	ee 50       	subi	r30, 0x0E	; 14
    a716:	fe 4f       	sbci	r31, 0xFE	; 254
    a718:	20 81       	ld	r18, Z
    a71a:	89 81       	ldd	r24, Y+1	; 0x01
    a71c:	88 2f       	mov	r24, r24
    a71e:	90 e0       	ldi	r25, 0x00	; 0
    a720:	88 0f       	add	r24, r24
    a722:	99 1f       	adc	r25, r25
    a724:	fc 01       	movw	r30, r24
    a726:	ed 50       	subi	r30, 0x0D	; 13
    a728:	fe 4f       	sbci	r31, 0xFE	; 254
    a72a:	90 81       	ld	r25, Z
    a72c:	82 2f       	mov	r24, r18
    a72e:	69 2f       	mov	r22, r25
    a730:	40 e0       	ldi	r20, 0x00	; 0
    a732:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a736:	8c 83       	std	Y+4, r24	; 0x04

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
    a738:	8b 81       	ldd	r24, Y+3	; 0x03
    a73a:	88 23       	and	r24, r24
    a73c:	59 f4       	brne	.+22     	; 0xa754 <LD_enuInit+0x90>
    a73e:	8c 81       	ldd	r24, Y+4	; 0x04
    a740:	88 23       	and	r24, r24
    a742:	41 f4       	brne	.+16     	; 0xa754 <LD_enuInit+0x90>

ES_t LD_enuInit(void)
{
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    a744:	89 81       	ldd	r24, Y+1	; 0x01
    a746:	8f 5f       	subi	r24, 0xFF	; 255
    a748:	89 83       	std	Y+1, r24	; 0x01
    a74a:	90 91 f1 01 	lds	r25, 0x01F1
    a74e:	89 81       	ldd	r24, Y+1	; 0x01
    a750:	89 17       	cp	r24, r25
    a752:	10 f2       	brcs	.-124    	; 0xa6d8 <LD_enuInit+0x14>
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
	}

	if(Local_AenuStatus[0] == ES_OK && Local_AenuStatus[1] == ES_OK)
    a754:	8b 81       	ldd	r24, Y+3	; 0x03
    a756:	88 23       	and	r24, r24
    a758:	21 f4       	brne	.+8      	; 0xa762 <LD_enuInit+0x9e>
    a75a:	8c 81       	ldd	r24, Y+4	; 0x04
    a75c:	88 23       	and	r24, r24
    a75e:	09 f4       	brne	.+2      	; 0xa762 <LD_enuInit+0x9e>
		Local_enuErrorStatus = ES_OK;
    a760:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorStatus;
    a762:	8a 81       	ldd	r24, Y+2	; 0x02
}
    a764:	0f 90       	pop	r0
    a766:	0f 90       	pop	r0
    a768:	0f 90       	pop	r0
    a76a:	0f 90       	pop	r0
    a76c:	cf 91       	pop	r28
    a76e:	df 91       	pop	r29
    a770:	08 95       	ret

0000a772 <LD_enuSetState>:

ES_t LD_enuSetState(u8 Copy_u8LD_Num ,u8 Copy_u8LDSetValue)
{
    a772:	df 93       	push	r29
    a774:	cf 93       	push	r28
    a776:	00 d0       	rcall	.+0      	; 0xa778 <LD_enuSetState+0x6>
    a778:	0f 92       	push	r0
    a77a:	cd b7       	in	r28, 0x3d	; 61
    a77c:	de b7       	in	r29, 0x3e	; 62
    a77e:	8a 83       	std	Y+2, r24	; 0x02
    a780:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK ;
    a782:	81 e0       	ldi	r24, 0x01	; 1
    a784:	89 83       	std	Y+1, r24	; 0x01

	if( ( Copy_u8LD_Num -= LD_ZERO ) < LD_u8LD_MaxNum)
    a786:	8a 81       	ldd	r24, Y+2	; 0x02
    a788:	8e 51       	subi	r24, 0x1E	; 30
    a78a:	8a 83       	std	Y+2, r24	; 0x02
    a78c:	90 91 f1 01 	lds	r25, 0x01F1
    a790:	8a 81       	ldd	r24, Y+2	; 0x02
    a792:	89 17       	cp	r24, r25
    a794:	10 f5       	brcc	.+68     	; 0xa7da <LD_enuSetState+0x68>
	{
		if( Copy_u8LDSetValue == LD_u8ON || Copy_u8LDSetValue == LD_u8OFF )
    a796:	8b 81       	ldd	r24, Y+3	; 0x03
    a798:	81 30       	cpi	r24, 0x01	; 1
    a79a:	19 f0       	breq	.+6      	; 0xa7a2 <LD_enuSetState+0x30>
    a79c:	8b 81       	ldd	r24, Y+3	; 0x03
    a79e:	88 23       	and	r24, r24
    a7a0:	c9 f4       	brne	.+50     	; 0xa7d4 <LD_enuSetState+0x62>
		{
			Local_enuErrorStatus = DIO_enuSetPinValue(LD[Copy_u8LD_Num].LD_Grp , LD[Copy_u8LD_Num].LD_Pin , Copy_u8LDSetValue);
    a7a2:	8a 81       	ldd	r24, Y+2	; 0x02
    a7a4:	88 2f       	mov	r24, r24
    a7a6:	90 e0       	ldi	r25, 0x00	; 0
    a7a8:	88 0f       	add	r24, r24
    a7aa:	99 1f       	adc	r25, r25
    a7ac:	fc 01       	movw	r30, r24
    a7ae:	ee 50       	subi	r30, 0x0E	; 14
    a7b0:	fe 4f       	sbci	r31, 0xFE	; 254
    a7b2:	20 81       	ld	r18, Z
    a7b4:	8a 81       	ldd	r24, Y+2	; 0x02
    a7b6:	88 2f       	mov	r24, r24
    a7b8:	90 e0       	ldi	r25, 0x00	; 0
    a7ba:	88 0f       	add	r24, r24
    a7bc:	99 1f       	adc	r25, r25
    a7be:	fc 01       	movw	r30, r24
    a7c0:	ed 50       	subi	r30, 0x0D	; 13
    a7c2:	fe 4f       	sbci	r31, 0xFE	; 254
    a7c4:	90 81       	ld	r25, Z
    a7c6:	82 2f       	mov	r24, r18
    a7c8:	69 2f       	mov	r22, r25
    a7ca:	4b 81       	ldd	r20, Y+3	; 0x03
    a7cc:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a7d0:	89 83       	std	Y+1, r24	; 0x01
    a7d2:	05 c0       	rjmp	.+10     	; 0xa7de <LD_enuSetState+0x6c>
		}
		else Local_enuErrorStatus = ES_OUT_RANGE;
    a7d4:	82 e0       	ldi	r24, 0x02	; 2
    a7d6:	89 83       	std	Y+1, r24	; 0x01
    a7d8:	02 c0       	rjmp	.+4      	; 0xa7de <LD_enuSetState+0x6c>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    a7da:	82 e0       	ldi	r24, 0x02	; 2
    a7dc:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    a7de:	89 81       	ldd	r24, Y+1	; 0x01
}
    a7e0:	0f 90       	pop	r0
    a7e2:	0f 90       	pop	r0
    a7e4:	0f 90       	pop	r0
    a7e6:	cf 91       	pop	r28
    a7e8:	df 91       	pop	r29
    a7ea:	08 95       	ret

0000a7ec <LCD_enuInit>:
#include "LCD_priv.h"

#include <util/delay.h>

ES_t LCD_enuInit(void)
{
    a7ec:	df 93       	push	r29
    a7ee:	cf 93       	push	r28
    a7f0:	cd b7       	in	r28, 0x3d	; 61
    a7f2:	de b7       	in	r29, 0x3e	; 62
    a7f4:	ab 97       	sbiw	r28, 0x2b	; 43
    a7f6:	0f b6       	in	r0, 0x3f	; 63
    a7f8:	f8 94       	cli
    a7fa:	de bf       	out	0x3e, r29	; 62
    a7fc:	0f be       	out	0x3f, r0	; 63
    a7fe:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    a800:	81 e0       	ldi	r24, 0x01	; 1
    a802:	8b a7       	std	Y+43, r24	; 0x2b
    a804:	80 e0       	ldi	r24, 0x00	; 0
    a806:	90 e0       	ldi	r25, 0x00	; 0
    a808:	a0 ef       	ldi	r26, 0xF0	; 240
    a80a:	b1 e4       	ldi	r27, 0x41	; 65
    a80c:	8f a3       	std	Y+39, r24	; 0x27
    a80e:	98 a7       	std	Y+40, r25	; 0x28
    a810:	a9 a7       	std	Y+41, r26	; 0x29
    a812:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a814:	6f a1       	ldd	r22, Y+39	; 0x27
    a816:	78 a5       	ldd	r23, Y+40	; 0x28
    a818:	89 a5       	ldd	r24, Y+41	; 0x29
    a81a:	9a a5       	ldd	r25, Y+42	; 0x2a
    a81c:	20 e0       	ldi	r18, 0x00	; 0
    a81e:	30 e0       	ldi	r19, 0x00	; 0
    a820:	4a e7       	ldi	r20, 0x7A	; 122
    a822:	55 e4       	ldi	r21, 0x45	; 69
    a824:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    a828:	dc 01       	movw	r26, r24
    a82a:	cb 01       	movw	r24, r22
    a82c:	8b a3       	std	Y+35, r24	; 0x23
    a82e:	9c a3       	std	Y+36, r25	; 0x24
    a830:	ad a3       	std	Y+37, r26	; 0x25
    a832:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    a834:	6b a1       	ldd	r22, Y+35	; 0x23
    a836:	7c a1       	ldd	r23, Y+36	; 0x24
    a838:	8d a1       	ldd	r24, Y+37	; 0x25
    a83a:	9e a1       	ldd	r25, Y+38	; 0x26
    a83c:	20 e0       	ldi	r18, 0x00	; 0
    a83e:	30 e0       	ldi	r19, 0x00	; 0
    a840:	40 e8       	ldi	r20, 0x80	; 128
    a842:	5f e3       	ldi	r21, 0x3F	; 63
    a844:	0e 94 84 12 	call	0x2508	; 0x2508 <__ltsf2>
    a848:	88 23       	and	r24, r24
    a84a:	2c f4       	brge	.+10     	; 0xa856 <LCD_enuInit+0x6a>
		__ticks = 1;
    a84c:	81 e0       	ldi	r24, 0x01	; 1
    a84e:	90 e0       	ldi	r25, 0x00	; 0
    a850:	9a a3       	std	Y+34, r25	; 0x22
    a852:	89 a3       	std	Y+33, r24	; 0x21
    a854:	3f c0       	rjmp	.+126    	; 0xa8d4 <LCD_enuInit+0xe8>
	else if (__tmp > 65535)
    a856:	6b a1       	ldd	r22, Y+35	; 0x23
    a858:	7c a1       	ldd	r23, Y+36	; 0x24
    a85a:	8d a1       	ldd	r24, Y+37	; 0x25
    a85c:	9e a1       	ldd	r25, Y+38	; 0x26
    a85e:	20 e0       	ldi	r18, 0x00	; 0
    a860:	3f ef       	ldi	r19, 0xFF	; 255
    a862:	4f e7       	ldi	r20, 0x7F	; 127
    a864:	57 e4       	ldi	r21, 0x47	; 71
    a866:	0e 94 24 12 	call	0x2448	; 0x2448 <__gtsf2>
    a86a:	18 16       	cp	r1, r24
    a86c:	4c f5       	brge	.+82     	; 0xa8c0 <LCD_enuInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a86e:	6f a1       	ldd	r22, Y+39	; 0x27
    a870:	78 a5       	ldd	r23, Y+40	; 0x28
    a872:	89 a5       	ldd	r24, Y+41	; 0x29
    a874:	9a a5       	ldd	r25, Y+42	; 0x2a
    a876:	20 e0       	ldi	r18, 0x00	; 0
    a878:	30 e0       	ldi	r19, 0x00	; 0
    a87a:	40 e2       	ldi	r20, 0x20	; 32
    a87c:	51 e4       	ldi	r21, 0x41	; 65
    a87e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    a882:	dc 01       	movw	r26, r24
    a884:	cb 01       	movw	r24, r22
    a886:	bc 01       	movw	r22, r24
    a888:	cd 01       	movw	r24, r26
    a88a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    a88e:	dc 01       	movw	r26, r24
    a890:	cb 01       	movw	r24, r22
    a892:	9a a3       	std	Y+34, r25	; 0x22
    a894:	89 a3       	std	Y+33, r24	; 0x21
    a896:	0f c0       	rjmp	.+30     	; 0xa8b6 <LCD_enuInit+0xca>
    a898:	80 e9       	ldi	r24, 0x90	; 144
    a89a:	91 e0       	ldi	r25, 0x01	; 1
    a89c:	98 a3       	std	Y+32, r25	; 0x20
    a89e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    a8a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    a8a2:	98 a1       	ldd	r25, Y+32	; 0x20
    a8a4:	01 97       	sbiw	r24, 0x01	; 1
    a8a6:	f1 f7       	brne	.-4      	; 0xa8a4 <LCD_enuInit+0xb8>
    a8a8:	98 a3       	std	Y+32, r25	; 0x20
    a8aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a8ac:	89 a1       	ldd	r24, Y+33	; 0x21
    a8ae:	9a a1       	ldd	r25, Y+34	; 0x22
    a8b0:	01 97       	sbiw	r24, 0x01	; 1
    a8b2:	9a a3       	std	Y+34, r25	; 0x22
    a8b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a8b6:	89 a1       	ldd	r24, Y+33	; 0x21
    a8b8:	9a a1       	ldd	r25, Y+34	; 0x22
    a8ba:	00 97       	sbiw	r24, 0x00	; 0
    a8bc:	69 f7       	brne	.-38     	; 0xa898 <LCD_enuInit+0xac>
    a8be:	14 c0       	rjmp	.+40     	; 0xa8e8 <LCD_enuInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a8c0:	6b a1       	ldd	r22, Y+35	; 0x23
    a8c2:	7c a1       	ldd	r23, Y+36	; 0x24
    a8c4:	8d a1       	ldd	r24, Y+37	; 0x25
    a8c6:	9e a1       	ldd	r25, Y+38	; 0x26
    a8c8:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    a8cc:	dc 01       	movw	r26, r24
    a8ce:	cb 01       	movw	r24, r22
    a8d0:	9a a3       	std	Y+34, r25	; 0x22
    a8d2:	89 a3       	std	Y+33, r24	; 0x21
    a8d4:	89 a1       	ldd	r24, Y+33	; 0x21
    a8d6:	9a a1       	ldd	r25, Y+34	; 0x22
    a8d8:	9e 8f       	std	Y+30, r25	; 0x1e
    a8da:	8d 8f       	std	Y+29, r24	; 0x1d
    a8dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    a8de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    a8e0:	01 97       	sbiw	r24, 0x01	; 1
    a8e2:	f1 f7       	brne	.-4      	; 0xa8e0 <LCD_enuInit+0xf4>
    a8e4:	9e 8f       	std	Y+30, r25	; 0x1e
    a8e6:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);

	DIO_enuSetPinDirection(RS_GRP , RS_PIN , DIO_u8OUTPUT);
    a8e8:	81 e0       	ldi	r24, 0x01	; 1
    a8ea:	61 e0       	ldi	r22, 0x01	; 1
    a8ec:	41 e0       	ldi	r20, 0x01	; 1
    a8ee:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
#if RW_GRP != NC && RW_PIN != NC
	DIO_enuSetPinDirection(RW_GRP , RW_PIN , DIO_u8OUTPUT);
    a8f2:	81 e0       	ldi	r24, 0x01	; 1
    a8f4:	62 e0       	ldi	r22, 0x02	; 2
    a8f6:	41 e0       	ldi	r20, 0x01	; 1
    a8f8:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
#endif
	DIO_enuSetPinDirection(EN_GRP , EN_PIN , DIO_u8OUTPUT);
    a8fc:	81 e0       	ldi	r24, 0x01	; 1
    a8fe:	63 e0       	ldi	r22, 0x03	; 3
    a900:	41 e0       	ldi	r20, 0x01	; 1
    a902:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP , D7_PIN , DIO_u8OUTPUT);
    a906:	80 e0       	ldi	r24, 0x00	; 0
    a908:	67 e0       	ldi	r22, 0x07	; 7
    a90a:	41 e0       	ldi	r20, 0x01	; 1
    a90c:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP , D6_PIN , DIO_u8OUTPUT);
    a910:	80 e0       	ldi	r24, 0x00	; 0
    a912:	66 e0       	ldi	r22, 0x06	; 6
    a914:	41 e0       	ldi	r20, 0x01	; 1
    a916:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP , D5_PIN , DIO_u8OUTPUT);
    a91a:	80 e0       	ldi	r24, 0x00	; 0
    a91c:	65 e0       	ldi	r22, 0x05	; 5
    a91e:	41 e0       	ldi	r20, 0x01	; 1
    a920:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP , D4_PIN , DIO_u8OUTPUT);
    a924:	80 e0       	ldi	r24, 0x00	; 0
    a926:	64 e0       	ldi	r22, 0x04	; 4
    a928:	41 e0       	ldi	r20, 0x01	; 1
    a92a:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch( 0x38 );

#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(D7_GRP , D7_PIN , DIO_u8LOW);
    a92e:	80 e0       	ldi	r24, 0x00	; 0
    a930:	67 e0       	ldi	r22, 0x07	; 7
    a932:	40 e0       	ldi	r20, 0x00	; 0
    a934:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , DIO_u8LOW);
    a938:	80 e0       	ldi	r24, 0x00	; 0
    a93a:	66 e0       	ldi	r22, 0x06	; 6
    a93c:	40 e0       	ldi	r20, 0x00	; 0
    a93e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , DIO_u8HIGH);
    a942:	80 e0       	ldi	r24, 0x00	; 0
    a944:	65 e0       	ldi	r22, 0x05	; 5
    a946:	41 e0       	ldi	r20, 0x01	; 1
    a948:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , DIO_u8LOW);
    a94c:	80 e0       	ldi	r24, 0x00	; 0
    a94e:	64 e0       	ldi	r22, 0x04	; 4
    a950:	40 e0       	ldi	r20, 0x00	; 0
    a952:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    a956:	81 e0       	ldi	r24, 0x01	; 1
    a958:	63 e0       	ldi	r22, 0x03	; 3
    a95a:	41 e0       	ldi	r20, 0x01	; 1
    a95c:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    a960:	80 e0       	ldi	r24, 0x00	; 0
    a962:	90 e0       	ldi	r25, 0x00	; 0
    a964:	a0 e8       	ldi	r26, 0x80	; 128
    a966:	bf e3       	ldi	r27, 0x3F	; 63
    a968:	89 8f       	std	Y+25, r24	; 0x19
    a96a:	9a 8f       	std	Y+26, r25	; 0x1a
    a96c:	ab 8f       	std	Y+27, r26	; 0x1b
    a96e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a970:	69 8d       	ldd	r22, Y+25	; 0x19
    a972:	7a 8d       	ldd	r23, Y+26	; 0x1a
    a974:	8b 8d       	ldd	r24, Y+27	; 0x1b
    a976:	9c 8d       	ldd	r25, Y+28	; 0x1c
    a978:	20 e0       	ldi	r18, 0x00	; 0
    a97a:	30 e0       	ldi	r19, 0x00	; 0
    a97c:	4a e7       	ldi	r20, 0x7A	; 122
    a97e:	55 e4       	ldi	r21, 0x45	; 69
    a980:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    a984:	dc 01       	movw	r26, r24
    a986:	cb 01       	movw	r24, r22
    a988:	8d 8b       	std	Y+21, r24	; 0x15
    a98a:	9e 8b       	std	Y+22, r25	; 0x16
    a98c:	af 8b       	std	Y+23, r26	; 0x17
    a98e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    a990:	6d 89       	ldd	r22, Y+21	; 0x15
    a992:	7e 89       	ldd	r23, Y+22	; 0x16
    a994:	8f 89       	ldd	r24, Y+23	; 0x17
    a996:	98 8d       	ldd	r25, Y+24	; 0x18
    a998:	20 e0       	ldi	r18, 0x00	; 0
    a99a:	30 e0       	ldi	r19, 0x00	; 0
    a99c:	40 e8       	ldi	r20, 0x80	; 128
    a99e:	5f e3       	ldi	r21, 0x3F	; 63
    a9a0:	0e 94 84 12 	call	0x2508	; 0x2508 <__ltsf2>
    a9a4:	88 23       	and	r24, r24
    a9a6:	2c f4       	brge	.+10     	; 0xa9b2 <LCD_enuInit+0x1c6>
		__ticks = 1;
    a9a8:	81 e0       	ldi	r24, 0x01	; 1
    a9aa:	90 e0       	ldi	r25, 0x00	; 0
    a9ac:	9c 8b       	std	Y+20, r25	; 0x14
    a9ae:	8b 8b       	std	Y+19, r24	; 0x13
    a9b0:	3f c0       	rjmp	.+126    	; 0xaa30 <LCD_enuInit+0x244>
	else if (__tmp > 65535)
    a9b2:	6d 89       	ldd	r22, Y+21	; 0x15
    a9b4:	7e 89       	ldd	r23, Y+22	; 0x16
    a9b6:	8f 89       	ldd	r24, Y+23	; 0x17
    a9b8:	98 8d       	ldd	r25, Y+24	; 0x18
    a9ba:	20 e0       	ldi	r18, 0x00	; 0
    a9bc:	3f ef       	ldi	r19, 0xFF	; 255
    a9be:	4f e7       	ldi	r20, 0x7F	; 127
    a9c0:	57 e4       	ldi	r21, 0x47	; 71
    a9c2:	0e 94 24 12 	call	0x2448	; 0x2448 <__gtsf2>
    a9c6:	18 16       	cp	r1, r24
    a9c8:	4c f5       	brge	.+82     	; 0xaa1c <LCD_enuInit+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a9ca:	69 8d       	ldd	r22, Y+25	; 0x19
    a9cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    a9ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    a9d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    a9d2:	20 e0       	ldi	r18, 0x00	; 0
    a9d4:	30 e0       	ldi	r19, 0x00	; 0
    a9d6:	40 e2       	ldi	r20, 0x20	; 32
    a9d8:	51 e4       	ldi	r21, 0x41	; 65
    a9da:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    a9de:	dc 01       	movw	r26, r24
    a9e0:	cb 01       	movw	r24, r22
    a9e2:	bc 01       	movw	r22, r24
    a9e4:	cd 01       	movw	r24, r26
    a9e6:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    a9ea:	dc 01       	movw	r26, r24
    a9ec:	cb 01       	movw	r24, r22
    a9ee:	9c 8b       	std	Y+20, r25	; 0x14
    a9f0:	8b 8b       	std	Y+19, r24	; 0x13
    a9f2:	0f c0       	rjmp	.+30     	; 0xaa12 <LCD_enuInit+0x226>
    a9f4:	80 e9       	ldi	r24, 0x90	; 144
    a9f6:	91 e0       	ldi	r25, 0x01	; 1
    a9f8:	9a 8b       	std	Y+18, r25	; 0x12
    a9fa:	89 8b       	std	Y+17, r24	; 0x11
    a9fc:	89 89       	ldd	r24, Y+17	; 0x11
    a9fe:	9a 89       	ldd	r25, Y+18	; 0x12
    aa00:	01 97       	sbiw	r24, 0x01	; 1
    aa02:	f1 f7       	brne	.-4      	; 0xaa00 <LCD_enuInit+0x214>
    aa04:	9a 8b       	std	Y+18, r25	; 0x12
    aa06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa08:	8b 89       	ldd	r24, Y+19	; 0x13
    aa0a:	9c 89       	ldd	r25, Y+20	; 0x14
    aa0c:	01 97       	sbiw	r24, 0x01	; 1
    aa0e:	9c 8b       	std	Y+20, r25	; 0x14
    aa10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa12:	8b 89       	ldd	r24, Y+19	; 0x13
    aa14:	9c 89       	ldd	r25, Y+20	; 0x14
    aa16:	00 97       	sbiw	r24, 0x00	; 0
    aa18:	69 f7       	brne	.-38     	; 0xa9f4 <LCD_enuInit+0x208>
    aa1a:	14 c0       	rjmp	.+40     	; 0xaa44 <LCD_enuInit+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    aa1c:	6d 89       	ldd	r22, Y+21	; 0x15
    aa1e:	7e 89       	ldd	r23, Y+22	; 0x16
    aa20:	8f 89       	ldd	r24, Y+23	; 0x17
    aa22:	98 8d       	ldd	r25, Y+24	; 0x18
    aa24:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    aa28:	dc 01       	movw	r26, r24
    aa2a:	cb 01       	movw	r24, r22
    aa2c:	9c 8b       	std	Y+20, r25	; 0x14
    aa2e:	8b 8b       	std	Y+19, r24	; 0x13
    aa30:	8b 89       	ldd	r24, Y+19	; 0x13
    aa32:	9c 89       	ldd	r25, Y+20	; 0x14
    aa34:	98 8b       	std	Y+16, r25	; 0x10
    aa36:	8f 87       	std	Y+15, r24	; 0x0f
    aa38:	8f 85       	ldd	r24, Y+15	; 0x0f
    aa3a:	98 89       	ldd	r25, Y+16	; 0x10
    aa3c:	01 97       	sbiw	r24, 0x01	; 1
    aa3e:	f1 f7       	brne	.-4      	; 0xaa3c <LCD_enuInit+0x250>
    aa40:	98 8b       	std	Y+16, r25	; 0x10
    aa42:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    aa44:	81 e0       	ldi	r24, 0x01	; 1
    aa46:	63 e0       	ldi	r22, 0x03	; 3
    aa48:	40 e0       	ldi	r20, 0x00	; 0
    aa4a:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    aa4e:	80 e0       	ldi	r24, 0x00	; 0
    aa50:	90 e0       	ldi	r25, 0x00	; 0
    aa52:	a0 e8       	ldi	r26, 0x80	; 128
    aa54:	b0 e4       	ldi	r27, 0x40	; 64
    aa56:	8b 87       	std	Y+11, r24	; 0x0b
    aa58:	9c 87       	std	Y+12, r25	; 0x0c
    aa5a:	ad 87       	std	Y+13, r26	; 0x0d
    aa5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    aa5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    aa60:	7c 85       	ldd	r23, Y+12	; 0x0c
    aa62:	8d 85       	ldd	r24, Y+13	; 0x0d
    aa64:	9e 85       	ldd	r25, Y+14	; 0x0e
    aa66:	20 e0       	ldi	r18, 0x00	; 0
    aa68:	30 e0       	ldi	r19, 0x00	; 0
    aa6a:	4a e7       	ldi	r20, 0x7A	; 122
    aa6c:	55 e4       	ldi	r21, 0x45	; 69
    aa6e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    aa72:	dc 01       	movw	r26, r24
    aa74:	cb 01       	movw	r24, r22
    aa76:	8f 83       	std	Y+7, r24	; 0x07
    aa78:	98 87       	std	Y+8, r25	; 0x08
    aa7a:	a9 87       	std	Y+9, r26	; 0x09
    aa7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    aa7e:	6f 81       	ldd	r22, Y+7	; 0x07
    aa80:	78 85       	ldd	r23, Y+8	; 0x08
    aa82:	89 85       	ldd	r24, Y+9	; 0x09
    aa84:	9a 85       	ldd	r25, Y+10	; 0x0a
    aa86:	20 e0       	ldi	r18, 0x00	; 0
    aa88:	30 e0       	ldi	r19, 0x00	; 0
    aa8a:	40 e8       	ldi	r20, 0x80	; 128
    aa8c:	5f e3       	ldi	r21, 0x3F	; 63
    aa8e:	0e 94 84 12 	call	0x2508	; 0x2508 <__ltsf2>
    aa92:	88 23       	and	r24, r24
    aa94:	2c f4       	brge	.+10     	; 0xaaa0 <LCD_enuInit+0x2b4>
		__ticks = 1;
    aa96:	81 e0       	ldi	r24, 0x01	; 1
    aa98:	90 e0       	ldi	r25, 0x00	; 0
    aa9a:	9e 83       	std	Y+6, r25	; 0x06
    aa9c:	8d 83       	std	Y+5, r24	; 0x05
    aa9e:	3f c0       	rjmp	.+126    	; 0xab1e <LCD_enuInit+0x332>
	else if (__tmp > 65535)
    aaa0:	6f 81       	ldd	r22, Y+7	; 0x07
    aaa2:	78 85       	ldd	r23, Y+8	; 0x08
    aaa4:	89 85       	ldd	r24, Y+9	; 0x09
    aaa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    aaa8:	20 e0       	ldi	r18, 0x00	; 0
    aaaa:	3f ef       	ldi	r19, 0xFF	; 255
    aaac:	4f e7       	ldi	r20, 0x7F	; 127
    aaae:	57 e4       	ldi	r21, 0x47	; 71
    aab0:	0e 94 24 12 	call	0x2448	; 0x2448 <__gtsf2>
    aab4:	18 16       	cp	r1, r24
    aab6:	4c f5       	brge	.+82     	; 0xab0a <LCD_enuInit+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    aab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    aaba:	7c 85       	ldd	r23, Y+12	; 0x0c
    aabc:	8d 85       	ldd	r24, Y+13	; 0x0d
    aabe:	9e 85       	ldd	r25, Y+14	; 0x0e
    aac0:	20 e0       	ldi	r18, 0x00	; 0
    aac2:	30 e0       	ldi	r19, 0x00	; 0
    aac4:	40 e2       	ldi	r20, 0x20	; 32
    aac6:	51 e4       	ldi	r21, 0x41	; 65
    aac8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    aacc:	dc 01       	movw	r26, r24
    aace:	cb 01       	movw	r24, r22
    aad0:	bc 01       	movw	r22, r24
    aad2:	cd 01       	movw	r24, r26
    aad4:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    aad8:	dc 01       	movw	r26, r24
    aada:	cb 01       	movw	r24, r22
    aadc:	9e 83       	std	Y+6, r25	; 0x06
    aade:	8d 83       	std	Y+5, r24	; 0x05
    aae0:	0f c0       	rjmp	.+30     	; 0xab00 <LCD_enuInit+0x314>
    aae2:	80 e9       	ldi	r24, 0x90	; 144
    aae4:	91 e0       	ldi	r25, 0x01	; 1
    aae6:	9c 83       	std	Y+4, r25	; 0x04
    aae8:	8b 83       	std	Y+3, r24	; 0x03
    aaea:	8b 81       	ldd	r24, Y+3	; 0x03
    aaec:	9c 81       	ldd	r25, Y+4	; 0x04
    aaee:	01 97       	sbiw	r24, 0x01	; 1
    aaf0:	f1 f7       	brne	.-4      	; 0xaaee <LCD_enuInit+0x302>
    aaf2:	9c 83       	std	Y+4, r25	; 0x04
    aaf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aaf6:	8d 81       	ldd	r24, Y+5	; 0x05
    aaf8:	9e 81       	ldd	r25, Y+6	; 0x06
    aafa:	01 97       	sbiw	r24, 0x01	; 1
    aafc:	9e 83       	std	Y+6, r25	; 0x06
    aafe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ab00:	8d 81       	ldd	r24, Y+5	; 0x05
    ab02:	9e 81       	ldd	r25, Y+6	; 0x06
    ab04:	00 97       	sbiw	r24, 0x00	; 0
    ab06:	69 f7       	brne	.-38     	; 0xaae2 <LCD_enuInit+0x2f6>
    ab08:	14 c0       	rjmp	.+40     	; 0xab32 <LCD_enuInit+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ab0a:	6f 81       	ldd	r22, Y+7	; 0x07
    ab0c:	78 85       	ldd	r23, Y+8	; 0x08
    ab0e:	89 85       	ldd	r24, Y+9	; 0x09
    ab10:	9a 85       	ldd	r25, Y+10	; 0x0a
    ab12:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    ab16:	dc 01       	movw	r26, r24
    ab18:	cb 01       	movw	r24, r22
    ab1a:	9e 83       	std	Y+6, r25	; 0x06
    ab1c:	8d 83       	std	Y+5, r24	; 0x05
    ab1e:	8d 81       	ldd	r24, Y+5	; 0x05
    ab20:	9e 81       	ldd	r25, Y+6	; 0x06
    ab22:	9a 83       	std	Y+2, r25	; 0x02
    ab24:	89 83       	std	Y+1, r24	; 0x01
    ab26:	89 81       	ldd	r24, Y+1	; 0x01
    ab28:	9a 81       	ldd	r25, Y+2	; 0x02
    ab2a:	01 97       	sbiw	r24, 0x01	; 1
    ab2c:	f1 f7       	brne	.-4      	; 0xab2a <LCD_enuInit+0x33e>
    ab2e:	9a 83       	std	Y+2, r25	; 0x02
    ab30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    ab32:	81 e0       	ldi	r24, 0x01	; 1
    ab34:	61 e0       	ldi	r22, 0x01	; 1
    ab36:	40 e0       	ldi	r20, 0x00	; 0
    ab38:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x28 );
    ab3c:	88 e2       	ldi	r24, 0x28	; 40
    ab3e:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>

#endif

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    ab42:	81 e0       	ldi	r24, 0x01	; 1
    ab44:	61 e0       	ldi	r22, 0x01	; 1
    ab46:	40 e0       	ldi	r20, 0x00	; 0
    ab48:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x08 );//Display still OFF
    ab4c:	88 e0       	ldi	r24, 0x08	; 8
    ab4e:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    ab52:	81 e0       	ldi	r24, 0x01	; 1
    ab54:	61 e0       	ldi	r22, 0x01	; 1
    ab56:	40 e0       	ldi	r20, 0x00	; 0
    ab58:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x01 );//Clears Display Data
    ab5c:	81 e0       	ldi	r24, 0x01	; 1
    ab5e:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    ab62:	81 e0       	ldi	r24, 0x01	; 1
    ab64:	61 e0       	ldi	r22, 0x01	; 1
    ab66:	40 e0       	ldi	r20, 0x00	; 0
    ab68:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x06 );
    ab6c:	86 e0       	ldi	r24, 0x06	; 6
    ab6e:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>



	return Local_enuErrorState = ES_OK; //////////////////////////////////////////////////NEEDS ADJUSTMENT for error handling
    ab72:	1b a6       	std	Y+43, r1	; 0x2b
    ab74:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    ab76:	ab 96       	adiw	r28, 0x2b	; 43
    ab78:	0f b6       	in	r0, 0x3f	; 63
    ab7a:	f8 94       	cli
    ab7c:	de bf       	out	0x3e, r29	; 62
    ab7e:	0f be       	out	0x3f, r0	; 63
    ab80:	cd bf       	out	0x3d, r28	; 61
    ab82:	cf 91       	pop	r28
    ab84:	df 91       	pop	r29
    ab86:	08 95       	ret

0000ab88 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    ab88:	df 93       	push	r29
    ab8a:	cf 93       	push	r28
    ab8c:	00 d0       	rcall	.+0      	; 0xab8e <LCD_enuWriteData+0x6>
    ab8e:	cd b7       	in	r28, 0x3d	; 61
    ab90:	de b7       	in	r29, 0x3e	; 62
    ab92:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    ab94:	81 e0       	ldi	r24, 0x01	; 1
    ab96:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    ab98:	81 e0       	ldi	r24, 0x01	; 1
    ab9a:	61 e0       	ldi	r22, 0x01	; 1
    ab9c:	41 e0       	ldi	r20, 0x01	; 1
    ab9e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    aba2:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuWriteNLatch( Copy_u8Data );
    aba4:	8a 81       	ldd	r24, Y+2	; 0x02
    aba6:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    abaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    abac:	0f 90       	pop	r0
    abae:	0f 90       	pop	r0
    abb0:	cf 91       	pop	r28
    abb2:	df 91       	pop	r29
    abb4:	08 95       	ret

0000abb6 <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Cmnd)
{
    abb6:	df 93       	push	r29
    abb8:	cf 93       	push	r28
    abba:	00 d0       	rcall	.+0      	; 0xabbc <LCD_enuWriteCommand+0x6>
    abbc:	cd b7       	in	r28, 0x3d	; 61
    abbe:	de b7       	in	r29, 0x3e	; 62
    abc0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    abc2:	81 e0       	ldi	r24, 0x01	; 1
    abc4:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    abc6:	81 e0       	ldi	r24, 0x01	; 1
    abc8:	61 e0       	ldi	r22, 0x01	; 1
    abca:	40 e0       	ldi	r20, 0x00	; 0
    abcc:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    abd0:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuWriteNLatch( Copy_u8Cmnd );
    abd2:	8a 81       	ldd	r24, Y+2	; 0x02
    abd4:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>


	return Local_enuErrorState;
    abd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    abda:	0f 90       	pop	r0
    abdc:	0f 90       	pop	r0
    abde:	cf 91       	pop	r28
    abe0:	df 91       	pop	r29
    abe2:	08 95       	ret

0000abe4 <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
    abe4:	df 93       	push	r29
    abe6:	cf 93       	push	r28
    abe8:	00 d0       	rcall	.+0      	; 0xabea <LCD_enuWriteString+0x6>
    abea:	0f 92       	push	r0
    abec:	cd b7       	in	r28, 0x3d	; 61
    abee:	de b7       	in	r29, 0x3e	; 62
    abf0:	9b 83       	std	Y+3, r25	; 0x03
    abf2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    abf4:	81 e0       	ldi	r24, 0x01	; 1
    abf6:	89 83       	std	Y+1, r24	; 0x01
    abf8:	11 c0       	rjmp	.+34     	; 0xac1c <LCD_enuWriteString+0x38>

	while (*Copy_pcString)
	{
		Local_enuErrorState = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    abfa:	81 e0       	ldi	r24, 0x01	; 1
    abfc:	61 e0       	ldi	r22, 0x01	; 1
    abfe:	41 e0       	ldi	r20, 0x01	; 1
    ac00:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    ac04:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteNLatch( *Copy_pcString++ );
    ac06:	ea 81       	ldd	r30, Y+2	; 0x02
    ac08:	fb 81       	ldd	r31, Y+3	; 0x03
    ac0a:	20 81       	ld	r18, Z
    ac0c:	8a 81       	ldd	r24, Y+2	; 0x02
    ac0e:	9b 81       	ldd	r25, Y+3	; 0x03
    ac10:	01 96       	adiw	r24, 0x01	; 1
    ac12:	9b 83       	std	Y+3, r25	; 0x03
    ac14:	8a 83       	std	Y+2, r24	; 0x02
    ac16:	82 2f       	mov	r24, r18
    ac18:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
	ES_t Local_enuErrorState = ES_NOK;

	while (*Copy_pcString)
    ac1c:	ea 81       	ldd	r30, Y+2	; 0x02
    ac1e:	fb 81       	ldd	r31, Y+3	; 0x03
    ac20:	80 81       	ld	r24, Z
    ac22:	88 23       	and	r24, r24
    ac24:	51 f7       	brne	.-44     	; 0xabfa <LCD_enuWriteString+0x16>
	{
		Local_enuErrorState = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch( *Copy_pcString++ );
	}

	return Local_enuErrorState;
    ac26:	89 81       	ldd	r24, Y+1	; 0x01
}
    ac28:	0f 90       	pop	r0
    ac2a:	0f 90       	pop	r0
    ac2c:	0f 90       	pop	r0
    ac2e:	cf 91       	pop	r28
    ac30:	df 91       	pop	r29
    ac32:	08 95       	ret

0000ac34 <LCD_enuGoToPosition>:


ES_t LCD_enuGoToPosition(u8 Copy_u8Row , u8 Copy_u8Column)
{
    ac34:	df 93       	push	r29
    ac36:	cf 93       	push	r28
    ac38:	00 d0       	rcall	.+0      	; 0xac3a <LCD_enuGoToPosition+0x6>
    ac3a:	0f 92       	push	r0
    ac3c:	cd b7       	in	r28, 0x3d	; 61
    ac3e:	de b7       	in	r29, 0x3e	; 62
    ac40:	8a 83       	std	Y+2, r24	; 0x02
    ac42:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    ac44:	81 e0       	ldi	r24, 0x01	; 1
    ac46:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Row >= 1 && Copy_u8Row <=2 &&
    ac48:	8a 81       	ldd	r24, Y+2	; 0x02
    ac4a:	88 23       	and	r24, r24
    ac4c:	11 f1       	breq	.+68     	; 0xac92 <LCD_enuGoToPosition+0x5e>
    ac4e:	8a 81       	ldd	r24, Y+2	; 0x02
    ac50:	83 30       	cpi	r24, 0x03	; 3
    ac52:	f8 f4       	brcc	.+62     	; 0xac92 <LCD_enuGoToPosition+0x5e>
    ac54:	8b 81       	ldd	r24, Y+3	; 0x03
    ac56:	88 23       	and	r24, r24
    ac58:	e1 f0       	breq	.+56     	; 0xac92 <LCD_enuGoToPosition+0x5e>
    ac5a:	8b 81       	ldd	r24, Y+3	; 0x03
    ac5c:	81 31       	cpi	r24, 0x11	; 17
    ac5e:	c8 f4       	brcc	.+50     	; 0xac92 <LCD_enuGoToPosition+0x5e>
			Copy_u8Column >=1 && Copy_u8Column <=16)
	{
		Local_enuErrorState = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    ac60:	81 e0       	ldi	r24, 0x01	; 1
    ac62:	61 e0       	ldi	r22, 0x01	; 1
    ac64:	40 e0       	ldi	r20, 0x00	; 0
    ac66:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    ac6a:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteNLatch( 0x80 + ( Copy_u8Row - 1 )*0x40 + ( Copy_u8Column - 1 ) );
    ac6c:	8a 81       	ldd	r24, Y+2	; 0x02
    ac6e:	88 2f       	mov	r24, r24
    ac70:	90 e0       	ldi	r25, 0x00	; 0
    ac72:	01 96       	adiw	r24, 0x01	; 1
    ac74:	00 24       	eor	r0, r0
    ac76:	96 95       	lsr	r25
    ac78:	87 95       	ror	r24
    ac7a:	07 94       	ror	r0
    ac7c:	96 95       	lsr	r25
    ac7e:	87 95       	ror	r24
    ac80:	07 94       	ror	r0
    ac82:	98 2f       	mov	r25, r24
    ac84:	80 2d       	mov	r24, r0
    ac86:	98 2f       	mov	r25, r24
    ac88:	8b 81       	ldd	r24, Y+3	; 0x03
    ac8a:	89 0f       	add	r24, r25
    ac8c:	81 50       	subi	r24, 0x01	; 1
    ac8e:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
	}
	return Local_enuErrorState;
    ac92:	89 81       	ldd	r24, Y+1	; 0x01
}
    ac94:	0f 90       	pop	r0
    ac96:	0f 90       	pop	r0
    ac98:	0f 90       	pop	r0
    ac9a:	cf 91       	pop	r28
    ac9c:	df 91       	pop	r29
    ac9e:	08 95       	ret

0000aca0 <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch(u8 Copy_u8Byte)
{
    aca0:	df 93       	push	r29
    aca2:	cf 93       	push	r28
    aca4:	cd b7       	in	r28, 0x3d	; 61
    aca6:	de b7       	in	r29, 0x3e	; 62
    aca8:	e9 97       	sbiw	r28, 0x39	; 57
    acaa:	0f b6       	in	r0, 0x3f	; 63
    acac:	f8 94       	cli
    acae:	de bf       	out	0x3e, r29	; 62
    acb0:	0f be       	out	0x3f, r0	; 63
    acb2:	cd bf       	out	0x3d, r28	; 61
    acb4:	89 af       	std	Y+57, r24	; 0x39
#if RW_GRP != NC  && RW_PIN != NC
	DIO_enuSetPinValue(RW_GRP , RW_PIN , DIO_u8LOW);
    acb6:	81 e0       	ldi	r24, 0x01	; 1
    acb8:	62 e0       	ldi	r22, 0x02	; 2
    acba:	40 e0       	ldi	r20, 0x00	; 0
    acbc:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
#endif
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    acc0:	81 e0       	ldi	r24, 0x01	; 1
    acc2:	63 e0       	ldi	r22, 0x03	; 3
    acc4:	40 e0       	ldi	r20, 0x00	; 0
    acc6:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
	_delay_ms(4);


#elif LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 7 )&1 ));
    acca:	89 ad       	ldd	r24, Y+57	; 0x39
    accc:	98 2f       	mov	r25, r24
    acce:	99 1f       	adc	r25, r25
    acd0:	99 27       	eor	r25, r25
    acd2:	99 1f       	adc	r25, r25
    acd4:	80 e0       	ldi	r24, 0x00	; 0
    acd6:	67 e0       	ldi	r22, 0x07	; 7
    acd8:	49 2f       	mov	r20, r25
    acda:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 6 )&1 ));
    acde:	89 ad       	ldd	r24, Y+57	; 0x39
    ace0:	82 95       	swap	r24
    ace2:	86 95       	lsr	r24
    ace4:	86 95       	lsr	r24
    ace6:	83 70       	andi	r24, 0x03	; 3
    ace8:	98 2f       	mov	r25, r24
    acea:	91 70       	andi	r25, 0x01	; 1
    acec:	80 e0       	ldi	r24, 0x00	; 0
    acee:	66 e0       	ldi	r22, 0x06	; 6
    acf0:	49 2f       	mov	r20, r25
    acf2:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 5 )&1 ));
    acf6:	89 ad       	ldd	r24, Y+57	; 0x39
    acf8:	82 95       	swap	r24
    acfa:	86 95       	lsr	r24
    acfc:	87 70       	andi	r24, 0x07	; 7
    acfe:	98 2f       	mov	r25, r24
    ad00:	91 70       	andi	r25, 0x01	; 1
    ad02:	80 e0       	ldi	r24, 0x00	; 0
    ad04:	65 e0       	ldi	r22, 0x05	; 5
    ad06:	49 2f       	mov	r20, r25
    ad08:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 4 )&1 ));
    ad0c:	89 ad       	ldd	r24, Y+57	; 0x39
    ad0e:	82 95       	swap	r24
    ad10:	8f 70       	andi	r24, 0x0F	; 15
    ad12:	98 2f       	mov	r25, r24
    ad14:	91 70       	andi	r25, 0x01	; 1
    ad16:	80 e0       	ldi	r24, 0x00	; 0
    ad18:	64 e0       	ldi	r22, 0x04	; 4
    ad1a:	49 2f       	mov	r20, r25
    ad1c:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    ad20:	81 e0       	ldi	r24, 0x01	; 1
    ad22:	63 e0       	ldi	r22, 0x03	; 3
    ad24:	41 e0       	ldi	r20, 0x01	; 1
    ad26:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    ad2a:	80 e0       	ldi	r24, 0x00	; 0
    ad2c:	90 e0       	ldi	r25, 0x00	; 0
    ad2e:	a0 e8       	ldi	r26, 0x80	; 128
    ad30:	bf e3       	ldi	r27, 0x3F	; 63
    ad32:	8d ab       	std	Y+53, r24	; 0x35
    ad34:	9e ab       	std	Y+54, r25	; 0x36
    ad36:	af ab       	std	Y+55, r26	; 0x37
    ad38:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    ad3a:	6d a9       	ldd	r22, Y+53	; 0x35
    ad3c:	7e a9       	ldd	r23, Y+54	; 0x36
    ad3e:	8f a9       	ldd	r24, Y+55	; 0x37
    ad40:	98 ad       	ldd	r25, Y+56	; 0x38
    ad42:	20 e0       	ldi	r18, 0x00	; 0
    ad44:	30 e0       	ldi	r19, 0x00	; 0
    ad46:	4a e7       	ldi	r20, 0x7A	; 122
    ad48:	55 e4       	ldi	r21, 0x45	; 69
    ad4a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    ad4e:	dc 01       	movw	r26, r24
    ad50:	cb 01       	movw	r24, r22
    ad52:	89 ab       	std	Y+49, r24	; 0x31
    ad54:	9a ab       	std	Y+50, r25	; 0x32
    ad56:	ab ab       	std	Y+51, r26	; 0x33
    ad58:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    ad5a:	69 a9       	ldd	r22, Y+49	; 0x31
    ad5c:	7a a9       	ldd	r23, Y+50	; 0x32
    ad5e:	8b a9       	ldd	r24, Y+51	; 0x33
    ad60:	9c a9       	ldd	r25, Y+52	; 0x34
    ad62:	20 e0       	ldi	r18, 0x00	; 0
    ad64:	30 e0       	ldi	r19, 0x00	; 0
    ad66:	40 e8       	ldi	r20, 0x80	; 128
    ad68:	5f e3       	ldi	r21, 0x3F	; 63
    ad6a:	0e 94 84 12 	call	0x2508	; 0x2508 <__ltsf2>
    ad6e:	88 23       	and	r24, r24
    ad70:	2c f4       	brge	.+10     	; 0xad7c <LCD_enuWriteNLatch+0xdc>
		__ticks = 1;
    ad72:	81 e0       	ldi	r24, 0x01	; 1
    ad74:	90 e0       	ldi	r25, 0x00	; 0
    ad76:	98 ab       	std	Y+48, r25	; 0x30
    ad78:	8f a7       	std	Y+47, r24	; 0x2f
    ad7a:	3f c0       	rjmp	.+126    	; 0xadfa <LCD_enuWriteNLatch+0x15a>
	else if (__tmp > 65535)
    ad7c:	69 a9       	ldd	r22, Y+49	; 0x31
    ad7e:	7a a9       	ldd	r23, Y+50	; 0x32
    ad80:	8b a9       	ldd	r24, Y+51	; 0x33
    ad82:	9c a9       	ldd	r25, Y+52	; 0x34
    ad84:	20 e0       	ldi	r18, 0x00	; 0
    ad86:	3f ef       	ldi	r19, 0xFF	; 255
    ad88:	4f e7       	ldi	r20, 0x7F	; 127
    ad8a:	57 e4       	ldi	r21, 0x47	; 71
    ad8c:	0e 94 24 12 	call	0x2448	; 0x2448 <__gtsf2>
    ad90:	18 16       	cp	r1, r24
    ad92:	4c f5       	brge	.+82     	; 0xade6 <LCD_enuWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ad94:	6d a9       	ldd	r22, Y+53	; 0x35
    ad96:	7e a9       	ldd	r23, Y+54	; 0x36
    ad98:	8f a9       	ldd	r24, Y+55	; 0x37
    ad9a:	98 ad       	ldd	r25, Y+56	; 0x38
    ad9c:	20 e0       	ldi	r18, 0x00	; 0
    ad9e:	30 e0       	ldi	r19, 0x00	; 0
    ada0:	40 e2       	ldi	r20, 0x20	; 32
    ada2:	51 e4       	ldi	r21, 0x41	; 65
    ada4:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    ada8:	dc 01       	movw	r26, r24
    adaa:	cb 01       	movw	r24, r22
    adac:	bc 01       	movw	r22, r24
    adae:	cd 01       	movw	r24, r26
    adb0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    adb4:	dc 01       	movw	r26, r24
    adb6:	cb 01       	movw	r24, r22
    adb8:	98 ab       	std	Y+48, r25	; 0x30
    adba:	8f a7       	std	Y+47, r24	; 0x2f
    adbc:	0f c0       	rjmp	.+30     	; 0xaddc <LCD_enuWriteNLatch+0x13c>
    adbe:	80 e9       	ldi	r24, 0x90	; 144
    adc0:	91 e0       	ldi	r25, 0x01	; 1
    adc2:	9e a7       	std	Y+46, r25	; 0x2e
    adc4:	8d a7       	std	Y+45, r24	; 0x2d
    adc6:	8d a5       	ldd	r24, Y+45	; 0x2d
    adc8:	9e a5       	ldd	r25, Y+46	; 0x2e
    adca:	01 97       	sbiw	r24, 0x01	; 1
    adcc:	f1 f7       	brne	.-4      	; 0xadca <LCD_enuWriteNLatch+0x12a>
    adce:	9e a7       	std	Y+46, r25	; 0x2e
    add0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    add2:	8f a5       	ldd	r24, Y+47	; 0x2f
    add4:	98 a9       	ldd	r25, Y+48	; 0x30
    add6:	01 97       	sbiw	r24, 0x01	; 1
    add8:	98 ab       	std	Y+48, r25	; 0x30
    adda:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    addc:	8f a5       	ldd	r24, Y+47	; 0x2f
    adde:	98 a9       	ldd	r25, Y+48	; 0x30
    ade0:	00 97       	sbiw	r24, 0x00	; 0
    ade2:	69 f7       	brne	.-38     	; 0xadbe <LCD_enuWriteNLatch+0x11e>
    ade4:	14 c0       	rjmp	.+40     	; 0xae0e <LCD_enuWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ade6:	69 a9       	ldd	r22, Y+49	; 0x31
    ade8:	7a a9       	ldd	r23, Y+50	; 0x32
    adea:	8b a9       	ldd	r24, Y+51	; 0x33
    adec:	9c a9       	ldd	r25, Y+52	; 0x34
    adee:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    adf2:	dc 01       	movw	r26, r24
    adf4:	cb 01       	movw	r24, r22
    adf6:	98 ab       	std	Y+48, r25	; 0x30
    adf8:	8f a7       	std	Y+47, r24	; 0x2f
    adfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    adfc:	98 a9       	ldd	r25, Y+48	; 0x30
    adfe:	9c a7       	std	Y+44, r25	; 0x2c
    ae00:	8b a7       	std	Y+43, r24	; 0x2b
    ae02:	8b a5       	ldd	r24, Y+43	; 0x2b
    ae04:	9c a5       	ldd	r25, Y+44	; 0x2c
    ae06:	01 97       	sbiw	r24, 0x01	; 1
    ae08:	f1 f7       	brne	.-4      	; 0xae06 <LCD_enuWriteNLatch+0x166>
    ae0a:	9c a7       	std	Y+44, r25	; 0x2c
    ae0c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    ae0e:	81 e0       	ldi	r24, 0x01	; 1
    ae10:	63 e0       	ldi	r22, 0x03	; 3
    ae12:	40 e0       	ldi	r20, 0x00	; 0
    ae14:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    ae18:	80 e0       	ldi	r24, 0x00	; 0
    ae1a:	90 e0       	ldi	r25, 0x00	; 0
    ae1c:	a0 e8       	ldi	r26, 0x80	; 128
    ae1e:	b0 e4       	ldi	r27, 0x40	; 64
    ae20:	8f a3       	std	Y+39, r24	; 0x27
    ae22:	98 a7       	std	Y+40, r25	; 0x28
    ae24:	a9 a7       	std	Y+41, r26	; 0x29
    ae26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    ae28:	6f a1       	ldd	r22, Y+39	; 0x27
    ae2a:	78 a5       	ldd	r23, Y+40	; 0x28
    ae2c:	89 a5       	ldd	r24, Y+41	; 0x29
    ae2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    ae30:	20 e0       	ldi	r18, 0x00	; 0
    ae32:	30 e0       	ldi	r19, 0x00	; 0
    ae34:	4a e7       	ldi	r20, 0x7A	; 122
    ae36:	55 e4       	ldi	r21, 0x45	; 69
    ae38:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    ae3c:	dc 01       	movw	r26, r24
    ae3e:	cb 01       	movw	r24, r22
    ae40:	8b a3       	std	Y+35, r24	; 0x23
    ae42:	9c a3       	std	Y+36, r25	; 0x24
    ae44:	ad a3       	std	Y+37, r26	; 0x25
    ae46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    ae48:	6b a1       	ldd	r22, Y+35	; 0x23
    ae4a:	7c a1       	ldd	r23, Y+36	; 0x24
    ae4c:	8d a1       	ldd	r24, Y+37	; 0x25
    ae4e:	9e a1       	ldd	r25, Y+38	; 0x26
    ae50:	20 e0       	ldi	r18, 0x00	; 0
    ae52:	30 e0       	ldi	r19, 0x00	; 0
    ae54:	40 e8       	ldi	r20, 0x80	; 128
    ae56:	5f e3       	ldi	r21, 0x3F	; 63
    ae58:	0e 94 84 12 	call	0x2508	; 0x2508 <__ltsf2>
    ae5c:	88 23       	and	r24, r24
    ae5e:	2c f4       	brge	.+10     	; 0xae6a <LCD_enuWriteNLatch+0x1ca>
		__ticks = 1;
    ae60:	81 e0       	ldi	r24, 0x01	; 1
    ae62:	90 e0       	ldi	r25, 0x00	; 0
    ae64:	9a a3       	std	Y+34, r25	; 0x22
    ae66:	89 a3       	std	Y+33, r24	; 0x21
    ae68:	3f c0       	rjmp	.+126    	; 0xaee8 <LCD_enuWriteNLatch+0x248>
	else if (__tmp > 65535)
    ae6a:	6b a1       	ldd	r22, Y+35	; 0x23
    ae6c:	7c a1       	ldd	r23, Y+36	; 0x24
    ae6e:	8d a1       	ldd	r24, Y+37	; 0x25
    ae70:	9e a1       	ldd	r25, Y+38	; 0x26
    ae72:	20 e0       	ldi	r18, 0x00	; 0
    ae74:	3f ef       	ldi	r19, 0xFF	; 255
    ae76:	4f e7       	ldi	r20, 0x7F	; 127
    ae78:	57 e4       	ldi	r21, 0x47	; 71
    ae7a:	0e 94 24 12 	call	0x2448	; 0x2448 <__gtsf2>
    ae7e:	18 16       	cp	r1, r24
    ae80:	4c f5       	brge	.+82     	; 0xaed4 <LCD_enuWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    ae82:	6f a1       	ldd	r22, Y+39	; 0x27
    ae84:	78 a5       	ldd	r23, Y+40	; 0x28
    ae86:	89 a5       	ldd	r24, Y+41	; 0x29
    ae88:	9a a5       	ldd	r25, Y+42	; 0x2a
    ae8a:	20 e0       	ldi	r18, 0x00	; 0
    ae8c:	30 e0       	ldi	r19, 0x00	; 0
    ae8e:	40 e2       	ldi	r20, 0x20	; 32
    ae90:	51 e4       	ldi	r21, 0x41	; 65
    ae92:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    ae96:	dc 01       	movw	r26, r24
    ae98:	cb 01       	movw	r24, r22
    ae9a:	bc 01       	movw	r22, r24
    ae9c:	cd 01       	movw	r24, r26
    ae9e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    aea2:	dc 01       	movw	r26, r24
    aea4:	cb 01       	movw	r24, r22
    aea6:	9a a3       	std	Y+34, r25	; 0x22
    aea8:	89 a3       	std	Y+33, r24	; 0x21
    aeaa:	0f c0       	rjmp	.+30     	; 0xaeca <LCD_enuWriteNLatch+0x22a>
    aeac:	80 e9       	ldi	r24, 0x90	; 144
    aeae:	91 e0       	ldi	r25, 0x01	; 1
    aeb0:	98 a3       	std	Y+32, r25	; 0x20
    aeb2:	8f 8f       	std	Y+31, r24	; 0x1f
    aeb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    aeb6:	98 a1       	ldd	r25, Y+32	; 0x20
    aeb8:	01 97       	sbiw	r24, 0x01	; 1
    aeba:	f1 f7       	brne	.-4      	; 0xaeb8 <LCD_enuWriteNLatch+0x218>
    aebc:	98 a3       	std	Y+32, r25	; 0x20
    aebe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aec0:	89 a1       	ldd	r24, Y+33	; 0x21
    aec2:	9a a1       	ldd	r25, Y+34	; 0x22
    aec4:	01 97       	sbiw	r24, 0x01	; 1
    aec6:	9a a3       	std	Y+34, r25	; 0x22
    aec8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aeca:	89 a1       	ldd	r24, Y+33	; 0x21
    aecc:	9a a1       	ldd	r25, Y+34	; 0x22
    aece:	00 97       	sbiw	r24, 0x00	; 0
    aed0:	69 f7       	brne	.-38     	; 0xaeac <LCD_enuWriteNLatch+0x20c>
    aed2:	14 c0       	rjmp	.+40     	; 0xaefc <LCD_enuWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    aed4:	6b a1       	ldd	r22, Y+35	; 0x23
    aed6:	7c a1       	ldd	r23, Y+36	; 0x24
    aed8:	8d a1       	ldd	r24, Y+37	; 0x25
    aeda:	9e a1       	ldd	r25, Y+38	; 0x26
    aedc:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    aee0:	dc 01       	movw	r26, r24
    aee2:	cb 01       	movw	r24, r22
    aee4:	9a a3       	std	Y+34, r25	; 0x22
    aee6:	89 a3       	std	Y+33, r24	; 0x21
    aee8:	89 a1       	ldd	r24, Y+33	; 0x21
    aeea:	9a a1       	ldd	r25, Y+34	; 0x22
    aeec:	9e 8f       	std	Y+30, r25	; 0x1e
    aeee:	8d 8f       	std	Y+29, r24	; 0x1d
    aef0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    aef2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    aef4:	01 97       	sbiw	r24, 0x01	; 1
    aef6:	f1 f7       	brne	.-4      	; 0xaef4 <LCD_enuWriteNLatch+0x254>
    aef8:	9e 8f       	std	Y+30, r25	; 0x1e
    aefa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4);

	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 3 )&1 ));
    aefc:	89 ad       	ldd	r24, Y+57	; 0x39
    aefe:	86 95       	lsr	r24
    af00:	86 95       	lsr	r24
    af02:	86 95       	lsr	r24
    af04:	98 2f       	mov	r25, r24
    af06:	91 70       	andi	r25, 0x01	; 1
    af08:	80 e0       	ldi	r24, 0x00	; 0
    af0a:	67 e0       	ldi	r22, 0x07	; 7
    af0c:	49 2f       	mov	r20, r25
    af0e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 2 )&1 ));
    af12:	89 ad       	ldd	r24, Y+57	; 0x39
    af14:	86 95       	lsr	r24
    af16:	86 95       	lsr	r24
    af18:	98 2f       	mov	r25, r24
    af1a:	91 70       	andi	r25, 0x01	; 1
    af1c:	80 e0       	ldi	r24, 0x00	; 0
    af1e:	66 e0       	ldi	r22, 0x06	; 6
    af20:	49 2f       	mov	r20, r25
    af22:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 1 )&1 ));
    af26:	89 ad       	ldd	r24, Y+57	; 0x39
    af28:	86 95       	lsr	r24
    af2a:	98 2f       	mov	r25, r24
    af2c:	91 70       	andi	r25, 0x01	; 1
    af2e:	80 e0       	ldi	r24, 0x00	; 0
    af30:	65 e0       	ldi	r22, 0x05	; 5
    af32:	49 2f       	mov	r20, r25
    af34:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 0 )&1 ));
    af38:	89 ad       	ldd	r24, Y+57	; 0x39
    af3a:	98 2f       	mov	r25, r24
    af3c:	91 70       	andi	r25, 0x01	; 1
    af3e:	80 e0       	ldi	r24, 0x00	; 0
    af40:	64 e0       	ldi	r22, 0x04	; 4
    af42:	49 2f       	mov	r20, r25
    af44:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    af48:	81 e0       	ldi	r24, 0x01	; 1
    af4a:	63 e0       	ldi	r22, 0x03	; 3
    af4c:	41 e0       	ldi	r20, 0x01	; 1
    af4e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    af52:	80 e0       	ldi	r24, 0x00	; 0
    af54:	90 e0       	ldi	r25, 0x00	; 0
    af56:	a0 e8       	ldi	r26, 0x80	; 128
    af58:	bf e3       	ldi	r27, 0x3F	; 63
    af5a:	89 8f       	std	Y+25, r24	; 0x19
    af5c:	9a 8f       	std	Y+26, r25	; 0x1a
    af5e:	ab 8f       	std	Y+27, r26	; 0x1b
    af60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    af62:	69 8d       	ldd	r22, Y+25	; 0x19
    af64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    af66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    af68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    af6a:	20 e0       	ldi	r18, 0x00	; 0
    af6c:	30 e0       	ldi	r19, 0x00	; 0
    af6e:	4a e7       	ldi	r20, 0x7A	; 122
    af70:	55 e4       	ldi	r21, 0x45	; 69
    af72:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    af76:	dc 01       	movw	r26, r24
    af78:	cb 01       	movw	r24, r22
    af7a:	8d 8b       	std	Y+21, r24	; 0x15
    af7c:	9e 8b       	std	Y+22, r25	; 0x16
    af7e:	af 8b       	std	Y+23, r26	; 0x17
    af80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    af82:	6d 89       	ldd	r22, Y+21	; 0x15
    af84:	7e 89       	ldd	r23, Y+22	; 0x16
    af86:	8f 89       	ldd	r24, Y+23	; 0x17
    af88:	98 8d       	ldd	r25, Y+24	; 0x18
    af8a:	20 e0       	ldi	r18, 0x00	; 0
    af8c:	30 e0       	ldi	r19, 0x00	; 0
    af8e:	40 e8       	ldi	r20, 0x80	; 128
    af90:	5f e3       	ldi	r21, 0x3F	; 63
    af92:	0e 94 84 12 	call	0x2508	; 0x2508 <__ltsf2>
    af96:	88 23       	and	r24, r24
    af98:	2c f4       	brge	.+10     	; 0xafa4 <LCD_enuWriteNLatch+0x304>
		__ticks = 1;
    af9a:	81 e0       	ldi	r24, 0x01	; 1
    af9c:	90 e0       	ldi	r25, 0x00	; 0
    af9e:	9c 8b       	std	Y+20, r25	; 0x14
    afa0:	8b 8b       	std	Y+19, r24	; 0x13
    afa2:	3f c0       	rjmp	.+126    	; 0xb022 <LCD_enuWriteNLatch+0x382>
	else if (__tmp > 65535)
    afa4:	6d 89       	ldd	r22, Y+21	; 0x15
    afa6:	7e 89       	ldd	r23, Y+22	; 0x16
    afa8:	8f 89       	ldd	r24, Y+23	; 0x17
    afaa:	98 8d       	ldd	r25, Y+24	; 0x18
    afac:	20 e0       	ldi	r18, 0x00	; 0
    afae:	3f ef       	ldi	r19, 0xFF	; 255
    afb0:	4f e7       	ldi	r20, 0x7F	; 127
    afb2:	57 e4       	ldi	r21, 0x47	; 71
    afb4:	0e 94 24 12 	call	0x2448	; 0x2448 <__gtsf2>
    afb8:	18 16       	cp	r1, r24
    afba:	4c f5       	brge	.+82     	; 0xb00e <LCD_enuWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    afbc:	69 8d       	ldd	r22, Y+25	; 0x19
    afbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    afc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    afc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    afc4:	20 e0       	ldi	r18, 0x00	; 0
    afc6:	30 e0       	ldi	r19, 0x00	; 0
    afc8:	40 e2       	ldi	r20, 0x20	; 32
    afca:	51 e4       	ldi	r21, 0x41	; 65
    afcc:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    afd0:	dc 01       	movw	r26, r24
    afd2:	cb 01       	movw	r24, r22
    afd4:	bc 01       	movw	r22, r24
    afd6:	cd 01       	movw	r24, r26
    afd8:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    afdc:	dc 01       	movw	r26, r24
    afde:	cb 01       	movw	r24, r22
    afe0:	9c 8b       	std	Y+20, r25	; 0x14
    afe2:	8b 8b       	std	Y+19, r24	; 0x13
    afe4:	0f c0       	rjmp	.+30     	; 0xb004 <LCD_enuWriteNLatch+0x364>
    afe6:	80 e9       	ldi	r24, 0x90	; 144
    afe8:	91 e0       	ldi	r25, 0x01	; 1
    afea:	9a 8b       	std	Y+18, r25	; 0x12
    afec:	89 8b       	std	Y+17, r24	; 0x11
    afee:	89 89       	ldd	r24, Y+17	; 0x11
    aff0:	9a 89       	ldd	r25, Y+18	; 0x12
    aff2:	01 97       	sbiw	r24, 0x01	; 1
    aff4:	f1 f7       	brne	.-4      	; 0xaff2 <LCD_enuWriteNLatch+0x352>
    aff6:	9a 8b       	std	Y+18, r25	; 0x12
    aff8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    affa:	8b 89       	ldd	r24, Y+19	; 0x13
    affc:	9c 89       	ldd	r25, Y+20	; 0x14
    affe:	01 97       	sbiw	r24, 0x01	; 1
    b000:	9c 8b       	std	Y+20, r25	; 0x14
    b002:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b004:	8b 89       	ldd	r24, Y+19	; 0x13
    b006:	9c 89       	ldd	r25, Y+20	; 0x14
    b008:	00 97       	sbiw	r24, 0x00	; 0
    b00a:	69 f7       	brne	.-38     	; 0xafe6 <LCD_enuWriteNLatch+0x346>
    b00c:	14 c0       	rjmp	.+40     	; 0xb036 <LCD_enuWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b00e:	6d 89       	ldd	r22, Y+21	; 0x15
    b010:	7e 89       	ldd	r23, Y+22	; 0x16
    b012:	8f 89       	ldd	r24, Y+23	; 0x17
    b014:	98 8d       	ldd	r25, Y+24	; 0x18
    b016:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    b01a:	dc 01       	movw	r26, r24
    b01c:	cb 01       	movw	r24, r22
    b01e:	9c 8b       	std	Y+20, r25	; 0x14
    b020:	8b 8b       	std	Y+19, r24	; 0x13
    b022:	8b 89       	ldd	r24, Y+19	; 0x13
    b024:	9c 89       	ldd	r25, Y+20	; 0x14
    b026:	98 8b       	std	Y+16, r25	; 0x10
    b028:	8f 87       	std	Y+15, r24	; 0x0f
    b02a:	8f 85       	ldd	r24, Y+15	; 0x0f
    b02c:	98 89       	ldd	r25, Y+16	; 0x10
    b02e:	01 97       	sbiw	r24, 0x01	; 1
    b030:	f1 f7       	brne	.-4      	; 0xb02e <LCD_enuWriteNLatch+0x38e>
    b032:	98 8b       	std	Y+16, r25	; 0x10
    b034:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    b036:	81 e0       	ldi	r24, 0x01	; 1
    b038:	63 e0       	ldi	r22, 0x03	; 3
    b03a:	40 e0       	ldi	r20, 0x00	; 0
    b03c:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b040:	80 e0       	ldi	r24, 0x00	; 0
    b042:	90 e0       	ldi	r25, 0x00	; 0
    b044:	a0 e8       	ldi	r26, 0x80	; 128
    b046:	b0 e4       	ldi	r27, 0x40	; 64
    b048:	8b 87       	std	Y+11, r24	; 0x0b
    b04a:	9c 87       	std	Y+12, r25	; 0x0c
    b04c:	ad 87       	std	Y+13, r26	; 0x0d
    b04e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    b050:	6b 85       	ldd	r22, Y+11	; 0x0b
    b052:	7c 85       	ldd	r23, Y+12	; 0x0c
    b054:	8d 85       	ldd	r24, Y+13	; 0x0d
    b056:	9e 85       	ldd	r25, Y+14	; 0x0e
    b058:	20 e0       	ldi	r18, 0x00	; 0
    b05a:	30 e0       	ldi	r19, 0x00	; 0
    b05c:	4a e7       	ldi	r20, 0x7A	; 122
    b05e:	55 e4       	ldi	r21, 0x45	; 69
    b060:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    b064:	dc 01       	movw	r26, r24
    b066:	cb 01       	movw	r24, r22
    b068:	8f 83       	std	Y+7, r24	; 0x07
    b06a:	98 87       	std	Y+8, r25	; 0x08
    b06c:	a9 87       	std	Y+9, r26	; 0x09
    b06e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    b070:	6f 81       	ldd	r22, Y+7	; 0x07
    b072:	78 85       	ldd	r23, Y+8	; 0x08
    b074:	89 85       	ldd	r24, Y+9	; 0x09
    b076:	9a 85       	ldd	r25, Y+10	; 0x0a
    b078:	20 e0       	ldi	r18, 0x00	; 0
    b07a:	30 e0       	ldi	r19, 0x00	; 0
    b07c:	40 e8       	ldi	r20, 0x80	; 128
    b07e:	5f e3       	ldi	r21, 0x3F	; 63
    b080:	0e 94 84 12 	call	0x2508	; 0x2508 <__ltsf2>
    b084:	88 23       	and	r24, r24
    b086:	2c f4       	brge	.+10     	; 0xb092 <LCD_enuWriteNLatch+0x3f2>
		__ticks = 1;
    b088:	81 e0       	ldi	r24, 0x01	; 1
    b08a:	90 e0       	ldi	r25, 0x00	; 0
    b08c:	9e 83       	std	Y+6, r25	; 0x06
    b08e:	8d 83       	std	Y+5, r24	; 0x05
    b090:	3f c0       	rjmp	.+126    	; 0xb110 <LCD_enuWriteNLatch+0x470>
	else if (__tmp > 65535)
    b092:	6f 81       	ldd	r22, Y+7	; 0x07
    b094:	78 85       	ldd	r23, Y+8	; 0x08
    b096:	89 85       	ldd	r24, Y+9	; 0x09
    b098:	9a 85       	ldd	r25, Y+10	; 0x0a
    b09a:	20 e0       	ldi	r18, 0x00	; 0
    b09c:	3f ef       	ldi	r19, 0xFF	; 255
    b09e:	4f e7       	ldi	r20, 0x7F	; 127
    b0a0:	57 e4       	ldi	r21, 0x47	; 71
    b0a2:	0e 94 24 12 	call	0x2448	; 0x2448 <__gtsf2>
    b0a6:	18 16       	cp	r1, r24
    b0a8:	4c f5       	brge	.+82     	; 0xb0fc <LCD_enuWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b0aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    b0ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    b0ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    b0b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    b0b2:	20 e0       	ldi	r18, 0x00	; 0
    b0b4:	30 e0       	ldi	r19, 0x00	; 0
    b0b6:	40 e2       	ldi	r20, 0x20	; 32
    b0b8:	51 e4       	ldi	r21, 0x41	; 65
    b0ba:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    b0be:	dc 01       	movw	r26, r24
    b0c0:	cb 01       	movw	r24, r22
    b0c2:	bc 01       	movw	r22, r24
    b0c4:	cd 01       	movw	r24, r26
    b0c6:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    b0ca:	dc 01       	movw	r26, r24
    b0cc:	cb 01       	movw	r24, r22
    b0ce:	9e 83       	std	Y+6, r25	; 0x06
    b0d0:	8d 83       	std	Y+5, r24	; 0x05
    b0d2:	0f c0       	rjmp	.+30     	; 0xb0f2 <LCD_enuWriteNLatch+0x452>
    b0d4:	80 e9       	ldi	r24, 0x90	; 144
    b0d6:	91 e0       	ldi	r25, 0x01	; 1
    b0d8:	9c 83       	std	Y+4, r25	; 0x04
    b0da:	8b 83       	std	Y+3, r24	; 0x03
    b0dc:	8b 81       	ldd	r24, Y+3	; 0x03
    b0de:	9c 81       	ldd	r25, Y+4	; 0x04
    b0e0:	01 97       	sbiw	r24, 0x01	; 1
    b0e2:	f1 f7       	brne	.-4      	; 0xb0e0 <LCD_enuWriteNLatch+0x440>
    b0e4:	9c 83       	std	Y+4, r25	; 0x04
    b0e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b0e8:	8d 81       	ldd	r24, Y+5	; 0x05
    b0ea:	9e 81       	ldd	r25, Y+6	; 0x06
    b0ec:	01 97       	sbiw	r24, 0x01	; 1
    b0ee:	9e 83       	std	Y+6, r25	; 0x06
    b0f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b0f2:	8d 81       	ldd	r24, Y+5	; 0x05
    b0f4:	9e 81       	ldd	r25, Y+6	; 0x06
    b0f6:	00 97       	sbiw	r24, 0x00	; 0
    b0f8:	69 f7       	brne	.-38     	; 0xb0d4 <LCD_enuWriteNLatch+0x434>
    b0fa:	14 c0       	rjmp	.+40     	; 0xb124 <LCD_enuWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b0fc:	6f 81       	ldd	r22, Y+7	; 0x07
    b0fe:	78 85       	ldd	r23, Y+8	; 0x08
    b100:	89 85       	ldd	r24, Y+9	; 0x09
    b102:	9a 85       	ldd	r25, Y+10	; 0x0a
    b104:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    b108:	dc 01       	movw	r26, r24
    b10a:	cb 01       	movw	r24, r22
    b10c:	9e 83       	std	Y+6, r25	; 0x06
    b10e:	8d 83       	std	Y+5, r24	; 0x05
    b110:	8d 81       	ldd	r24, Y+5	; 0x05
    b112:	9e 81       	ldd	r25, Y+6	; 0x06
    b114:	9a 83       	std	Y+2, r25	; 0x02
    b116:	89 83       	std	Y+1, r24	; 0x01
    b118:	89 81       	ldd	r24, Y+1	; 0x01
    b11a:	9a 81       	ldd	r25, Y+2	; 0x02
    b11c:	01 97       	sbiw	r24, 0x01	; 1
    b11e:	f1 f7       	brne	.-4      	; 0xb11c <LCD_enuWriteNLatch+0x47c>
    b120:	9a 83       	std	Y+2, r25	; 0x02
    b122:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);
#else
#error "LCD mode is wrong ya 7aywan"
#endif

	return ES_OK;
    b124:	80 e0       	ldi	r24, 0x00	; 0
}
    b126:	e9 96       	adiw	r28, 0x39	; 57
    b128:	0f b6       	in	r0, 0x3f	; 63
    b12a:	f8 94       	cli
    b12c:	de bf       	out	0x3e, r29	; 62
    b12e:	0f be       	out	0x3f, r0	; 63
    b130:	cd bf       	out	0x3d, r28	; 61
    b132:	cf 91       	pop	r28
    b134:	df 91       	pop	r29
    b136:	08 95       	ret

0000b138 <LCD_enuWriteIntegerNum>:

/*		ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)		*/
ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)
{
    b138:	df 93       	push	r29
    b13a:	cf 93       	push	r28
    b13c:	cd b7       	in	r28, 0x3d	; 61
    b13e:	de b7       	in	r29, 0x3e	; 62
    b140:	2d 97       	sbiw	r28, 0x0d	; 13
    b142:	0f b6       	in	r0, 0x3f	; 63
    b144:	f8 94       	cli
    b146:	de bf       	out	0x3e, r29	; 62
    b148:	0f be       	out	0x3f, r0	; 63
    b14a:	cd bf       	out	0x3d, r28	; 61
    b14c:	69 87       	std	Y+9, r22	; 0x09
    b14e:	7a 87       	std	Y+10, r23	; 0x0a
    b150:	8b 87       	std	Y+11, r24	; 0x0b
    b152:	9c 87       	std	Y+12, r25	; 0x0c
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    b154:	81 e0       	ldi	r24, 0x01	; 1
    b156:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8DigitCounter = 1 ;
    b158:	81 e0       	ldi	r24, 0x01	; 1
    b15a:	8d 83       	std	Y+5, r24	; 0x05

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b15c:	81 e0       	ldi	r24, 0x01	; 1
    b15e:	61 e0       	ldi	r22, 0x01	; 1
    b160:	40 e0       	ldi	r20, 0x00	; 0
    b162:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b166:	8f 83       	std	Y+7, r24	; 0x07
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    b168:	86 e0       	ldi	r24, 0x06	; 6
    b16a:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b16e:	88 87       	std	Y+8, r24	; 0x08

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b170:	8f 81       	ldd	r24, Y+7	; 0x07
    b172:	88 23       	and	r24, r24
    b174:	09 f0       	breq	.+2      	; 0xb178 <LCD_enuWriteIntegerNum+0x40>
    b176:	eb c0       	rjmp	.+470    	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
    b178:	88 85       	ldd	r24, Y+8	; 0x08
    b17a:	88 23       	and	r24, r24
    b17c:	09 f0       	breq	.+2      	; 0xb180 <LCD_enuWriteIntegerNum+0x48>
    b17e:	e7 c0       	rjmp	.+462    	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
	{
		if( Copy_s32Num < 0 )
    b180:	89 85       	ldd	r24, Y+9	; 0x09
    b182:	9a 85       	ldd	r25, Y+10	; 0x0a
    b184:	ab 85       	ldd	r26, Y+11	; 0x0b
    b186:	bc 85       	ldd	r27, Y+12	; 0x0c
    b188:	bb 23       	and	r27, r27
    b18a:	cc f4       	brge	.+50     	; 0xb1be <LCD_enuWriteIntegerNum+0x86>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    b18c:	81 e0       	ldi	r24, 0x01	; 1
    b18e:	61 e0       	ldi	r22, 0x01	; 1
    b190:	41 e0       	ldi	r20, 0x01	; 1
    b192:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b196:	8f 83       	std	Y+7, r24	; 0x07
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    b198:	8d e2       	ldi	r24, 0x2D	; 45
    b19a:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b19e:	88 87       	std	Y+8, r24	; 0x08
			Copy_s32Num = - Copy_s32Num;
    b1a0:	89 85       	ldd	r24, Y+9	; 0x09
    b1a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    b1a4:	ab 85       	ldd	r26, Y+11	; 0x0b
    b1a6:	bc 85       	ldd	r27, Y+12	; 0x0c
    b1a8:	b0 95       	com	r27
    b1aa:	a0 95       	com	r26
    b1ac:	90 95       	com	r25
    b1ae:	81 95       	neg	r24
    b1b0:	9f 4f       	sbci	r25, 0xFF	; 255
    b1b2:	af 4f       	sbci	r26, 0xFF	; 255
    b1b4:	bf 4f       	sbci	r27, 0xFF	; 255
    b1b6:	89 87       	std	Y+9, r24	; 0x09
    b1b8:	9a 87       	std	Y+10, r25	; 0x0a
    b1ba:	ab 87       	std	Y+11, r26	; 0x0b
    b1bc:	bc 87       	std	Y+12, r27	; 0x0c
		}

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b1be:	8f 81       	ldd	r24, Y+7	; 0x07
    b1c0:	88 23       	and	r24, r24
    b1c2:	09 f0       	breq	.+2      	; 0xb1c6 <LCD_enuWriteIntegerNum+0x8e>
    b1c4:	c4 c0       	rjmp	.+392    	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
    b1c6:	88 85       	ldd	r24, Y+8	; 0x08
    b1c8:	88 23       	and	r24, r24
    b1ca:	09 f0       	breq	.+2      	; 0xb1ce <LCD_enuWriteIntegerNum+0x96>
    b1cc:	c0 c0       	rjmp	.+384    	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
		{
			u32 Local_u32Number = Copy_s32Num;
    b1ce:	89 85       	ldd	r24, Y+9	; 0x09
    b1d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    b1d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    b1d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    b1d6:	89 83       	std	Y+1, r24	; 0x01
    b1d8:	9a 83       	std	Y+2, r25	; 0x02
    b1da:	ab 83       	std	Y+3, r26	; 0x03
    b1dc:	bc 83       	std	Y+4, r27	; 0x04
    b1de:	1c c0       	rjmp	.+56     	; 0xb218 <LCD_enuWriteIntegerNum+0xe0>

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b1e0:	81 e0       	ldi	r24, 0x01	; 1
    b1e2:	61 e0       	ldi	r22, 0x01	; 1
    b1e4:	40 e0       	ldi	r20, 0x00	; 0
    b1e6:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b1ea:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    b1ec:	84 e1       	ldi	r24, 0x14	; 20
    b1ee:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b1f2:	88 87       	std	Y+8, r24	; 0x08
				Local_u32Number /=10;
    b1f4:	89 81       	ldd	r24, Y+1	; 0x01
    b1f6:	9a 81       	ldd	r25, Y+2	; 0x02
    b1f8:	ab 81       	ldd	r26, Y+3	; 0x03
    b1fa:	bc 81       	ldd	r27, Y+4	; 0x04
    b1fc:	2a e0       	ldi	r18, 0x0A	; 10
    b1fe:	30 e0       	ldi	r19, 0x00	; 0
    b200:	40 e0       	ldi	r20, 0x00	; 0
    b202:	50 e0       	ldi	r21, 0x00	; 0
    b204:	bc 01       	movw	r22, r24
    b206:	cd 01       	movw	r24, r26
    b208:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    b20c:	da 01       	movw	r26, r20
    b20e:	c9 01       	movw	r24, r18
    b210:	89 83       	std	Y+1, r24	; 0x01
    b212:	9a 83       	std	Y+2, r25	; 0x02
    b214:	ab 83       	std	Y+3, r26	; 0x03
    b216:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			u32 Local_u32Number = Copy_s32Num;

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    b218:	89 81       	ldd	r24, Y+1	; 0x01
    b21a:	9a 81       	ldd	r25, Y+2	; 0x02
    b21c:	ab 81       	ldd	r26, Y+3	; 0x03
    b21e:	bc 81       	ldd	r27, Y+4	; 0x04
    b220:	8b 30       	cpi	r24, 0x0B	; 11
    b222:	91 05       	cpc	r25, r1
    b224:	a1 05       	cpc	r26, r1
    b226:	b1 05       	cpc	r27, r1
    b228:	30 f0       	brcs	.+12     	; 0xb236 <LCD_enuWriteIntegerNum+0xfe>
    b22a:	8f 81       	ldd	r24, Y+7	; 0x07
    b22c:	88 23       	and	r24, r24
    b22e:	19 f4       	brne	.+6      	; 0xb236 <LCD_enuWriteIntegerNum+0xfe>
    b230:	88 85       	ldd	r24, Y+8	; 0x08
    b232:	88 23       	and	r24, r24
    b234:	a9 f2       	breq	.-86     	; 0xb1e0 <LCD_enuWriteIntegerNum+0xa8>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b236:	8f 81       	ldd	r24, Y+7	; 0x07
    b238:	88 23       	and	r24, r24
    b23a:	09 f0       	breq	.+2      	; 0xb23e <LCD_enuWriteIntegerNum+0x106>
    b23c:	88 c0       	rjmp	.+272    	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
    b23e:	88 85       	ldd	r24, Y+8	; 0x08
    b240:	88 23       	and	r24, r24
    b242:	09 f0       	breq	.+2      	; 0xb246 <LCD_enuWriteIntegerNum+0x10e>
    b244:	84 c0       	rjmp	.+264    	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b246:	81 e0       	ldi	r24, 0x01	; 1
    b248:	61 e0       	ldi	r22, 0x01	; 1
    b24a:	40 e0       	ldi	r20, 0x00	; 0
    b24c:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b250:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    b252:	84 e0       	ldi	r24, 0x04	; 4
    b254:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b258:	88 87       	std	Y+8, r24	; 0x08

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b25a:	8f 81       	ldd	r24, Y+7	; 0x07
    b25c:	88 23       	and	r24, r24
    b25e:	09 f0       	breq	.+2      	; 0xb262 <LCD_enuWriteIntegerNum+0x12a>
    b260:	76 c0       	rjmp	.+236    	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
    b262:	88 85       	ldd	r24, Y+8	; 0x08
    b264:	88 23       	and	r24, r24
    b266:	09 f0       	breq	.+2      	; 0xb26a <LCD_enuWriteIntegerNum+0x132>
    b268:	72 c0       	rjmp	.+228    	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
    b26a:	2d c0       	rjmp	.+90     	; 0xb2c6 <LCD_enuWriteIntegerNum+0x18e>
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
					{
						Local_u8DigitCounter++;
    b26c:	8d 81       	ldd	r24, Y+5	; 0x05
    b26e:	8f 5f       	subi	r24, 0xFF	; 255
    b270:	8d 83       	std	Y+5, r24	; 0x05
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    b272:	81 e0       	ldi	r24, 0x01	; 1
    b274:	61 e0       	ldi	r22, 0x01	; 1
    b276:	41 e0       	ldi	r20, 0x01	; 1
    b278:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b27c:	8f 83       	std	Y+7, r24	; 0x07
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
    b27e:	89 85       	ldd	r24, Y+9	; 0x09
    b280:	9a 85       	ldd	r25, Y+10	; 0x0a
    b282:	ab 85       	ldd	r26, Y+11	; 0x0b
    b284:	bc 85       	ldd	r27, Y+12	; 0x0c
    b286:	2a e0       	ldi	r18, 0x0A	; 10
    b288:	30 e0       	ldi	r19, 0x00	; 0
    b28a:	40 e0       	ldi	r20, 0x00	; 0
    b28c:	50 e0       	ldi	r21, 0x00	; 0
    b28e:	bc 01       	movw	r22, r24
    b290:	cd 01       	movw	r24, r26
    b292:	0e 94 67 63 	call	0xc6ce	; 0xc6ce <__divmodsi4>
    b296:	dc 01       	movw	r26, r24
    b298:	cb 01       	movw	r24, r22
    b29a:	80 5d       	subi	r24, 0xD0	; 208
    b29c:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b2a0:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
    b2a2:	89 85       	ldd	r24, Y+9	; 0x09
    b2a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    b2a6:	ab 85       	ldd	r26, Y+11	; 0x0b
    b2a8:	bc 85       	ldd	r27, Y+12	; 0x0c
    b2aa:	2a e0       	ldi	r18, 0x0A	; 10
    b2ac:	30 e0       	ldi	r19, 0x00	; 0
    b2ae:	40 e0       	ldi	r20, 0x00	; 0
    b2b0:	50 e0       	ldi	r21, 0x00	; 0
    b2b2:	bc 01       	movw	r22, r24
    b2b4:	cd 01       	movw	r24, r26
    b2b6:	0e 94 67 63 	call	0xc6ce	; 0xc6ce <__divmodsi4>
    b2ba:	da 01       	movw	r26, r20
    b2bc:	c9 01       	movw	r24, r18
    b2be:	89 87       	std	Y+9, r24	; 0x09
    b2c0:	9a 87       	std	Y+10, r25	; 0x0a
    b2c2:	ab 87       	std	Y+11, r26	; 0x0b
    b2c4:	bc 87       	std	Y+12, r27	; 0x0c
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    b2c6:	89 85       	ldd	r24, Y+9	; 0x09
    b2c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b2ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    b2cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    b2ce:	00 97       	sbiw	r24, 0x00	; 0
    b2d0:	a1 05       	cpc	r26, r1
    b2d2:	b1 05       	cpc	r27, r1
    b2d4:	31 f0       	breq	.+12     	; 0xb2e2 <LCD_enuWriteIntegerNum+0x1aa>
    b2d6:	8f 81       	ldd	r24, Y+7	; 0x07
    b2d8:	88 23       	and	r24, r24
    b2da:	19 f4       	brne	.+6      	; 0xb2e2 <LCD_enuWriteIntegerNum+0x1aa>
    b2dc:	88 85       	ldd	r24, Y+8	; 0x08
    b2de:	88 23       	and	r24, r24
    b2e0:	29 f2       	breq	.-118    	; 0xb26c <LCD_enuWriteIntegerNum+0x134>
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b2e2:	8f 81       	ldd	r24, Y+7	; 0x07
    b2e4:	88 23       	and	r24, r24
    b2e6:	99 f5       	brne	.+102    	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
    b2e8:	88 85       	ldd	r24, Y+8	; 0x08
    b2ea:	88 23       	and	r24, r24
    b2ec:	81 f5       	brne	.+96     	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
    b2ee:	0a c0       	rjmp	.+20     	; 0xb304 <LCD_enuWriteIntegerNum+0x1cc>
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b2f0:	81 e0       	ldi	r24, 0x01	; 1
    b2f2:	61 e0       	ldi	r22, 0x01	; 1
    b2f4:	40 e0       	ldi	r20, 0x00	; 0
    b2f6:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b2fa:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    b2fc:	84 e1       	ldi	r24, 0x14	; 20
    b2fe:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b302:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b304:	8d 81       	ldd	r24, Y+5	; 0x05
    b306:	8d 87       	std	Y+13, r24	; 0x0d
    b308:	8d 85       	ldd	r24, Y+13	; 0x0d
    b30a:	88 23       	and	r24, r24
    b30c:	11 f0       	breq	.+4      	; 0xb312 <LCD_enuWriteIntegerNum+0x1da>
    b30e:	81 e0       	ldi	r24, 0x01	; 1
    b310:	8d 87       	std	Y+13, r24	; 0x0d
    b312:	9d 85       	ldd	r25, Y+13	; 0x0d
    b314:	8d 81       	ldd	r24, Y+5	; 0x05
    b316:	81 50       	subi	r24, 0x01	; 1
    b318:	8d 83       	std	Y+5, r24	; 0x05
    b31a:	81 e0       	ldi	r24, 0x01	; 1
    b31c:	89 27       	eor	r24, r25
    b31e:	88 23       	and	r24, r24
    b320:	31 f4       	brne	.+12     	; 0xb32e <LCD_enuWriteIntegerNum+0x1f6>
    b322:	8f 81       	ldd	r24, Y+7	; 0x07
    b324:	88 23       	and	r24, r24
    b326:	19 f4       	brne	.+6      	; 0xb32e <LCD_enuWriteIntegerNum+0x1f6>
    b328:	88 85       	ldd	r24, Y+8	; 0x08
    b32a:	88 23       	and	r24, r24
    b32c:	09 f3       	breq	.-62     	; 0xb2f0 <LCD_enuWriteIntegerNum+0x1b8>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
						}

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b32e:	8f 81       	ldd	r24, Y+7	; 0x07
    b330:	88 23       	and	r24, r24
    b332:	69 f4       	brne	.+26     	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
    b334:	88 85       	ldd	r24, Y+8	; 0x08
    b336:	88 23       	and	r24, r24
    b338:	51 f4       	brne	.+20     	; 0xb34e <LCD_enuWriteIntegerNum+0x216>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b33a:	81 e0       	ldi	r24, 0x01	; 1
    b33c:	61 e0       	ldi	r22, 0x01	; 1
    b33e:	40 e0       	ldi	r20, 0x00	; 0
    b340:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b344:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    b346:	86 e0       	ldi	r24, 0x06	; 6
    b348:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b34c:	88 87       	std	Y+8, r24	; 0x08

			}

		}
	}
	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    b34e:	8f 81       	ldd	r24, Y+7	; 0x07
    b350:	88 23       	and	r24, r24
    b352:	21 f4       	brne	.+8      	; 0xb35c <LCD_enuWriteIntegerNum+0x224>
    b354:	88 85       	ldd	r24, Y+8	; 0x08
    b356:	88 23       	and	r24, r24
    b358:	09 f4       	brne	.+2      	; 0xb35c <LCD_enuWriteIntegerNum+0x224>
			 	 Local_enuErrorState = ES_OK;
    b35a:	1e 82       	std	Y+6, r1	; 0x06

	return (Local_enuErrorState = ES_OK);
    b35c:	1e 82       	std	Y+6, r1	; 0x06
    b35e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    b360:	2d 96       	adiw	r28, 0x0d	; 13
    b362:	0f b6       	in	r0, 0x3f	; 63
    b364:	f8 94       	cli
    b366:	de bf       	out	0x3e, r29	; 62
    b368:	0f be       	out	0x3f, r0	; 63
    b36a:	cd bf       	out	0x3d, r28	; 61
    b36c:	cf 91       	pop	r28
    b36e:	df 91       	pop	r29
    b370:	08 95       	ret

0000b372 <LCD_enuWriteFloatNum>:

/*		ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)		*/
ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)
{
    b372:	df 93       	push	r29
    b374:	cf 93       	push	r28
    b376:	cd b7       	in	r28, 0x3d	; 61
    b378:	de b7       	in	r29, 0x3e	; 62
    b37a:	66 97       	sbiw	r28, 0x16	; 22
    b37c:	0f b6       	in	r0, 0x3f	; 63
    b37e:	f8 94       	cli
    b380:	de bf       	out	0x3e, r29	; 62
    b382:	0f be       	out	0x3f, r0	; 63
    b384:	cd bf       	out	0x3d, r28	; 61
    b386:	69 8b       	std	Y+17, r22	; 0x11
    b388:	7a 8b       	std	Y+18, r23	; 0x12
    b38a:	8b 8b       	std	Y+19, r24	; 0x13
    b38c:	9c 8b       	std	Y+20, r25	; 0x14
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    b38e:	81 e0       	ldi	r24, 0x01	; 1
    b390:	8e 87       	std	Y+14, r24	; 0x0e

	u8 Local_u8DigitCounter = 0 ;
    b392:	1d 86       	std	Y+13, r1	; 0x0d
	u32 Local_u32Integer = 0 , Local_u32Number = 0;
    b394:	19 86       	std	Y+9, r1	; 0x09
    b396:	1a 86       	std	Y+10, r1	; 0x0a
    b398:	1b 86       	std	Y+11, r1	; 0x0b
    b39a:	1c 86       	std	Y+12, r1	; 0x0c
    b39c:	1d 82       	std	Y+5, r1	; 0x05
    b39e:	1e 82       	std	Y+6, r1	; 0x06
    b3a0:	1f 82       	std	Y+7, r1	; 0x07
    b3a2:	18 86       	std	Y+8, r1	; 0x08
	f32 Local_f32_Fraction = 0.0 ;
    b3a4:	80 e0       	ldi	r24, 0x00	; 0
    b3a6:	90 e0       	ldi	r25, 0x00	; 0
    b3a8:	a0 e0       	ldi	r26, 0x00	; 0
    b3aa:	b0 e0       	ldi	r27, 0x00	; 0
    b3ac:	89 83       	std	Y+1, r24	; 0x01
    b3ae:	9a 83       	std	Y+2, r25	; 0x02
    b3b0:	ab 83       	std	Y+3, r26	; 0x03
    b3b2:	bc 83       	std	Y+4, r27	; 0x04

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b3b4:	81 e0       	ldi	r24, 0x01	; 1
    b3b6:	61 e0       	ldi	r22, 0x01	; 1
    b3b8:	40 e0       	ldi	r20, 0x00	; 0
    b3ba:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b3be:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    b3c0:	86 e0       	ldi	r24, 0x06	; 6
    b3c2:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b3c6:	88 8b       	std	Y+16, r24	; 0x10

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b3c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    b3ca:	88 23       	and	r24, r24
    b3cc:	09 f0       	breq	.+2      	; 0xb3d0 <LCD_enuWriteFloatNum+0x5e>
    b3ce:	8f c1       	rjmp	.+798    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b3d0:	88 89       	ldd	r24, Y+16	; 0x10
    b3d2:	88 23       	and	r24, r24
    b3d4:	09 f0       	breq	.+2      	; 0xb3d8 <LCD_enuWriteFloatNum+0x66>
    b3d6:	8b c1       	rjmp	.+790    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
	{
		if( Copy_f32Num < 0 )
    b3d8:	69 89       	ldd	r22, Y+17	; 0x11
    b3da:	7a 89       	ldd	r23, Y+18	; 0x12
    b3dc:	8b 89       	ldd	r24, Y+19	; 0x13
    b3de:	9c 89       	ldd	r25, Y+20	; 0x14
    b3e0:	20 e0       	ldi	r18, 0x00	; 0
    b3e2:	30 e0       	ldi	r19, 0x00	; 0
    b3e4:	40 e0       	ldi	r20, 0x00	; 0
    b3e6:	50 e0       	ldi	r21, 0x00	; 0
    b3e8:	0e 94 84 12 	call	0x2508	; 0x2508 <__ltsf2>
    b3ec:	88 23       	and	r24, r24
    b3ee:	9c f4       	brge	.+38     	; 0xb416 <LCD_enuWriteFloatNum+0xa4>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    b3f0:	81 e0       	ldi	r24, 0x01	; 1
    b3f2:	61 e0       	ldi	r22, 0x01	; 1
    b3f4:	41 e0       	ldi	r20, 0x01	; 1
    b3f6:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b3fa:	8f 87       	std	Y+15, r24	; 0x0f
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    b3fc:	8d e2       	ldi	r24, 0x2D	; 45
    b3fe:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b402:	88 8b       	std	Y+16, r24	; 0x10
			Copy_f32Num = - Copy_f32Num;
    b404:	89 89       	ldd	r24, Y+17	; 0x11
    b406:	9a 89       	ldd	r25, Y+18	; 0x12
    b408:	ab 89       	ldd	r26, Y+19	; 0x13
    b40a:	bc 89       	ldd	r27, Y+20	; 0x14
    b40c:	b0 58       	subi	r27, 0x80	; 128
    b40e:	89 8b       	std	Y+17, r24	; 0x11
    b410:	9a 8b       	std	Y+18, r25	; 0x12
    b412:	ab 8b       	std	Y+19, r26	; 0x13
    b414:	bc 8b       	std	Y+20, r27	; 0x14
		}

		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
    b416:	69 89       	ldd	r22, Y+17	; 0x11
    b418:	7a 89       	ldd	r23, Y+18	; 0x12
    b41a:	8b 89       	ldd	r24, Y+19	; 0x13
    b41c:	9c 89       	ldd	r25, Y+20	; 0x14
    b41e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    b422:	dc 01       	movw	r26, r24
    b424:	cb 01       	movw	r24, r22
    b426:	8d 83       	std	Y+5, r24	; 0x05
    b428:	9e 83       	std	Y+6, r25	; 0x06
    b42a:	af 83       	std	Y+7, r26	; 0x07
    b42c:	b8 87       	std	Y+8, r27	; 0x08
    b42e:	8d 81       	ldd	r24, Y+5	; 0x05
    b430:	9e 81       	ldd	r25, Y+6	; 0x06
    b432:	af 81       	ldd	r26, Y+7	; 0x07
    b434:	b8 85       	ldd	r27, Y+8	; 0x08
    b436:	89 87       	std	Y+9, r24	; 0x09
    b438:	9a 87       	std	Y+10, r25	; 0x0a
    b43a:	ab 87       	std	Y+11, r26	; 0x0b
    b43c:	bc 87       	std	Y+12, r27	; 0x0c
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;
    b43e:	69 85       	ldd	r22, Y+9	; 0x09
    b440:	7a 85       	ldd	r23, Y+10	; 0x0a
    b442:	8b 85       	ldd	r24, Y+11	; 0x0b
    b444:	9c 85       	ldd	r25, Y+12	; 0x0c
    b446:	0e 94 66 13 	call	0x26cc	; 0x26cc <__floatunsisf>
    b44a:	9b 01       	movw	r18, r22
    b44c:	ac 01       	movw	r20, r24
    b44e:	69 89       	ldd	r22, Y+17	; 0x11
    b450:	7a 89       	ldd	r23, Y+18	; 0x12
    b452:	8b 89       	ldd	r24, Y+19	; 0x13
    b454:	9c 89       	ldd	r25, Y+20	; 0x14
    b456:	0e 94 20 10 	call	0x2040	; 0x2040 <__subsf3>
    b45a:	dc 01       	movw	r26, r24
    b45c:	cb 01       	movw	r24, r22
    b45e:	89 83       	std	Y+1, r24	; 0x01
    b460:	9a 83       	std	Y+2, r25	; 0x02
    b462:	ab 83       	std	Y+3, r26	; 0x03
    b464:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b466:	8f 85       	ldd	r24, Y+15	; 0x0f
    b468:	88 23       	and	r24, r24
    b46a:	09 f0       	breq	.+2      	; 0xb46e <LCD_enuWriteFloatNum+0xfc>
    b46c:	40 c1       	rjmp	.+640    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b46e:	88 89       	ldd	r24, Y+16	; 0x10
    b470:	88 23       	and	r24, r24
    b472:	09 f0       	breq	.+2      	; 0xb476 <LCD_enuWriteFloatNum+0x104>
    b474:	3c c1       	rjmp	.+632    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b476:	1c c0       	rjmp	.+56     	; 0xb4b0 <LCD_enuWriteFloatNum+0x13e>
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b478:	81 e0       	ldi	r24, 0x01	; 1
    b47a:	61 e0       	ldi	r22, 0x01	; 1
    b47c:	40 e0       	ldi	r20, 0x00	; 0
    b47e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b482:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
    b484:	84 e1       	ldi	r24, 0x14	; 20
    b486:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b48a:	8f 87       	std	Y+15, r24	; 0x0f
				Local_u32Number /=10;
    b48c:	8d 81       	ldd	r24, Y+5	; 0x05
    b48e:	9e 81       	ldd	r25, Y+6	; 0x06
    b490:	af 81       	ldd	r26, Y+7	; 0x07
    b492:	b8 85       	ldd	r27, Y+8	; 0x08
    b494:	2a e0       	ldi	r18, 0x0A	; 10
    b496:	30 e0       	ldi	r19, 0x00	; 0
    b498:	40 e0       	ldi	r20, 0x00	; 0
    b49a:	50 e0       	ldi	r21, 0x00	; 0
    b49c:	bc 01       	movw	r22, r24
    b49e:	cd 01       	movw	r24, r26
    b4a0:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    b4a4:	da 01       	movw	r26, r20
    b4a6:	c9 01       	movw	r24, r18
    b4a8:	8d 83       	std	Y+5, r24	; 0x05
    b4aa:	9e 83       	std	Y+6, r25	; 0x06
    b4ac:	af 83       	std	Y+7, r26	; 0x07
    b4ae:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b4b0:	8d 81       	ldd	r24, Y+5	; 0x05
    b4b2:	9e 81       	ldd	r25, Y+6	; 0x06
    b4b4:	af 81       	ldd	r26, Y+7	; 0x07
    b4b6:	b8 85       	ldd	r27, Y+8	; 0x08
    b4b8:	8b 30       	cpi	r24, 0x0B	; 11
    b4ba:	91 05       	cpc	r25, r1
    b4bc:	a1 05       	cpc	r26, r1
    b4be:	b1 05       	cpc	r27, r1
    b4c0:	30 f0       	brcs	.+12     	; 0xb4ce <LCD_enuWriteFloatNum+0x15c>
    b4c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    b4c4:	88 23       	and	r24, r24
    b4c6:	19 f4       	brne	.+6      	; 0xb4ce <LCD_enuWriteFloatNum+0x15c>
    b4c8:	88 89       	ldd	r24, Y+16	; 0x10
    b4ca:	88 23       	and	r24, r24
    b4cc:	a9 f2       	breq	.-86     	; 0xb478 <LCD_enuWriteFloatNum+0x106>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b4ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    b4d0:	88 23       	and	r24, r24
    b4d2:	09 f0       	breq	.+2      	; 0xb4d6 <LCD_enuWriteFloatNum+0x164>
    b4d4:	0c c1       	rjmp	.+536    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b4d6:	88 89       	ldd	r24, Y+16	; 0x10
    b4d8:	88 23       	and	r24, r24
    b4da:	09 f0       	breq	.+2      	; 0xb4de <LCD_enuWriteFloatNum+0x16c>
    b4dc:	08 c1       	rjmp	.+528    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b4de:	81 e0       	ldi	r24, 0x01	; 1
    b4e0:	61 e0       	ldi	r22, 0x01	; 1
    b4e2:	40 e0       	ldi	r20, 0x00	; 0
    b4e4:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b4e8:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    b4ea:	84 e0       	ldi	r24, 0x04	; 4
    b4ec:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b4f0:	88 8b       	std	Y+16, r24	; 0x10

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b4f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    b4f4:	88 23       	and	r24, r24
    b4f6:	09 f0       	breq	.+2      	; 0xb4fa <LCD_enuWriteFloatNum+0x188>
    b4f8:	fa c0       	rjmp	.+500    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b4fa:	88 89       	ldd	r24, Y+16	; 0x10
    b4fc:	88 23       	and	r24, r24
    b4fe:	09 f0       	breq	.+2      	; 0xb502 <LCD_enuWriteFloatNum+0x190>
    b500:	f6 c0       	rjmp	.+492    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
				{
					do
					{
						Local_u8DigitCounter++;
    b502:	8d 85       	ldd	r24, Y+13	; 0x0d
    b504:	8f 5f       	subi	r24, 0xFF	; 255
    b506:	8d 87       	std	Y+13, r24	; 0x0d
						DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    b508:	81 e0       	ldi	r24, 0x01	; 1
    b50a:	61 e0       	ldi	r22, 0x01	; 1
    b50c:	41 e0       	ldi	r20, 0x01	; 1
    b50e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
						LCD_enuWriteNLatch(ZERO_ASCII + (Local_u32Integer % 10));
    b512:	89 85       	ldd	r24, Y+9	; 0x09
    b514:	9a 85       	ldd	r25, Y+10	; 0x0a
    b516:	ab 85       	ldd	r26, Y+11	; 0x0b
    b518:	bc 85       	ldd	r27, Y+12	; 0x0c
    b51a:	2a e0       	ldi	r18, 0x0A	; 10
    b51c:	30 e0       	ldi	r19, 0x00	; 0
    b51e:	40 e0       	ldi	r20, 0x00	; 0
    b520:	50 e0       	ldi	r21, 0x00	; 0
    b522:	bc 01       	movw	r22, r24
    b524:	cd 01       	movw	r24, r26
    b526:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    b52a:	dc 01       	movw	r26, r24
    b52c:	cb 01       	movw	r24, r22
    b52e:	80 5d       	subi	r24, 0xD0	; 208
    b530:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
						Local_u32Integer /= 10;
    b534:	89 85       	ldd	r24, Y+9	; 0x09
    b536:	9a 85       	ldd	r25, Y+10	; 0x0a
    b538:	ab 85       	ldd	r26, Y+11	; 0x0b
    b53a:	bc 85       	ldd	r27, Y+12	; 0x0c
    b53c:	2a e0       	ldi	r18, 0x0A	; 10
    b53e:	30 e0       	ldi	r19, 0x00	; 0
    b540:	40 e0       	ldi	r20, 0x00	; 0
    b542:	50 e0       	ldi	r21, 0x00	; 0
    b544:	bc 01       	movw	r22, r24
    b546:	cd 01       	movw	r24, r26
    b548:	0e 94 45 63 	call	0xc68a	; 0xc68a <__udivmodsi4>
    b54c:	da 01       	movw	r26, r20
    b54e:	c9 01       	movw	r24, r18
    b550:	89 87       	std	Y+9, r24	; 0x09
    b552:	9a 87       	std	Y+10, r25	; 0x0a
    b554:	ab 87       	std	Y+11, r26	; 0x0b
    b556:	bc 87       	std	Y+12, r27	; 0x0c
					}while(Local_u32Integer && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK);
    b558:	89 85       	ldd	r24, Y+9	; 0x09
    b55a:	9a 85       	ldd	r25, Y+10	; 0x0a
    b55c:	ab 85       	ldd	r26, Y+11	; 0x0b
    b55e:	bc 85       	ldd	r27, Y+12	; 0x0c
    b560:	00 97       	sbiw	r24, 0x00	; 0
    b562:	a1 05       	cpc	r26, r1
    b564:	b1 05       	cpc	r27, r1
    b566:	31 f0       	breq	.+12     	; 0xb574 <LCD_enuWriteFloatNum+0x202>
    b568:	8f 85       	ldd	r24, Y+15	; 0x0f
    b56a:	88 23       	and	r24, r24
    b56c:	19 f4       	brne	.+6      	; 0xb574 <LCD_enuWriteFloatNum+0x202>
    b56e:	88 89       	ldd	r24, Y+16	; 0x10
    b570:	88 23       	and	r24, r24
    b572:	39 f2       	breq	.-114    	; 0xb502 <LCD_enuWriteFloatNum+0x190>

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b574:	8f 85       	ldd	r24, Y+15	; 0x0f
    b576:	88 23       	and	r24, r24
    b578:	09 f0       	breq	.+2      	; 0xb57c <LCD_enuWriteFloatNum+0x20a>
    b57a:	b9 c0       	rjmp	.+370    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b57c:	88 89       	ldd	r24, Y+16	; 0x10
    b57e:	88 23       	and	r24, r24
    b580:	09 f0       	breq	.+2      	; 0xb584 <LCD_enuWriteFloatNum+0x212>
    b582:	b5 c0       	rjmp	.+362    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
					{
						do
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b584:	81 e0       	ldi	r24, 0x01	; 1
    b586:	61 e0       	ldi	r22, 0x01	; 1
    b588:	40 e0       	ldi	r20, 0x00	; 0
    b58a:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b58e:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    b590:	84 e1       	ldi	r24, 0x14	; 20
    b592:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b596:	88 8b       	std	Y+16, r24	; 0x10
						}while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK );
    b598:	8d 85       	ldd	r24, Y+13	; 0x0d
    b59a:	8e 8b       	std	Y+22, r24	; 0x16
    b59c:	9e 89       	ldd	r25, Y+22	; 0x16
    b59e:	99 23       	and	r25, r25
    b5a0:	11 f0       	breq	.+4      	; 0xb5a6 <LCD_enuWriteFloatNum+0x234>
    b5a2:	81 e0       	ldi	r24, 0x01	; 1
    b5a4:	8e 8b       	std	Y+22, r24	; 0x16
    b5a6:	9e 89       	ldd	r25, Y+22	; 0x16
    b5a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    b5aa:	81 50       	subi	r24, 0x01	; 1
    b5ac:	8d 87       	std	Y+13, r24	; 0x0d
    b5ae:	81 e0       	ldi	r24, 0x01	; 1
    b5b0:	89 27       	eor	r24, r25
    b5b2:	88 23       	and	r24, r24
    b5b4:	31 f4       	brne	.+12     	; 0xb5c2 <LCD_enuWriteFloatNum+0x250>
    b5b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    b5b8:	88 23       	and	r24, r24
    b5ba:	19 f4       	brne	.+6      	; 0xb5c2 <LCD_enuWriteFloatNum+0x250>
    b5bc:	88 89       	ldd	r24, Y+16	; 0x10
    b5be:	88 23       	and	r24, r24
    b5c0:	09 f3       	breq	.-62     	; 0xb584 <LCD_enuWriteFloatNum+0x212>

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b5c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    b5c4:	88 23       	and	r24, r24
    b5c6:	09 f0       	breq	.+2      	; 0xb5ca <LCD_enuWriteFloatNum+0x258>
    b5c8:	92 c0       	rjmp	.+292    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b5ca:	88 89       	ldd	r24, Y+16	; 0x10
    b5cc:	88 23       	and	r24, r24
    b5ce:	09 f0       	breq	.+2      	; 0xb5d2 <LCD_enuWriteFloatNum+0x260>
    b5d0:	8e c0       	rjmp	.+284    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b5d2:	81 e0       	ldi	r24, 0x01	; 1
    b5d4:	61 e0       	ldi	r22, 0x01	; 1
    b5d6:	40 e0       	ldi	r20, 0x00	; 0
    b5d8:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b5dc:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    b5de:	86 e0       	ldi	r24, 0x06	; 6
    b5e0:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b5e4:	88 8b       	std	Y+16, r24	; 0x10

							if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b5e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    b5e8:	88 23       	and	r24, r24
    b5ea:	09 f0       	breq	.+2      	; 0xb5ee <LCD_enuWriteFloatNum+0x27c>
    b5ec:	80 c0       	rjmp	.+256    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b5ee:	88 89       	ldd	r24, Y+16	; 0x10
    b5f0:	88 23       	and	r24, r24
    b5f2:	09 f0       	breq	.+2      	; 0xb5f6 <LCD_enuWriteFloatNum+0x284>
    b5f4:	7c c0       	rjmp	.+248    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
							{
								if(Local_f32_Fraction > 0.0f)
    b5f6:	69 81       	ldd	r22, Y+1	; 0x01
    b5f8:	7a 81       	ldd	r23, Y+2	; 0x02
    b5fa:	8b 81       	ldd	r24, Y+3	; 0x03
    b5fc:	9c 81       	ldd	r25, Y+4	; 0x04
    b5fe:	20 e0       	ldi	r18, 0x00	; 0
    b600:	30 e0       	ldi	r19, 0x00	; 0
    b602:	40 e0       	ldi	r20, 0x00	; 0
    b604:	50 e0       	ldi	r21, 0x00	; 0
    b606:	0e 94 24 12 	call	0x2448	; 0x2448 <__gtsf2>
    b60a:	18 16       	cp	r1, r24
    b60c:	54 f4       	brge	.+20     	; 0xb622 <LCD_enuWriteFloatNum+0x2b0>
								{
									Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    b60e:	81 e0       	ldi	r24, 0x01	; 1
    b610:	61 e0       	ldi	r22, 0x01	; 1
    b612:	41 e0       	ldi	r20, 0x01	; 1
    b614:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b618:	8f 87       	std	Y+15, r24	; 0x0f
									Local_enuStatus[1] = LCD_enuWriteNLatch(DOT);
    b61a:	8e e2       	ldi	r24, 0x2E	; 46
    b61c:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b620:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b622:	8f 85       	ldd	r24, Y+15	; 0x0f
    b624:	88 23       	and	r24, r24
    b626:	09 f0       	breq	.+2      	; 0xb62a <LCD_enuWriteFloatNum+0x2b8>
    b628:	62 c0       	rjmp	.+196    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b62a:	88 89       	ldd	r24, Y+16	; 0x10
    b62c:	88 23       	and	r24, r24
    b62e:	09 f0       	breq	.+2      	; 0xb632 <LCD_enuWriteFloatNum+0x2c0>
    b630:	5e c0       	rjmp	.+188    	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
								{
									Local_u8DigitCounter =0;
    b632:	1d 86       	std	Y+13, r1	; 0x0d
    b634:	3e c0       	rjmp	.+124    	; 0xb6b2 <LCD_enuWriteFloatNum+0x340>
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
									{
										Local_u8DigitCounter++;
    b636:	8d 85       	ldd	r24, Y+13	; 0x0d
    b638:	8f 5f       	subi	r24, 0xFF	; 255
    b63a:	8d 87       	std	Y+13, r24	; 0x0d
										Local_f32_Fraction *= 10.0;
    b63c:	69 81       	ldd	r22, Y+1	; 0x01
    b63e:	7a 81       	ldd	r23, Y+2	; 0x02
    b640:	8b 81       	ldd	r24, Y+3	; 0x03
    b642:	9c 81       	ldd	r25, Y+4	; 0x04
    b644:	20 e0       	ldi	r18, 0x00	; 0
    b646:	30 e0       	ldi	r19, 0x00	; 0
    b648:	40 e2       	ldi	r20, 0x20	; 32
    b64a:	51 e4       	ldi	r21, 0x41	; 65
    b64c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    b650:	dc 01       	movw	r26, r24
    b652:	cb 01       	movw	r24, r22
    b654:	89 83       	std	Y+1, r24	; 0x01
    b656:	9a 83       	std	Y+2, r25	; 0x02
    b658:	ab 83       	std	Y+3, r26	; 0x03
    b65a:	bc 83       	std	Y+4, r27	; 0x04
										Local_u32Integer = (u32) Local_f32_Fraction;
    b65c:	69 81       	ldd	r22, Y+1	; 0x01
    b65e:	7a 81       	ldd	r23, Y+2	; 0x02
    b660:	8b 81       	ldd	r24, Y+3	; 0x03
    b662:	9c 81       	ldd	r25, Y+4	; 0x04
    b664:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    b668:	dc 01       	movw	r26, r24
    b66a:	cb 01       	movw	r24, r22
    b66c:	89 87       	std	Y+9, r24	; 0x09
    b66e:	9a 87       	std	Y+10, r25	; 0x0a
    b670:	ab 87       	std	Y+11, r26	; 0x0b
    b672:	bc 87       	std	Y+12, r27	; 0x0c
										Local_f32_Fraction -= Local_u32Integer;
    b674:	69 85       	ldd	r22, Y+9	; 0x09
    b676:	7a 85       	ldd	r23, Y+10	; 0x0a
    b678:	8b 85       	ldd	r24, Y+11	; 0x0b
    b67a:	9c 85       	ldd	r25, Y+12	; 0x0c
    b67c:	0e 94 66 13 	call	0x26cc	; 0x26cc <__floatunsisf>
    b680:	9b 01       	movw	r18, r22
    b682:	ac 01       	movw	r20, r24
    b684:	69 81       	ldd	r22, Y+1	; 0x01
    b686:	7a 81       	ldd	r23, Y+2	; 0x02
    b688:	8b 81       	ldd	r24, Y+3	; 0x03
    b68a:	9c 81       	ldd	r25, Y+4	; 0x04
    b68c:	0e 94 20 10 	call	0x2040	; 0x2040 <__subsf3>
    b690:	dc 01       	movw	r26, r24
    b692:	cb 01       	movw	r24, r22
    b694:	89 83       	std	Y+1, r24	; 0x01
    b696:	9a 83       	std	Y+2, r25	; 0x02
    b698:	ab 83       	std	Y+3, r26	; 0x03
    b69a:	bc 83       	std	Y+4, r27	; 0x04
										Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    b69c:	81 e0       	ldi	r24, 0x01	; 1
    b69e:	61 e0       	ldi	r22, 0x01	; 1
    b6a0:	41 e0       	ldi	r20, 0x01	; 1
    b6a2:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b6a6:	8f 87       	std	Y+15, r24	; 0x0f
										Local_enuStatus[1] = LCD_enuWriteNLatch((ZERO_ASCII + Local_u32Integer));
    b6a8:	89 85       	ldd	r24, Y+9	; 0x09
    b6aa:	80 5d       	subi	r24, 0xD0	; 208
    b6ac:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b6b0:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
								{
									Local_u8DigitCounter =0;
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    b6b2:	1d 8a       	std	Y+21, r1	; 0x15
    b6b4:	69 81       	ldd	r22, Y+1	; 0x01
    b6b6:	7a 81       	ldd	r23, Y+2	; 0x02
    b6b8:	8b 81       	ldd	r24, Y+3	; 0x03
    b6ba:	9c 81       	ldd	r25, Y+4	; 0x04
    b6bc:	20 e0       	ldi	r18, 0x00	; 0
    b6be:	30 e0       	ldi	r19, 0x00	; 0
    b6c0:	40 e0       	ldi	r20, 0x00	; 0
    b6c2:	50 e0       	ldi	r21, 0x00	; 0
    b6c4:	0e 94 24 12 	call	0x2448	; 0x2448 <__gtsf2>
    b6c8:	18 16       	cp	r1, r24
    b6ca:	14 f4       	brge	.+4      	; 0xb6d0 <LCD_enuWriteFloatNum+0x35e>
    b6cc:	91 e0       	ldi	r25, 0x01	; 1
    b6ce:	9d 8b       	std	Y+21, r25	; 0x15
    b6d0:	81 e0       	ldi	r24, 0x01	; 1
    b6d2:	9d 89       	ldd	r25, Y+21	; 0x15
    b6d4:	89 27       	eor	r24, r25
    b6d6:	88 23       	and	r24, r24
    b6d8:	51 f4       	brne	.+20     	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b6da:	8d 85       	ldd	r24, Y+13	; 0x0d
    b6dc:	86 30       	cpi	r24, 0x06	; 6
    b6de:	38 f4       	brcc	.+14     	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b6e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    b6e2:	88 23       	and	r24, r24
    b6e4:	21 f4       	brne	.+8      	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b6e6:	88 89       	ldd	r24, Y+16	; 0x10
    b6e8:	88 23       	and	r24, r24
    b6ea:	09 f4       	brne	.+2      	; 0xb6ee <LCD_enuWriteFloatNum+0x37c>
    b6ec:	a4 cf       	rjmp	.-184    	; 0xb636 <LCD_enuWriteFloatNum+0x2c4>
				}
			}
		}
	}

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    b6ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    b6f0:	88 23       	and	r24, r24
    b6f2:	21 f4       	brne	.+8      	; 0xb6fc <LCD_enuWriteFloatNum+0x38a>
    b6f4:	88 89       	ldd	r24, Y+16	; 0x10
    b6f6:	88 23       	and	r24, r24
    b6f8:	09 f4       	brne	.+2      	; 0xb6fc <LCD_enuWriteFloatNum+0x38a>
		 	 Local_enuErrorState = ES_OK;
    b6fa:	1e 86       	std	Y+14, r1	; 0x0e

	return Local_enuErrorState ;
    b6fc:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    b6fe:	66 96       	adiw	r28, 0x16	; 22
    b700:	0f b6       	in	r0, 0x3f	; 63
    b702:	f8 94       	cli
    b704:	de bf       	out	0x3e, r29	; 62
    b706:	0f be       	out	0x3f, r0	; 63
    b708:	cd bf       	out	0x3d, r28	; 61
    b70a:	cf 91       	pop	r28
    b70c:	df 91       	pop	r29
    b70e:	08 95       	ret

0000b710 <LCD_enuWriteExtraPattern>:

/*		ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)		*/
ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)
{
    b710:	df 93       	push	r29
    b712:	cf 93       	push	r28
    b714:	cd b7       	in	r28, 0x3d	; 61
    b716:	de b7       	in	r29, 0x3e	; 62
    b718:	2b 97       	sbiw	r28, 0x0b	; 11
    b71a:	0f b6       	in	r0, 0x3f	; 63
    b71c:	f8 94       	cli
    b71e:	de bf       	out	0x3e, r29	; 62
    b720:	0f be       	out	0x3f, r0	; 63
    b722:	cd bf       	out	0x3d, r28	; 61
    b724:	9e 83       	std	Y+6, r25	; 0x06
    b726:	8d 83       	std	Y+5, r24	; 0x05
    b728:	6f 83       	std	Y+7, r22	; 0x07
    b72a:	48 87       	std	Y+8, r20	; 0x08
    b72c:	29 87       	std	Y+9, r18	; 0x09

	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    b72e:	81 e0       	ldi	r24, 0x01	; 1
    b730:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
    b732:	88 85       	ldd	r24, Y+8	; 0x08
    b734:	85 36       	cpi	r24, 0x65	; 101
    b736:	08 f4       	brcc	.+2      	; 0xb73a <LCD_enuWriteExtraPattern+0x2a>
    b738:	52 c0       	rjmp	.+164    	; 0xb7de <LCD_enuWriteExtraPattern+0xce>
    b73a:	88 85       	ldd	r24, Y+8	; 0x08
    b73c:	8d 36       	cpi	r24, 0x6D	; 109
    b73e:	08 f0       	brcs	.+2      	; 0xb742 <LCD_enuWriteExtraPattern+0x32>
    b740:	4e c0       	rjmp	.+156    	; 0xb7de <LCD_enuWriteExtraPattern+0xce>
    b742:	88 85       	ldd	r24, Y+8	; 0x08
    b744:	28 2f       	mov	r18, r24
    b746:	30 e0       	ldi	r19, 0x00	; 0
    b748:	8f 81       	ldd	r24, Y+7	; 0x07
    b74a:	88 2f       	mov	r24, r24
    b74c:	90 e0       	ldi	r25, 0x00	; 0
    b74e:	82 0f       	add	r24, r18
    b750:	93 1f       	adc	r25, r19
    b752:	01 97       	sbiw	r24, 0x01	; 1
    b754:	8d 36       	cpi	r24, 0x6D	; 109
    b756:	91 05       	cpc	r25, r1
    b758:	0c f0       	brlt	.+2      	; 0xb75c <LCD_enuWriteExtraPattern+0x4c>
    b75a:	41 c0       	rjmp	.+130    	; 0xb7de <LCD_enuWriteExtraPattern+0xce>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b75c:	81 e0       	ldi	r24, 0x01	; 1
    b75e:	61 e0       	ldi	r22, 0x01	; 1
    b760:	40 e0       	ldi	r20, 0x00	; 0
    b762:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b766:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));
    b768:	88 85       	ldd	r24, Y+8	; 0x08
    b76a:	88 2f       	mov	r24, r24
    b76c:	90 e0       	ldi	r25, 0x00	; 0
    b76e:	8d 55       	subi	r24, 0x5D	; 93
    b770:	90 40       	sbci	r25, 0x00	; 0
    b772:	88 0f       	add	r24, r24
    b774:	99 1f       	adc	r25, r25
    b776:	88 0f       	add	r24, r24
    b778:	99 1f       	adc	r25, r25
    b77a:	88 0f       	add	r24, r24
    b77c:	99 1f       	adc	r25, r25
    b77e:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b782:	8c 83       	std	Y+4, r24	; 0x04

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    b784:	19 82       	std	Y+1, r1	; 0x01
    b786:	15 c0       	rjmp	.+42     	; 0xb7b2 <LCD_enuWriteExtraPattern+0xa2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    b788:	81 e0       	ldi	r24, 0x01	; 1
    b78a:	61 e0       	ldi	r22, 0x01	; 1
    b78c:	41 e0       	ldi	r20, 0x01	; 1
    b78e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b792:	8b 83       	std	Y+3, r24	; 0x03
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
    b794:	89 81       	ldd	r24, Y+1	; 0x01
    b796:	28 2f       	mov	r18, r24
    b798:	30 e0       	ldi	r19, 0x00	; 0
    b79a:	8d 81       	ldd	r24, Y+5	; 0x05
    b79c:	9e 81       	ldd	r25, Y+6	; 0x06
    b79e:	fc 01       	movw	r30, r24
    b7a0:	e2 0f       	add	r30, r18
    b7a2:	f3 1f       	adc	r31, r19
    b7a4:	80 81       	ld	r24, Z
    b7a6:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b7aa:	8c 83       	std	Y+4, r24	; 0x04
	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    b7ac:	89 81       	ldd	r24, Y+1	; 0x01
    b7ae:	8f 5f       	subi	r24, 0xFF	; 255
    b7b0:	89 83       	std	Y+1, r24	; 0x01
    b7b2:	89 81       	ldd	r24, Y+1	; 0x01
    b7b4:	28 2f       	mov	r18, r24
    b7b6:	30 e0       	ldi	r19, 0x00	; 0
    b7b8:	8f 81       	ldd	r24, Y+7	; 0x07
    b7ba:	88 2f       	mov	r24, r24
    b7bc:	90 e0       	ldi	r25, 0x00	; 0
    b7be:	88 0f       	add	r24, r24
    b7c0:	99 1f       	adc	r25, r25
    b7c2:	88 0f       	add	r24, r24
    b7c4:	99 1f       	adc	r25, r25
    b7c6:	88 0f       	add	r24, r24
    b7c8:	99 1f       	adc	r25, r25
    b7ca:	28 17       	cp	r18, r24
    b7cc:	39 07       	cpc	r19, r25
    b7ce:	4c f4       	brge	.+18     	; 0xb7e2 <LCD_enuWriteExtraPattern+0xd2>
    b7d0:	8b 81       	ldd	r24, Y+3	; 0x03
    b7d2:	88 23       	and	r24, r24
    b7d4:	31 f4       	brne	.+12     	; 0xb7e2 <LCD_enuWriteExtraPattern+0xd2>
    b7d6:	8c 81       	ldd	r24, Y+4	; 0x04
    b7d8:	88 23       	and	r24, r24
    b7da:	b1 f2       	breq	.-84     	; 0xb788 <LCD_enuWriteExtraPattern+0x78>
    b7dc:	02 c0       	rjmp	.+4      	; 0xb7e2 <LCD_enuWriteExtraPattern+0xd2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    b7de:	82 e0       	ldi	r24, 0x02	; 2
    b7e0:	8a 83       	std	Y+2, r24	; 0x02

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    b7e2:	8a 81       	ldd	r24, Y+2	; 0x02
    b7e4:	82 30       	cpi	r24, 0x02	; 2
    b7e6:	71 f1       	breq	.+92     	; 0xb844 <LCD_enuWriteExtraPattern+0x134>
    b7e8:	8b 81       	ldd	r24, Y+3	; 0x03
    b7ea:	88 23       	and	r24, r24
    b7ec:	59 f5       	brne	.+86     	; 0xb844 <LCD_enuWriteExtraPattern+0x134>
    b7ee:	8c 81       	ldd	r24, Y+4	; 0x04
    b7f0:	88 23       	and	r24, r24
    b7f2:	41 f5       	brne	.+80     	; 0xb844 <LCD_enuWriteExtraPattern+0x134>
	{
		if(Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT || Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT )
    b7f4:	89 85       	ldd	r24, Y+9	; 0x09
    b7f6:	8e 36       	cpi	r24, 0x6E	; 110
    b7f8:	19 f0       	breq	.+6      	; 0xb800 <LCD_enuWriteExtraPattern+0xf0>
    b7fa:	89 85       	ldd	r24, Y+9	; 0x09
    b7fc:	8e 36       	cpi	r24, 0x6E	; 110
    b7fe:	01 f5       	brne	.+64     	; 0xb840 <LCD_enuWriteExtraPattern+0x130>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b800:	81 e0       	ldi	r24, 0x01	; 1
    b802:	61 e0       	ldi	r22, 0x01	; 1
    b804:	40 e0       	ldi	r20, 0x00	; 0
    b806:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b80a:	8b 83       	std	Y+3, r24	; 0x03

			switch(Copy_u8DisplayDirection)
    b80c:	89 85       	ldd	r24, Y+9	; 0x09
    b80e:	28 2f       	mov	r18, r24
    b810:	30 e0       	ldi	r19, 0x00	; 0
    b812:	3b 87       	std	Y+11, r19	; 0x0b
    b814:	2a 87       	std	Y+10, r18	; 0x0a
    b816:	8a 85       	ldd	r24, Y+10	; 0x0a
    b818:	9b 85       	ldd	r25, Y+11	; 0x0b
    b81a:	8e 36       	cpi	r24, 0x6E	; 110
    b81c:	91 05       	cpc	r25, r1
    b81e:	31 f0       	breq	.+12     	; 0xb82c <LCD_enuWriteExtraPattern+0x11c>
    b820:	2a 85       	ldd	r18, Y+10	; 0x0a
    b822:	3b 85       	ldd	r19, Y+11	; 0x0b
    b824:	2f 36       	cpi	r18, 0x6F	; 111
    b826:	31 05       	cpc	r19, r1
    b828:	31 f0       	breq	.+12     	; 0xb836 <LCD_enuWriteExtraPattern+0x126>
    b82a:	0c c0       	rjmp	.+24     	; 0xb844 <LCD_enuWriteExtraPattern+0x134>
			{
				case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    b82c:	86 e0       	ldi	r24, 0x06	; 6
    b82e:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b832:	8c 83       	std	Y+4, r24	; 0x04
    b834:	07 c0       	rjmp	.+14     	; 0xb844 <LCD_enuWriteExtraPattern+0x134>
												break;
				case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    b836:	84 e0       	ldi	r24, 0x04	; 4
    b838:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b83c:	8c 83       	std	Y+4, r24	; 0x04
    b83e:	02 c0       	rjmp	.+4      	; 0xb844 <LCD_enuWriteExtraPattern+0x134>
												break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    b840:	82 e0       	ldi	r24, 0x02	; 2
    b842:	8a 83       	std	Y+2, r24	; 0x02
	}

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    b844:	8a 81       	ldd	r24, Y+2	; 0x02
    b846:	82 30       	cpi	r24, 0x02	; 2
    b848:	39 f0       	breq	.+14     	; 0xb858 <LCD_enuWriteExtraPattern+0x148>
    b84a:	8b 81       	ldd	r24, Y+3	; 0x03
    b84c:	88 23       	and	r24, r24
    b84e:	21 f4       	brne	.+8      	; 0xb858 <LCD_enuWriteExtraPattern+0x148>
    b850:	8c 81       	ldd	r24, Y+4	; 0x04
    b852:	88 23       	and	r24, r24
    b854:	09 f4       	brne	.+2      	; 0xb858 <LCD_enuWriteExtraPattern+0x148>
	 	 Local_enuErrorState = ES_OK;
    b856:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState;
    b858:	8a 81       	ldd	r24, Y+2	; 0x02
}
    b85a:	2b 96       	adiw	r28, 0x0b	; 11
    b85c:	0f b6       	in	r0, 0x3f	; 63
    b85e:	f8 94       	cli
    b860:	de bf       	out	0x3e, r29	; 62
    b862:	0f be       	out	0x3f, r0	; 63
    b864:	cd bf       	out	0x3d, r28	; 61
    b866:	cf 91       	pop	r28
    b868:	df 91       	pop	r29
    b86a:	08 95       	ret

0000b86c <LCD_enuSetTextDirection>:

ES_t LCD_enuSetTextDirection(u8 Copy_u8Direction)
{
    b86c:	df 93       	push	r29
    b86e:	cf 93       	push	r28
    b870:	00 d0       	rcall	.+0      	; 0xb872 <LCD_enuSetTextDirection+0x6>
    b872:	00 d0       	rcall	.+0      	; 0xb874 <LCD_enuSetTextDirection+0x8>
    b874:	00 d0       	rcall	.+0      	; 0xb876 <LCD_enuSetTextDirection+0xa>
    b876:	cd b7       	in	r28, 0x3d	; 61
    b878:	de b7       	in	r29, 0x3e	; 62
    b87a:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    b87c:	81 e0       	ldi	r24, 0x01	; 1
    b87e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Direction == DISPLAY_DIR_RIGHT || Copy_u8Direction == DISPLAY_DIR_RIGHT )
    b880:	8c 81       	ldd	r24, Y+4	; 0x04
    b882:	8e 36       	cpi	r24, 0x6E	; 110
    b884:	19 f0       	breq	.+6      	; 0xb88c <LCD_enuSetTextDirection+0x20>
    b886:	8c 81       	ldd	r24, Y+4	; 0x04
    b888:	8e 36       	cpi	r24, 0x6E	; 110
    b88a:	01 f5       	brne	.+64     	; 0xb8cc <LCD_enuSetTextDirection+0x60>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    b88c:	81 e0       	ldi	r24, 0x01	; 1
    b88e:	61 e0       	ldi	r22, 0x01	; 1
    b890:	40 e0       	ldi	r20, 0x00	; 0
    b892:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b896:	8a 83       	std	Y+2, r24	; 0x02

		switch(Copy_u8Direction)
    b898:	8c 81       	ldd	r24, Y+4	; 0x04
    b89a:	28 2f       	mov	r18, r24
    b89c:	30 e0       	ldi	r19, 0x00	; 0
    b89e:	3e 83       	std	Y+6, r19	; 0x06
    b8a0:	2d 83       	std	Y+5, r18	; 0x05
    b8a2:	8d 81       	ldd	r24, Y+5	; 0x05
    b8a4:	9e 81       	ldd	r25, Y+6	; 0x06
    b8a6:	8e 36       	cpi	r24, 0x6E	; 110
    b8a8:	91 05       	cpc	r25, r1
    b8aa:	31 f0       	breq	.+12     	; 0xb8b8 <LCD_enuSetTextDirection+0x4c>
    b8ac:	2d 81       	ldd	r18, Y+5	; 0x05
    b8ae:	3e 81       	ldd	r19, Y+6	; 0x06
    b8b0:	2f 36       	cpi	r18, 0x6F	; 111
    b8b2:	31 05       	cpc	r19, r1
    b8b4:	31 f0       	breq	.+12     	; 0xb8c2 <LCD_enuSetTextDirection+0x56>
    b8b6:	0c c0       	rjmp	.+24     	; 0xb8d0 <LCD_enuSetTextDirection+0x64>
		{
			case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    b8b8:	86 e0       	ldi	r24, 0x06	; 6
    b8ba:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b8be:	8b 83       	std	Y+3, r24	; 0x03
    b8c0:	07 c0       	rjmp	.+14     	; 0xb8d0 <LCD_enuSetTextDirection+0x64>
											break;
			case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    b8c2:	84 e0       	ldi	r24, 0x04	; 4
    b8c4:	0e 94 50 56 	call	0xaca0	; 0xaca0 <LCD_enuWriteNLatch>
    b8c8:	8b 83       	std	Y+3, r24	; 0x03
    b8ca:	02 c0       	rjmp	.+4      	; 0xb8d0 <LCD_enuSetTextDirection+0x64>
											break;
		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    b8cc:	82 e0       	ldi	r24, 0x02	; 2
    b8ce:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    b8d0:	89 81       	ldd	r24, Y+1	; 0x01
    b8d2:	82 30       	cpi	r24, 0x02	; 2
    b8d4:	39 f0       	breq	.+14     	; 0xb8e4 <LCD_enuSetTextDirection+0x78>
    b8d6:	8a 81       	ldd	r24, Y+2	; 0x02
    b8d8:	88 23       	and	r24, r24
    b8da:	21 f4       	brne	.+8      	; 0xb8e4 <LCD_enuSetTextDirection+0x78>
    b8dc:	8b 81       	ldd	r24, Y+3	; 0x03
    b8de:	88 23       	and	r24, r24
    b8e0:	09 f4       	brne	.+2      	; 0xb8e4 <LCD_enuSetTextDirection+0x78>
		 	 Local_enuErrorState = ES_OK;
    b8e2:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    b8e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    b8e6:	26 96       	adiw	r28, 0x06	; 6
    b8e8:	0f b6       	in	r0, 0x3f	; 63
    b8ea:	f8 94       	cli
    b8ec:	de bf       	out	0x3e, r29	; 62
    b8ee:	0f be       	out	0x3f, r0	; 63
    b8f0:	cd bf       	out	0x3d, r28	; 61
    b8f2:	cf 91       	pop	r28
    b8f4:	df 91       	pop	r29
    b8f6:	08 95       	ret

0000b8f8 <L293D_enuInit>:

extern u8 Motors_u8MaxNum ;
extern Motor_t Motors[];

ES_t L293D_enuInit( void )
{
    b8f8:	df 93       	push	r29
    b8fa:	cf 93       	push	r28
    b8fc:	00 d0       	rcall	.+0      	; 0xb8fe <L293D_enuInit+0x6>
    b8fe:	00 d0       	rcall	.+0      	; 0xb900 <L293D_enuInit+0x8>
    b900:	00 d0       	rcall	.+0      	; 0xb902 <L293D_enuInit+0xa>
    b902:	cd b7       	in	r28, 0x3d	; 61
    b904:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorStates[4];
    b906:	81 e0       	ldi	r24, 0x01	; 1
    b908:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Motors_u8MaxNum ; Local_u8Iter++)
    b90a:	19 82       	std	Y+1, r1	; 0x01
    b90c:	54 c1       	rjmp	.+680    	; 0xbbb6 <L293D_enuInit+0x2be>
	{
		/****************************************/
		/* 			Setting Motor EN Pin 		*/
		/****************************************/
		Local_AenuErrorStates[0] = DIO_enuSetPinDirection(	Motors[Local_u8Iter].EN.PinGrp , Motors[Local_u8Iter].EN.PinNum , DIO_u8OUTPUT);
    b90e:	89 81       	ldd	r24, Y+1	; 0x01
    b910:	88 2f       	mov	r24, r24
    b912:	90 e0       	ldi	r25, 0x00	; 0
    b914:	88 0f       	add	r24, r24
    b916:	99 1f       	adc	r25, r25
    b918:	88 0f       	add	r24, r24
    b91a:	99 1f       	adc	r25, r25
    b91c:	01 96       	adiw	r24, 0x01	; 1
    b91e:	88 0f       	add	r24, r24
    b920:	99 1f       	adc	r25, r25
    b922:	fc 01       	movw	r30, r24
    b924:	e7 50       	subi	r30, 0x07	; 7
    b926:	fe 4f       	sbci	r31, 0xFE	; 254
    b928:	20 81       	ld	r18, Z
    b92a:	89 81       	ldd	r24, Y+1	; 0x01
    b92c:	88 2f       	mov	r24, r24
    b92e:	90 e0       	ldi	r25, 0x00	; 0
    b930:	88 0f       	add	r24, r24
    b932:	99 1f       	adc	r25, r25
    b934:	88 0f       	add	r24, r24
    b936:	99 1f       	adc	r25, r25
    b938:	88 0f       	add	r24, r24
    b93a:	99 1f       	adc	r25, r25
    b93c:	fc 01       	movw	r30, r24
    b93e:	e4 50       	subi	r30, 0x04	; 4
    b940:	fe 4f       	sbci	r31, 0xFE	; 254
    b942:	90 81       	ld	r25, Z
    b944:	82 2f       	mov	r24, r18
    b946:	69 2f       	mov	r22, r25
    b948:	41 e0       	ldi	r20, 0x01	; 1
    b94a:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    b94e:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuErrorStates[1] = DIO_enuSetPinValue(	Motors[Local_u8Iter].EN.PinGrp , Motors[Local_u8Iter].EN.PinNum , DIO_u8LOW);
    b950:	89 81       	ldd	r24, Y+1	; 0x01
    b952:	88 2f       	mov	r24, r24
    b954:	90 e0       	ldi	r25, 0x00	; 0
    b956:	88 0f       	add	r24, r24
    b958:	99 1f       	adc	r25, r25
    b95a:	88 0f       	add	r24, r24
    b95c:	99 1f       	adc	r25, r25
    b95e:	01 96       	adiw	r24, 0x01	; 1
    b960:	88 0f       	add	r24, r24
    b962:	99 1f       	adc	r25, r25
    b964:	fc 01       	movw	r30, r24
    b966:	e7 50       	subi	r30, 0x07	; 7
    b968:	fe 4f       	sbci	r31, 0xFE	; 254
    b96a:	20 81       	ld	r18, Z
    b96c:	89 81       	ldd	r24, Y+1	; 0x01
    b96e:	88 2f       	mov	r24, r24
    b970:	90 e0       	ldi	r25, 0x00	; 0
    b972:	88 0f       	add	r24, r24
    b974:	99 1f       	adc	r25, r25
    b976:	88 0f       	add	r24, r24
    b978:	99 1f       	adc	r25, r25
    b97a:	88 0f       	add	r24, r24
    b97c:	99 1f       	adc	r25, r25
    b97e:	fc 01       	movw	r30, r24
    b980:	e4 50       	subi	r30, 0x04	; 4
    b982:	fe 4f       	sbci	r31, 0xFE	; 254
    b984:	90 81       	ld	r25, Z
    b986:	82 2f       	mov	r24, r18
    b988:	69 2f       	mov	r22, r25
    b98a:	40 e0       	ldi	r20, 0x00	; 0
    b98c:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    b990:	8c 83       	std	Y+4, r24	; 0x04

		if( Local_AenuErrorStates[0] == ES_OK && Local_AenuErrorStates[1] == ES_OK)
    b992:	8b 81       	ldd	r24, Y+3	; 0x03
    b994:	88 23       	and	r24, r24
    b996:	09 f0       	breq	.+2      	; 0xb99a <L293D_enuInit+0xa2>
    b998:	0b c1       	rjmp	.+534    	; 0xbbb0 <L293D_enuInit+0x2b8>
    b99a:	8c 81       	ldd	r24, Y+4	; 0x04
    b99c:	88 23       	and	r24, r24
    b99e:	09 f0       	breq	.+2      	; 0xb9a2 <L293D_enuInit+0xaa>
    b9a0:	07 c1       	rjmp	.+526    	; 0xbbb0 <L293D_enuInit+0x2b8>
		{
			/****************************************/
			/* 		Setting Motor A Pin 			*/
			/****************************************/
			Local_AenuErrorStates[0] = DIO_enuSetPinDirection(	Motors[Local_u8Iter].A.PinGrp , Motors[Local_u8Iter].A.PinNum , DIO_u8OUTPUT);
    b9a2:	89 81       	ldd	r24, Y+1	; 0x01
    b9a4:	88 2f       	mov	r24, r24
    b9a6:	90 e0       	ldi	r25, 0x00	; 0
    b9a8:	88 0f       	add	r24, r24
    b9aa:	99 1f       	adc	r25, r25
    b9ac:	01 96       	adiw	r24, 0x01	; 1
    b9ae:	88 0f       	add	r24, r24
    b9b0:	99 1f       	adc	r25, r25
    b9b2:	88 0f       	add	r24, r24
    b9b4:	99 1f       	adc	r25, r25
    b9b6:	fc 01       	movw	r30, r24
    b9b8:	e7 50       	subi	r30, 0x07	; 7
    b9ba:	fe 4f       	sbci	r31, 0xFE	; 254
    b9bc:	20 81       	ld	r18, Z
    b9be:	89 81       	ldd	r24, Y+1	; 0x01
    b9c0:	88 2f       	mov	r24, r24
    b9c2:	90 e0       	ldi	r25, 0x00	; 0
    b9c4:	88 0f       	add	r24, r24
    b9c6:	99 1f       	adc	r25, r25
    b9c8:	88 0f       	add	r24, r24
    b9ca:	99 1f       	adc	r25, r25
    b9cc:	88 0f       	add	r24, r24
    b9ce:	99 1f       	adc	r25, r25
    b9d0:	fc 01       	movw	r30, r24
    b9d2:	e2 50       	subi	r30, 0x02	; 2
    b9d4:	fe 4f       	sbci	r31, 0xFE	; 254
    b9d6:	90 81       	ld	r25, Z
    b9d8:	82 2f       	mov	r24, r18
    b9da:	69 2f       	mov	r22, r25
    b9dc:	41 e0       	ldi	r20, 0x01	; 1
    b9de:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    b9e2:	8b 83       	std	Y+3, r24	; 0x03
			Local_AenuErrorStates[1] = DIO_enuSetPinValue(	Motors[Local_u8Iter].A.PinGrp , Motors[Local_u8Iter].A.PinNum , DIO_u8LOW);
    b9e4:	89 81       	ldd	r24, Y+1	; 0x01
    b9e6:	88 2f       	mov	r24, r24
    b9e8:	90 e0       	ldi	r25, 0x00	; 0
    b9ea:	88 0f       	add	r24, r24
    b9ec:	99 1f       	adc	r25, r25
    b9ee:	01 96       	adiw	r24, 0x01	; 1
    b9f0:	88 0f       	add	r24, r24
    b9f2:	99 1f       	adc	r25, r25
    b9f4:	88 0f       	add	r24, r24
    b9f6:	99 1f       	adc	r25, r25
    b9f8:	fc 01       	movw	r30, r24
    b9fa:	e7 50       	subi	r30, 0x07	; 7
    b9fc:	fe 4f       	sbci	r31, 0xFE	; 254
    b9fe:	20 81       	ld	r18, Z
    ba00:	89 81       	ldd	r24, Y+1	; 0x01
    ba02:	88 2f       	mov	r24, r24
    ba04:	90 e0       	ldi	r25, 0x00	; 0
    ba06:	88 0f       	add	r24, r24
    ba08:	99 1f       	adc	r25, r25
    ba0a:	88 0f       	add	r24, r24
    ba0c:	99 1f       	adc	r25, r25
    ba0e:	88 0f       	add	r24, r24
    ba10:	99 1f       	adc	r25, r25
    ba12:	fc 01       	movw	r30, r24
    ba14:	e2 50       	subi	r30, 0x02	; 2
    ba16:	fe 4f       	sbci	r31, 0xFE	; 254
    ba18:	90 81       	ld	r25, Z
    ba1a:	82 2f       	mov	r24, r18
    ba1c:	69 2f       	mov	r22, r25
    ba1e:	40 e0       	ldi	r20, 0x00	; 0
    ba20:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    ba24:	8c 83       	std	Y+4, r24	; 0x04

			/****************************************/
			/* 		Setting Motor B Pin 			*/
			/****************************************/
			Local_AenuErrorStates[2] = DIO_enuSetPinDirection(	Motors[Local_u8Iter].B.PinGrp , Motors[Local_u8Iter].B.PinNum , DIO_u8OUTPUT);
    ba26:	89 81       	ldd	r24, Y+1	; 0x01
    ba28:	88 2f       	mov	r24, r24
    ba2a:	90 e0       	ldi	r25, 0x00	; 0
    ba2c:	88 0f       	add	r24, r24
    ba2e:	99 1f       	adc	r25, r25
    ba30:	88 0f       	add	r24, r24
    ba32:	99 1f       	adc	r25, r25
    ba34:	88 0f       	add	r24, r24
    ba36:	99 1f       	adc	r25, r25
    ba38:	fc 01       	movw	r30, r24
    ba3a:	e1 50       	subi	r30, 0x01	; 1
    ba3c:	fe 4f       	sbci	r31, 0xFE	; 254
    ba3e:	20 81       	ld	r18, Z
    ba40:	89 81       	ldd	r24, Y+1	; 0x01
    ba42:	88 2f       	mov	r24, r24
    ba44:	90 e0       	ldi	r25, 0x00	; 0
    ba46:	88 0f       	add	r24, r24
    ba48:	99 1f       	adc	r25, r25
    ba4a:	88 0f       	add	r24, r24
    ba4c:	99 1f       	adc	r25, r25
    ba4e:	88 0f       	add	r24, r24
    ba50:	99 1f       	adc	r25, r25
    ba52:	fc 01       	movw	r30, r24
    ba54:	e0 50       	subi	r30, 0x00	; 0
    ba56:	fe 4f       	sbci	r31, 0xFE	; 254
    ba58:	90 81       	ld	r25, Z
    ba5a:	82 2f       	mov	r24, r18
    ba5c:	69 2f       	mov	r22, r25
    ba5e:	41 e0       	ldi	r20, 0x01	; 1
    ba60:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    ba64:	8d 83       	std	Y+5, r24	; 0x05
			Local_AenuErrorStates[3] = DIO_enuSetPinValue(	Motors[Local_u8Iter].B.PinGrp , Motors[Local_u8Iter].B.PinNum , DIO_u8LOW);
    ba66:	89 81       	ldd	r24, Y+1	; 0x01
    ba68:	88 2f       	mov	r24, r24
    ba6a:	90 e0       	ldi	r25, 0x00	; 0
    ba6c:	88 0f       	add	r24, r24
    ba6e:	99 1f       	adc	r25, r25
    ba70:	88 0f       	add	r24, r24
    ba72:	99 1f       	adc	r25, r25
    ba74:	88 0f       	add	r24, r24
    ba76:	99 1f       	adc	r25, r25
    ba78:	fc 01       	movw	r30, r24
    ba7a:	e1 50       	subi	r30, 0x01	; 1
    ba7c:	fe 4f       	sbci	r31, 0xFE	; 254
    ba7e:	20 81       	ld	r18, Z
    ba80:	89 81       	ldd	r24, Y+1	; 0x01
    ba82:	88 2f       	mov	r24, r24
    ba84:	90 e0       	ldi	r25, 0x00	; 0
    ba86:	88 0f       	add	r24, r24
    ba88:	99 1f       	adc	r25, r25
    ba8a:	88 0f       	add	r24, r24
    ba8c:	99 1f       	adc	r25, r25
    ba8e:	88 0f       	add	r24, r24
    ba90:	99 1f       	adc	r25, r25
    ba92:	fc 01       	movw	r30, r24
    ba94:	e0 50       	subi	r30, 0x00	; 0
    ba96:	fe 4f       	sbci	r31, 0xFE	; 254
    ba98:	90 81       	ld	r25, Z
    ba9a:	82 2f       	mov	r24, r18
    ba9c:	69 2f       	mov	r22, r25
    ba9e:	40 e0       	ldi	r20, 0x00	; 0
    baa0:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    baa4:	8e 83       	std	Y+6, r24	; 0x06

			if( Local_AenuErrorStates[0] == ES_OK && Local_AenuErrorStates[1] == ES_OK &&
    baa6:	8b 81       	ldd	r24, Y+3	; 0x03
    baa8:	88 23       	and	r24, r24
    baaa:	09 f0       	breq	.+2      	; 0xbaae <L293D_enuInit+0x1b6>
    baac:	81 c0       	rjmp	.+258    	; 0xbbb0 <L293D_enuInit+0x2b8>
    baae:	8c 81       	ldd	r24, Y+4	; 0x04
    bab0:	88 23       	and	r24, r24
    bab2:	09 f0       	breq	.+2      	; 0xbab6 <L293D_enuInit+0x1be>
    bab4:	7d c0       	rjmp	.+250    	; 0xbbb0 <L293D_enuInit+0x2b8>
    bab6:	8d 81       	ldd	r24, Y+5	; 0x05
    bab8:	88 23       	and	r24, r24
    baba:	09 f0       	breq	.+2      	; 0xbabe <L293D_enuInit+0x1c6>
    babc:	79 c0       	rjmp	.+242    	; 0xbbb0 <L293D_enuInit+0x2b8>
    babe:	8e 81       	ldd	r24, Y+6	; 0x06
    bac0:	88 23       	and	r24, r24
    bac2:	09 f0       	breq	.+2      	; 0xbac6 <L293D_enuInit+0x1ce>
    bac4:	75 c0       	rjmp	.+234    	; 0xbbb0 <L293D_enuInit+0x2b8>
				Local_AenuErrorStates[2] == ES_OK && Local_AenuErrorStates[3] == ES_OK)
			{
				/****************************************/
				/* 		Setting Motor PWM Source		*/
				/****************************************/
				Local_AenuErrorStates[0] = PWM_enuInit() ;
    bac6:	0e 94 15 3c 	call	0x782a	; 0x782a <PWM_enuInit>
    baca:	8b 83       	std	Y+3, r24	; 0x03
				Local_AenuErrorStates[1] = GIE_enuInit() ;
    bacc:	0e 94 74 44 	call	0x88e8	; 0x88e8 <GIE_enuInit>
    bad0:	8c 83       	std	Y+4, r24	; 0x04

				if( Local_AenuErrorStates[0] == ES_OK && Local_AenuErrorStates[1] == ES_OK )
    bad2:	8b 81       	ldd	r24, Y+3	; 0x03
    bad4:	88 23       	and	r24, r24
    bad6:	09 f0       	breq	.+2      	; 0xbada <L293D_enuInit+0x1e2>
    bad8:	6b c0       	rjmp	.+214    	; 0xbbb0 <L293D_enuInit+0x2b8>
    bada:	8c 81       	ldd	r24, Y+4	; 0x04
    badc:	88 23       	and	r24, r24
    bade:	09 f0       	breq	.+2      	; 0xbae2 <L293D_enuInit+0x1ea>
    bae0:	67 c0       	rjmp	.+206    	; 0xbbb0 <L293D_enuInit+0x2b8>
				{
					Local_AenuErrorStates[0] = PWM_enuSetWGM_Mode( Motors[Local_u8Iter].PWM , WGM_PC_8_bit );
    bae2:	89 81       	ldd	r24, Y+1	; 0x01
    bae4:	88 2f       	mov	r24, r24
    bae6:	90 e0       	ldi	r25, 0x00	; 0
    bae8:	88 0f       	add	r24, r24
    baea:	99 1f       	adc	r25, r25
    baec:	88 0f       	add	r24, r24
    baee:	99 1f       	adc	r25, r25
    baf0:	88 0f       	add	r24, r24
    baf2:	99 1f       	adc	r25, r25
    baf4:	fc 01       	movw	r30, r24
    baf6:	e6 50       	subi	r30, 0x06	; 6
    baf8:	fe 4f       	sbci	r31, 0xFE	; 254
    bafa:	80 81       	ld	r24, Z
    bafc:	65 e6       	ldi	r22, 0x65	; 101
    bafe:	0e 94 78 40 	call	0x80f0	; 0x80f0 <PWM_enuSetWGM_Mode>
    bb02:	8b 83       	std	Y+3, r24	; 0x03
					Local_AenuErrorStates[1] = PWM_enuSetClkPrescaler( Motors[Local_u8Iter].PWM , PRES_8 );
    bb04:	89 81       	ldd	r24, Y+1	; 0x01
    bb06:	88 2f       	mov	r24, r24
    bb08:	90 e0       	ldi	r25, 0x00	; 0
    bb0a:	88 0f       	add	r24, r24
    bb0c:	99 1f       	adc	r25, r25
    bb0e:	88 0f       	add	r24, r24
    bb10:	99 1f       	adc	r25, r25
    bb12:	88 0f       	add	r24, r24
    bb14:	99 1f       	adc	r25, r25
    bb16:	fc 01       	movw	r30, r24
    bb18:	e6 50       	subi	r30, 0x06	; 6
    bb1a:	fe 4f       	sbci	r31, 0xFE	; 254
    bb1c:	80 81       	ld	r24, Z
    bb1e:	6c e0       	ldi	r22, 0x0C	; 12
    bb20:	0e 94 09 3f 	call	0x7e12	; 0x7e12 <PWM_enuSetClkPrescaler>
    bb24:	8c 83       	std	Y+4, r24	; 0x04
					Local_AenuErrorStates[2] = PWM_enuSetCOM_Mode( Motors[Local_u8Iter].PWM , COMP_NON_INVERTED );
    bb26:	89 81       	ldd	r24, Y+1	; 0x01
    bb28:	88 2f       	mov	r24, r24
    bb2a:	90 e0       	ldi	r25, 0x00	; 0
    bb2c:	88 0f       	add	r24, r24
    bb2e:	99 1f       	adc	r25, r25
    bb30:	88 0f       	add	r24, r24
    bb32:	99 1f       	adc	r25, r25
    bb34:	88 0f       	add	r24, r24
    bb36:	99 1f       	adc	r25, r25
    bb38:	fc 01       	movw	r30, r24
    bb3a:	e6 50       	subi	r30, 0x06	; 6
    bb3c:	fe 4f       	sbci	r31, 0xFE	; 254
    bb3e:	80 81       	ld	r24, Z
    bb40:	66 e1       	ldi	r22, 0x16	; 22
    bb42:	0e 94 b6 3f 	call	0x7f6c	; 0x7f6c <PWM_enuSetCOM_Mode>
    bb46:	8d 83       	std	Y+5, r24	; 0x05
					Local_AenuErrorStates[3] = PWM_enuSetInterruptMode( Motors[Local_u8Iter].PWM , TC_OUT_COMP_INT );
    bb48:	89 81       	ldd	r24, Y+1	; 0x01
    bb4a:	88 2f       	mov	r24, r24
    bb4c:	90 e0       	ldi	r25, 0x00	; 0
    bb4e:	88 0f       	add	r24, r24
    bb50:	99 1f       	adc	r25, r25
    bb52:	88 0f       	add	r24, r24
    bb54:	99 1f       	adc	r25, r25
    bb56:	88 0f       	add	r24, r24
    bb58:	99 1f       	adc	r25, r25
    bb5a:	fc 01       	movw	r30, r24
    bb5c:	e6 50       	subi	r30, 0x06	; 6
    bb5e:	fe 4f       	sbci	r31, 0xFE	; 254
    bb60:	80 81       	ld	r24, Z
    bb62:	6a e2       	ldi	r22, 0x2A	; 42
    bb64:	0e 94 15 42 	call	0x842a	; 0x842a <PWM_enuSetInterruptMode>
    bb68:	8e 83       	std	Y+6, r24	; 0x06

					if( Local_AenuErrorStates[0] == ES_OK && Local_AenuErrorStates[1] == ES_OK &&
    bb6a:	8b 81       	ldd	r24, Y+3	; 0x03
    bb6c:	88 23       	and	r24, r24
    bb6e:	01 f5       	brne	.+64     	; 0xbbb0 <L293D_enuInit+0x2b8>
    bb70:	8c 81       	ldd	r24, Y+4	; 0x04
    bb72:	88 23       	and	r24, r24
    bb74:	e9 f4       	brne	.+58     	; 0xbbb0 <L293D_enuInit+0x2b8>
    bb76:	8d 81       	ldd	r24, Y+5	; 0x05
    bb78:	88 23       	and	r24, r24
    bb7a:	d1 f4       	brne	.+52     	; 0xbbb0 <L293D_enuInit+0x2b8>
    bb7c:	8e 81       	ldd	r24, Y+6	; 0x06
    bb7e:	88 23       	and	r24, r24
    bb80:	b9 f4       	brne	.+46     	; 0xbbb0 <L293D_enuInit+0x2b8>
						Local_AenuErrorStates[2] == ES_OK && Local_AenuErrorStates[3] == ES_OK)
					{
						Local_AenuErrorStates[0] = PWM_enuSetDutyCycle( Motors[Local_u8Iter].PWM , 0 );
    bb82:	89 81       	ldd	r24, Y+1	; 0x01
    bb84:	88 2f       	mov	r24, r24
    bb86:	90 e0       	ldi	r25, 0x00	; 0
    bb88:	88 0f       	add	r24, r24
    bb8a:	99 1f       	adc	r25, r25
    bb8c:	88 0f       	add	r24, r24
    bb8e:	99 1f       	adc	r25, r25
    bb90:	88 0f       	add	r24, r24
    bb92:	99 1f       	adc	r25, r25
    bb94:	fc 01       	movw	r30, r24
    bb96:	e6 50       	subi	r30, 0x06	; 6
    bb98:	fe 4f       	sbci	r31, 0xFE	; 254
    bb9a:	80 81       	ld	r24, Z
    bb9c:	40 e0       	ldi	r20, 0x00	; 0
    bb9e:	50 e0       	ldi	r21, 0x00	; 0
    bba0:	60 e0       	ldi	r22, 0x00	; 0
    bba2:	70 e0       	ldi	r23, 0x00	; 0
    bba4:	0e 94 32 42 	call	0x8464	; 0x8464 <PWM_enuSetDutyCycle>
    bba8:	8b 83       	std	Y+3, r24	; 0x03
						Local_AenuErrorStates[1] = GIE_enuEnable();
    bbaa:	0e 94 7d 44 	call	0x88fa	; 0x88fa <GIE_enuEnable>
    bbae:	8c 83       	std	Y+4, r24	; 0x04

ES_t L293D_enuInit( void )
{
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorStates[4];

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Motors_u8MaxNum ; Local_u8Iter++)
    bbb0:	89 81       	ldd	r24, Y+1	; 0x01
    bbb2:	8f 5f       	subi	r24, 0xFF	; 255
    bbb4:	89 83       	std	Y+1, r24	; 0x01
    bbb6:	90 91 f8 01 	lds	r25, 0x01F8
    bbba:	89 81       	ldd	r24, Y+1	; 0x01
    bbbc:	89 17       	cp	r24, r25
    bbbe:	08 f4       	brcc	.+2      	; 0xbbc2 <L293D_enuInit+0x2ca>
    bbc0:	a6 ce       	rjmp	.-692    	; 0xb90e <L293D_enuInit+0x16>
				 }
			 }
		 }
	}

	if( Local_AenuErrorStates[0] == ES_OK && Local_AenuErrorStates[1] == ES_OK &&
    bbc2:	8b 81       	ldd	r24, Y+3	; 0x03
    bbc4:	88 23       	and	r24, r24
    bbc6:	51 f4       	brne	.+20     	; 0xbbdc <L293D_enuInit+0x2e4>
    bbc8:	8c 81       	ldd	r24, Y+4	; 0x04
    bbca:	88 23       	and	r24, r24
    bbcc:	39 f4       	brne	.+14     	; 0xbbdc <L293D_enuInit+0x2e4>
    bbce:	8d 81       	ldd	r24, Y+5	; 0x05
    bbd0:	88 23       	and	r24, r24
    bbd2:	21 f4       	brne	.+8      	; 0xbbdc <L293D_enuInit+0x2e4>
    bbd4:	8e 81       	ldd	r24, Y+6	; 0x06
    bbd6:	88 23       	and	r24, r24
    bbd8:	09 f4       	brne	.+2      	; 0xbbdc <L293D_enuInit+0x2e4>
		Local_AenuErrorStates[2] == ES_OK && Local_AenuErrorStates[3] == ES_OK)
		Local_enuErrorState = ES_OK ;
    bbda:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    bbdc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    bbde:	26 96       	adiw	r28, 0x06	; 6
    bbe0:	0f b6       	in	r0, 0x3f	; 63
    bbe2:	f8 94       	cli
    bbe4:	de bf       	out	0x3e, r29	; 62
    bbe6:	0f be       	out	0x3f, r0	; 63
    bbe8:	cd bf       	out	0x3d, r28	; 61
    bbea:	cf 91       	pop	r28
    bbec:	df 91       	pop	r29
    bbee:	08 95       	ret

0000bbf0 <Le93D_enuSetDirectio>:

ES_t Le93D_enuSetDirectio( u8 Copy_u8MotorNum , u8 Copy_u8MotorDirection)
{
    bbf0:	df 93       	push	r29
    bbf2:	cf 93       	push	r28
    bbf4:	cd b7       	in	r28, 0x3d	; 61
    bbf6:	de b7       	in	r29, 0x3e	; 62
    bbf8:	28 97       	sbiw	r28, 0x08	; 8
    bbfa:	0f b6       	in	r0, 0x3f	; 63
    bbfc:	f8 94       	cli
    bbfe:	de bf       	out	0x3e, r29	; 62
    bc00:	0f be       	out	0x3f, r0	; 63
    bc02:	cd bf       	out	0x3d, r28	; 61
    bc04:	8d 83       	std	Y+5, r24	; 0x05
    bc06:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorStates[2];
    bc08:	81 e0       	ldi	r24, 0x01	; 1
    bc0a:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_u8MotorDirection == CLOCK_WISE_DIRECTION || Copy_u8MotorDirection == COUNTER_CLOCK_WISE_DIRECTION )
    bc0c:	8e 81       	ldd	r24, Y+6	; 0x06
    bc0e:	80 32       	cpi	r24, 0x20	; 32
    bc10:	21 f0       	breq	.+8      	; 0xbc1a <Le93D_enuSetDirectio+0x2a>
    bc12:	8e 81       	ldd	r24, Y+6	; 0x06
    bc14:	81 32       	cpi	r24, 0x21	; 33
    bc16:	09 f0       	breq	.+2      	; 0xbc1a <Le93D_enuSetDirectio+0x2a>
    bc18:	fc c0       	rjmp	.+504    	; 0xbe12 <Le93D_enuSetDirectio+0x222>
	{

		for( u8 Local_u8Iter = 0 ; Local_u8Iter < Motors_u8MaxNum ; Local_u8Iter++ )
    bc1a:	19 82       	std	Y+1, r1	; 0x01
    bc1c:	f3 c0       	rjmp	.+486    	; 0xbe04 <Le93D_enuSetDirectio+0x214>
		{
			if( Motors[Local_u8Iter].MotorNum == Copy_u8MotorNum )
    bc1e:	89 81       	ldd	r24, Y+1	; 0x01
    bc20:	88 2f       	mov	r24, r24
    bc22:	90 e0       	ldi	r25, 0x00	; 0
    bc24:	88 0f       	add	r24, r24
    bc26:	99 1f       	adc	r25, r25
    bc28:	88 0f       	add	r24, r24
    bc2a:	99 1f       	adc	r25, r25
    bc2c:	88 0f       	add	r24, r24
    bc2e:	99 1f       	adc	r25, r25
    bc30:	fc 01       	movw	r30, r24
    bc32:	e7 50       	subi	r30, 0x07	; 7
    bc34:	fe 4f       	sbci	r31, 0xFE	; 254
    bc36:	90 81       	ld	r25, Z
    bc38:	8d 81       	ldd	r24, Y+5	; 0x05
    bc3a:	98 17       	cp	r25, r24
    bc3c:	09 f0       	breq	.+2      	; 0xbc40 <Le93D_enuSetDirectio+0x50>
    bc3e:	df c0       	rjmp	.+446    	; 0xbdfe <Le93D_enuSetDirectio+0x20e>
			{
				switch( Copy_u8MotorDirection )
    bc40:	8e 81       	ldd	r24, Y+6	; 0x06
    bc42:	28 2f       	mov	r18, r24
    bc44:	30 e0       	ldi	r19, 0x00	; 0
    bc46:	38 87       	std	Y+8, r19	; 0x08
    bc48:	2f 83       	std	Y+7, r18	; 0x07
    bc4a:	8f 81       	ldd	r24, Y+7	; 0x07
    bc4c:	98 85       	ldd	r25, Y+8	; 0x08
    bc4e:	80 32       	cpi	r24, 0x20	; 32
    bc50:	91 05       	cpc	r25, r1
    bc52:	39 f0       	breq	.+14     	; 0xbc62 <Le93D_enuSetDirectio+0x72>
    bc54:	2f 81       	ldd	r18, Y+7	; 0x07
    bc56:	38 85       	ldd	r19, Y+8	; 0x08
    bc58:	21 32       	cpi	r18, 0x21	; 33
    bc5a:	31 05       	cpc	r19, r1
    bc5c:	09 f4       	brne	.+2      	; 0xbc60 <Le93D_enuSetDirectio+0x70>
    bc5e:	64 c0       	rjmp	.+200    	; 0xbd28 <Le93D_enuSetDirectio+0x138>
    bc60:	c4 c0       	rjmp	.+392    	; 0xbdea <Le93D_enuSetDirectio+0x1fa>
				{
					case 		CLOCK_WISE_DIRECTION	:	Local_AenuErrorStates[0] = DIO_enuSetPinValue(	Motors[Local_u8Iter].A.PinGrp ,
    bc62:	89 81       	ldd	r24, Y+1	; 0x01
    bc64:	88 2f       	mov	r24, r24
    bc66:	90 e0       	ldi	r25, 0x00	; 0
    bc68:	88 0f       	add	r24, r24
    bc6a:	99 1f       	adc	r25, r25
    bc6c:	01 96       	adiw	r24, 0x01	; 1
    bc6e:	88 0f       	add	r24, r24
    bc70:	99 1f       	adc	r25, r25
    bc72:	88 0f       	add	r24, r24
    bc74:	99 1f       	adc	r25, r25
    bc76:	fc 01       	movw	r30, r24
    bc78:	e7 50       	subi	r30, 0x07	; 7
    bc7a:	fe 4f       	sbci	r31, 0xFE	; 254
    bc7c:	20 81       	ld	r18, Z
    bc7e:	89 81       	ldd	r24, Y+1	; 0x01
    bc80:	88 2f       	mov	r24, r24
    bc82:	90 e0       	ldi	r25, 0x00	; 0
    bc84:	88 0f       	add	r24, r24
    bc86:	99 1f       	adc	r25, r25
    bc88:	88 0f       	add	r24, r24
    bc8a:	99 1f       	adc	r25, r25
    bc8c:	88 0f       	add	r24, r24
    bc8e:	99 1f       	adc	r25, r25
    bc90:	fc 01       	movw	r30, r24
    bc92:	e2 50       	subi	r30, 0x02	; 2
    bc94:	fe 4f       	sbci	r31, 0xFE	; 254
    bc96:	90 81       	ld	r25, Z
    bc98:	82 2f       	mov	r24, r18
    bc9a:	69 2f       	mov	r22, r25
    bc9c:	40 e0       	ldi	r20, 0x00	; 0
    bc9e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    bca2:	8b 83       	std	Y+3, r24	; 0x03
																											Motors[Local_u8Iter].A.PinNum ,	DIO_u8LOW);
															Local_AenuErrorStates[1] = DIO_enuSetPinValue( 	Motors[Local_u8Iter].B.PinGrp ,
    bca4:	89 81       	ldd	r24, Y+1	; 0x01
    bca6:	88 2f       	mov	r24, r24
    bca8:	90 e0       	ldi	r25, 0x00	; 0
    bcaa:	88 0f       	add	r24, r24
    bcac:	99 1f       	adc	r25, r25
    bcae:	88 0f       	add	r24, r24
    bcb0:	99 1f       	adc	r25, r25
    bcb2:	88 0f       	add	r24, r24
    bcb4:	99 1f       	adc	r25, r25
    bcb6:	fc 01       	movw	r30, r24
    bcb8:	e1 50       	subi	r30, 0x01	; 1
    bcba:	fe 4f       	sbci	r31, 0xFE	; 254
    bcbc:	20 81       	ld	r18, Z
    bcbe:	89 81       	ldd	r24, Y+1	; 0x01
    bcc0:	88 2f       	mov	r24, r24
    bcc2:	90 e0       	ldi	r25, 0x00	; 0
    bcc4:	88 0f       	add	r24, r24
    bcc6:	99 1f       	adc	r25, r25
    bcc8:	88 0f       	add	r24, r24
    bcca:	99 1f       	adc	r25, r25
    bccc:	88 0f       	add	r24, r24
    bcce:	99 1f       	adc	r25, r25
    bcd0:	fc 01       	movw	r30, r24
    bcd2:	e0 50       	subi	r30, 0x00	; 0
    bcd4:	fe 4f       	sbci	r31, 0xFE	; 254
    bcd6:	90 81       	ld	r25, Z
    bcd8:	82 2f       	mov	r24, r18
    bcda:	69 2f       	mov	r22, r25
    bcdc:	40 e0       	ldi	r20, 0x00	; 0
    bcde:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    bce2:	8c 83       	std	Y+4, r24	; 0x04
																											Motors[Local_u8Iter].B.PinNum , DIO_u8LOW);
															Local_AenuErrorStates[2] = DIO_enuSetPinValue( 	Motors[Local_u8Iter].A.PinGrp ,
    bce4:	89 81       	ldd	r24, Y+1	; 0x01
    bce6:	88 2f       	mov	r24, r24
    bce8:	90 e0       	ldi	r25, 0x00	; 0
    bcea:	88 0f       	add	r24, r24
    bcec:	99 1f       	adc	r25, r25
    bcee:	01 96       	adiw	r24, 0x01	; 1
    bcf0:	88 0f       	add	r24, r24
    bcf2:	99 1f       	adc	r25, r25
    bcf4:	88 0f       	add	r24, r24
    bcf6:	99 1f       	adc	r25, r25
    bcf8:	fc 01       	movw	r30, r24
    bcfa:	e7 50       	subi	r30, 0x07	; 7
    bcfc:	fe 4f       	sbci	r31, 0xFE	; 254
    bcfe:	20 81       	ld	r18, Z
    bd00:	89 81       	ldd	r24, Y+1	; 0x01
    bd02:	88 2f       	mov	r24, r24
    bd04:	90 e0       	ldi	r25, 0x00	; 0
    bd06:	88 0f       	add	r24, r24
    bd08:	99 1f       	adc	r25, r25
    bd0a:	88 0f       	add	r24, r24
    bd0c:	99 1f       	adc	r25, r25
    bd0e:	88 0f       	add	r24, r24
    bd10:	99 1f       	adc	r25, r25
    bd12:	fc 01       	movw	r30, r24
    bd14:	e2 50       	subi	r30, 0x02	; 2
    bd16:	fe 4f       	sbci	r31, 0xFE	; 254
    bd18:	90 81       	ld	r25, Z
    bd1a:	82 2f       	mov	r24, r18
    bd1c:	69 2f       	mov	r22, r25
    bd1e:	41 e0       	ldi	r20, 0x01	; 1
    bd20:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    bd24:	8d 83       	std	Y+5, r24	; 0x05
    bd26:	61 c0       	rjmp	.+194    	; 0xbdea <Le93D_enuSetDirectio+0x1fa>
																											Motors[Local_u8Iter].A.PinNum , DIO_u8HIGH);
															break;

					case COUNTER_CLOCK_WISE_DIRECTION	:	Local_AenuErrorStates[0] = DIO_enuSetPinValue(	Motors[Local_u8Iter].B.PinGrp ,
    bd28:	89 81       	ldd	r24, Y+1	; 0x01
    bd2a:	88 2f       	mov	r24, r24
    bd2c:	90 e0       	ldi	r25, 0x00	; 0
    bd2e:	88 0f       	add	r24, r24
    bd30:	99 1f       	adc	r25, r25
    bd32:	88 0f       	add	r24, r24
    bd34:	99 1f       	adc	r25, r25
    bd36:	88 0f       	add	r24, r24
    bd38:	99 1f       	adc	r25, r25
    bd3a:	fc 01       	movw	r30, r24
    bd3c:	e1 50       	subi	r30, 0x01	; 1
    bd3e:	fe 4f       	sbci	r31, 0xFE	; 254
    bd40:	20 81       	ld	r18, Z
    bd42:	89 81       	ldd	r24, Y+1	; 0x01
    bd44:	88 2f       	mov	r24, r24
    bd46:	90 e0       	ldi	r25, 0x00	; 0
    bd48:	88 0f       	add	r24, r24
    bd4a:	99 1f       	adc	r25, r25
    bd4c:	88 0f       	add	r24, r24
    bd4e:	99 1f       	adc	r25, r25
    bd50:	88 0f       	add	r24, r24
    bd52:	99 1f       	adc	r25, r25
    bd54:	fc 01       	movw	r30, r24
    bd56:	e0 50       	subi	r30, 0x00	; 0
    bd58:	fe 4f       	sbci	r31, 0xFE	; 254
    bd5a:	90 81       	ld	r25, Z
    bd5c:	82 2f       	mov	r24, r18
    bd5e:	69 2f       	mov	r22, r25
    bd60:	40 e0       	ldi	r20, 0x00	; 0
    bd62:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    bd66:	8b 83       	std	Y+3, r24	; 0x03
																											Motors[Local_u8Iter].B.PinNum ,	DIO_u8LOW);
															Local_AenuErrorStates[1] = DIO_enuSetPinValue( 	Motors[Local_u8Iter].A.PinGrp ,
    bd68:	89 81       	ldd	r24, Y+1	; 0x01
    bd6a:	88 2f       	mov	r24, r24
    bd6c:	90 e0       	ldi	r25, 0x00	; 0
    bd6e:	88 0f       	add	r24, r24
    bd70:	99 1f       	adc	r25, r25
    bd72:	01 96       	adiw	r24, 0x01	; 1
    bd74:	88 0f       	add	r24, r24
    bd76:	99 1f       	adc	r25, r25
    bd78:	88 0f       	add	r24, r24
    bd7a:	99 1f       	adc	r25, r25
    bd7c:	fc 01       	movw	r30, r24
    bd7e:	e7 50       	subi	r30, 0x07	; 7
    bd80:	fe 4f       	sbci	r31, 0xFE	; 254
    bd82:	20 81       	ld	r18, Z
    bd84:	89 81       	ldd	r24, Y+1	; 0x01
    bd86:	88 2f       	mov	r24, r24
    bd88:	90 e0       	ldi	r25, 0x00	; 0
    bd8a:	88 0f       	add	r24, r24
    bd8c:	99 1f       	adc	r25, r25
    bd8e:	88 0f       	add	r24, r24
    bd90:	99 1f       	adc	r25, r25
    bd92:	88 0f       	add	r24, r24
    bd94:	99 1f       	adc	r25, r25
    bd96:	fc 01       	movw	r30, r24
    bd98:	e2 50       	subi	r30, 0x02	; 2
    bd9a:	fe 4f       	sbci	r31, 0xFE	; 254
    bd9c:	90 81       	ld	r25, Z
    bd9e:	82 2f       	mov	r24, r18
    bda0:	69 2f       	mov	r22, r25
    bda2:	40 e0       	ldi	r20, 0x00	; 0
    bda4:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    bda8:	8c 83       	std	Y+4, r24	; 0x04
																											Motors[Local_u8Iter].A.PinNum , DIO_u8LOW);
															Local_AenuErrorStates[2] = DIO_enuSetPinValue( 	Motors[Local_u8Iter].B.PinGrp ,
    bdaa:	89 81       	ldd	r24, Y+1	; 0x01
    bdac:	88 2f       	mov	r24, r24
    bdae:	90 e0       	ldi	r25, 0x00	; 0
    bdb0:	88 0f       	add	r24, r24
    bdb2:	99 1f       	adc	r25, r25
    bdb4:	88 0f       	add	r24, r24
    bdb6:	99 1f       	adc	r25, r25
    bdb8:	88 0f       	add	r24, r24
    bdba:	99 1f       	adc	r25, r25
    bdbc:	fc 01       	movw	r30, r24
    bdbe:	e1 50       	subi	r30, 0x01	; 1
    bdc0:	fe 4f       	sbci	r31, 0xFE	; 254
    bdc2:	20 81       	ld	r18, Z
    bdc4:	89 81       	ldd	r24, Y+1	; 0x01
    bdc6:	88 2f       	mov	r24, r24
    bdc8:	90 e0       	ldi	r25, 0x00	; 0
    bdca:	88 0f       	add	r24, r24
    bdcc:	99 1f       	adc	r25, r25
    bdce:	88 0f       	add	r24, r24
    bdd0:	99 1f       	adc	r25, r25
    bdd2:	88 0f       	add	r24, r24
    bdd4:	99 1f       	adc	r25, r25
    bdd6:	fc 01       	movw	r30, r24
    bdd8:	e0 50       	subi	r30, 0x00	; 0
    bdda:	fe 4f       	sbci	r31, 0xFE	; 254
    bddc:	90 81       	ld	r25, Z
    bdde:	82 2f       	mov	r24, r18
    bde0:	69 2f       	mov	r22, r25
    bde2:	41 e0       	ldi	r20, 0x01	; 1
    bde4:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    bde8:	8d 83       	std	Y+5, r24	; 0x05
																											Motors[Local_u8Iter].B.PinNum , DIO_u8HIGH);
															break;
				}
				if( Local_AenuErrorStates[0] == ES_OK && Local_AenuErrorStates[1] == ES_OK && Local_AenuErrorStates[2] == ES_OK )
    bdea:	8b 81       	ldd	r24, Y+3	; 0x03
    bdec:	88 23       	and	r24, r24
    bdee:	39 f4       	brne	.+14     	; 0xbdfe <Le93D_enuSetDirectio+0x20e>
    bdf0:	8c 81       	ldd	r24, Y+4	; 0x04
    bdf2:	88 23       	and	r24, r24
    bdf4:	21 f4       	brne	.+8      	; 0xbdfe <Le93D_enuSetDirectio+0x20e>
    bdf6:	8d 81       	ldd	r24, Y+5	; 0x05
    bdf8:	88 23       	and	r24, r24
    bdfa:	09 f4       	brne	.+2      	; 0xbdfe <Le93D_enuSetDirectio+0x20e>
					Local_enuErrorState = ES_OK;
    bdfc:	1a 82       	std	Y+2, r1	; 0x02
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorStates[2];

	if( Copy_u8MotorDirection == CLOCK_WISE_DIRECTION || Copy_u8MotorDirection == COUNTER_CLOCK_WISE_DIRECTION )
	{

		for( u8 Local_u8Iter = 0 ; Local_u8Iter < Motors_u8MaxNum ; Local_u8Iter++ )
    bdfe:	89 81       	ldd	r24, Y+1	; 0x01
    be00:	8f 5f       	subi	r24, 0xFF	; 255
    be02:	89 83       	std	Y+1, r24	; 0x01
    be04:	90 91 f8 01 	lds	r25, 0x01F8
    be08:	89 81       	ldd	r24, Y+1	; 0x01
    be0a:	89 17       	cp	r24, r25
    be0c:	08 f4       	brcc	.+2      	; 0xbe10 <Le93D_enuSetDirectio+0x220>
    be0e:	07 cf       	rjmp	.-498    	; 0xbc1e <Le93D_enuSetDirectio+0x2e>
    be10:	02 c0       	rjmp	.+4      	; 0xbe16 <Le93D_enuSetDirectio+0x226>
				if( Local_AenuErrorStates[0] == ES_OK && Local_AenuErrorStates[1] == ES_OK && Local_AenuErrorStates[2] == ES_OK )
					Local_enuErrorState = ES_OK;
			}
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    be12:	82 e0       	ldi	r24, 0x02	; 2
    be14:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState ;
    be16:	8a 81       	ldd	r24, Y+2	; 0x02
}
    be18:	28 96       	adiw	r28, 0x08	; 8
    be1a:	0f b6       	in	r0, 0x3f	; 63
    be1c:	f8 94       	cli
    be1e:	de bf       	out	0x3e, r29	; 62
    be20:	0f be       	out	0x3f, r0	; 63
    be22:	cd bf       	out	0x3d, r28	; 61
    be24:	cf 91       	pop	r28
    be26:	df 91       	pop	r29
    be28:	08 95       	ret

0000be2a <Le93D_enuSetSpeed>:

ES_t Le93D_enuSetSpeed( u8 Copy_u8MotorNum , u8 Copy_u8MotorMaxSpeedPercentage) // three cases 0 -> EN = LOW , 100 -> EN = HIGH , Other Calculate Duty Cycle from RMS value law
{
    be2a:	1f 93       	push	r17
    be2c:	df 93       	push	r29
    be2e:	cf 93       	push	r28
    be30:	cd b7       	in	r28, 0x3d	; 61
    be32:	de b7       	in	r29, 0x3e	; 62
    be34:	2a 97       	sbiw	r28, 0x0a	; 10
    be36:	0f b6       	in	r0, 0x3f	; 63
    be38:	f8 94       	cli
    be3a:	de bf       	out	0x3e, r29	; 62
    be3c:	0f be       	out	0x3f, r0	; 63
    be3e:	cd bf       	out	0x3d, r28	; 61
    be40:	8f 83       	std	Y+7, r24	; 0x07
    be42:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    be44:	81 e0       	ldi	r24, 0x01	; 1
    be46:	8e 83       	std	Y+6, r24	; 0x06

	if( Copy_u8MotorMaxSpeedPercentage >=0 && Copy_u8MotorMaxSpeedPercentage <= 100 )
    be48:	88 85       	ldd	r24, Y+8	; 0x08
    be4a:	85 36       	cpi	r24, 0x65	; 101
    be4c:	08 f0       	brcs	.+2      	; 0xbe50 <Le93D_enuSetSpeed+0x26>
    be4e:	87 c0       	rjmp	.+270    	; 0xbf5e <Le93D_enuSetSpeed+0x134>
	{
		for( u8 Local_u8Iter = 0 ; Local_u8Iter < Motors_u8MaxNum ; Local_u8Iter++ )
    be50:	1d 82       	std	Y+5, r1	; 0x05
    be52:	7e c0       	rjmp	.+252    	; 0xbf50 <Le93D_enuSetSpeed+0x126>
		{
			if( Motors[Local_u8Iter].MotorNum == Copy_u8MotorNum )
    be54:	8d 81       	ldd	r24, Y+5	; 0x05
    be56:	88 2f       	mov	r24, r24
    be58:	90 e0       	ldi	r25, 0x00	; 0
    be5a:	88 0f       	add	r24, r24
    be5c:	99 1f       	adc	r25, r25
    be5e:	88 0f       	add	r24, r24
    be60:	99 1f       	adc	r25, r25
    be62:	88 0f       	add	r24, r24
    be64:	99 1f       	adc	r25, r25
    be66:	fc 01       	movw	r30, r24
    be68:	e7 50       	subi	r30, 0x07	; 7
    be6a:	fe 4f       	sbci	r31, 0xFE	; 254
    be6c:	90 81       	ld	r25, Z
    be6e:	8f 81       	ldd	r24, Y+7	; 0x07
    be70:	98 17       	cp	r25, r24
    be72:	09 f0       	breq	.+2      	; 0xbe76 <Le93D_enuSetSpeed+0x4c>
    be74:	6a c0       	rjmp	.+212    	; 0xbf4a <Le93D_enuSetSpeed+0x120>
			{
				switch( Copy_u8MotorMaxSpeedPercentage )
    be76:	88 85       	ldd	r24, Y+8	; 0x08
    be78:	28 2f       	mov	r18, r24
    be7a:	30 e0       	ldi	r19, 0x00	; 0
    be7c:	3a 87       	std	Y+10, r19	; 0x0a
    be7e:	29 87       	std	Y+9, r18	; 0x09
    be80:	49 85       	ldd	r20, Y+9	; 0x09
    be82:	5a 85       	ldd	r21, Y+10	; 0x0a
    be84:	41 15       	cp	r20, r1
    be86:	51 05       	cpc	r21, r1
    be88:	29 f0       	breq	.+10     	; 0xbe94 <Le93D_enuSetSpeed+0x6a>
    be8a:	89 85       	ldd	r24, Y+9	; 0x09
    be8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    be8e:	84 36       	cpi	r24, 0x64	; 100
    be90:	91 05       	cpc	r25, r1
    be92:	f9 f4       	brne	.+62     	; 0xbed2 <Le93D_enuSetSpeed+0xa8>
				{
					case 0	:
					case 100:	Local_enuErrorState = PWM_enuSetDutyCycle( Motors[Local_u8Iter].PWM , Copy_u8MotorMaxSpeedPercentage );
    be94:	8d 81       	ldd	r24, Y+5	; 0x05
    be96:	88 2f       	mov	r24, r24
    be98:	90 e0       	ldi	r25, 0x00	; 0
    be9a:	88 0f       	add	r24, r24
    be9c:	99 1f       	adc	r25, r25
    be9e:	88 0f       	add	r24, r24
    bea0:	99 1f       	adc	r25, r25
    bea2:	88 0f       	add	r24, r24
    bea4:	99 1f       	adc	r25, r25
    bea6:	fc 01       	movw	r30, r24
    bea8:	e6 50       	subi	r30, 0x06	; 6
    beaa:	fe 4f       	sbci	r31, 0xFE	; 254
    beac:	10 81       	ld	r17, Z
    beae:	88 85       	ldd	r24, Y+8	; 0x08
    beb0:	88 2f       	mov	r24, r24
    beb2:	90 e0       	ldi	r25, 0x00	; 0
    beb4:	a0 e0       	ldi	r26, 0x00	; 0
    beb6:	b0 e0       	ldi	r27, 0x00	; 0
    beb8:	bc 01       	movw	r22, r24
    beba:	cd 01       	movw	r24, r26
    bebc:	0e 94 66 13 	call	0x26cc	; 0x26cc <__floatunsisf>
    bec0:	9b 01       	movw	r18, r22
    bec2:	ac 01       	movw	r20, r24
    bec4:	81 2f       	mov	r24, r17
    bec6:	ba 01       	movw	r22, r20
    bec8:	a9 01       	movw	r20, r18
    beca:	0e 94 32 42 	call	0x8464	; 0x8464 <PWM_enuSetDutyCycle>
    bece:	8e 83       	std	Y+6, r24	; 0x06
    bed0:	3c c0       	rjmp	.+120    	; 0xbf4a <Le93D_enuSetSpeed+0x120>
								break;
					default	:	{	/*	RMS = Amplitude * SQRT(Duty Cycle)	*/
									f32 DutyCycle = ( Copy_u8MotorMaxSpeedPercentage * Copy_u8MotorMaxSpeedPercentage ) / 100.0 ;
    bed2:	88 85       	ldd	r24, Y+8	; 0x08
    bed4:	28 2f       	mov	r18, r24
    bed6:	30 e0       	ldi	r19, 0x00	; 0
    bed8:	88 85       	ldd	r24, Y+8	; 0x08
    beda:	88 2f       	mov	r24, r24
    bedc:	90 e0       	ldi	r25, 0x00	; 0
    bede:	ac 01       	movw	r20, r24
    bee0:	24 9f       	mul	r18, r20
    bee2:	c0 01       	movw	r24, r0
    bee4:	25 9f       	mul	r18, r21
    bee6:	90 0d       	add	r25, r0
    bee8:	34 9f       	mul	r19, r20
    beea:	90 0d       	add	r25, r0
    beec:	11 24       	eor	r1, r1
    beee:	aa 27       	eor	r26, r26
    bef0:	97 fd       	sbrc	r25, 7
    bef2:	a0 95       	com	r26
    bef4:	ba 2f       	mov	r27, r26
    bef6:	bc 01       	movw	r22, r24
    bef8:	cd 01       	movw	r24, r26
    befa:	0e 94 b4 12 	call	0x2568	; 0x2568 <__floatsisf>
    befe:	dc 01       	movw	r26, r24
    bf00:	cb 01       	movw	r24, r22
    bf02:	bc 01       	movw	r22, r24
    bf04:	cd 01       	movw	r24, r26
    bf06:	20 e0       	ldi	r18, 0x00	; 0
    bf08:	30 e0       	ldi	r19, 0x00	; 0
    bf0a:	48 ec       	ldi	r20, 0xC8	; 200
    bf0c:	52 e4       	ldi	r21, 0x42	; 66
    bf0e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divsf3>
    bf12:	dc 01       	movw	r26, r24
    bf14:	cb 01       	movw	r24, r22
    bf16:	89 83       	std	Y+1, r24	; 0x01
    bf18:	9a 83       	std	Y+2, r25	; 0x02
    bf1a:	ab 83       	std	Y+3, r26	; 0x03
    bf1c:	bc 83       	std	Y+4, r27	; 0x04
									Local_enuErrorState = PWM_enuSetDutyCycle( Motors[Local_u8Iter].PWM , DutyCycle );
    bf1e:	8d 81       	ldd	r24, Y+5	; 0x05
    bf20:	88 2f       	mov	r24, r24
    bf22:	90 e0       	ldi	r25, 0x00	; 0
    bf24:	88 0f       	add	r24, r24
    bf26:	99 1f       	adc	r25, r25
    bf28:	88 0f       	add	r24, r24
    bf2a:	99 1f       	adc	r25, r25
    bf2c:	88 0f       	add	r24, r24
    bf2e:	99 1f       	adc	r25, r25
    bf30:	fc 01       	movw	r30, r24
    bf32:	e6 50       	subi	r30, 0x06	; 6
    bf34:	fe 4f       	sbci	r31, 0xFE	; 254
    bf36:	80 81       	ld	r24, Z
    bf38:	29 81       	ldd	r18, Y+1	; 0x01
    bf3a:	3a 81       	ldd	r19, Y+2	; 0x02
    bf3c:	4b 81       	ldd	r20, Y+3	; 0x03
    bf3e:	5c 81       	ldd	r21, Y+4	; 0x04
    bf40:	ba 01       	movw	r22, r20
    bf42:	a9 01       	movw	r20, r18
    bf44:	0e 94 32 42 	call	0x8464	; 0x8464 <PWM_enuSetDutyCycle>
    bf48:	8e 83       	std	Y+6, r24	; 0x06
{
	ES_t Local_enuErrorState = ES_NOK;

	if( Copy_u8MotorMaxSpeedPercentage >=0 && Copy_u8MotorMaxSpeedPercentage <= 100 )
	{
		for( u8 Local_u8Iter = 0 ; Local_u8Iter < Motors_u8MaxNum ; Local_u8Iter++ )
    bf4a:	8d 81       	ldd	r24, Y+5	; 0x05
    bf4c:	8f 5f       	subi	r24, 0xFF	; 255
    bf4e:	8d 83       	std	Y+5, r24	; 0x05
    bf50:	90 91 f8 01 	lds	r25, 0x01F8
    bf54:	8d 81       	ldd	r24, Y+5	; 0x05
    bf56:	89 17       	cp	r24, r25
    bf58:	08 f4       	brcc	.+2      	; 0xbf5c <Le93D_enuSetSpeed+0x132>
    bf5a:	7c cf       	rjmp	.-264    	; 0xbe54 <Le93D_enuSetSpeed+0x2a>
    bf5c:	02 c0       	rjmp	.+4      	; 0xbf62 <Le93D_enuSetSpeed+0x138>
								break;
				}
			}
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    bf5e:	82 e0       	ldi	r24, 0x02	; 2
    bf60:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState ;
    bf62:	8e 81       	ldd	r24, Y+6	; 0x06
}
    bf64:	2a 96       	adiw	r28, 0x0a	; 10
    bf66:	0f b6       	in	r0, 0x3f	; 63
    bf68:	f8 94       	cli
    bf6a:	de bf       	out	0x3e, r29	; 62
    bf6c:	0f be       	out	0x3f, r0	; 63
    bf6e:	cd bf       	out	0x3d, r28	; 61
    bf70:	cf 91       	pop	r28
    bf72:	df 91       	pop	r29
    bf74:	1f 91       	pop	r17
    bf76:	08 95       	ret

0000bf78 <Keypad_enuInit>:
extern u8 Kpad_u8KeyValues[];
extern KP_Output_t KeyPadCols[];
extern KP_Input_t KeyPadRows[];

ES_t Keypad_enuInit(void)
{
    bf78:	df 93       	push	r29
    bf7a:	cf 93       	push	r28
    bf7c:	00 d0       	rcall	.+0      	; 0xbf7e <Keypad_enuInit+0x6>
    bf7e:	00 d0       	rcall	.+0      	; 0xbf80 <Keypad_enuInit+0x8>
    bf80:	0f 92       	push	r0
    bf82:	cd b7       	in	r28, 0x3d	; 61
    bf84:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
    bf86:	81 e0       	ldi	r24, 0x01	; 1
    bf88:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Iter=0 , Local_u8Flag = 0;
    bf8a:	1a 82       	std	Y+2, r1	; 0x02
    bf8c:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    bf8e:	90 91 0a 02 	lds	r25, 0x020A
    bf92:	80 91 09 02 	lds	r24, 0x0209
    bf96:	89 17       	cp	r24, r25
    bf98:	08 f4       	brcc	.+2      	; 0xbf9c <Keypad_enuInit+0x24>
    bf9a:	af c0       	rjmp	.+350    	; 0xc0fa <Keypad_enuInit+0x182>
    bf9c:	90 91 0b 02 	lds	r25, 0x020B
    bfa0:	80 91 09 02 	lds	r24, 0x0209
    bfa4:	89 17       	cp	r24, r25
    bfa6:	08 f4       	brcc	.+2      	; 0xbfaa <Keypad_enuInit+0x32>
    bfa8:	a8 c0       	rjmp	.+336    	; 0xc0fa <Keypad_enuInit+0x182>
    bfaa:	54 c0       	rjmp	.+168    	; 0xc054 <Keypad_enuInit+0xdc>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8INPUT	);
    bfac:	8a 81       	ldd	r24, Y+2	; 0x02
    bfae:	28 2f       	mov	r18, r24
    bfb0:	30 e0       	ldi	r19, 0x00	; 0
    bfb2:	c9 01       	movw	r24, r18
    bfb4:	88 0f       	add	r24, r24
    bfb6:	99 1f       	adc	r25, r25
    bfb8:	82 0f       	add	r24, r18
    bfba:	93 1f       	adc	r25, r19
    bfbc:	fc 01       	movw	r30, r24
    bfbe:	ec 5d       	subi	r30, 0xDC	; 220
    bfc0:	fd 4f       	sbci	r31, 0xFD	; 253
    bfc2:	40 81       	ld	r20, Z
    bfc4:	8a 81       	ldd	r24, Y+2	; 0x02
    bfc6:	28 2f       	mov	r18, r24
    bfc8:	30 e0       	ldi	r19, 0x00	; 0
    bfca:	c9 01       	movw	r24, r18
    bfcc:	88 0f       	add	r24, r24
    bfce:	99 1f       	adc	r25, r25
    bfd0:	82 0f       	add	r24, r18
    bfd2:	93 1f       	adc	r25, r19
    bfd4:	fc 01       	movw	r30, r24
    bfd6:	eb 5d       	subi	r30, 0xDB	; 219
    bfd8:	fd 4f       	sbci	r31, 0xFD	; 253
    bfda:	90 81       	ld	r25, Z
    bfdc:	84 2f       	mov	r24, r20
    bfde:	69 2f       	mov	r22, r25
    bfe0:	40 e0       	ldi	r20, 0x00	; 0
    bfe2:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    bfe6:	8c 83       	std	Y+4, r24	; 0x04
			Local_enuError[1] = DIO_enuSetPinValue		( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState	);
    bfe8:	8a 81       	ldd	r24, Y+2	; 0x02
    bfea:	28 2f       	mov	r18, r24
    bfec:	30 e0       	ldi	r19, 0x00	; 0
    bfee:	c9 01       	movw	r24, r18
    bff0:	88 0f       	add	r24, r24
    bff2:	99 1f       	adc	r25, r25
    bff4:	82 0f       	add	r24, r18
    bff6:	93 1f       	adc	r25, r19
    bff8:	fc 01       	movw	r30, r24
    bffa:	ec 5d       	subi	r30, 0xDC	; 220
    bffc:	fd 4f       	sbci	r31, 0xFD	; 253
    bffe:	50 81       	ld	r21, Z
    c000:	8a 81       	ldd	r24, Y+2	; 0x02
    c002:	28 2f       	mov	r18, r24
    c004:	30 e0       	ldi	r19, 0x00	; 0
    c006:	c9 01       	movw	r24, r18
    c008:	88 0f       	add	r24, r24
    c00a:	99 1f       	adc	r25, r25
    c00c:	82 0f       	add	r24, r18
    c00e:	93 1f       	adc	r25, r19
    c010:	fc 01       	movw	r30, r24
    c012:	eb 5d       	subi	r30, 0xDB	; 219
    c014:	fd 4f       	sbci	r31, 0xFD	; 253
    c016:	40 81       	ld	r20, Z
    c018:	8a 81       	ldd	r24, Y+2	; 0x02
    c01a:	28 2f       	mov	r18, r24
    c01c:	30 e0       	ldi	r19, 0x00	; 0
    c01e:	c9 01       	movw	r24, r18
    c020:	88 0f       	add	r24, r24
    c022:	99 1f       	adc	r25, r25
    c024:	82 0f       	add	r24, r18
    c026:	93 1f       	adc	r25, r19
    c028:	fc 01       	movw	r30, r24
    c02a:	ea 5d       	subi	r30, 0xDA	; 218
    c02c:	fd 4f       	sbci	r31, 0xFD	; 253
    c02e:	90 81       	ld	r25, Z
    c030:	85 2f       	mov	r24, r21
    c032:	64 2f       	mov	r22, r20
    c034:	49 2f       	mov	r20, r25
    c036:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    c03a:	8d 83       	std	Y+5, r24	; 0x05

			if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    c03c:	8c 81       	ldd	r24, Y+4	; 0x04
    c03e:	88 23       	and	r24, r24
    c040:	19 f4       	brne	.+6      	; 0xc048 <Keypad_enuInit+0xd0>
    c042:	8d 81       	ldd	r24, Y+5	; 0x05
    c044:	88 23       	and	r24, r24
    c046:	19 f0       	breq	.+6      	; 0xc04e <Keypad_enuInit+0xd6>
			{
				Local_u8Flag = 1;
    c048:	81 e0       	ldi	r24, 0x01	; 1
    c04a:	89 83       	std	Y+1, r24	; 0x01
    c04c:	09 c0       	rjmp	.+18     	; 0xc060 <Keypad_enuInit+0xe8>
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
	u8 Local_u8Iter=0 , Local_u8Flag = 0;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    c04e:	8a 81       	ldd	r24, Y+2	; 0x02
    c050:	8f 5f       	subi	r24, 0xFF	; 255
    c052:	8a 83       	std	Y+2, r24	; 0x02
    c054:	90 91 0a 02 	lds	r25, 0x020A
    c058:	8a 81       	ldd	r24, Y+2	; 0x02
    c05a:	89 17       	cp	r24, r25
    c05c:	08 f4       	brcc	.+2      	; 0xc060 <Keypad_enuInit+0xe8>
    c05e:	a6 cf       	rjmp	.-180    	; 0xbfac <Keypad_enuInit+0x34>
			{
				Local_u8Flag = 1;
				break;
			}
		}
		if(!Local_u8Flag)
    c060:	89 81       	ldd	r24, Y+1	; 0x01
    c062:	88 23       	and	r24, r24
    c064:	09 f0       	breq	.+2      	; 0xc068 <Keypad_enuInit+0xf0>
    c066:	44 c0       	rjmp	.+136    	; 0xc0f0 <Keypad_enuInit+0x178>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    c068:	1a 82       	std	Y+2, r1	; 0x02
    c06a:	3c c0       	rjmp	.+120    	; 0xc0e4 <Keypad_enuInit+0x16c>
			{
				Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8OUTPUT );
    c06c:	8a 81       	ldd	r24, Y+2	; 0x02
    c06e:	88 2f       	mov	r24, r24
    c070:	90 e0       	ldi	r25, 0x00	; 0
    c072:	88 0f       	add	r24, r24
    c074:	99 1f       	adc	r25, r25
    c076:	fc 01       	movw	r30, r24
    c078:	e4 5e       	subi	r30, 0xE4	; 228
    c07a:	fd 4f       	sbci	r31, 0xFD	; 253
    c07c:	20 81       	ld	r18, Z
    c07e:	8a 81       	ldd	r24, Y+2	; 0x02
    c080:	88 2f       	mov	r24, r24
    c082:	90 e0       	ldi	r25, 0x00	; 0
    c084:	88 0f       	add	r24, r24
    c086:	99 1f       	adc	r25, r25
    c088:	fc 01       	movw	r30, r24
    c08a:	e3 5e       	subi	r30, 0xE3	; 227
    c08c:	fd 4f       	sbci	r31, 0xFD	; 253
    c08e:	90 81       	ld	r25, Z
    c090:	82 2f       	mov	r24, r18
    c092:	69 2f       	mov	r22, r25
    c094:	41 e0       	ldi	r20, 0x01	; 1
    c096:	0e 94 4e 48 	call	0x909c	; 0x909c <DIO_enuSetPinDirection>
    c09a:	8c 83       	std	Y+4, r24	; 0x04
				Local_enuError[1] = DIO_enuSetPinValue		( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8HIGH	 );
    c09c:	8a 81       	ldd	r24, Y+2	; 0x02
    c09e:	88 2f       	mov	r24, r24
    c0a0:	90 e0       	ldi	r25, 0x00	; 0
    c0a2:	88 0f       	add	r24, r24
    c0a4:	99 1f       	adc	r25, r25
    c0a6:	fc 01       	movw	r30, r24
    c0a8:	e4 5e       	subi	r30, 0xE4	; 228
    c0aa:	fd 4f       	sbci	r31, 0xFD	; 253
    c0ac:	20 81       	ld	r18, Z
    c0ae:	8a 81       	ldd	r24, Y+2	; 0x02
    c0b0:	88 2f       	mov	r24, r24
    c0b2:	90 e0       	ldi	r25, 0x00	; 0
    c0b4:	88 0f       	add	r24, r24
    c0b6:	99 1f       	adc	r25, r25
    c0b8:	fc 01       	movw	r30, r24
    c0ba:	e3 5e       	subi	r30, 0xE3	; 227
    c0bc:	fd 4f       	sbci	r31, 0xFD	; 253
    c0be:	90 81       	ld	r25, Z
    c0c0:	82 2f       	mov	r24, r18
    c0c2:	69 2f       	mov	r22, r25
    c0c4:	41 e0       	ldi	r20, 0x01	; 1
    c0c6:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    c0ca:	8d 83       	std	Y+5, r24	; 0x05

				if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    c0cc:	8c 81       	ldd	r24, Y+4	; 0x04
    c0ce:	88 23       	and	r24, r24
    c0d0:	19 f4       	brne	.+6      	; 0xc0d8 <Keypad_enuInit+0x160>
    c0d2:	8d 81       	ldd	r24, Y+5	; 0x05
    c0d4:	88 23       	and	r24, r24
    c0d6:	19 f0       	breq	.+6      	; 0xc0de <Keypad_enuInit+0x166>
				{
					Local_u8Flag = 1;
    c0d8:	81 e0       	ldi	r24, 0x01	; 1
    c0da:	89 83       	std	Y+1, r24	; 0x01
    c0dc:	09 c0       	rjmp	.+18     	; 0xc0f0 <Keypad_enuInit+0x178>
				break;
			}
		}
		if(!Local_u8Flag)
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    c0de:	8a 81       	ldd	r24, Y+2	; 0x02
    c0e0:	8f 5f       	subi	r24, 0xFF	; 255
    c0e2:	8a 83       	std	Y+2, r24	; 0x02
    c0e4:	90 91 0b 02 	lds	r25, 0x020B
    c0e8:	8a 81       	ldd	r24, Y+2	; 0x02
    c0ea:	89 17       	cp	r24, r25
    c0ec:	08 f4       	brcc	.+2      	; 0xc0f0 <Keypad_enuInit+0x178>
    c0ee:	be cf       	rjmp	.-132    	; 0xc06c <Keypad_enuInit+0xf4>
					Local_u8Flag = 1;
					break;
				}
			}
		}
		if( !Local_u8Flag )
    c0f0:	89 81       	ldd	r24, Y+1	; 0x01
    c0f2:	88 23       	and	r24, r24
    c0f4:	21 f4       	brne	.+8      	; 0xc0fe <Keypad_enuInit+0x186>
			Local_enuErrorState = ES_OK;
    c0f6:	1b 82       	std	Y+3, r1	; 0x03
    c0f8:	02 c0       	rjmp	.+4      	; 0xc0fe <Keypad_enuInit+0x186>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    c0fa:	82 e0       	ldi	r24, 0x02	; 2
    c0fc:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState;//DONE
    c0fe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    c100:	0f 90       	pop	r0
    c102:	0f 90       	pop	r0
    c104:	0f 90       	pop	r0
    c106:	0f 90       	pop	r0
    c108:	0f 90       	pop	r0
    c10a:	cf 91       	pop	r28
    c10c:	df 91       	pop	r29
    c10e:	08 95       	ret

0000c110 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)

{
    c110:	df 93       	push	r29
    c112:	cf 93       	push	r28
    c114:	cd b7       	in	r28, 0x3d	; 61
    c116:	de b7       	in	r29, 0x3e	; 62
    c118:	65 97       	sbiw	r28, 0x15	; 21
    c11a:	0f b6       	in	r0, 0x3f	; 63
    c11c:	f8 94       	cli
    c11e:	de bf       	out	0x3e, r29	; 62
    c120:	0f be       	out	0x3f, r0	; 63
    c122:	cd bf       	out	0x3d, r28	; 61
    c124:	9d 8b       	std	Y+21, r25	; 0x15
    c126:	8c 8b       	std	Y+20, r24	; 0x14
	ES_t Local_enuErrorState = ES_NOK;
    c128:	81 e0       	ldi	r24, 0x01	; 1
    c12a:	8a 8b       	std	Y+18, r24	; 0x12

	if (Copy_pu8KeyValue != NULL)
    c12c:	8c 89       	ldd	r24, Y+20	; 0x14
    c12e:	9d 89       	ldd	r25, Y+21	; 0x15
    c130:	00 97       	sbiw	r24, 0x00	; 0
    c132:	09 f4       	brne	.+2      	; 0xc136 <Keypad_enuGetPressedKey+0x26>
    c134:	61 c1       	rjmp	.+706    	; 0xc3f8 <Keypad_enuGetPressedKey+0x2e8>
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;
    c136:	81 e0       	ldi	r24, 0x01	; 1
    c138:	8b 8b       	std	Y+19, r24	; 0x13
    c13a:	19 8a       	std	Y+17, r1	; 0x11

		*Copy_pu8KeyValue = 0xff;
    c13c:	ec 89       	ldd	r30, Y+20	; 0x14
    c13e:	fd 89       	ldd	r31, Y+21	; 0x15
    c140:	8f ef       	ldi	r24, 0xFF	; 255
    c142:	80 83       	st	Z, r24

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    c144:	18 8a       	std	Y+16, r1	; 0x10
    c146:	51 c1       	rjmp	.+674    	; 0xc3ea <Keypad_enuGetPressedKey+0x2da>
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );
    c148:	88 89       	ldd	r24, Y+16	; 0x10
    c14a:	88 2f       	mov	r24, r24
    c14c:	90 e0       	ldi	r25, 0x00	; 0
    c14e:	88 0f       	add	r24, r24
    c150:	99 1f       	adc	r25, r25
    c152:	fc 01       	movw	r30, r24
    c154:	e4 5e       	subi	r30, 0xE4	; 228
    c156:	fd 4f       	sbci	r31, 0xFD	; 253
    c158:	20 81       	ld	r18, Z
    c15a:	88 89       	ldd	r24, Y+16	; 0x10
    c15c:	88 2f       	mov	r24, r24
    c15e:	90 e0       	ldi	r25, 0x00	; 0
    c160:	88 0f       	add	r24, r24
    c162:	99 1f       	adc	r25, r25
    c164:	fc 01       	movw	r30, r24
    c166:	e3 5e       	subi	r30, 0xE3	; 227
    c168:	fd 4f       	sbci	r31, 0xFD	; 253
    c16a:	90 81       	ld	r25, Z
    c16c:	82 2f       	mov	r24, r18
    c16e:	69 2f       	mov	r22, r25
    c170:	40 e0       	ldi	r20, 0x00	; 0
    c172:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    c176:	8a 8b       	std	Y+18, r24	; 0x12

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    c178:	1f 86       	std	Y+15, r1	; 0x0f
    c17a:	0d c1       	rjmp	.+538    	; 0xc396 <Keypad_enuGetPressedKey+0x286>
			{
				Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    c17c:	8f 85       	ldd	r24, Y+15	; 0x0f
    c17e:	28 2f       	mov	r18, r24
    c180:	30 e0       	ldi	r19, 0x00	; 0
    c182:	c9 01       	movw	r24, r18
    c184:	88 0f       	add	r24, r24
    c186:	99 1f       	adc	r25, r25
    c188:	82 0f       	add	r24, r18
    c18a:	93 1f       	adc	r25, r19
    c18c:	fc 01       	movw	r30, r24
    c18e:	ec 5d       	subi	r30, 0xDC	; 220
    c190:	fd 4f       	sbci	r31, 0xFD	; 253
    c192:	40 81       	ld	r20, Z
    c194:	8f 85       	ldd	r24, Y+15	; 0x0f
    c196:	28 2f       	mov	r18, r24
    c198:	30 e0       	ldi	r19, 0x00	; 0
    c19a:	c9 01       	movw	r24, r18
    c19c:	88 0f       	add	r24, r24
    c19e:	99 1f       	adc	r25, r25
    c1a0:	82 0f       	add	r24, r18
    c1a2:	93 1f       	adc	r25, r19
    c1a4:	fc 01       	movw	r30, r24
    c1a6:	eb 5d       	subi	r30, 0xDB	; 219
    c1a8:	fd 4f       	sbci	r31, 0xFD	; 253
    c1aa:	90 81       	ld	r25, Z
    c1ac:	9e 01       	movw	r18, r28
    c1ae:	2d 5e       	subi	r18, 0xED	; 237
    c1b0:	3f 4f       	sbci	r19, 0xFF	; 255
    c1b2:	84 2f       	mov	r24, r20
    c1b4:	69 2f       	mov	r22, r25
    c1b6:	a9 01       	movw	r20, r18
    c1b8:	0e 94 b7 4a 	call	0x956e	; 0x956e <DIO_enuGetPinValue>
    c1bc:	8a 8b       	std	Y+18, r24	; 0x12

				if( (Local_u8RowValue == DIO_u8LOW) && ( Local_enuErrorState == ES_OK) )
    c1be:	8b 89       	ldd	r24, Y+19	; 0x13
    c1c0:	88 23       	and	r24, r24
    c1c2:	09 f0       	breq	.+2      	; 0xc1c6 <Keypad_enuGetPressedKey+0xb6>
    c1c4:	e5 c0       	rjmp	.+458    	; 0xc390 <Keypad_enuGetPressedKey+0x280>
    c1c6:	8a 89       	ldd	r24, Y+18	; 0x12
    c1c8:	88 23       	and	r24, r24
    c1ca:	09 f0       	breq	.+2      	; 0xc1ce <Keypad_enuGetPressedKey+0xbe>
    c1cc:	e1 c0       	rjmp	.+450    	; 0xc390 <Keypad_enuGetPressedKey+0x280>
    c1ce:	80 e0       	ldi	r24, 0x00	; 0
    c1d0:	90 e0       	ldi	r25, 0x00	; 0
    c1d2:	a0 e4       	ldi	r26, 0x40	; 64
    c1d4:	b0 e4       	ldi	r27, 0x40	; 64
    c1d6:	8b 87       	std	Y+11, r24	; 0x0b
    c1d8:	9c 87       	std	Y+12, r25	; 0x0c
    c1da:	ad 87       	std	Y+13, r26	; 0x0d
    c1dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    c1de:	6b 85       	ldd	r22, Y+11	; 0x0b
    c1e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    c1e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    c1e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    c1e6:	20 e0       	ldi	r18, 0x00	; 0
    c1e8:	30 e0       	ldi	r19, 0x00	; 0
    c1ea:	4a e7       	ldi	r20, 0x7A	; 122
    c1ec:	55 e4       	ldi	r21, 0x45	; 69
    c1ee:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    c1f2:	dc 01       	movw	r26, r24
    c1f4:	cb 01       	movw	r24, r22
    c1f6:	8f 83       	std	Y+7, r24	; 0x07
    c1f8:	98 87       	std	Y+8, r25	; 0x08
    c1fa:	a9 87       	std	Y+9, r26	; 0x09
    c1fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    c1fe:	6f 81       	ldd	r22, Y+7	; 0x07
    c200:	78 85       	ldd	r23, Y+8	; 0x08
    c202:	89 85       	ldd	r24, Y+9	; 0x09
    c204:	9a 85       	ldd	r25, Y+10	; 0x0a
    c206:	20 e0       	ldi	r18, 0x00	; 0
    c208:	30 e0       	ldi	r19, 0x00	; 0
    c20a:	40 e8       	ldi	r20, 0x80	; 128
    c20c:	5f e3       	ldi	r21, 0x3F	; 63
    c20e:	0e 94 84 12 	call	0x2508	; 0x2508 <__ltsf2>
    c212:	88 23       	and	r24, r24
    c214:	2c f4       	brge	.+10     	; 0xc220 <Keypad_enuGetPressedKey+0x110>
		__ticks = 1;
    c216:	81 e0       	ldi	r24, 0x01	; 1
    c218:	90 e0       	ldi	r25, 0x00	; 0
    c21a:	9e 83       	std	Y+6, r25	; 0x06
    c21c:	8d 83       	std	Y+5, r24	; 0x05
    c21e:	3f c0       	rjmp	.+126    	; 0xc29e <Keypad_enuGetPressedKey+0x18e>
	else if (__tmp > 65535)
    c220:	6f 81       	ldd	r22, Y+7	; 0x07
    c222:	78 85       	ldd	r23, Y+8	; 0x08
    c224:	89 85       	ldd	r24, Y+9	; 0x09
    c226:	9a 85       	ldd	r25, Y+10	; 0x0a
    c228:	20 e0       	ldi	r18, 0x00	; 0
    c22a:	3f ef       	ldi	r19, 0xFF	; 255
    c22c:	4f e7       	ldi	r20, 0x7F	; 127
    c22e:	57 e4       	ldi	r21, 0x47	; 71
    c230:	0e 94 24 12 	call	0x2448	; 0x2448 <__gtsf2>
    c234:	18 16       	cp	r1, r24
    c236:	4c f5       	brge	.+82     	; 0xc28a <Keypad_enuGetPressedKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    c238:	6b 85       	ldd	r22, Y+11	; 0x0b
    c23a:	7c 85       	ldd	r23, Y+12	; 0x0c
    c23c:	8d 85       	ldd	r24, Y+13	; 0x0d
    c23e:	9e 85       	ldd	r25, Y+14	; 0x0e
    c240:	20 e0       	ldi	r18, 0x00	; 0
    c242:	30 e0       	ldi	r19, 0x00	; 0
    c244:	40 e2       	ldi	r20, 0x20	; 32
    c246:	51 e4       	ldi	r21, 0x41	; 65
    c248:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__mulsf3>
    c24c:	dc 01       	movw	r26, r24
    c24e:	cb 01       	movw	r24, r22
    c250:	bc 01       	movw	r22, r24
    c252:	cd 01       	movw	r24, r26
    c254:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    c258:	dc 01       	movw	r26, r24
    c25a:	cb 01       	movw	r24, r22
    c25c:	9e 83       	std	Y+6, r25	; 0x06
    c25e:	8d 83       	std	Y+5, r24	; 0x05
    c260:	0f c0       	rjmp	.+30     	; 0xc280 <Keypad_enuGetPressedKey+0x170>
    c262:	80 e9       	ldi	r24, 0x90	; 144
    c264:	91 e0       	ldi	r25, 0x01	; 1
    c266:	9c 83       	std	Y+4, r25	; 0x04
    c268:	8b 83       	std	Y+3, r24	; 0x03
    c26a:	8b 81       	ldd	r24, Y+3	; 0x03
    c26c:	9c 81       	ldd	r25, Y+4	; 0x04
    c26e:	01 97       	sbiw	r24, 0x01	; 1
    c270:	f1 f7       	brne	.-4      	; 0xc26e <Keypad_enuGetPressedKey+0x15e>
    c272:	9c 83       	std	Y+4, r25	; 0x04
    c274:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    c276:	8d 81       	ldd	r24, Y+5	; 0x05
    c278:	9e 81       	ldd	r25, Y+6	; 0x06
    c27a:	01 97       	sbiw	r24, 0x01	; 1
    c27c:	9e 83       	std	Y+6, r25	; 0x06
    c27e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    c280:	8d 81       	ldd	r24, Y+5	; 0x05
    c282:	9e 81       	ldd	r25, Y+6	; 0x06
    c284:	00 97       	sbiw	r24, 0x00	; 0
    c286:	69 f7       	brne	.-38     	; 0xc262 <Keypad_enuGetPressedKey+0x152>
    c288:	14 c0       	rjmp	.+40     	; 0xc2b2 <Keypad_enuGetPressedKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    c28a:	6f 81       	ldd	r22, Y+7	; 0x07
    c28c:	78 85       	ldd	r23, Y+8	; 0x08
    c28e:	89 85       	ldd	r24, Y+9	; 0x09
    c290:	9a 85       	ldd	r25, Y+10	; 0x0a
    c292:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    c296:	dc 01       	movw	r26, r24
    c298:	cb 01       	movw	r24, r22
    c29a:	9e 83       	std	Y+6, r25	; 0x06
    c29c:	8d 83       	std	Y+5, r24	; 0x05
    c29e:	8d 81       	ldd	r24, Y+5	; 0x05
    c2a0:	9e 81       	ldd	r25, Y+6	; 0x06
    c2a2:	9a 83       	std	Y+2, r25	; 0x02
    c2a4:	89 83       	std	Y+1, r24	; 0x01
    c2a6:	89 81       	ldd	r24, Y+1	; 0x01
    c2a8:	9a 81       	ldd	r25, Y+2	; 0x02
    c2aa:	01 97       	sbiw	r24, 0x01	; 1
    c2ac:	f1 f7       	brne	.-4      	; 0xc2aa <Keypad_enuGetPressedKey+0x19a>
    c2ae:	9a 83       	std	Y+2, r25	; 0x02
    c2b0:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(KEYPAD_BOUNCE_DELAY);
					Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    c2b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    c2b4:	28 2f       	mov	r18, r24
    c2b6:	30 e0       	ldi	r19, 0x00	; 0
    c2b8:	c9 01       	movw	r24, r18
    c2ba:	88 0f       	add	r24, r24
    c2bc:	99 1f       	adc	r25, r25
    c2be:	82 0f       	add	r24, r18
    c2c0:	93 1f       	adc	r25, r19
    c2c2:	fc 01       	movw	r30, r24
    c2c4:	ec 5d       	subi	r30, 0xDC	; 220
    c2c6:	fd 4f       	sbci	r31, 0xFD	; 253
    c2c8:	40 81       	ld	r20, Z
    c2ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    c2cc:	28 2f       	mov	r18, r24
    c2ce:	30 e0       	ldi	r19, 0x00	; 0
    c2d0:	c9 01       	movw	r24, r18
    c2d2:	88 0f       	add	r24, r24
    c2d4:	99 1f       	adc	r25, r25
    c2d6:	82 0f       	add	r24, r18
    c2d8:	93 1f       	adc	r25, r19
    c2da:	fc 01       	movw	r30, r24
    c2dc:	eb 5d       	subi	r30, 0xDB	; 219
    c2de:	fd 4f       	sbci	r31, 0xFD	; 253
    c2e0:	90 81       	ld	r25, Z
    c2e2:	9e 01       	movw	r18, r28
    c2e4:	2d 5e       	subi	r18, 0xED	; 237
    c2e6:	3f 4f       	sbci	r19, 0xFF	; 255
    c2e8:	84 2f       	mov	r24, r20
    c2ea:	69 2f       	mov	r22, r25
    c2ec:	a9 01       	movw	r20, r18
    c2ee:	0e 94 b7 4a 	call	0x956e	; 0x956e <DIO_enuGetPinValue>
    c2f2:	8a 8b       	std	Y+18, r24	; 0x12

					if( Local_enuErrorState == ES_OK  && Local_u8RowValue == DIO_u8LOW )
    c2f4:	8a 89       	ldd	r24, Y+18	; 0x12
    c2f6:	88 23       	and	r24, r24
    c2f8:	09 f0       	breq	.+2      	; 0xc2fc <Keypad_enuGetPressedKey+0x1ec>
    c2fa:	4a c0       	rjmp	.+148    	; 0xc390 <Keypad_enuGetPressedKey+0x280>
    c2fc:	8b 89       	ldd	r24, Y+19	; 0x13
    c2fe:	88 23       	and	r24, r24
    c300:	09 f0       	breq	.+2      	; 0xc304 <Keypad_enuGetPressedKey+0x1f4>
    c302:	46 c0       	rjmp	.+140    	; 0xc390 <Keypad_enuGetPressedKey+0x280>
					{
						Local_u8Pressed = 1 ;
    c304:	81 e0       	ldi	r24, 0x01	; 1
    c306:	89 8b       	std	Y+17, r24	; 0x11
						*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];
    c308:	8f 85       	ldd	r24, Y+15	; 0x0f
    c30a:	28 2f       	mov	r18, r24
    c30c:	30 e0       	ldi	r19, 0x00	; 0
    c30e:	80 91 0b 02 	lds	r24, 0x020B
    c312:	88 2f       	mov	r24, r24
    c314:	90 e0       	ldi	r25, 0x00	; 0
    c316:	a9 01       	movw	r20, r18
    c318:	48 9f       	mul	r20, r24
    c31a:	90 01       	movw	r18, r0
    c31c:	49 9f       	mul	r20, r25
    c31e:	30 0d       	add	r19, r0
    c320:	58 9f       	mul	r21, r24
    c322:	30 0d       	add	r19, r0
    c324:	11 24       	eor	r1, r1
    c326:	88 89       	ldd	r24, Y+16	; 0x10
    c328:	88 2f       	mov	r24, r24
    c32a:	90 e0       	ldi	r25, 0x00	; 0
    c32c:	82 0f       	add	r24, r18
    c32e:	93 1f       	adc	r25, r19
    c330:	fc 01       	movw	r30, r24
    c332:	e4 5f       	subi	r30, 0xF4	; 244
    c334:	fd 4f       	sbci	r31, 0xFD	; 253
    c336:	80 81       	ld	r24, Z
    c338:	ec 89       	ldd	r30, Y+20	; 0x14
    c33a:	fd 89       	ldd	r31, Y+21	; 0x15
    c33c:	80 83       	st	Z, r24
    c33e:	21 c0       	rjmp	.+66     	; 0xc382 <Keypad_enuGetPressedKey+0x272>

						while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
						{
							Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    c340:	8f 85       	ldd	r24, Y+15	; 0x0f
    c342:	28 2f       	mov	r18, r24
    c344:	30 e0       	ldi	r19, 0x00	; 0
    c346:	c9 01       	movw	r24, r18
    c348:	88 0f       	add	r24, r24
    c34a:	99 1f       	adc	r25, r25
    c34c:	82 0f       	add	r24, r18
    c34e:	93 1f       	adc	r25, r19
    c350:	fc 01       	movw	r30, r24
    c352:	ec 5d       	subi	r30, 0xDC	; 220
    c354:	fd 4f       	sbci	r31, 0xFD	; 253
    c356:	40 81       	ld	r20, Z
    c358:	8f 85       	ldd	r24, Y+15	; 0x0f
    c35a:	28 2f       	mov	r18, r24
    c35c:	30 e0       	ldi	r19, 0x00	; 0
    c35e:	c9 01       	movw	r24, r18
    c360:	88 0f       	add	r24, r24
    c362:	99 1f       	adc	r25, r25
    c364:	82 0f       	add	r24, r18
    c366:	93 1f       	adc	r25, r19
    c368:	fc 01       	movw	r30, r24
    c36a:	eb 5d       	subi	r30, 0xDB	; 219
    c36c:	fd 4f       	sbci	r31, 0xFD	; 253
    c36e:	90 81       	ld	r25, Z
    c370:	9e 01       	movw	r18, r28
    c372:	2d 5e       	subi	r18, 0xED	; 237
    c374:	3f 4f       	sbci	r19, 0xFF	; 255
    c376:	84 2f       	mov	r24, r20
    c378:	69 2f       	mov	r22, r25
    c37a:	a9 01       	movw	r20, r18
    c37c:	0e 94 b7 4a 	call	0x956e	; 0x956e <DIO_enuGetPinValue>
    c380:	8a 8b       	std	Y+18, r24	; 0x12
					if( Local_enuErrorState == ES_OK  && Local_u8RowValue == DIO_u8LOW )
					{
						Local_u8Pressed = 1 ;
						*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];

						while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
    c382:	8b 89       	ldd	r24, Y+19	; 0x13
    c384:	88 23       	and	r24, r24
    c386:	81 f4       	brne	.+32     	; 0xc3a8 <Keypad_enuGetPressedKey+0x298>
    c388:	8a 89       	ldd	r24, Y+18	; 0x12
    c38a:	88 23       	and	r24, r24
    c38c:	c9 f2       	breq	.-78     	; 0xc340 <Keypad_enuGetPressedKey+0x230>
    c38e:	0c c0       	rjmp	.+24     	; 0xc3a8 <Keypad_enuGetPressedKey+0x298>

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    c390:	8f 85       	ldd	r24, Y+15	; 0x0f
    c392:	8f 5f       	subi	r24, 0xFF	; 255
    c394:	8f 87       	std	Y+15, r24	; 0x0f
    c396:	8a 89       	ldd	r24, Y+18	; 0x12
    c398:	88 23       	and	r24, r24
    c39a:	31 f4       	brne	.+12     	; 0xc3a8 <Keypad_enuGetPressedKey+0x298>
    c39c:	90 91 0a 02 	lds	r25, 0x020A
    c3a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    c3a2:	89 17       	cp	r24, r25
    c3a4:	08 f4       	brcc	.+2      	; 0xc3a8 <Keypad_enuGetPressedKey+0x298>
    c3a6:	ea ce       	rjmp	.-556    	; 0xc17c <Keypad_enuGetPressedKey+0x6c>
						break;
					}
				}
			}

			if( (Local_u8Pressed == 1) || (Local_enuErrorState != ES_OK) )
    c3a8:	89 89       	ldd	r24, Y+17	; 0x11
    c3aa:	81 30       	cpi	r24, 0x01	; 1
    c3ac:	39 f1       	breq	.+78     	; 0xc3fc <Keypad_enuGetPressedKey+0x2ec>
    c3ae:	8a 89       	ldd	r24, Y+18	; 0x12
    c3b0:	88 23       	and	r24, r24
    c3b2:	21 f5       	brne	.+72     	; 0xc3fc <Keypad_enuGetPressedKey+0x2ec>
				break;
			else
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
    c3b4:	88 89       	ldd	r24, Y+16	; 0x10
    c3b6:	88 2f       	mov	r24, r24
    c3b8:	90 e0       	ldi	r25, 0x00	; 0
    c3ba:	88 0f       	add	r24, r24
    c3bc:	99 1f       	adc	r25, r25
    c3be:	fc 01       	movw	r30, r24
    c3c0:	e4 5e       	subi	r30, 0xE4	; 228
    c3c2:	fd 4f       	sbci	r31, 0xFD	; 253
    c3c4:	20 81       	ld	r18, Z
    c3c6:	88 89       	ldd	r24, Y+16	; 0x10
    c3c8:	88 2f       	mov	r24, r24
    c3ca:	90 e0       	ldi	r25, 0x00	; 0
    c3cc:	88 0f       	add	r24, r24
    c3ce:	99 1f       	adc	r25, r25
    c3d0:	fc 01       	movw	r30, r24
    c3d2:	e3 5e       	subi	r30, 0xE3	; 227
    c3d4:	fd 4f       	sbci	r31, 0xFD	; 253
    c3d6:	90 81       	ld	r25, Z
    c3d8:	82 2f       	mov	r24, r18
    c3da:	69 2f       	mov	r22, r25
    c3dc:	41 e0       	ldi	r20, 0x01	; 1
    c3de:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    c3e2:	8a 8b       	std	Y+18, r24	; 0x12
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;

		*Copy_pu8KeyValue = 0xff;

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    c3e4:	88 89       	ldd	r24, Y+16	; 0x10
    c3e6:	8f 5f       	subi	r24, 0xFF	; 255
    c3e8:	88 8b       	std	Y+16, r24	; 0x10
    c3ea:	90 91 0b 02 	lds	r25, 0x020B
    c3ee:	88 89       	ldd	r24, Y+16	; 0x10
    c3f0:	89 17       	cp	r24, r25
    c3f2:	08 f4       	brcc	.+2      	; 0xc3f6 <Keypad_enuGetPressedKey+0x2e6>
    c3f4:	a9 ce       	rjmp	.-686    	; 0xc148 <Keypad_enuGetPressedKey+0x38>
    c3f6:	02 c0       	rjmp	.+4      	; 0xc3fc <Keypad_enuGetPressedKey+0x2ec>
				break;
			else
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
		}
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    c3f8:	83 e0       	ldi	r24, 0x03	; 3
    c3fa:	8a 8b       	std	Y+18, r24	; 0x12

	return Local_enuErrorState;//DONE
    c3fc:	8a 89       	ldd	r24, Y+18	; 0x12
}
    c3fe:	65 96       	adiw	r28, 0x15	; 21
    c400:	0f b6       	in	r0, 0x3f	; 63
    c402:	f8 94       	cli
    c404:	de bf       	out	0x3e, r29	; 62
    c406:	0f be       	out	0x3f, r0	; 63
    c408:	cd bf       	out	0x3d, r28	; 61
    c40a:	cf 91       	pop	r28
    c40c:	df 91       	pop	r29
    c40e:	08 95       	ret

0000c410 <Keypad_Sleep>:

ES_t Keypad_Sleep(void)
{
    c410:	df 93       	push	r29
    c412:	cf 93       	push	r28
    c414:	00 d0       	rcall	.+0      	; 0xc416 <Keypad_Sleep+0x6>
    c416:	cd b7       	in	r28, 0x3d	; 61
    c418:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    c41a:	81 e0       	ldi	r24, 0x01	; 1
    c41c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter=0 ;
    c41e:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    c420:	90 91 0a 02 	lds	r25, 0x020A
    c424:	80 91 09 02 	lds	r24, 0x0209
    c428:	89 17       	cp	r24, r25
    c42a:	08 f4       	brcc	.+2      	; 0xc42e <Keypad_Sleep+0x1e>
    c42c:	5a c0       	rjmp	.+180    	; 0xc4e2 <Keypad_Sleep+0xd2>
    c42e:	90 91 0b 02 	lds	r25, 0x020B
    c432:	80 91 09 02 	lds	r24, 0x0209
    c436:	89 17       	cp	r24, r25
    c438:	08 f4       	brcc	.+2      	; 0xc43c <Keypad_Sleep+0x2c>
    c43a:	53 c0       	rjmp	.+166    	; 0xc4e2 <Keypad_Sleep+0xd2>
    c43c:	24 c0       	rjmp	.+72     	; 0xc486 <Keypad_Sleep+0x76>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8FLOAT	);
    c43e:	89 81       	ldd	r24, Y+1	; 0x01
    c440:	28 2f       	mov	r18, r24
    c442:	30 e0       	ldi	r19, 0x00	; 0
    c444:	c9 01       	movw	r24, r18
    c446:	88 0f       	add	r24, r24
    c448:	99 1f       	adc	r25, r25
    c44a:	82 0f       	add	r24, r18
    c44c:	93 1f       	adc	r25, r19
    c44e:	fc 01       	movw	r30, r24
    c450:	ec 5d       	subi	r30, 0xDC	; 220
    c452:	fd 4f       	sbci	r31, 0xFD	; 253
    c454:	40 81       	ld	r20, Z
    c456:	89 81       	ldd	r24, Y+1	; 0x01
    c458:	28 2f       	mov	r18, r24
    c45a:	30 e0       	ldi	r19, 0x00	; 0
    c45c:	c9 01       	movw	r24, r18
    c45e:	88 0f       	add	r24, r24
    c460:	99 1f       	adc	r25, r25
    c462:	82 0f       	add	r24, r18
    c464:	93 1f       	adc	r25, r19
    c466:	fc 01       	movw	r30, r24
    c468:	eb 5d       	subi	r30, 0xDB	; 219
    c46a:	fd 4f       	sbci	r31, 0xFD	; 253
    c46c:	90 81       	ld	r25, Z
    c46e:	84 2f       	mov	r24, r20
    c470:	69 2f       	mov	r22, r25
    c472:	40 e0       	ldi	r20, 0x00	; 0
    c474:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    c478:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_enuErrorState != ES_OK  )	break;
    c47a:	8a 81       	ldd	r24, Y+2	; 0x02
    c47c:	88 23       	and	r24, r24
    c47e:	41 f4       	brne	.+16     	; 0xc490 <Keypad_Sleep+0x80>
	ES_t Local_enuErrorState = ES_NOK ;
	u8 Local_u8Iter=0 ;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    c480:	89 81       	ldd	r24, Y+1	; 0x01
    c482:	8f 5f       	subi	r24, 0xFF	; 255
    c484:	89 83       	std	Y+1, r24	; 0x01
    c486:	90 91 0a 02 	lds	r25, 0x020A
    c48a:	89 81       	ldd	r24, Y+1	; 0x01
    c48c:	89 17       	cp	r24, r25
    c48e:	b8 f2       	brcs	.-82     	; 0xc43e <Keypad_Sleep+0x2e>
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8FLOAT	);

			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
    c490:	8a 81       	ldd	r24, Y+2	; 0x02
    c492:	88 23       	and	r24, r24
    c494:	41 f5       	brne	.+80     	; 0xc4e6 <Keypad_Sleep+0xd6>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    c496:	19 82       	std	Y+1, r1	; 0x01
    c498:	1e c0       	rjmp	.+60     	; 0xc4d6 <Keypad_Sleep+0xc6>
			{
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8LOW );
    c49a:	89 81       	ldd	r24, Y+1	; 0x01
    c49c:	88 2f       	mov	r24, r24
    c49e:	90 e0       	ldi	r25, 0x00	; 0
    c4a0:	88 0f       	add	r24, r24
    c4a2:	99 1f       	adc	r25, r25
    c4a4:	fc 01       	movw	r30, r24
    c4a6:	e4 5e       	subi	r30, 0xE4	; 228
    c4a8:	fd 4f       	sbci	r31, 0xFD	; 253
    c4aa:	20 81       	ld	r18, Z
    c4ac:	89 81       	ldd	r24, Y+1	; 0x01
    c4ae:	88 2f       	mov	r24, r24
    c4b0:	90 e0       	ldi	r25, 0x00	; 0
    c4b2:	88 0f       	add	r24, r24
    c4b4:	99 1f       	adc	r25, r25
    c4b6:	fc 01       	movw	r30, r24
    c4b8:	e3 5e       	subi	r30, 0xE3	; 227
    c4ba:	fd 4f       	sbci	r31, 0xFD	; 253
    c4bc:	90 81       	ld	r25, Z
    c4be:	82 2f       	mov	r24, r18
    c4c0:	69 2f       	mov	r22, r25
    c4c2:	40 e0       	ldi	r20, 0x00	; 0
    c4c4:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    c4c8:	8a 83       	std	Y+2, r24	; 0x02

				if(Local_enuErrorState != ES_OK  )	break;
    c4ca:	8a 81       	ldd	r24, Y+2	; 0x02
    c4cc:	88 23       	and	r24, r24
    c4ce:	59 f4       	brne	.+22     	; 0xc4e6 <Keypad_Sleep+0xd6>
			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    c4d0:	89 81       	ldd	r24, Y+1	; 0x01
    c4d2:	8f 5f       	subi	r24, 0xFF	; 255
    c4d4:	89 83       	std	Y+1, r24	; 0x01
    c4d6:	90 91 0b 02 	lds	r25, 0x020B
    c4da:	89 81       	ldd	r24, Y+1	; 0x01
    c4dc:	89 17       	cp	r24, r25
    c4de:	e8 f2       	brcs	.-70     	; 0xc49a <Keypad_Sleep+0x8a>
    c4e0:	02 c0       	rjmp	.+4      	; 0xc4e6 <Keypad_Sleep+0xd6>

				if(Local_enuErrorState != ES_OK  )	break;
			}
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    c4e2:	82 e0       	ldi	r24, 0x02	; 2
    c4e4:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;//DONE
    c4e6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    c4e8:	0f 90       	pop	r0
    c4ea:	0f 90       	pop	r0
    c4ec:	cf 91       	pop	r28
    c4ee:	df 91       	pop	r29
    c4f0:	08 95       	ret

0000c4f2 <Keypad_Awake>:

ES_t Keypad_Awake(void)
{
    c4f2:	df 93       	push	r29
    c4f4:	cf 93       	push	r28
    c4f6:	00 d0       	rcall	.+0      	; 0xc4f8 <Keypad_Awake+0x6>
    c4f8:	cd b7       	in	r28, 0x3d	; 61
    c4fa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    c4fc:	81 e0       	ldi	r24, 0x01	; 1
    c4fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter=0 ;
    c500:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    c502:	90 91 0a 02 	lds	r25, 0x020A
    c506:	80 91 09 02 	lds	r24, 0x0209
    c50a:	89 17       	cp	r24, r25
    c50c:	08 f4       	brcc	.+2      	; 0xc510 <Keypad_Awake+0x1e>
    c50e:	66 c0       	rjmp	.+204    	; 0xc5dc <Keypad_Awake+0xea>
    c510:	90 91 0b 02 	lds	r25, 0x020B
    c514:	80 91 09 02 	lds	r24, 0x0209
    c518:	89 17       	cp	r24, r25
    c51a:	08 f4       	brcc	.+2      	; 0xc51e <Keypad_Awake+0x2c>
    c51c:	5f c0       	rjmp	.+190    	; 0xc5dc <Keypad_Awake+0xea>
    c51e:	30 c0       	rjmp	.+96     	; 0xc580 <Keypad_Awake+0x8e>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState );
    c520:	89 81       	ldd	r24, Y+1	; 0x01
    c522:	28 2f       	mov	r18, r24
    c524:	30 e0       	ldi	r19, 0x00	; 0
    c526:	c9 01       	movw	r24, r18
    c528:	88 0f       	add	r24, r24
    c52a:	99 1f       	adc	r25, r25
    c52c:	82 0f       	add	r24, r18
    c52e:	93 1f       	adc	r25, r19
    c530:	fc 01       	movw	r30, r24
    c532:	ec 5d       	subi	r30, 0xDC	; 220
    c534:	fd 4f       	sbci	r31, 0xFD	; 253
    c536:	50 81       	ld	r21, Z
    c538:	89 81       	ldd	r24, Y+1	; 0x01
    c53a:	28 2f       	mov	r18, r24
    c53c:	30 e0       	ldi	r19, 0x00	; 0
    c53e:	c9 01       	movw	r24, r18
    c540:	88 0f       	add	r24, r24
    c542:	99 1f       	adc	r25, r25
    c544:	82 0f       	add	r24, r18
    c546:	93 1f       	adc	r25, r19
    c548:	fc 01       	movw	r30, r24
    c54a:	eb 5d       	subi	r30, 0xDB	; 219
    c54c:	fd 4f       	sbci	r31, 0xFD	; 253
    c54e:	40 81       	ld	r20, Z
    c550:	89 81       	ldd	r24, Y+1	; 0x01
    c552:	28 2f       	mov	r18, r24
    c554:	30 e0       	ldi	r19, 0x00	; 0
    c556:	c9 01       	movw	r24, r18
    c558:	88 0f       	add	r24, r24
    c55a:	99 1f       	adc	r25, r25
    c55c:	82 0f       	add	r24, r18
    c55e:	93 1f       	adc	r25, r19
    c560:	fc 01       	movw	r30, r24
    c562:	ea 5d       	subi	r30, 0xDA	; 218
    c564:	fd 4f       	sbci	r31, 0xFD	; 253
    c566:	90 81       	ld	r25, Z
    c568:	85 2f       	mov	r24, r21
    c56a:	64 2f       	mov	r22, r20
    c56c:	49 2f       	mov	r20, r25
    c56e:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    c572:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_enuErrorState != ES_OK  )	break;
    c574:	8a 81       	ldd	r24, Y+2	; 0x02
    c576:	88 23       	and	r24, r24
    c578:	41 f4       	brne	.+16     	; 0xc58a <Keypad_Awake+0x98>
	ES_t Local_enuErrorState = ES_NOK ;
	u8 Local_u8Iter=0 ;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    c57a:	89 81       	ldd	r24, Y+1	; 0x01
    c57c:	8f 5f       	subi	r24, 0xFF	; 255
    c57e:	89 83       	std	Y+1, r24	; 0x01
    c580:	90 91 0a 02 	lds	r25, 0x020A
    c584:	89 81       	ldd	r24, Y+1	; 0x01
    c586:	89 17       	cp	r24, r25
    c588:	58 f2       	brcs	.-106    	; 0xc520 <Keypad_Awake+0x2e>
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState );

			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
    c58a:	8a 81       	ldd	r24, Y+2	; 0x02
    c58c:	88 23       	and	r24, r24
    c58e:	41 f5       	brne	.+80     	; 0xc5e0 <Keypad_Awake+0xee>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    c590:	19 82       	std	Y+1, r1	; 0x01
    c592:	1e c0       	rjmp	.+60     	; 0xc5d0 <Keypad_Awake+0xde>
			{
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8HIGH );
    c594:	89 81       	ldd	r24, Y+1	; 0x01
    c596:	88 2f       	mov	r24, r24
    c598:	90 e0       	ldi	r25, 0x00	; 0
    c59a:	88 0f       	add	r24, r24
    c59c:	99 1f       	adc	r25, r25
    c59e:	fc 01       	movw	r30, r24
    c5a0:	e4 5e       	subi	r30, 0xE4	; 228
    c5a2:	fd 4f       	sbci	r31, 0xFD	; 253
    c5a4:	20 81       	ld	r18, Z
    c5a6:	89 81       	ldd	r24, Y+1	; 0x01
    c5a8:	88 2f       	mov	r24, r24
    c5aa:	90 e0       	ldi	r25, 0x00	; 0
    c5ac:	88 0f       	add	r24, r24
    c5ae:	99 1f       	adc	r25, r25
    c5b0:	fc 01       	movw	r30, r24
    c5b2:	e3 5e       	subi	r30, 0xE3	; 227
    c5b4:	fd 4f       	sbci	r31, 0xFD	; 253
    c5b6:	90 81       	ld	r25, Z
    c5b8:	82 2f       	mov	r24, r18
    c5ba:	69 2f       	mov	r22, r25
    c5bc:	41 e0       	ldi	r20, 0x01	; 1
    c5be:	0e 94 3a 49 	call	0x9274	; 0x9274 <DIO_enuSetPinValue>
    c5c2:	8a 83       	std	Y+2, r24	; 0x02

				if(Local_enuErrorState != ES_OK  )
    c5c4:	8a 81       	ldd	r24, Y+2	; 0x02
    c5c6:	88 23       	and	r24, r24
    c5c8:	59 f4       	brne	.+22     	; 0xc5e0 <Keypad_Awake+0xee>
			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    c5ca:	89 81       	ldd	r24, Y+1	; 0x01
    c5cc:	8f 5f       	subi	r24, 0xFF	; 255
    c5ce:	89 83       	std	Y+1, r24	; 0x01
    c5d0:	90 91 0b 02 	lds	r25, 0x020B
    c5d4:	89 81       	ldd	r24, Y+1	; 0x01
    c5d6:	89 17       	cp	r24, r25
    c5d8:	e8 f2       	brcs	.-70     	; 0xc594 <Keypad_Awake+0xa2>
    c5da:	02 c0       	rjmp	.+4      	; 0xc5e0 <Keypad_Awake+0xee>
			}

		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    c5dc:	82 e0       	ldi	r24, 0x02	; 2
    c5de:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;//DONE
    c5e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    c5e2:	0f 90       	pop	r0
    c5e4:	0f 90       	pop	r0
    c5e6:	cf 91       	pop	r28
    c5e8:	df 91       	pop	r29
    c5ea:	08 95       	ret

0000c5ec <main>:
 */


int
main(void)
{
    c5ec:	df 93       	push	r29
    c5ee:	cf 93       	push	r28
    c5f0:	cd b7       	in	r28, 0x3d	; 61
    c5f2:	de b7       	in	r29, 0x3e	; 62
    c5f4:	80 e0       	ldi	r24, 0x00	; 0
    c5f6:	90 e0       	ldi	r25, 0x00	; 0

}
    c5f8:	cf 91       	pop	r28
    c5fa:	df 91       	pop	r29
    c5fc:	08 95       	ret

0000c5fe <__mulsi3>:
    c5fe:	62 9f       	mul	r22, r18
    c600:	d0 01       	movw	r26, r0
    c602:	73 9f       	mul	r23, r19
    c604:	f0 01       	movw	r30, r0
    c606:	82 9f       	mul	r24, r18
    c608:	e0 0d       	add	r30, r0
    c60a:	f1 1d       	adc	r31, r1
    c60c:	64 9f       	mul	r22, r20
    c60e:	e0 0d       	add	r30, r0
    c610:	f1 1d       	adc	r31, r1
    c612:	92 9f       	mul	r25, r18
    c614:	f0 0d       	add	r31, r0
    c616:	83 9f       	mul	r24, r19
    c618:	f0 0d       	add	r31, r0
    c61a:	74 9f       	mul	r23, r20
    c61c:	f0 0d       	add	r31, r0
    c61e:	65 9f       	mul	r22, r21
    c620:	f0 0d       	add	r31, r0
    c622:	99 27       	eor	r25, r25
    c624:	72 9f       	mul	r23, r18
    c626:	b0 0d       	add	r27, r0
    c628:	e1 1d       	adc	r30, r1
    c62a:	f9 1f       	adc	r31, r25
    c62c:	63 9f       	mul	r22, r19
    c62e:	b0 0d       	add	r27, r0
    c630:	e1 1d       	adc	r30, r1
    c632:	f9 1f       	adc	r31, r25
    c634:	bd 01       	movw	r22, r26
    c636:	cf 01       	movw	r24, r30
    c638:	11 24       	eor	r1, r1
    c63a:	08 95       	ret

0000c63c <__udivmodhi4>:
    c63c:	aa 1b       	sub	r26, r26
    c63e:	bb 1b       	sub	r27, r27
    c640:	51 e1       	ldi	r21, 0x11	; 17
    c642:	07 c0       	rjmp	.+14     	; 0xc652 <__udivmodhi4_ep>

0000c644 <__udivmodhi4_loop>:
    c644:	aa 1f       	adc	r26, r26
    c646:	bb 1f       	adc	r27, r27
    c648:	a6 17       	cp	r26, r22
    c64a:	b7 07       	cpc	r27, r23
    c64c:	10 f0       	brcs	.+4      	; 0xc652 <__udivmodhi4_ep>
    c64e:	a6 1b       	sub	r26, r22
    c650:	b7 0b       	sbc	r27, r23

0000c652 <__udivmodhi4_ep>:
    c652:	88 1f       	adc	r24, r24
    c654:	99 1f       	adc	r25, r25
    c656:	5a 95       	dec	r21
    c658:	a9 f7       	brne	.-22     	; 0xc644 <__udivmodhi4_loop>
    c65a:	80 95       	com	r24
    c65c:	90 95       	com	r25
    c65e:	bc 01       	movw	r22, r24
    c660:	cd 01       	movw	r24, r26
    c662:	08 95       	ret

0000c664 <__divmodhi4>:
    c664:	97 fb       	bst	r25, 7
    c666:	09 2e       	mov	r0, r25
    c668:	07 26       	eor	r0, r23
    c66a:	0a d0       	rcall	.+20     	; 0xc680 <__divmodhi4_neg1>
    c66c:	77 fd       	sbrc	r23, 7
    c66e:	04 d0       	rcall	.+8      	; 0xc678 <__divmodhi4_neg2>
    c670:	e5 df       	rcall	.-54     	; 0xc63c <__udivmodhi4>
    c672:	06 d0       	rcall	.+12     	; 0xc680 <__divmodhi4_neg1>
    c674:	00 20       	and	r0, r0
    c676:	1a f4       	brpl	.+6      	; 0xc67e <__divmodhi4_exit>

0000c678 <__divmodhi4_neg2>:
    c678:	70 95       	com	r23
    c67a:	61 95       	neg	r22
    c67c:	7f 4f       	sbci	r23, 0xFF	; 255

0000c67e <__divmodhi4_exit>:
    c67e:	08 95       	ret

0000c680 <__divmodhi4_neg1>:
    c680:	f6 f7       	brtc	.-4      	; 0xc67e <__divmodhi4_exit>
    c682:	90 95       	com	r25
    c684:	81 95       	neg	r24
    c686:	9f 4f       	sbci	r25, 0xFF	; 255
    c688:	08 95       	ret

0000c68a <__udivmodsi4>:
    c68a:	a1 e2       	ldi	r26, 0x21	; 33
    c68c:	1a 2e       	mov	r1, r26
    c68e:	aa 1b       	sub	r26, r26
    c690:	bb 1b       	sub	r27, r27
    c692:	fd 01       	movw	r30, r26
    c694:	0d c0       	rjmp	.+26     	; 0xc6b0 <__udivmodsi4_ep>

0000c696 <__udivmodsi4_loop>:
    c696:	aa 1f       	adc	r26, r26
    c698:	bb 1f       	adc	r27, r27
    c69a:	ee 1f       	adc	r30, r30
    c69c:	ff 1f       	adc	r31, r31
    c69e:	a2 17       	cp	r26, r18
    c6a0:	b3 07       	cpc	r27, r19
    c6a2:	e4 07       	cpc	r30, r20
    c6a4:	f5 07       	cpc	r31, r21
    c6a6:	20 f0       	brcs	.+8      	; 0xc6b0 <__udivmodsi4_ep>
    c6a8:	a2 1b       	sub	r26, r18
    c6aa:	b3 0b       	sbc	r27, r19
    c6ac:	e4 0b       	sbc	r30, r20
    c6ae:	f5 0b       	sbc	r31, r21

0000c6b0 <__udivmodsi4_ep>:
    c6b0:	66 1f       	adc	r22, r22
    c6b2:	77 1f       	adc	r23, r23
    c6b4:	88 1f       	adc	r24, r24
    c6b6:	99 1f       	adc	r25, r25
    c6b8:	1a 94       	dec	r1
    c6ba:	69 f7       	brne	.-38     	; 0xc696 <__udivmodsi4_loop>
    c6bc:	60 95       	com	r22
    c6be:	70 95       	com	r23
    c6c0:	80 95       	com	r24
    c6c2:	90 95       	com	r25
    c6c4:	9b 01       	movw	r18, r22
    c6c6:	ac 01       	movw	r20, r24
    c6c8:	bd 01       	movw	r22, r26
    c6ca:	cf 01       	movw	r24, r30
    c6cc:	08 95       	ret

0000c6ce <__divmodsi4>:
    c6ce:	97 fb       	bst	r25, 7
    c6d0:	09 2e       	mov	r0, r25
    c6d2:	05 26       	eor	r0, r21
    c6d4:	0e d0       	rcall	.+28     	; 0xc6f2 <__divmodsi4_neg1>
    c6d6:	57 fd       	sbrc	r21, 7
    c6d8:	04 d0       	rcall	.+8      	; 0xc6e2 <__divmodsi4_neg2>
    c6da:	d7 df       	rcall	.-82     	; 0xc68a <__udivmodsi4>
    c6dc:	0a d0       	rcall	.+20     	; 0xc6f2 <__divmodsi4_neg1>
    c6de:	00 1c       	adc	r0, r0
    c6e0:	38 f4       	brcc	.+14     	; 0xc6f0 <__divmodsi4_exit>

0000c6e2 <__divmodsi4_neg2>:
    c6e2:	50 95       	com	r21
    c6e4:	40 95       	com	r20
    c6e6:	30 95       	com	r19
    c6e8:	21 95       	neg	r18
    c6ea:	3f 4f       	sbci	r19, 0xFF	; 255
    c6ec:	4f 4f       	sbci	r20, 0xFF	; 255
    c6ee:	5f 4f       	sbci	r21, 0xFF	; 255

0000c6f0 <__divmodsi4_exit>:
    c6f0:	08 95       	ret

0000c6f2 <__divmodsi4_neg1>:
    c6f2:	f6 f7       	brtc	.-4      	; 0xc6f0 <__divmodsi4_exit>
    c6f4:	90 95       	com	r25
    c6f6:	80 95       	com	r24
    c6f8:	70 95       	com	r23
    c6fa:	61 95       	neg	r22
    c6fc:	7f 4f       	sbci	r23, 0xFF	; 255
    c6fe:	8f 4f       	sbci	r24, 0xFF	; 255
    c700:	9f 4f       	sbci	r25, 0xFF	; 255
    c702:	08 95       	ret

0000c704 <__prologue_saves__>:
    c704:	2f 92       	push	r2
    c706:	3f 92       	push	r3
    c708:	4f 92       	push	r4
    c70a:	5f 92       	push	r5
    c70c:	6f 92       	push	r6
    c70e:	7f 92       	push	r7
    c710:	8f 92       	push	r8
    c712:	9f 92       	push	r9
    c714:	af 92       	push	r10
    c716:	bf 92       	push	r11
    c718:	cf 92       	push	r12
    c71a:	df 92       	push	r13
    c71c:	ef 92       	push	r14
    c71e:	ff 92       	push	r15
    c720:	0f 93       	push	r16
    c722:	1f 93       	push	r17
    c724:	cf 93       	push	r28
    c726:	df 93       	push	r29
    c728:	cd b7       	in	r28, 0x3d	; 61
    c72a:	de b7       	in	r29, 0x3e	; 62
    c72c:	ca 1b       	sub	r28, r26
    c72e:	db 0b       	sbc	r29, r27
    c730:	0f b6       	in	r0, 0x3f	; 63
    c732:	f8 94       	cli
    c734:	de bf       	out	0x3e, r29	; 62
    c736:	0f be       	out	0x3f, r0	; 63
    c738:	cd bf       	out	0x3d, r28	; 61
    c73a:	09 94       	ijmp

0000c73c <__epilogue_restores__>:
    c73c:	2a 88       	ldd	r2, Y+18	; 0x12
    c73e:	39 88       	ldd	r3, Y+17	; 0x11
    c740:	48 88       	ldd	r4, Y+16	; 0x10
    c742:	5f 84       	ldd	r5, Y+15	; 0x0f
    c744:	6e 84       	ldd	r6, Y+14	; 0x0e
    c746:	7d 84       	ldd	r7, Y+13	; 0x0d
    c748:	8c 84       	ldd	r8, Y+12	; 0x0c
    c74a:	9b 84       	ldd	r9, Y+11	; 0x0b
    c74c:	aa 84       	ldd	r10, Y+10	; 0x0a
    c74e:	b9 84       	ldd	r11, Y+9	; 0x09
    c750:	c8 84       	ldd	r12, Y+8	; 0x08
    c752:	df 80       	ldd	r13, Y+7	; 0x07
    c754:	ee 80       	ldd	r14, Y+6	; 0x06
    c756:	fd 80       	ldd	r15, Y+5	; 0x05
    c758:	0c 81       	ldd	r16, Y+4	; 0x04
    c75a:	1b 81       	ldd	r17, Y+3	; 0x03
    c75c:	aa 81       	ldd	r26, Y+2	; 0x02
    c75e:	b9 81       	ldd	r27, Y+1	; 0x01
    c760:	ce 0f       	add	r28, r30
    c762:	d1 1d       	adc	r29, r1
    c764:	0f b6       	in	r0, 0x3f	; 63
    c766:	f8 94       	cli
    c768:	de bf       	out	0x3e, r29	; 62
    c76a:	0f be       	out	0x3f, r0	; 63
    c76c:	cd bf       	out	0x3d, r28	; 61
    c76e:	ed 01       	movw	r28, r26
    c770:	08 95       	ret

0000c772 <_exit>:
    c772:	f8 94       	cli

0000c774 <__stop_program>:
    c774:	ff cf       	rjmp	.-2      	; 0xc774 <__stop_program>
